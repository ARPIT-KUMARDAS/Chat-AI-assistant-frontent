import {
  ln,
  require_dayjs_min,
  require_dist,
  require_prop_types
} from "./chunk-INO4S6GP.js";
import {
  clsx_default
} from "./chunk-U7P2NEEE.js";
import {
  EXIT,
  VFile,
  asciiAlpha,
  asciiAlphanumeric,
  asciiControl,
  blankLine,
  classifyCharacter,
  codes,
  combineExtensions,
  constants,
  convert,
  factorySpace,
  markdownLineEnding,
  markdownLineEndingOrSpace,
  markdownSpace,
  normalizeIdentifier,
  ok,
  remarkParse,
  remarkRehype,
  resolveAll,
  splice,
  toJsxRuntime,
  toString,
  types,
  unicodePunctuation,
  unicodeWhitespace,
  unified,
  unreachable,
  urlAttributes,
  visit,
  visitParents
} from "./chunk-PCG6DMGB.js";
import "./chunk-YPALV7M3.js";
import {
  ChannelSearchSource,
  MessageSearchSource,
  SearchController,
  StateStore,
  StreamChat,
  UserSearchSource,
  _arrayWithHoles,
  _assertThisInitialized,
  _classCallCheck,
  _createClass,
  _defineProperty,
  _extends,
  _getPrototypeOf,
  _inherits,
  _iterableToArray,
  _nonIterableRest,
  _objectWithoutPropertiesLoose,
  _possibleConstructorReturn,
  _typeof,
  _unsupportedIterableToArray,
  isVoteAnswer,
  logChatPromiseExecution
} from "./chunk-DZODIX2C.js";
import {
  __awaiter
} from "./chunk-ABQKHROP.js";
import {
  require_react_dom
} from "./chunk-3IHV7RO6.js";
import {
  require_jsx_runtime
} from "./chunk-OT5EQO2H.js";
import {
  require_react
} from "./chunk-OU5AQDZK.js";
import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS,
  __toESM
} from "./chunk-EWTE5DHJ.js";

// node_modules/load-script/index.js
var require_load_script = __commonJS({
  "node_modules/load-script/index.js"(exports, module) {
    module.exports = function load(src, opts, cb) {
      var head = document.head || document.getElementsByTagName("head")[0];
      var script = document.createElement("script");
      if (typeof opts === "function") {
        cb = opts;
        opts = {};
      }
      opts = opts || {};
      cb = cb || function() {
      };
      script.type = opts.type || "text/javascript";
      script.charset = opts.charset || "utf8";
      script.async = "async" in opts ? !!opts.async : true;
      script.src = src;
      if (opts.attrs) {
        setAttributes(script, opts.attrs);
      }
      if (opts.text) {
        script.text = "" + opts.text;
      }
      var onend = "onload" in script ? stdOnEnd : ieOnEnd;
      onend(script, cb);
      if (!script.onload) {
        stdOnEnd(script, cb);
      }
      head.appendChild(script);
    };
    function setAttributes(script, attrs) {
      for (var attr in attrs) {
        script.setAttribute(attr, attrs[attr]);
      }
    }
    function stdOnEnd(script, cb) {
      script.onload = function() {
        this.onerror = this.onload = null;
        cb(null, script);
      };
      script.onerror = function() {
        this.onerror = this.onload = null;
        cb(new Error("Failed to load " + this.src), script);
      };
    }
    function ieOnEnd(script, cb) {
      script.onreadystatechange = function() {
        if (this.readyState != "complete" && this.readyState != "loaded") return;
        this.onreadystatechange = null;
        cb(null, script);
      };
    }
  }
});

// node_modules/deepmerge/dist/cjs.js
var require_cjs = __commonJS({
  "node_modules/deepmerge/dist/cjs.js"(exports, module) {
    "use strict";
    var isMergeableObject = function isMergeableObject2(value) {
      return isNonNullObject(value) && !isSpecial(value);
    };
    function isNonNullObject(value) {
      return !!value && typeof value === "object";
    }
    function isSpecial(value) {
      var stringValue = Object.prototype.toString.call(value);
      return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
    }
    var canUseSymbol = typeof Symbol === "function" && Symbol.for;
    var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 60103;
    function isReactElement(value) {
      return value.$$typeof === REACT_ELEMENT_TYPE;
    }
    function emptyTarget(val) {
      return Array.isArray(val) ? [] : {};
    }
    function cloneUnlessOtherwiseSpecified(value, options2) {
      return options2.clone !== false && options2.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options2) : value;
    }
    function defaultArrayMerge(target, source, options2) {
      return target.concat(source).map(function(element2) {
        return cloneUnlessOtherwiseSpecified(element2, options2);
      });
    }
    function getMergeFunction(key, options2) {
      if (!options2.customMerge) {
        return deepmerge;
      }
      var customMerge = options2.customMerge(key);
      return typeof customMerge === "function" ? customMerge : deepmerge;
    }
    function getEnumerableOwnPropertySymbols(target) {
      return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {
        return Object.propertyIsEnumerable.call(target, symbol);
      }) : [];
    }
    function getKeys(target) {
      return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
    }
    function propertyIsOnObject(object, property) {
      try {
        return property in object;
      } catch (_23) {
        return false;
      }
    }
    function propertyIsUnsafe(target, key) {
      return propertyIsOnObject(target, key) && !(Object.hasOwnProperty.call(target, key) && Object.propertyIsEnumerable.call(target, key));
    }
    function mergeObject(target, source, options2) {
      var destination = {};
      if (options2.isMergeableObject(target)) {
        getKeys(target).forEach(function(key) {
          destination[key] = cloneUnlessOtherwiseSpecified(target[key], options2);
        });
      }
      getKeys(source).forEach(function(key) {
        if (propertyIsUnsafe(target, key)) {
          return;
        }
        if (propertyIsOnObject(target, key) && options2.isMergeableObject(source[key])) {
          destination[key] = getMergeFunction(key, options2)(target[key], source[key], options2);
        } else {
          destination[key] = cloneUnlessOtherwiseSpecified(source[key], options2);
        }
      });
      return destination;
    }
    function deepmerge(target, source, options2) {
      options2 = options2 || {};
      options2.arrayMerge = options2.arrayMerge || defaultArrayMerge;
      options2.isMergeableObject = options2.isMergeableObject || isMergeableObject;
      options2.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
      var sourceIsArray = Array.isArray(source);
      var targetIsArray = Array.isArray(target);
      var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
      if (!sourceAndTargetTypesMatch) {
        return cloneUnlessOtherwiseSpecified(source, options2);
      } else if (sourceIsArray) {
        return options2.arrayMerge(target, source, options2);
      } else {
        return mergeObject(target, source, options2);
      }
    }
    deepmerge.all = function deepmergeAll(array, options2) {
      if (!Array.isArray(array)) {
        throw new Error("first argument should be an array");
      }
      return array.reduce(function(prev, next) {
        return deepmerge(prev, next, options2);
      }, {});
    };
    var deepmerge_1 = deepmerge;
    module.exports = deepmerge_1;
  }
});

// node_modules/react-player/lib/utils.js
var require_utils = __commonJS({
  "node_modules/react-player/lib/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.parseStartTime = parseStartTime;
    exports.parseEndTime = parseEndTime;
    exports.randomString = randomString;
    exports.queryString = queryString;
    exports.getSDK = getSDK;
    exports.getConfig = getConfig;
    exports.omit = omit;
    exports.callPlayer = callPlayer;
    exports.isMediaStream = isMediaStream;
    exports.isBlobUrl = isBlobUrl;
    exports.supportsWebKitPresentationMode = supportsWebKitPresentationMode;
    var _loadScript = _interopRequireDefault(require_load_script());
    var _deepmerge = _interopRequireDefault(require_cjs());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _slicedToArray3(arr, i) {
      return _arrayWithHoles4(arr) || _iterableToArrayLimit3(arr, i) || _unsupportedIterableToArray4(arr, i) || _nonIterableRest4();
    }
    function _nonIterableRest4() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray4(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray3(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray3(o, minLen);
    }
    function _arrayLikeToArray3(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function _iterableToArrayLimit3(arr, i) {
      if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = void 0;
      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
    function _arrayWithHoles4(arr) {
      if (Array.isArray(arr)) return arr;
    }
    var MATCH_START_QUERY = /[?&#](?:start|t)=([0-9hms]+)/;
    var MATCH_END_QUERY = /[?&#]end=([0-9hms]+)/;
    var MATCH_START_STAMP = /(\d+)(h|m|s)/g;
    var MATCH_NUMERIC = /^\d+$/;
    function parseTimeParam(url, pattern) {
      if (url instanceof Array) {
        return void 0;
      }
      var match = url.match(pattern);
      if (match) {
        var stamp = match[1];
        if (stamp.match(MATCH_START_STAMP)) {
          return parseTimeString(stamp);
        }
        if (MATCH_NUMERIC.test(stamp)) {
          return parseInt(stamp);
        }
      }
      return void 0;
    }
    function parseTimeString(stamp) {
      var seconds = 0;
      var array = MATCH_START_STAMP.exec(stamp);
      while (array !== null) {
        var _array = array, _array2 = _slicedToArray3(_array, 3), count = _array2[1], period = _array2[2];
        if (period === "h") seconds += parseInt(count, 10) * 60 * 60;
        if (period === "m") seconds += parseInt(count, 10) * 60;
        if (period === "s") seconds += parseInt(count, 10);
        array = MATCH_START_STAMP.exec(stamp);
      }
      return seconds;
    }
    function parseStartTime(url) {
      return parseTimeParam(url, MATCH_START_QUERY);
    }
    function parseEndTime(url) {
      return parseTimeParam(url, MATCH_END_QUERY);
    }
    function randomString() {
      return Math.random().toString(36).substr(2, 5);
    }
    function queryString(object) {
      return Object.keys(object).map(function(key) {
        return "".concat(key, "=").concat(object[key]);
      }).join("&");
    }
    function getGlobal(key) {
      if (window[key]) {
        return window[key];
      }
      if (window.exports && window.exports[key]) {
        return window.exports[key];
      }
      if (window.module && window.module.exports && window.module.exports[key]) {
        return window.module.exports[key];
      }
      return null;
    }
    var requests = {};
    function getSDK(url, sdkGlobal) {
      var sdkReady = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      var isLoaded = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : function() {
        return true;
      };
      var fetchScript = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : _loadScript["default"];
      var existingGlobal = getGlobal(sdkGlobal);
      if (existingGlobal && isLoaded(existingGlobal)) {
        return Promise.resolve(existingGlobal);
      }
      return new Promise(function(resolve, reject) {
        if (requests[url]) {
          requests[url].push({
            resolve,
            reject
          });
          return;
        }
        requests[url] = [{
          resolve,
          reject
        }];
        var onLoaded = function onLoaded2(sdk) {
          requests[url].forEach(function(request) {
            return request.resolve(sdk);
          });
        };
        if (sdkReady) {
          var previousOnReady = window[sdkReady];
          window[sdkReady] = function() {
            if (previousOnReady) previousOnReady();
            onLoaded(getGlobal(sdkGlobal));
          };
        }
        fetchScript(url, function(err) {
          if (err) {
            requests[url].forEach(function(request) {
              return request.reject(err);
            });
            requests[url] = null;
          } else if (!sdkReady) {
            onLoaded(getGlobal(sdkGlobal));
          }
        });
      });
    }
    function getConfig(props, defaultProps2) {
      return (0, _deepmerge["default"])(defaultProps2.config, props.config);
    }
    function omit(object) {
      var _ref;
      for (var _len = arguments.length, arrays = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        arrays[_key - 1] = arguments[_key];
      }
      var omitKeys = (_ref = []).concat.apply(_ref, arrays);
      var output2 = {};
      var keys2 = Object.keys(object);
      for (var _i2 = 0, _keys = keys2; _i2 < _keys.length; _i2++) {
        var key = _keys[_i2];
        if (omitKeys.indexOf(key) === -1) {
          output2[key] = object[key];
        }
      }
      return output2;
    }
    function callPlayer(method) {
      var _this$player;
      if (!this.player || !this.player[method]) {
        var message = "ReactPlayer: ".concat(this.constructor.displayName, " player could not call %c").concat(method, "%c – ");
        if (!this.player) {
          message += "The player was not available";
        } else if (!this.player[method]) {
          message += "The method was not available";
        }
        console.warn(message, "font-weight: bold", "");
        return null;
      }
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }
      return (_this$player = this.player)[method].apply(_this$player, args);
    }
    function isMediaStream(url) {
      return typeof window !== "undefined" && typeof window.MediaStream !== "undefined" && url instanceof window.MediaStream;
    }
    function isBlobUrl(url) {
      return /^blob:/.test(url);
    }
    function supportsWebKitPresentationMode() {
      var video = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : document.createElement("video");
      var notMobile = /iPhone|iPod/.test(navigator.userAgent) === false;
      return video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === "function" && notMobile;
    }
  }
});

// node_modules/react-player/lib/patterns.js
var require_patterns = __commonJS({
  "node_modules/react-player/lib/patterns.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.canPlay = exports.FLV_EXTENSIONS = exports.DASH_EXTENSIONS = exports.HLS_EXTENSIONS = exports.VIDEO_EXTENSIONS = exports.AUDIO_EXTENSIONS = exports.MATCH_URL_KALTURA = exports.MATCH_URL_VIDYARD = exports.MATCH_URL_MIXCLOUD = exports.MATCH_URL_DAILYMOTION = exports.MATCH_URL_TWITCH_CHANNEL = exports.MATCH_URL_TWITCH_VIDEO = exports.MATCH_URL_WISTIA = exports.MATCH_URL_STREAMABLE = exports.MATCH_URL_FACEBOOK_WATCH = exports.MATCH_URL_FACEBOOK = exports.MATCH_URL_VIMEO = exports.MATCH_URL_SOUNDCLOUD = exports.MATCH_URL_YOUTUBE = void 0;
    var _utils = require_utils();
    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it;
      if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray4(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i = 0;
          var F = function F2() {
          };
          return { s: F, n: function n() {
            if (i >= o.length) return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e(_e) {
            throw _e;
          }, f: F };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = o[Symbol.iterator]();
      }, n: function n() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f() {
        try {
          if (!normalCompletion && it["return"] != null) it["return"]();
        } finally {
          if (didErr) throw err;
        }
      } };
    }
    function _unsupportedIterableToArray4(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray3(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray3(o, minLen);
    }
    function _arrayLikeToArray3(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    var MATCH_URL_YOUTUBE = /(?:youtu\.be\/|youtube(?:-nocookie)?\.com\/(?:embed\/|v\/|watch\/|watch\?v=|watch\?.+&v=|shorts\/))((\w|-){11})|youtube\.com\/playlist\?list=|youtube\.com\/user\//;
    exports.MATCH_URL_YOUTUBE = MATCH_URL_YOUTUBE;
    var MATCH_URL_SOUNDCLOUD = /(?:soundcloud\.com|snd\.sc)\/[^.]+$/;
    exports.MATCH_URL_SOUNDCLOUD = MATCH_URL_SOUNDCLOUD;
    var MATCH_URL_VIMEO = /vimeo\.com\/(?!progressive_redirect).+/;
    exports.MATCH_URL_VIMEO = MATCH_URL_VIMEO;
    var MATCH_URL_FACEBOOK = /^https?:\/\/(www\.)?facebook\.com.*\/(video(s)?|watch|story)(\.php?|\/).+$/;
    exports.MATCH_URL_FACEBOOK = MATCH_URL_FACEBOOK;
    var MATCH_URL_FACEBOOK_WATCH = /^https?:\/\/fb\.watch\/.+$/;
    exports.MATCH_URL_FACEBOOK_WATCH = MATCH_URL_FACEBOOK_WATCH;
    var MATCH_URL_STREAMABLE = /streamable\.com\/([a-z0-9]+)$/;
    exports.MATCH_URL_STREAMABLE = MATCH_URL_STREAMABLE;
    var MATCH_URL_WISTIA = /(?:wistia\.(?:com|net)|wi\.st)\/(?:medias|embed)\/(?:iframe\/)?(.*)$/;
    exports.MATCH_URL_WISTIA = MATCH_URL_WISTIA;
    var MATCH_URL_TWITCH_VIDEO = /(?:www\.|go\.)?twitch\.tv\/videos\/(\d+)($|\?)/;
    exports.MATCH_URL_TWITCH_VIDEO = MATCH_URL_TWITCH_VIDEO;
    var MATCH_URL_TWITCH_CHANNEL = /(?:www\.|go\.)?twitch\.tv\/([a-zA-Z0-9_]+)($|\?)/;
    exports.MATCH_URL_TWITCH_CHANNEL = MATCH_URL_TWITCH_CHANNEL;
    var MATCH_URL_DAILYMOTION = /^(?:(?:https?):)?(?:\/\/)?(?:www\.)?(?:(?:dailymotion\.com(?:\/embed)?\/video)|dai\.ly)\/([a-zA-Z0-9]+)(?:_[\w_-]+)?$/;
    exports.MATCH_URL_DAILYMOTION = MATCH_URL_DAILYMOTION;
    var MATCH_URL_MIXCLOUD = /mixcloud\.com\/([^/]+\/[^/]+)/;
    exports.MATCH_URL_MIXCLOUD = MATCH_URL_MIXCLOUD;
    var MATCH_URL_VIDYARD = /vidyard.com\/(?:watch\/)?([a-zA-Z0-9-_]+)/;
    exports.MATCH_URL_VIDYARD = MATCH_URL_VIDYARD;
    var MATCH_URL_KALTURA = /^https?:\/\/[a-zA-Z]+\.kaltura.(com|org)\/p\/([0-9]+)\/sp\/([0-9]+)00\/embedIframeJs\/uiconf_id\/([0-9]+)\/partner_id\/([0-9]+)(.*)entry_id.([a-zA-Z0-9-_].*)$/;
    exports.MATCH_URL_KALTURA = MATCH_URL_KALTURA;
    var AUDIO_EXTENSIONS = /\.(m4a|m4b|mp4a|mpga|mp2|mp2a|mp3|m2a|m3a|wav|weba|aac|oga|spx)($|\?)/i;
    exports.AUDIO_EXTENSIONS = AUDIO_EXTENSIONS;
    var VIDEO_EXTENSIONS = /\.(mp4|og[gv]|webm|mov|m4v)(#t=[,\d+]+)?($|\?)/i;
    exports.VIDEO_EXTENSIONS = VIDEO_EXTENSIONS;
    var HLS_EXTENSIONS = /\.(m3u8)($|\?)/i;
    exports.HLS_EXTENSIONS = HLS_EXTENSIONS;
    var DASH_EXTENSIONS = /\.(mpd)($|\?)/i;
    exports.DASH_EXTENSIONS = DASH_EXTENSIONS;
    var FLV_EXTENSIONS = /\.(flv)($|\?)/i;
    exports.FLV_EXTENSIONS = FLV_EXTENSIONS;
    var canPlayFile = function canPlayFile2(url) {
      if (url instanceof Array) {
        var _iterator = _createForOfIteratorHelper(url), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var item = _step.value;
            if (typeof item === "string" && canPlayFile2(item)) {
              return true;
            }
            if (canPlayFile2(item.src)) {
              return true;
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        return false;
      }
      if ((0, _utils.isMediaStream)(url) || (0, _utils.isBlobUrl)(url)) {
        return true;
      }
      return AUDIO_EXTENSIONS.test(url) || VIDEO_EXTENSIONS.test(url) || HLS_EXTENSIONS.test(url) || DASH_EXTENSIONS.test(url) || FLV_EXTENSIONS.test(url);
    };
    var canPlay = {
      youtube: function youtube(url) {
        if (url instanceof Array) {
          return url.every(function(item) {
            return MATCH_URL_YOUTUBE.test(item);
          });
        }
        return MATCH_URL_YOUTUBE.test(url);
      },
      soundcloud: function soundcloud(url) {
        return MATCH_URL_SOUNDCLOUD.test(url) && !AUDIO_EXTENSIONS.test(url);
      },
      vimeo: function vimeo(url) {
        return MATCH_URL_VIMEO.test(url) && !VIDEO_EXTENSIONS.test(url) && !HLS_EXTENSIONS.test(url);
      },
      facebook: function facebook(url) {
        return MATCH_URL_FACEBOOK.test(url) || MATCH_URL_FACEBOOK_WATCH.test(url);
      },
      streamable: function streamable(url) {
        return MATCH_URL_STREAMABLE.test(url);
      },
      wistia: function wistia(url) {
        return MATCH_URL_WISTIA.test(url);
      },
      twitch: function twitch(url) {
        return MATCH_URL_TWITCH_VIDEO.test(url) || MATCH_URL_TWITCH_CHANNEL.test(url);
      },
      dailymotion: function dailymotion(url) {
        return MATCH_URL_DAILYMOTION.test(url);
      },
      mixcloud: function mixcloud(url) {
        return MATCH_URL_MIXCLOUD.test(url);
      },
      vidyard: function vidyard(url) {
        return MATCH_URL_VIDYARD.test(url);
      },
      kaltura: function kaltura(url) {
        return MATCH_URL_KALTURA.test(url);
      },
      file: canPlayFile
    };
    exports.canPlay = canPlay;
  }
});

// node_modules/react-player/lib/players/YouTube.js
var require_YouTube = __commonJS({
  "node_modules/react-player/lib/players/YouTube.js"(exports) {
    "use strict";
    function _typeof2(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof2 = function _typeof3(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof2 = function _typeof3(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof2(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _utils = require_utils();
    var _patterns = require_patterns();
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys4(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread4(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys4(Object(source), true).forEach(function(key) {
            _defineProperty4(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys4(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _slicedToArray3(arr, i) {
      return _arrayWithHoles4(arr) || _iterableToArrayLimit3(arr, i) || _unsupportedIterableToArray4(arr, i) || _nonIterableRest4();
    }
    function _nonIterableRest4() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray4(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray3(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray3(o, minLen);
    }
    function _arrayLikeToArray3(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function _iterableToArrayLimit3(arr, i) {
      if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = void 0;
      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
    function _arrayWithHoles4(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function _classCallCheck2(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass2(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits2(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper2(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct2();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf2(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf2(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn2(this, result);
      };
    }
    function _possibleConstructorReturn2(self2, call) {
      if (call && (_typeof2(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized2(self2);
    }
    function _assertThisInitialized2(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct2() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf2(o) {
      _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf2(o);
    }
    function _defineProperty4(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var SDK_URL = "https://www.youtube.com/iframe_api";
    var SDK_GLOBAL = "YT";
    var SDK_GLOBAL_READY = "onYouTubeIframeAPIReady";
    var MATCH_PLAYLIST = /[?&](?:list|channel)=([a-zA-Z0-9_-]+)/;
    var MATCH_USER_UPLOADS = /user\/([a-zA-Z0-9_-]+)\/?/;
    var MATCH_NOCOOKIE = /youtube-nocookie\.com/;
    var NOCOOKIE_HOST = "https://www.youtube-nocookie.com";
    var YouTube = function(_Component) {
      _inherits2(YouTube2, _Component);
      var _super = _createSuper2(YouTube2);
      function YouTube2() {
        var _this;
        _classCallCheck2(this, YouTube2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty4(_assertThisInitialized2(_this), "callPlayer", _utils.callPlayer);
        _defineProperty4(_assertThisInitialized2(_this), "parsePlaylist", function(url) {
          if (url instanceof Array) {
            return {
              listType: "playlist",
              playlist: url.map(_this.getID).join(",")
            };
          }
          if (MATCH_PLAYLIST.test(url)) {
            var _url$match = url.match(MATCH_PLAYLIST), _url$match2 = _slicedToArray3(_url$match, 2), playlistId = _url$match2[1];
            return {
              listType: "playlist",
              list: playlistId.replace(/^UC/, "UU")
            };
          }
          if (MATCH_USER_UPLOADS.test(url)) {
            var _url$match3 = url.match(MATCH_USER_UPLOADS), _url$match4 = _slicedToArray3(_url$match3, 2), username = _url$match4[1];
            return {
              listType: "user_uploads",
              list: username
            };
          }
          return {};
        });
        _defineProperty4(_assertThisInitialized2(_this), "onStateChange", function(event) {
          var data = event.data;
          var _this$props = _this.props, onPlay = _this$props.onPlay, onPause = _this$props.onPause, onBuffer = _this$props.onBuffer, onBufferEnd = _this$props.onBufferEnd, onEnded = _this$props.onEnded, onReady = _this$props.onReady, loop = _this$props.loop, _this$props$config = _this$props.config, playerVars = _this$props$config.playerVars, onUnstarted = _this$props$config.onUnstarted;
          var _window$SDK_GLOBAL$Pl = window[SDK_GLOBAL].PlayerState, UNSTARTED = _window$SDK_GLOBAL$Pl.UNSTARTED, PLAYING = _window$SDK_GLOBAL$Pl.PLAYING, PAUSED = _window$SDK_GLOBAL$Pl.PAUSED, BUFFERING = _window$SDK_GLOBAL$Pl.BUFFERING, ENDED = _window$SDK_GLOBAL$Pl.ENDED, CUED = _window$SDK_GLOBAL$Pl.CUED;
          if (data === UNSTARTED) onUnstarted();
          if (data === PLAYING) {
            onPlay();
            onBufferEnd();
          }
          if (data === PAUSED) onPause();
          if (data === BUFFERING) onBuffer();
          if (data === ENDED) {
            var isPlaylist = !!_this.callPlayer("getPlaylist");
            if (loop && !isPlaylist) {
              if (playerVars.start) {
                _this.seekTo(playerVars.start);
              } else {
                _this.play();
              }
            }
            onEnded();
          }
          if (data === CUED) onReady();
        });
        _defineProperty4(_assertThisInitialized2(_this), "mute", function() {
          _this.callPlayer("mute");
        });
        _defineProperty4(_assertThisInitialized2(_this), "unmute", function() {
          _this.callPlayer("unMute");
        });
        _defineProperty4(_assertThisInitialized2(_this), "ref", function(container) {
          _this.container = container;
        });
        return _this;
      }
      _createClass2(YouTube2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "getID",
        value: function getID(url) {
          if (!url || url instanceof Array || MATCH_PLAYLIST.test(url)) {
            return null;
          }
          return url.match(_patterns.MATCH_URL_YOUTUBE)[1];
        }
      }, {
        key: "load",
        value: function load(url, isReady) {
          var _this2 = this;
          var _this$props2 = this.props, playing = _this$props2.playing, muted = _this$props2.muted, playsinline = _this$props2.playsinline, controls = _this$props2.controls, loop = _this$props2.loop, config = _this$props2.config, _onError = _this$props2.onError;
          var playerVars = config.playerVars, embedOptions = config.embedOptions;
          var id = this.getID(url);
          if (isReady) {
            if (MATCH_PLAYLIST.test(url) || MATCH_USER_UPLOADS.test(url) || url instanceof Array) {
              this.player.loadPlaylist(this.parsePlaylist(url));
              return;
            }
            this.player.cueVideoById({
              videoId: id,
              startSeconds: (0, _utils.parseStartTime)(url) || playerVars.start,
              endSeconds: (0, _utils.parseEndTime)(url) || playerVars.end
            });
            return;
          }
          (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY, function(YT) {
            return YT.loaded;
          }).then(function(YT) {
            if (!_this2.container) return;
            _this2.player = new YT.Player(_this2.container, _objectSpread4({
              width: "100%",
              height: "100%",
              videoId: id,
              playerVars: _objectSpread4(_objectSpread4({
                autoplay: playing ? 1 : 0,
                mute: muted ? 1 : 0,
                controls: controls ? 1 : 0,
                start: (0, _utils.parseStartTime)(url),
                end: (0, _utils.parseEndTime)(url),
                origin: window.location.origin,
                playsinline: playsinline ? 1 : 0
              }, _this2.parsePlaylist(url)), playerVars),
              events: {
                onReady: function onReady() {
                  if (loop) {
                    _this2.player.setLoop(true);
                  }
                  _this2.props.onReady();
                },
                onPlaybackRateChange: function onPlaybackRateChange(event) {
                  return _this2.props.onPlaybackRateChange(event.data);
                },
                onStateChange: _this2.onStateChange,
                onError: function onError2(event) {
                  return _onError(event.data);
                }
              },
              host: MATCH_NOCOOKIE.test(url) ? NOCOOKIE_HOST : void 0
            }, embedOptions));
          }, _onError);
          if (embedOptions.events) {
            console.warn("Using `embedOptions.events` will likely break things. Use ReactPlayer’s callback props instead, eg onReady, onPlay, onPause");
          }
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer("playVideo");
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer("pauseVideo");
        }
      }, {
        key: "stop",
        value: function stop() {
          if (!document.body.contains(this.callPlayer("getIframe"))) return;
          this.callPlayer("stopVideo");
        }
      }, {
        key: "seekTo",
        value: function seekTo(amount) {
          this.callPlayer("seekTo", amount);
          if (!this.props.playing) {
            this.pause();
          }
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer("setVolume", fraction * 100);
        }
      }, {
        key: "setPlaybackRate",
        value: function setPlaybackRate(rate) {
          this.callPlayer("setPlaybackRate", rate);
        }
      }, {
        key: "setLoop",
        value: function setLoop(loop) {
          this.callPlayer("setLoop", loop);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.callPlayer("getDuration");
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.callPlayer("getCurrentTime");
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return this.callPlayer("getVideoLoadedFraction") * this.getDuration();
        }
      }, {
        key: "render",
        value: function render() {
          var display = this.props.display;
          var style = {
            width: "100%",
            height: "100%",
            display
          };
          return _react["default"].createElement("div", {
            style
          }, _react["default"].createElement("div", {
            ref: this.ref
          }));
        }
      }]);
      return YouTube2;
    }(_react.Component);
    exports["default"] = YouTube;
    _defineProperty4(YouTube, "displayName", "YouTube");
    _defineProperty4(YouTube, "canPlay", _patterns.canPlay.youtube);
  }
});

// node_modules/react-player/lib/players/SoundCloud.js
var require_SoundCloud = __commonJS({
  "node_modules/react-player/lib/players/SoundCloud.js"(exports) {
    "use strict";
    function _typeof2(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof2 = function _typeof3(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof2 = function _typeof3(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof2(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _utils = require_utils();
    var _patterns = require_patterns();
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys4(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread4(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys4(Object(source), true).forEach(function(key) {
            _defineProperty4(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys4(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _classCallCheck2(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass2(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits2(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper2(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct2();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf2(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf2(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn2(this, result);
      };
    }
    function _possibleConstructorReturn2(self2, call) {
      if (call && (_typeof2(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized2(self2);
    }
    function _assertThisInitialized2(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct2() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf2(o) {
      _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf2(o);
    }
    function _defineProperty4(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var SDK_URL = "https://w.soundcloud.com/player/api.js";
    var SDK_GLOBAL = "SC";
    var SoundCloud = function(_Component) {
      _inherits2(SoundCloud2, _Component);
      var _super = _createSuper2(SoundCloud2);
      function SoundCloud2() {
        var _this;
        _classCallCheck2(this, SoundCloud2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty4(_assertThisInitialized2(_this), "callPlayer", _utils.callPlayer);
        _defineProperty4(_assertThisInitialized2(_this), "duration", null);
        _defineProperty4(_assertThisInitialized2(_this), "currentTime", null);
        _defineProperty4(_assertThisInitialized2(_this), "fractionLoaded", null);
        _defineProperty4(_assertThisInitialized2(_this), "mute", function() {
          _this.setVolume(0);
        });
        _defineProperty4(_assertThisInitialized2(_this), "unmute", function() {
          if (_this.props.volume !== null) {
            _this.setVolume(_this.props.volume);
          }
        });
        _defineProperty4(_assertThisInitialized2(_this), "ref", function(iframe) {
          _this.iframe = iframe;
        });
        return _this;
      }
      _createClass2(SoundCloud2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "load",
        value: function load(url, isReady) {
          var _this2 = this;
          (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(SC) {
            if (!_this2.iframe) return;
            var _SC$Widget$Events = SC.Widget.Events, PLAY = _SC$Widget$Events.PLAY, PLAY_PROGRESS = _SC$Widget$Events.PLAY_PROGRESS, PAUSE = _SC$Widget$Events.PAUSE, FINISH = _SC$Widget$Events.FINISH, ERROR = _SC$Widget$Events.ERROR;
            if (!isReady) {
              _this2.player = SC.Widget(_this2.iframe);
              _this2.player.bind(PLAY, _this2.props.onPlay);
              _this2.player.bind(PAUSE, function() {
                var remaining = _this2.duration - _this2.currentTime;
                if (remaining < 0.05) {
                  return;
                }
                _this2.props.onPause();
              });
              _this2.player.bind(PLAY_PROGRESS, function(e) {
                _this2.currentTime = e.currentPosition / 1e3;
                _this2.fractionLoaded = e.loadedProgress;
              });
              _this2.player.bind(FINISH, function() {
                return _this2.props.onEnded();
              });
              _this2.player.bind(ERROR, function(e) {
                return _this2.props.onError(e);
              });
            }
            _this2.player.load(url, _objectSpread4(_objectSpread4({}, _this2.props.config.options), {}, {
              callback: function callback() {
                _this2.player.getDuration(function(duration) {
                  _this2.duration = duration / 1e3;
                  _this2.props.onReady();
                });
              }
            }));
          });
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer("play");
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer("pause");
        }
      }, {
        key: "stop",
        value: function stop() {
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer("seekTo", seconds * 1e3);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer("setVolume", fraction * 100);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.duration;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.currentTime;
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return this.fractionLoaded * this.duration;
        }
      }, {
        key: "render",
        value: function render() {
          var display = this.props.display;
          var style = {
            width: "100%",
            height: "100%",
            display
          };
          return _react["default"].createElement("iframe", {
            ref: this.ref,
            src: "https://w.soundcloud.com/player/?url=".concat(encodeURIComponent(this.props.url)),
            style,
            frameBorder: 0,
            allow: "autoplay"
          });
        }
      }]);
      return SoundCloud2;
    }(_react.Component);
    exports["default"] = SoundCloud;
    _defineProperty4(SoundCloud, "displayName", "SoundCloud");
    _defineProperty4(SoundCloud, "canPlay", _patterns.canPlay.soundcloud);
    _defineProperty4(SoundCloud, "loopOnEnded", true);
  }
});

// node_modules/react-player/lib/players/Vimeo.js
var require_Vimeo = __commonJS({
  "node_modules/react-player/lib/players/Vimeo.js"(exports) {
    "use strict";
    function _typeof2(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof2 = function _typeof3(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof2 = function _typeof3(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof2(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _utils = require_utils();
    var _patterns = require_patterns();
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys4(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread4(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys4(Object(source), true).forEach(function(key) {
            _defineProperty4(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys4(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _classCallCheck2(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass2(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits2(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper2(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct2();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf2(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf2(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn2(this, result);
      };
    }
    function _possibleConstructorReturn2(self2, call) {
      if (call && (_typeof2(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized2(self2);
    }
    function _assertThisInitialized2(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct2() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf2(o) {
      _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf2(o);
    }
    function _defineProperty4(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var SDK_URL = "https://player.vimeo.com/api/player.js";
    var SDK_GLOBAL = "Vimeo";
    var Vimeo = function(_Component) {
      _inherits2(Vimeo2, _Component);
      var _super = _createSuper2(Vimeo2);
      function Vimeo2() {
        var _this;
        _classCallCheck2(this, Vimeo2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty4(_assertThisInitialized2(_this), "callPlayer", _utils.callPlayer);
        _defineProperty4(_assertThisInitialized2(_this), "duration", null);
        _defineProperty4(_assertThisInitialized2(_this), "currentTime", null);
        _defineProperty4(_assertThisInitialized2(_this), "secondsLoaded", null);
        _defineProperty4(_assertThisInitialized2(_this), "mute", function() {
          _this.setVolume(0);
        });
        _defineProperty4(_assertThisInitialized2(_this), "unmute", function() {
          if (_this.props.volume !== null) {
            _this.setVolume(_this.props.volume);
          }
        });
        _defineProperty4(_assertThisInitialized2(_this), "ref", function(container) {
          _this.container = container;
        });
        return _this;
      }
      _createClass2(Vimeo2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "load",
        value: function load(url) {
          var _this2 = this;
          this.duration = null;
          (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(Vimeo3) {
            if (!_this2.container) return;
            var _this2$props$config = _this2.props.config, playerOptions = _this2$props$config.playerOptions, title = _this2$props$config.title;
            _this2.player = new Vimeo3.Player(_this2.container, _objectSpread4({
              url,
              autoplay: _this2.props.playing,
              muted: _this2.props.muted,
              loop: _this2.props.loop,
              playsinline: _this2.props.playsinline,
              controls: _this2.props.controls
            }, playerOptions));
            _this2.player.ready().then(function() {
              var iframe = _this2.container.querySelector("iframe");
              iframe.style.width = "100%";
              iframe.style.height = "100%";
              if (title) {
                iframe.title = title;
              }
            })["catch"](_this2.props.onError);
            _this2.player.on("loaded", function() {
              _this2.props.onReady();
              _this2.refreshDuration();
            });
            _this2.player.on("play", function() {
              _this2.props.onPlay();
              _this2.refreshDuration();
            });
            _this2.player.on("pause", _this2.props.onPause);
            _this2.player.on("seeked", function(e) {
              return _this2.props.onSeek(e.seconds);
            });
            _this2.player.on("ended", _this2.props.onEnded);
            _this2.player.on("error", _this2.props.onError);
            _this2.player.on("timeupdate", function(_ref) {
              var seconds = _ref.seconds;
              _this2.currentTime = seconds;
            });
            _this2.player.on("progress", function(_ref2) {
              var seconds = _ref2.seconds;
              _this2.secondsLoaded = seconds;
            });
            _this2.player.on("bufferstart", _this2.props.onBuffer);
            _this2.player.on("bufferend", _this2.props.onBufferEnd);
          }, this.props.onError);
        }
      }, {
        key: "refreshDuration",
        value: function refreshDuration() {
          var _this3 = this;
          this.player.getDuration().then(function(duration) {
            _this3.duration = duration;
          });
        }
      }, {
        key: "play",
        value: function play() {
          var promise = this.callPlayer("play");
          if (promise) {
            promise["catch"](this.props.onError);
          }
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer("pause");
        }
      }, {
        key: "stop",
        value: function stop() {
          this.callPlayer("unload");
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer("setCurrentTime", seconds);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer("setVolume", fraction);
        }
      }, {
        key: "setLoop",
        value: function setLoop(loop) {
          this.callPlayer("setLoop", loop);
        }
      }, {
        key: "setPlaybackRate",
        value: function setPlaybackRate(rate) {
          this.callPlayer("setPlaybackRate", rate);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.duration;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.currentTime;
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return this.secondsLoaded;
        }
      }, {
        key: "render",
        value: function render() {
          var display = this.props.display;
          var style = {
            width: "100%",
            height: "100%",
            overflow: "hidden",
            display
          };
          return _react["default"].createElement("div", {
            key: this.props.url,
            ref: this.ref,
            style
          });
        }
      }]);
      return Vimeo2;
    }(_react.Component);
    exports["default"] = Vimeo;
    _defineProperty4(Vimeo, "displayName", "Vimeo");
    _defineProperty4(Vimeo, "canPlay", _patterns.canPlay.vimeo);
    _defineProperty4(Vimeo, "forceLoad", true);
  }
});

// node_modules/react-player/lib/players/Facebook.js
var require_Facebook = __commonJS({
  "node_modules/react-player/lib/players/Facebook.js"(exports) {
    "use strict";
    function _typeof2(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof2 = function _typeof3(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof2 = function _typeof3(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof2(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _utils = require_utils();
    var _patterns = require_patterns();
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _classCallCheck2(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass2(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits2(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper2(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct2();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf2(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf2(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn2(this, result);
      };
    }
    function _possibleConstructorReturn2(self2, call) {
      if (call && (_typeof2(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized2(self2);
    }
    function _assertThisInitialized2(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct2() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf2(o) {
      _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf2(o);
    }
    function _defineProperty4(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var SDK_URL = "https://connect.facebook.net/en_US/sdk.js";
    var SDK_GLOBAL = "FB";
    var SDK_GLOBAL_READY = "fbAsyncInit";
    var PLAYER_ID_PREFIX = "facebook-player-";
    var Facebook = function(_Component) {
      _inherits2(Facebook2, _Component);
      var _super = _createSuper2(Facebook2);
      function Facebook2() {
        var _this;
        _classCallCheck2(this, Facebook2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty4(_assertThisInitialized2(_this), "callPlayer", _utils.callPlayer);
        _defineProperty4(_assertThisInitialized2(_this), "playerID", _this.props.config.playerId || "".concat(PLAYER_ID_PREFIX).concat((0, _utils.randomString)()));
        _defineProperty4(_assertThisInitialized2(_this), "mute", function() {
          _this.callPlayer("mute");
        });
        _defineProperty4(_assertThisInitialized2(_this), "unmute", function() {
          _this.callPlayer("unmute");
        });
        return _this;
      }
      _createClass2(Facebook2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "load",
        value: function load(url, isReady) {
          var _this2 = this;
          if (isReady) {
            (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then(function(FB) {
              return FB.XFBML.parse();
            });
            return;
          }
          (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then(function(FB) {
            FB.init({
              appId: _this2.props.config.appId,
              xfbml: true,
              version: _this2.props.config.version
            });
            FB.Event.subscribe("xfbml.render", function(msg) {
              _this2.props.onLoaded();
            });
            FB.Event.subscribe("xfbml.ready", function(msg) {
              if (msg.type === "video" && msg.id === _this2.playerID) {
                _this2.player = msg.instance;
                _this2.player.subscribe("startedPlaying", _this2.props.onPlay);
                _this2.player.subscribe("paused", _this2.props.onPause);
                _this2.player.subscribe("finishedPlaying", _this2.props.onEnded);
                _this2.player.subscribe("startedBuffering", _this2.props.onBuffer);
                _this2.player.subscribe("finishedBuffering", _this2.props.onBufferEnd);
                _this2.player.subscribe("error", _this2.props.onError);
                if (_this2.props.muted) {
                  _this2.callPlayer("mute");
                } else {
                  _this2.callPlayer("unmute");
                }
                _this2.props.onReady();
                document.getElementById(_this2.playerID).querySelector("iframe").style.visibility = "visible";
              }
            });
          });
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer("play");
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer("pause");
        }
      }, {
        key: "stop",
        value: function stop() {
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer("seek", seconds);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer("setVolume", fraction);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.callPlayer("getDuration");
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.callPlayer("getCurrentPosition");
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return null;
        }
      }, {
        key: "render",
        value: function render() {
          var attributes = this.props.config.attributes;
          var style = {
            width: "100%",
            height: "100%"
          };
          return _react["default"].createElement("div", _extends2({
            style,
            id: this.playerID,
            className: "fb-video",
            "data-href": this.props.url,
            "data-autoplay": this.props.playing ? "true" : "false",
            "data-allowfullscreen": "true",
            "data-controls": this.props.controls ? "true" : "false"
          }, attributes));
        }
      }]);
      return Facebook2;
    }(_react.Component);
    exports["default"] = Facebook;
    _defineProperty4(Facebook, "displayName", "Facebook");
    _defineProperty4(Facebook, "canPlay", _patterns.canPlay.facebook);
    _defineProperty4(Facebook, "loopOnEnded", true);
  }
});

// node_modules/react-player/lib/players/Streamable.js
var require_Streamable = __commonJS({
  "node_modules/react-player/lib/players/Streamable.js"(exports) {
    "use strict";
    function _typeof2(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof2 = function _typeof3(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof2 = function _typeof3(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof2(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _utils = require_utils();
    var _patterns = require_patterns();
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _classCallCheck2(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass2(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits2(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper2(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct2();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf2(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf2(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn2(this, result);
      };
    }
    function _possibleConstructorReturn2(self2, call) {
      if (call && (_typeof2(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized2(self2);
    }
    function _assertThisInitialized2(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct2() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf2(o) {
      _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf2(o);
    }
    function _defineProperty4(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var SDK_URL = "https://cdn.embed.ly/player-0.1.0.min.js";
    var SDK_GLOBAL = "playerjs";
    var Streamable = function(_Component) {
      _inherits2(Streamable2, _Component);
      var _super = _createSuper2(Streamable2);
      function Streamable2() {
        var _this;
        _classCallCheck2(this, Streamable2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty4(_assertThisInitialized2(_this), "callPlayer", _utils.callPlayer);
        _defineProperty4(_assertThisInitialized2(_this), "duration", null);
        _defineProperty4(_assertThisInitialized2(_this), "currentTime", null);
        _defineProperty4(_assertThisInitialized2(_this), "secondsLoaded", null);
        _defineProperty4(_assertThisInitialized2(_this), "mute", function() {
          _this.callPlayer("mute");
        });
        _defineProperty4(_assertThisInitialized2(_this), "unmute", function() {
          _this.callPlayer("unmute");
        });
        _defineProperty4(_assertThisInitialized2(_this), "ref", function(iframe) {
          _this.iframe = iframe;
        });
        return _this;
      }
      _createClass2(Streamable2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "load",
        value: function load(url) {
          var _this2 = this;
          (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(playerjs) {
            if (!_this2.iframe) return;
            _this2.player = new playerjs.Player(_this2.iframe);
            _this2.player.setLoop(_this2.props.loop);
            _this2.player.on("ready", _this2.props.onReady);
            _this2.player.on("play", _this2.props.onPlay);
            _this2.player.on("pause", _this2.props.onPause);
            _this2.player.on("seeked", _this2.props.onSeek);
            _this2.player.on("ended", _this2.props.onEnded);
            _this2.player.on("error", _this2.props.onError);
            _this2.player.on("timeupdate", function(_ref) {
              var duration = _ref.duration, seconds = _ref.seconds;
              _this2.duration = duration;
              _this2.currentTime = seconds;
            });
            _this2.player.on("buffered", function(_ref2) {
              var percent = _ref2.percent;
              if (_this2.duration) {
                _this2.secondsLoaded = _this2.duration * percent;
              }
            });
            if (_this2.props.muted) {
              _this2.player.mute();
            }
          }, this.props.onError);
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer("play");
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer("pause");
        }
      }, {
        key: "stop",
        value: function stop() {
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer("setCurrentTime", seconds);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer("setVolume", fraction * 100);
        }
      }, {
        key: "setLoop",
        value: function setLoop(loop) {
          this.callPlayer("setLoop", loop);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.duration;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.currentTime;
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return this.secondsLoaded;
        }
      }, {
        key: "render",
        value: function render() {
          var id = this.props.url.match(_patterns.MATCH_URL_STREAMABLE)[1];
          var style = {
            width: "100%",
            height: "100%"
          };
          return _react["default"].createElement("iframe", {
            ref: this.ref,
            src: "https://streamable.com/o/".concat(id),
            frameBorder: "0",
            scrolling: "no",
            style,
            allow: "encrypted-media; autoplay; fullscreen;"
          });
        }
      }]);
      return Streamable2;
    }(_react.Component);
    exports["default"] = Streamable;
    _defineProperty4(Streamable, "displayName", "Streamable");
    _defineProperty4(Streamable, "canPlay", _patterns.canPlay.streamable);
  }
});

// node_modules/react-player/lib/players/Wistia.js
var require_Wistia = __commonJS({
  "node_modules/react-player/lib/players/Wistia.js"(exports) {
    "use strict";
    function _typeof2(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof2 = function _typeof3(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof2 = function _typeof3(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof2(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _utils = require_utils();
    var _patterns = require_patterns();
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys4(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread4(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys4(Object(source), true).forEach(function(key) {
            _defineProperty4(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys4(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _classCallCheck2(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass2(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits2(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper2(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct2();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf2(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf2(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn2(this, result);
      };
    }
    function _possibleConstructorReturn2(self2, call) {
      if (call && (_typeof2(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized2(self2);
    }
    function _assertThisInitialized2(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct2() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf2(o) {
      _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf2(o);
    }
    function _defineProperty4(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var SDK_URL = "https://fast.wistia.com/assets/external/E-v1.js";
    var SDK_GLOBAL = "Wistia";
    var PLAYER_ID_PREFIX = "wistia-player-";
    var Wistia = function(_Component) {
      _inherits2(Wistia2, _Component);
      var _super = _createSuper2(Wistia2);
      function Wistia2() {
        var _this;
        _classCallCheck2(this, Wistia2);
        for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
          _args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(_args));
        _defineProperty4(_assertThisInitialized2(_this), "callPlayer", _utils.callPlayer);
        _defineProperty4(_assertThisInitialized2(_this), "playerID", _this.props.config.playerId || "".concat(PLAYER_ID_PREFIX).concat((0, _utils.randomString)()));
        _defineProperty4(_assertThisInitialized2(_this), "onPlay", function() {
          var _this$props;
          return (_this$props = _this.props).onPlay.apply(_this$props, arguments);
        });
        _defineProperty4(_assertThisInitialized2(_this), "onPause", function() {
          var _this$props2;
          return (_this$props2 = _this.props).onPause.apply(_this$props2, arguments);
        });
        _defineProperty4(_assertThisInitialized2(_this), "onSeek", function() {
          var _this$props3;
          return (_this$props3 = _this.props).onSeek.apply(_this$props3, arguments);
        });
        _defineProperty4(_assertThisInitialized2(_this), "onEnded", function() {
          var _this$props4;
          return (_this$props4 = _this.props).onEnded.apply(_this$props4, arguments);
        });
        _defineProperty4(_assertThisInitialized2(_this), "onPlaybackRateChange", function() {
          var _this$props5;
          return (_this$props5 = _this.props).onPlaybackRateChange.apply(_this$props5, arguments);
        });
        _defineProperty4(_assertThisInitialized2(_this), "mute", function() {
          _this.callPlayer("mute");
        });
        _defineProperty4(_assertThisInitialized2(_this), "unmute", function() {
          _this.callPlayer("unmute");
        });
        return _this;
      }
      _createClass2(Wistia2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "load",
        value: function load(url) {
          var _this2 = this;
          var _this$props6 = this.props, playing = _this$props6.playing, muted = _this$props6.muted, controls = _this$props6.controls, _onReady = _this$props6.onReady, config = _this$props6.config, onError2 = _this$props6.onError;
          (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(Wistia3) {
            if (config.customControls) {
              config.customControls.forEach(function(control) {
                return Wistia3.defineControl(control);
              });
            }
            window._wq = window._wq || [];
            window._wq.push({
              id: _this2.playerID,
              options: _objectSpread4({
                autoPlay: playing,
                silentAutoPlay: "allow",
                muted,
                controlsVisibleOnLoad: controls,
                fullscreenButton: controls,
                playbar: controls,
                playbackRateControl: controls,
                qualityControl: controls,
                volumeControl: controls,
                settingsControl: controls,
                smallPlayButton: controls
              }, config.options),
              onReady: function onReady(player) {
                _this2.player = player;
                _this2.unbind();
                _this2.player.bind("play", _this2.onPlay);
                _this2.player.bind("pause", _this2.onPause);
                _this2.player.bind("seek", _this2.onSeek);
                _this2.player.bind("end", _this2.onEnded);
                _this2.player.bind("playbackratechange", _this2.onPlaybackRateChange);
                _onReady();
              }
            });
          }, onError2);
        }
      }, {
        key: "unbind",
        value: function unbind() {
          this.player.unbind("play", this.onPlay);
          this.player.unbind("pause", this.onPause);
          this.player.unbind("seek", this.onSeek);
          this.player.unbind("end", this.onEnded);
          this.player.unbind("playbackratechange", this.onPlaybackRateChange);
        }
        // Proxy methods to prevent listener leaks
      }, {
        key: "play",
        value: function play() {
          this.callPlayer("play");
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer("pause");
        }
      }, {
        key: "stop",
        value: function stop() {
          this.unbind();
          this.callPlayer("remove");
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer("time", seconds);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer("volume", fraction);
        }
      }, {
        key: "setPlaybackRate",
        value: function setPlaybackRate(rate) {
          this.callPlayer("playbackRate", rate);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.callPlayer("duration");
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.callPlayer("time");
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return null;
        }
      }, {
        key: "render",
        value: function render() {
          var url = this.props.url;
          var videoID = url && url.match(_patterns.MATCH_URL_WISTIA)[1];
          var className = "wistia_embed wistia_async_".concat(videoID);
          var style = {
            width: "100%",
            height: "100%"
          };
          return _react["default"].createElement("div", {
            id: this.playerID,
            key: videoID,
            className,
            style
          });
        }
      }]);
      return Wistia2;
    }(_react.Component);
    exports["default"] = Wistia;
    _defineProperty4(Wistia, "displayName", "Wistia");
    _defineProperty4(Wistia, "canPlay", _patterns.canPlay.wistia);
    _defineProperty4(Wistia, "loopOnEnded", true);
  }
});

// node_modules/react-player/lib/players/Twitch.js
var require_Twitch = __commonJS({
  "node_modules/react-player/lib/players/Twitch.js"(exports) {
    "use strict";
    function _typeof2(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof2 = function _typeof3(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof2 = function _typeof3(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof2(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _utils = require_utils();
    var _patterns = require_patterns();
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys4(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread4(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys4(Object(source), true).forEach(function(key) {
            _defineProperty4(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys4(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _classCallCheck2(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass2(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits2(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper2(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct2();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf2(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf2(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn2(this, result);
      };
    }
    function _possibleConstructorReturn2(self2, call) {
      if (call && (_typeof2(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized2(self2);
    }
    function _assertThisInitialized2(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct2() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf2(o) {
      _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf2(o);
    }
    function _defineProperty4(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var SDK_URL = "https://player.twitch.tv/js/embed/v1.js";
    var SDK_GLOBAL = "Twitch";
    var PLAYER_ID_PREFIX = "twitch-player-";
    var Twitch = function(_Component) {
      _inherits2(Twitch2, _Component);
      var _super = _createSuper2(Twitch2);
      function Twitch2() {
        var _this;
        _classCallCheck2(this, Twitch2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty4(_assertThisInitialized2(_this), "callPlayer", _utils.callPlayer);
        _defineProperty4(_assertThisInitialized2(_this), "playerID", _this.props.config.playerId || "".concat(PLAYER_ID_PREFIX).concat((0, _utils.randomString)()));
        _defineProperty4(_assertThisInitialized2(_this), "mute", function() {
          _this.callPlayer("setMuted", true);
        });
        _defineProperty4(_assertThisInitialized2(_this), "unmute", function() {
          _this.callPlayer("setMuted", false);
        });
        return _this;
      }
      _createClass2(Twitch2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "load",
        value: function load(url, isReady) {
          var _this2 = this;
          var _this$props = this.props, playsinline = _this$props.playsinline, onError2 = _this$props.onError, config = _this$props.config, controls = _this$props.controls;
          var isChannel2 = _patterns.MATCH_URL_TWITCH_CHANNEL.test(url);
          var id = isChannel2 ? url.match(_patterns.MATCH_URL_TWITCH_CHANNEL)[1] : url.match(_patterns.MATCH_URL_TWITCH_VIDEO)[1];
          if (isReady) {
            if (isChannel2) {
              this.player.setChannel(id);
            } else {
              this.player.setVideo("v" + id);
            }
            return;
          }
          (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(Twitch3) {
            _this2.player = new Twitch3.Player(_this2.playerID, _objectSpread4({
              video: isChannel2 ? "" : id,
              channel: isChannel2 ? id : "",
              height: "100%",
              width: "100%",
              playsinline,
              autoplay: _this2.props.playing,
              muted: _this2.props.muted,
              // https://github.com/CookPete/react-player/issues/733#issuecomment-549085859
              controls: isChannel2 ? true : controls,
              time: (0, _utils.parseStartTime)(url)
            }, config.options));
            var _Twitch$Player = Twitch3.Player, READY = _Twitch$Player.READY, PLAYING = _Twitch$Player.PLAYING, PAUSE = _Twitch$Player.PAUSE, ENDED = _Twitch$Player.ENDED, ONLINE = _Twitch$Player.ONLINE, OFFLINE = _Twitch$Player.OFFLINE, SEEK = _Twitch$Player.SEEK;
            _this2.player.addEventListener(READY, _this2.props.onReady);
            _this2.player.addEventListener(PLAYING, _this2.props.onPlay);
            _this2.player.addEventListener(PAUSE, _this2.props.onPause);
            _this2.player.addEventListener(ENDED, _this2.props.onEnded);
            _this2.player.addEventListener(SEEK, _this2.props.onSeek);
            _this2.player.addEventListener(ONLINE, _this2.props.onLoaded);
            _this2.player.addEventListener(OFFLINE, _this2.props.onLoaded);
          }, onError2);
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer("play");
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer("pause");
        }
      }, {
        key: "stop",
        value: function stop() {
          this.callPlayer("pause");
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer("seek", seconds);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer("setVolume", fraction);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.callPlayer("getDuration");
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.callPlayer("getCurrentTime");
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return null;
        }
      }, {
        key: "render",
        value: function render() {
          var style = {
            width: "100%",
            height: "100%"
          };
          return _react["default"].createElement("div", {
            style,
            id: this.playerID
          });
        }
      }]);
      return Twitch2;
    }(_react.Component);
    exports["default"] = Twitch;
    _defineProperty4(Twitch, "displayName", "Twitch");
    _defineProperty4(Twitch, "canPlay", _patterns.canPlay.twitch);
    _defineProperty4(Twitch, "loopOnEnded", true);
  }
});

// node_modules/react-player/lib/players/DailyMotion.js
var require_DailyMotion = __commonJS({
  "node_modules/react-player/lib/players/DailyMotion.js"(exports) {
    "use strict";
    function _typeof2(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof2 = function _typeof3(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof2 = function _typeof3(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof2(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _utils = require_utils();
    var _patterns = require_patterns();
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys4(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread4(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys4(Object(source), true).forEach(function(key) {
            _defineProperty4(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys4(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _slicedToArray3(arr, i) {
      return _arrayWithHoles4(arr) || _iterableToArrayLimit3(arr, i) || _unsupportedIterableToArray4(arr, i) || _nonIterableRest4();
    }
    function _nonIterableRest4() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray4(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray3(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray3(o, minLen);
    }
    function _arrayLikeToArray3(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function _iterableToArrayLimit3(arr, i) {
      if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = void 0;
      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
    function _arrayWithHoles4(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function _classCallCheck2(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass2(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits2(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper2(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct2();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf2(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf2(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn2(this, result);
      };
    }
    function _possibleConstructorReturn2(self2, call) {
      if (call && (_typeof2(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized2(self2);
    }
    function _assertThisInitialized2(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct2() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf2(o) {
      _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf2(o);
    }
    function _defineProperty4(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var SDK_URL = "https://api.dmcdn.net/all.js";
    var SDK_GLOBAL = "DM";
    var SDK_GLOBAL_READY = "dmAsyncInit";
    var DailyMotion = function(_Component) {
      _inherits2(DailyMotion2, _Component);
      var _super = _createSuper2(DailyMotion2);
      function DailyMotion2() {
        var _this;
        _classCallCheck2(this, DailyMotion2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty4(_assertThisInitialized2(_this), "callPlayer", _utils.callPlayer);
        _defineProperty4(_assertThisInitialized2(_this), "onDurationChange", function() {
          var duration = _this.getDuration();
          _this.props.onDuration(duration);
        });
        _defineProperty4(_assertThisInitialized2(_this), "mute", function() {
          _this.callPlayer("setMuted", true);
        });
        _defineProperty4(_assertThisInitialized2(_this), "unmute", function() {
          _this.callPlayer("setMuted", false);
        });
        _defineProperty4(_assertThisInitialized2(_this), "ref", function(container) {
          _this.container = container;
        });
        return _this;
      }
      _createClass2(DailyMotion2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "load",
        value: function load(url) {
          var _this2 = this;
          var _this$props = this.props, controls = _this$props.controls, config = _this$props.config, onError2 = _this$props.onError, playing = _this$props.playing;
          var _url$match = url.match(_patterns.MATCH_URL_DAILYMOTION), _url$match2 = _slicedToArray3(_url$match, 2), id = _url$match2[1];
          if (this.player) {
            this.player.load(id, {
              start: (0, _utils.parseStartTime)(url),
              autoplay: playing
            });
            return;
          }
          (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY, function(DM) {
            return DM.player;
          }).then(function(DM) {
            if (!_this2.container) return;
            var Player = DM.player;
            _this2.player = new Player(_this2.container, {
              width: "100%",
              height: "100%",
              video: id,
              params: _objectSpread4({
                controls,
                autoplay: _this2.props.playing,
                mute: _this2.props.muted,
                start: (0, _utils.parseStartTime)(url),
                origin: window.location.origin
              }, config.params),
              events: {
                apiready: _this2.props.onReady,
                seeked: function seeked() {
                  return _this2.props.onSeek(_this2.player.currentTime);
                },
                video_end: _this2.props.onEnded,
                durationchange: _this2.onDurationChange,
                pause: _this2.props.onPause,
                playing: _this2.props.onPlay,
                waiting: _this2.props.onBuffer,
                error: function error2(event) {
                  return onError2(event);
                }
              }
            });
          }, onError2);
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer("play");
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer("pause");
        }
      }, {
        key: "stop",
        value: function stop() {
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer("seek", seconds);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer("setVolume", fraction);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.player.duration || null;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.player.currentTime;
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return this.player.bufferedTime;
        }
      }, {
        key: "render",
        value: function render() {
          var display = this.props.display;
          var style = {
            width: "100%",
            height: "100%",
            display
          };
          return _react["default"].createElement("div", {
            style
          }, _react["default"].createElement("div", {
            ref: this.ref
          }));
        }
      }]);
      return DailyMotion2;
    }(_react.Component);
    exports["default"] = DailyMotion;
    _defineProperty4(DailyMotion, "displayName", "DailyMotion");
    _defineProperty4(DailyMotion, "canPlay", _patterns.canPlay.dailymotion);
    _defineProperty4(DailyMotion, "loopOnEnded", true);
  }
});

// node_modules/react-player/lib/players/Mixcloud.js
var require_Mixcloud = __commonJS({
  "node_modules/react-player/lib/players/Mixcloud.js"(exports) {
    "use strict";
    function _typeof2(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof2 = function _typeof3(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof2 = function _typeof3(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof2(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _utils = require_utils();
    var _patterns = require_patterns();
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys4(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread4(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys4(Object(source), true).forEach(function(key) {
            _defineProperty4(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys4(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _classCallCheck2(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass2(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits2(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper2(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct2();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf2(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf2(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn2(this, result);
      };
    }
    function _possibleConstructorReturn2(self2, call) {
      if (call && (_typeof2(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized2(self2);
    }
    function _assertThisInitialized2(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct2() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf2(o) {
      _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf2(o);
    }
    function _defineProperty4(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var SDK_URL = "https://widget.mixcloud.com/media/js/widgetApi.js";
    var SDK_GLOBAL = "Mixcloud";
    var Mixcloud = function(_Component) {
      _inherits2(Mixcloud2, _Component);
      var _super = _createSuper2(Mixcloud2);
      function Mixcloud2() {
        var _this;
        _classCallCheck2(this, Mixcloud2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty4(_assertThisInitialized2(_this), "callPlayer", _utils.callPlayer);
        _defineProperty4(_assertThisInitialized2(_this), "duration", null);
        _defineProperty4(_assertThisInitialized2(_this), "currentTime", null);
        _defineProperty4(_assertThisInitialized2(_this), "secondsLoaded", null);
        _defineProperty4(_assertThisInitialized2(_this), "mute", function() {
        });
        _defineProperty4(_assertThisInitialized2(_this), "unmute", function() {
        });
        _defineProperty4(_assertThisInitialized2(_this), "ref", function(iframe) {
          _this.iframe = iframe;
        });
        return _this;
      }
      _createClass2(Mixcloud2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "load",
        value: function load(url) {
          var _this2 = this;
          (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(Mixcloud3) {
            _this2.player = Mixcloud3.PlayerWidget(_this2.iframe);
            _this2.player.ready.then(function() {
              _this2.player.events.play.on(_this2.props.onPlay);
              _this2.player.events.pause.on(_this2.props.onPause);
              _this2.player.events.ended.on(_this2.props.onEnded);
              _this2.player.events.error.on(_this2.props.error);
              _this2.player.events.progress.on(function(seconds, duration) {
                _this2.currentTime = seconds;
                _this2.duration = duration;
              });
              _this2.props.onReady();
            });
          }, this.props.onError);
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer("play");
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer("pause");
        }
      }, {
        key: "stop",
        value: function stop() {
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer("seek", seconds);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.duration;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.currentTime;
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return null;
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props, url = _this$props.url, config = _this$props.config;
          var id = url.match(_patterns.MATCH_URL_MIXCLOUD)[1];
          var style = {
            width: "100%",
            height: "100%"
          };
          var query = (0, _utils.queryString)(_objectSpread4(_objectSpread4({}, config.options), {}, {
            feed: "/".concat(id, "/")
          }));
          return _react["default"].createElement("iframe", {
            key: id,
            ref: this.ref,
            style,
            src: "https://www.mixcloud.com/widget/iframe/?".concat(query),
            frameBorder: "0"
          });
        }
      }]);
      return Mixcloud2;
    }(_react.Component);
    exports["default"] = Mixcloud;
    _defineProperty4(Mixcloud, "displayName", "Mixcloud");
    _defineProperty4(Mixcloud, "canPlay", _patterns.canPlay.mixcloud);
    _defineProperty4(Mixcloud, "loopOnEnded", true);
  }
});

// node_modules/react-player/lib/players/Vidyard.js
var require_Vidyard = __commonJS({
  "node_modules/react-player/lib/players/Vidyard.js"(exports) {
    "use strict";
    function _typeof2(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof2 = function _typeof3(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof2 = function _typeof3(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof2(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _utils = require_utils();
    var _patterns = require_patterns();
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys4(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread4(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys4(Object(source), true).forEach(function(key) {
            _defineProperty4(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys4(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _classCallCheck2(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass2(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits2(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper2(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct2();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf2(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf2(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn2(this, result);
      };
    }
    function _possibleConstructorReturn2(self2, call) {
      if (call && (_typeof2(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized2(self2);
    }
    function _assertThisInitialized2(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct2() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf2(o) {
      _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf2(o);
    }
    function _defineProperty4(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var SDK_URL = "https://play.vidyard.com/embed/v4.js";
    var SDK_GLOBAL = "VidyardV4";
    var SDK_GLOBAL_READY = "onVidyardAPI";
    var Vidyard = function(_Component) {
      _inherits2(Vidyard2, _Component);
      var _super = _createSuper2(Vidyard2);
      function Vidyard2() {
        var _this;
        _classCallCheck2(this, Vidyard2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty4(_assertThisInitialized2(_this), "callPlayer", _utils.callPlayer);
        _defineProperty4(_assertThisInitialized2(_this), "mute", function() {
          _this.setVolume(0);
        });
        _defineProperty4(_assertThisInitialized2(_this), "unmute", function() {
          if (_this.props.volume !== null) {
            _this.setVolume(_this.props.volume);
          }
        });
        _defineProperty4(_assertThisInitialized2(_this), "ref", function(container) {
          _this.container = container;
        });
        return _this;
      }
      _createClass2(Vidyard2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "load",
        value: function load(url) {
          var _this2 = this;
          var _this$props = this.props, playing = _this$props.playing, config = _this$props.config, onError2 = _this$props.onError, onDuration = _this$props.onDuration;
          var id = url && url.match(_patterns.MATCH_URL_VIDYARD)[1];
          if (this.player) {
            this.stop();
          }
          (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then(function(Vidyard3) {
            if (!_this2.container) return;
            Vidyard3.api.addReadyListener(function(data, player) {
              if (_this2.player) {
                return;
              }
              _this2.player = player;
              _this2.player.on("ready", _this2.props.onReady);
              _this2.player.on("play", _this2.props.onPlay);
              _this2.player.on("pause", _this2.props.onPause);
              _this2.player.on("seek", _this2.props.onSeek);
              _this2.player.on("playerComplete", _this2.props.onEnded);
            }, id);
            Vidyard3.api.renderPlayer(_objectSpread4({
              uuid: id,
              container: _this2.container,
              autoplay: playing ? 1 : 0
            }, config.options));
            Vidyard3.api.getPlayerMetadata(id).then(function(meta) {
              _this2.duration = meta.length_in_seconds;
              onDuration(meta.length_in_seconds);
            });
          }, onError2);
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer("play");
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer("pause");
        }
      }, {
        key: "stop",
        value: function stop() {
          window.VidyardV4.api.destroyPlayer(this.player);
        }
      }, {
        key: "seekTo",
        value: function seekTo(amount) {
          this.callPlayer("seek", amount);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer("setVolume", fraction);
        }
      }, {
        key: "setPlaybackRate",
        value: function setPlaybackRate(rate) {
          this.callPlayer("setPlaybackSpeed", rate);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.duration;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.callPlayer("currentTime");
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return null;
        }
      }, {
        key: "render",
        value: function render() {
          var display = this.props.display;
          var style = {
            width: "100%",
            height: "100%",
            display
          };
          return _react["default"].createElement("div", {
            style
          }, _react["default"].createElement("div", {
            ref: this.ref
          }));
        }
      }]);
      return Vidyard2;
    }(_react.Component);
    exports["default"] = Vidyard;
    _defineProperty4(Vidyard, "displayName", "Vidyard");
    _defineProperty4(Vidyard, "canPlay", _patterns.canPlay.vidyard);
  }
});

// node_modules/react-player/lib/players/Kaltura.js
var require_Kaltura = __commonJS({
  "node_modules/react-player/lib/players/Kaltura.js"(exports) {
    "use strict";
    function _typeof2(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof2 = function _typeof3(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof2 = function _typeof3(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof2(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _utils = require_utils();
    var _patterns = require_patterns();
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _classCallCheck2(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass2(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits2(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper2(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct2();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf2(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf2(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn2(this, result);
      };
    }
    function _possibleConstructorReturn2(self2, call) {
      if (call && (_typeof2(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized2(self2);
    }
    function _assertThisInitialized2(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct2() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf2(o) {
      _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf2(o);
    }
    function _defineProperty4(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var SDK_URL = "https://cdn.embed.ly/player-0.1.0.min.js";
    var SDK_GLOBAL = "playerjs";
    var Kaltura = function(_Component) {
      _inherits2(Kaltura2, _Component);
      var _super = _createSuper2(Kaltura2);
      function Kaltura2() {
        var _this;
        _classCallCheck2(this, Kaltura2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty4(_assertThisInitialized2(_this), "callPlayer", _utils.callPlayer);
        _defineProperty4(_assertThisInitialized2(_this), "duration", null);
        _defineProperty4(_assertThisInitialized2(_this), "currentTime", null);
        _defineProperty4(_assertThisInitialized2(_this), "secondsLoaded", null);
        _defineProperty4(_assertThisInitialized2(_this), "mute", function() {
          _this.callPlayer("mute");
        });
        _defineProperty4(_assertThisInitialized2(_this), "unmute", function() {
          _this.callPlayer("unmute");
        });
        _defineProperty4(_assertThisInitialized2(_this), "ref", function(iframe) {
          _this.iframe = iframe;
        });
        return _this;
      }
      _createClass2(Kaltura2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "load",
        value: function load(url) {
          var _this2 = this;
          (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(playerjs) {
            if (!_this2.iframe) return;
            _this2.player = new playerjs.Player(_this2.iframe);
            _this2.player.on("ready", function() {
              setTimeout(function() {
                _this2.player.isReady = true;
                _this2.player.setLoop(_this2.props.loop);
                if (_this2.props.muted) {
                  _this2.player.mute();
                }
                _this2.addListeners(_this2.player, _this2.props);
                _this2.props.onReady();
              }, 500);
            });
          }, this.props.onError);
        }
      }, {
        key: "addListeners",
        value: function addListeners(player, props) {
          var _this3 = this;
          player.on("play", props.onPlay);
          player.on("pause", props.onPause);
          player.on("ended", props.onEnded);
          player.on("error", props.onError);
          player.on("timeupdate", function(_ref) {
            var duration = _ref.duration, seconds = _ref.seconds;
            _this3.duration = duration;
            _this3.currentTime = seconds;
          });
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer("play");
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer("pause");
        }
      }, {
        key: "stop",
        value: function stop() {
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer("setCurrentTime", seconds);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer("setVolume", fraction);
        }
      }, {
        key: "setLoop",
        value: function setLoop(loop) {
          this.callPlayer("setLoop", loop);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.duration;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.currentTime;
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return this.secondsLoaded;
        }
      }, {
        key: "render",
        value: function render() {
          var style = {
            width: "100%",
            height: "100%"
          };
          return _react["default"].createElement("iframe", {
            ref: this.ref,
            src: this.props.url,
            frameBorder: "0",
            scrolling: "no",
            style,
            allow: "encrypted-media; autoplay; fullscreen;",
            referrerPolicy: "no-referrer-when-downgrade"
          });
        }
      }]);
      return Kaltura2;
    }(_react.Component);
    exports["default"] = Kaltura;
    _defineProperty4(Kaltura, "displayName", "Kaltura");
    _defineProperty4(Kaltura, "canPlay", _patterns.canPlay.kaltura);
  }
});

// node_modules/react-player/lib/players/FilePlayer.js
var require_FilePlayer = __commonJS({
  "node_modules/react-player/lib/players/FilePlayer.js"(exports) {
    "use strict";
    function _typeof2(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof2 = function _typeof3(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof2 = function _typeof3(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof2(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _utils = require_utils();
    var _patterns = require_patterns();
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _classCallCheck2(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass2(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits2(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper2(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct2();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf2(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf2(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn2(this, result);
      };
    }
    function _possibleConstructorReturn2(self2, call) {
      if (call && (_typeof2(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized2(self2);
    }
    function _assertThisInitialized2(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct2() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf2(o) {
      _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf2(o);
    }
    function _defineProperty4(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var HAS_NAVIGATOR = typeof navigator !== "undefined";
    var IS_IPAD_PRO = HAS_NAVIGATOR && navigator.platform === "MacIntel" && navigator.maxTouchPoints > 1;
    var IS_IOS = HAS_NAVIGATOR && (/iPad|iPhone|iPod/.test(navigator.userAgent) || IS_IPAD_PRO) && !window.MSStream;
    var HLS_SDK_URL = "https://cdn.jsdelivr.net/npm/hls.js@VERSION/dist/hls.min.js";
    var HLS_GLOBAL = "Hls";
    var DASH_SDK_URL = "https://cdnjs.cloudflare.com/ajax/libs/dashjs/VERSION/dash.all.min.js";
    var DASH_GLOBAL = "dashjs";
    var FLV_SDK_URL = "https://cdn.jsdelivr.net/npm/flv.js@VERSION/dist/flv.min.js";
    var FLV_GLOBAL = "flvjs";
    var MATCH_DROPBOX_URL = /www\.dropbox\.com\/.+/;
    var MATCH_CLOUDFLARE_STREAM = /https:\/\/watch\.cloudflarestream\.com\/([a-z0-9]+)/;
    var REPLACE_CLOUDFLARE_STREAM = "https://videodelivery.net/{id}/manifest/video.m3u8";
    var FilePlayer = function(_Component) {
      _inherits2(FilePlayer2, _Component);
      var _super = _createSuper2(FilePlayer2);
      function FilePlayer2() {
        var _this;
        _classCallCheck2(this, FilePlayer2);
        for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
          _args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(_args));
        _defineProperty4(_assertThisInitialized2(_this), "onReady", function() {
          var _this$props;
          return (_this$props = _this.props).onReady.apply(_this$props, arguments);
        });
        _defineProperty4(_assertThisInitialized2(_this), "onPlay", function() {
          var _this$props2;
          return (_this$props2 = _this.props).onPlay.apply(_this$props2, arguments);
        });
        _defineProperty4(_assertThisInitialized2(_this), "onBuffer", function() {
          var _this$props3;
          return (_this$props3 = _this.props).onBuffer.apply(_this$props3, arguments);
        });
        _defineProperty4(_assertThisInitialized2(_this), "onBufferEnd", function() {
          var _this$props4;
          return (_this$props4 = _this.props).onBufferEnd.apply(_this$props4, arguments);
        });
        _defineProperty4(_assertThisInitialized2(_this), "onPause", function() {
          var _this$props5;
          return (_this$props5 = _this.props).onPause.apply(_this$props5, arguments);
        });
        _defineProperty4(_assertThisInitialized2(_this), "onEnded", function() {
          var _this$props6;
          return (_this$props6 = _this.props).onEnded.apply(_this$props6, arguments);
        });
        _defineProperty4(_assertThisInitialized2(_this), "onError", function() {
          var _this$props7;
          return (_this$props7 = _this.props).onError.apply(_this$props7, arguments);
        });
        _defineProperty4(_assertThisInitialized2(_this), "onPlayBackRateChange", function(event) {
          return _this.props.onPlaybackRateChange(event.target.playbackRate);
        });
        _defineProperty4(_assertThisInitialized2(_this), "onEnablePIP", function() {
          var _this$props8;
          return (_this$props8 = _this.props).onEnablePIP.apply(_this$props8, arguments);
        });
        _defineProperty4(_assertThisInitialized2(_this), "onDisablePIP", function(e) {
          var _this$props9 = _this.props, onDisablePIP = _this$props9.onDisablePIP, playing = _this$props9.playing;
          onDisablePIP(e);
          if (playing) {
            _this.play();
          }
        });
        _defineProperty4(_assertThisInitialized2(_this), "onPresentationModeChange", function(e) {
          if (_this.player && (0, _utils.supportsWebKitPresentationMode)(_this.player)) {
            var webkitPresentationMode = _this.player.webkitPresentationMode;
            if (webkitPresentationMode === "picture-in-picture") {
              _this.onEnablePIP(e);
            } else if (webkitPresentationMode === "inline") {
              _this.onDisablePIP(e);
            }
          }
        });
        _defineProperty4(_assertThisInitialized2(_this), "onSeek", function(e) {
          _this.props.onSeek(e.target.currentTime);
        });
        _defineProperty4(_assertThisInitialized2(_this), "mute", function() {
          _this.player.muted = true;
        });
        _defineProperty4(_assertThisInitialized2(_this), "unmute", function() {
          _this.player.muted = false;
        });
        _defineProperty4(_assertThisInitialized2(_this), "renderSourceElement", function(source, index3) {
          if (typeof source === "string") {
            return _react["default"].createElement("source", {
              key: index3,
              src: source
            });
          }
          return _react["default"].createElement("source", _extends2({
            key: index3
          }, source));
        });
        _defineProperty4(_assertThisInitialized2(_this), "renderTrack", function(track2, index3) {
          return _react["default"].createElement("track", _extends2({
            key: index3
          }, track2));
        });
        _defineProperty4(_assertThisInitialized2(_this), "ref", function(player) {
          if (_this.player) {
            _this.prevPlayer = _this.player;
          }
          _this.player = player;
        });
        return _this;
      }
      _createClass2(FilePlayer2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
          this.addListeners(this.player);
          if (IS_IOS) {
            this.player.load();
          }
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          if (this.shouldUseAudio(this.props) !== this.shouldUseAudio(prevProps)) {
            this.removeListeners(this.prevPlayer, prevProps.url);
            this.addListeners(this.player);
          }
          if (this.props.url !== prevProps.url && !(0, _utils.isMediaStream)(this.props.url)) {
            this.player.srcObject = null;
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.removeListeners(this.player);
          if (this.hls) {
            this.hls.destroy();
          }
        }
      }, {
        key: "addListeners",
        value: function addListeners(player) {
          var _this$props10 = this.props, url = _this$props10.url, playsinline = _this$props10.playsinline;
          player.addEventListener("play", this.onPlay);
          player.addEventListener("waiting", this.onBuffer);
          player.addEventListener("playing", this.onBufferEnd);
          player.addEventListener("pause", this.onPause);
          player.addEventListener("seeked", this.onSeek);
          player.addEventListener("ended", this.onEnded);
          player.addEventListener("error", this.onError);
          player.addEventListener("ratechange", this.onPlayBackRateChange);
          player.addEventListener("enterpictureinpicture", this.onEnablePIP);
          player.addEventListener("leavepictureinpicture", this.onDisablePIP);
          player.addEventListener("webkitpresentationmodechanged", this.onPresentationModeChange);
          if (!this.shouldUseHLS(url)) {
            player.addEventListener("canplay", this.onReady);
          }
          if (playsinline) {
            player.setAttribute("playsinline", "");
            player.setAttribute("webkit-playsinline", "");
            player.setAttribute("x5-playsinline", "");
          }
        }
      }, {
        key: "removeListeners",
        value: function removeListeners(player, url) {
          player.removeEventListener("canplay", this.onReady);
          player.removeEventListener("play", this.onPlay);
          player.removeEventListener("waiting", this.onBuffer);
          player.removeEventListener("playing", this.onBufferEnd);
          player.removeEventListener("pause", this.onPause);
          player.removeEventListener("seeked", this.onSeek);
          player.removeEventListener("ended", this.onEnded);
          player.removeEventListener("error", this.onError);
          player.removeEventListener("ratechange", this.onPlayBackRateChange);
          player.removeEventListener("enterpictureinpicture", this.onEnablePIP);
          player.removeEventListener("leavepictureinpicture", this.onDisablePIP);
          player.removeEventListener("webkitpresentationmodechanged", this.onPresentationModeChange);
          if (!this.shouldUseHLS(url)) {
            player.removeEventListener("canplay", this.onReady);
          }
        }
        // Proxy methods to prevent listener leaks
      }, {
        key: "shouldUseAudio",
        value: function shouldUseAudio(props) {
          if (props.config.forceVideo) {
            return false;
          }
          if (props.config.attributes.poster) {
            return false;
          }
          return _patterns.AUDIO_EXTENSIONS.test(props.url) || props.config.forceAudio;
        }
      }, {
        key: "shouldUseHLS",
        value: function shouldUseHLS(url) {
          if (this.props.config.forceHLS) {
            return true;
          }
          if (IS_IOS) {
            return false;
          }
          return _patterns.HLS_EXTENSIONS.test(url) || MATCH_CLOUDFLARE_STREAM.test(url);
        }
      }, {
        key: "shouldUseDASH",
        value: function shouldUseDASH(url) {
          return _patterns.DASH_EXTENSIONS.test(url) || this.props.config.forceDASH;
        }
      }, {
        key: "shouldUseFLV",
        value: function shouldUseFLV(url) {
          return _patterns.FLV_EXTENSIONS.test(url) || this.props.config.forceFLV;
        }
      }, {
        key: "load",
        value: function load(url) {
          var _this2 = this;
          var _this$props$config = this.props.config, hlsVersion = _this$props$config.hlsVersion, hlsOptions = _this$props$config.hlsOptions, dashVersion = _this$props$config.dashVersion, flvVersion = _this$props$config.flvVersion;
          if (this.hls) {
            this.hls.destroy();
          }
          if (this.dash) {
            this.dash.reset();
          }
          if (this.shouldUseHLS(url)) {
            (0, _utils.getSDK)(HLS_SDK_URL.replace("VERSION", hlsVersion), HLS_GLOBAL).then(function(Hls) {
              _this2.hls = new Hls(hlsOptions);
              _this2.hls.on(Hls.Events.MANIFEST_PARSED, function() {
                _this2.props.onReady();
              });
              _this2.hls.on(Hls.Events.ERROR, function(e, data) {
                _this2.props.onError(e, data, _this2.hls, Hls);
              });
              if (MATCH_CLOUDFLARE_STREAM.test(url)) {
                var id = url.match(MATCH_CLOUDFLARE_STREAM)[1];
                _this2.hls.loadSource(REPLACE_CLOUDFLARE_STREAM.replace("{id}", id));
              } else {
                _this2.hls.loadSource(url);
              }
              _this2.hls.attachMedia(_this2.player);
              _this2.props.onLoaded();
            });
          }
          if (this.shouldUseDASH(url)) {
            (0, _utils.getSDK)(DASH_SDK_URL.replace("VERSION", dashVersion), DASH_GLOBAL).then(function(dashjs) {
              _this2.dash = dashjs.MediaPlayer().create();
              _this2.dash.initialize(_this2.player, url, _this2.props.playing);
              _this2.dash.on("error", _this2.props.onError);
              if (parseInt(dashVersion) < 3) {
                _this2.dash.getDebug().setLogToBrowserConsole(false);
              } else {
                _this2.dash.updateSettings({
                  debug: {
                    logLevel: dashjs.Debug.LOG_LEVEL_NONE
                  }
                });
              }
              _this2.props.onLoaded();
            });
          }
          if (this.shouldUseFLV(url)) {
            (0, _utils.getSDK)(FLV_SDK_URL.replace("VERSION", flvVersion), FLV_GLOBAL).then(function(flvjs) {
              _this2.flv = flvjs.createPlayer({
                type: "flv",
                url
              });
              _this2.flv.attachMediaElement(_this2.player);
              _this2.flv.on(flvjs.Events.ERROR, function(e, data) {
                _this2.props.onError(e, data, _this2.flv, flvjs);
              });
              _this2.flv.load();
              _this2.props.onLoaded();
            });
          }
          if (url instanceof Array) {
            this.player.load();
          } else if ((0, _utils.isMediaStream)(url)) {
            try {
              this.player.srcObject = url;
            } catch (e) {
              this.player.src = window.URL.createObjectURL(url);
            }
          }
        }
      }, {
        key: "play",
        value: function play() {
          var promise = this.player.play();
          if (promise) {
            promise["catch"](this.props.onError);
          }
        }
      }, {
        key: "pause",
        value: function pause() {
          this.player.pause();
        }
      }, {
        key: "stop",
        value: function stop() {
          this.player.removeAttribute("src");
          if (this.dash) {
            this.dash.reset();
          }
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.player.currentTime = seconds;
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.player.volume = fraction;
        }
      }, {
        key: "enablePIP",
        value: function enablePIP() {
          if (this.player.requestPictureInPicture && document.pictureInPictureElement !== this.player) {
            this.player.requestPictureInPicture();
          } else if ((0, _utils.supportsWebKitPresentationMode)(this.player) && this.player.webkitPresentationMode !== "picture-in-picture") {
            this.player.webkitSetPresentationMode("picture-in-picture");
          }
        }
      }, {
        key: "disablePIP",
        value: function disablePIP() {
          if (document.exitPictureInPicture && document.pictureInPictureElement === this.player) {
            document.exitPictureInPicture();
          } else if ((0, _utils.supportsWebKitPresentationMode)(this.player) && this.player.webkitPresentationMode !== "inline") {
            this.player.webkitSetPresentationMode("inline");
          }
        }
      }, {
        key: "setPlaybackRate",
        value: function setPlaybackRate(rate) {
          try {
            this.player.playbackRate = rate;
          } catch (error2) {
            this.props.onError(error2);
          }
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          if (!this.player) return null;
          var _this$player = this.player, duration = _this$player.duration, seekable = _this$player.seekable;
          if (duration === Infinity && seekable.length > 0) {
            return seekable.end(seekable.length - 1);
          }
          return duration;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          if (!this.player) return null;
          return this.player.currentTime;
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          if (!this.player) return null;
          var buffered = this.player.buffered;
          if (buffered.length === 0) {
            return 0;
          }
          var end2 = buffered.end(buffered.length - 1);
          var duration = this.getDuration();
          if (end2 > duration) {
            return duration;
          }
          return end2;
        }
      }, {
        key: "getSource",
        value: function getSource(url) {
          var useHLS = this.shouldUseHLS(url);
          var useDASH = this.shouldUseDASH(url);
          var useFLV = this.shouldUseFLV(url);
          if (url instanceof Array || (0, _utils.isMediaStream)(url) || useHLS || useDASH || useFLV) {
            return void 0;
          }
          if (MATCH_DROPBOX_URL.test(url)) {
            return url.replace("www.dropbox.com", "dl.dropboxusercontent.com");
          }
          return url;
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props11 = this.props, url = _this$props11.url, playing = _this$props11.playing, loop = _this$props11.loop, controls = _this$props11.controls, muted = _this$props11.muted, config = _this$props11.config, width = _this$props11.width, height = _this$props11.height;
          var useAudio = this.shouldUseAudio(this.props);
          var Element2 = useAudio ? "audio" : "video";
          var style = {
            width: width === "auto" ? width : "100%",
            height: height === "auto" ? height : "100%"
          };
          return _react["default"].createElement(Element2, _extends2({
            ref: this.ref,
            src: this.getSource(url),
            style,
            preload: "auto",
            autoPlay: playing || void 0,
            controls,
            muted,
            loop
          }, config.attributes), url instanceof Array && url.map(this.renderSourceElement), config.tracks.map(this.renderTrack));
        }
      }]);
      return FilePlayer2;
    }(_react.Component);
    exports["default"] = FilePlayer;
    _defineProperty4(FilePlayer, "displayName", "FilePlayer");
    _defineProperty4(FilePlayer, "canPlay", _patterns.canPlay.file);
  }
});

// node_modules/react-player/lib/players/index.js
var require_players = __commonJS({
  "node_modules/react-player/lib/players/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = require_react();
    var _utils = require_utils();
    var _patterns = require_patterns();
    function _typeof2(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof2 = function _typeof3(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof2 = function _typeof3(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof2(obj);
    }
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var _default = [{
      key: "youtube",
      name: "YouTube",
      canPlay: _patterns.canPlay.youtube,
      lazyPlayer: (0, _react.lazy)(function() {
        return Promise.resolve().then(function() {
          return _interopRequireWildcard(require_YouTube());
        });
      })
    }, {
      key: "soundcloud",
      name: "SoundCloud",
      canPlay: _patterns.canPlay.soundcloud,
      lazyPlayer: (0, _react.lazy)(function() {
        return Promise.resolve().then(function() {
          return _interopRequireWildcard(require_SoundCloud());
        });
      })
    }, {
      key: "vimeo",
      name: "Vimeo",
      canPlay: _patterns.canPlay.vimeo,
      lazyPlayer: (0, _react.lazy)(function() {
        return Promise.resolve().then(function() {
          return _interopRequireWildcard(require_Vimeo());
        });
      })
    }, {
      key: "facebook",
      name: "Facebook",
      canPlay: _patterns.canPlay.facebook,
      lazyPlayer: (0, _react.lazy)(function() {
        return Promise.resolve().then(function() {
          return _interopRequireWildcard(require_Facebook());
        });
      })
    }, {
      key: "streamable",
      name: "Streamable",
      canPlay: _patterns.canPlay.streamable,
      lazyPlayer: (0, _react.lazy)(function() {
        return Promise.resolve().then(function() {
          return _interopRequireWildcard(require_Streamable());
        });
      })
    }, {
      key: "wistia",
      name: "Wistia",
      canPlay: _patterns.canPlay.wistia,
      lazyPlayer: (0, _react.lazy)(function() {
        return Promise.resolve().then(function() {
          return _interopRequireWildcard(require_Wistia());
        });
      })
    }, {
      key: "twitch",
      name: "Twitch",
      canPlay: _patterns.canPlay.twitch,
      lazyPlayer: (0, _react.lazy)(function() {
        return Promise.resolve().then(function() {
          return _interopRequireWildcard(require_Twitch());
        });
      })
    }, {
      key: "dailymotion",
      name: "DailyMotion",
      canPlay: _patterns.canPlay.dailymotion,
      lazyPlayer: (0, _react.lazy)(function() {
        return Promise.resolve().then(function() {
          return _interopRequireWildcard(require_DailyMotion());
        });
      })
    }, {
      key: "mixcloud",
      name: "Mixcloud",
      canPlay: _patterns.canPlay.mixcloud,
      lazyPlayer: (0, _react.lazy)(function() {
        return Promise.resolve().then(function() {
          return _interopRequireWildcard(require_Mixcloud());
        });
      })
    }, {
      key: "vidyard",
      name: "Vidyard",
      canPlay: _patterns.canPlay.vidyard,
      lazyPlayer: (0, _react.lazy)(function() {
        return Promise.resolve().then(function() {
          return _interopRequireWildcard(require_Vidyard());
        });
      })
    }, {
      key: "kaltura",
      name: "Kaltura",
      canPlay: _patterns.canPlay.kaltura,
      lazyPlayer: (0, _react.lazy)(function() {
        return Promise.resolve().then(function() {
          return _interopRequireWildcard(require_Kaltura());
        });
      })
    }, {
      key: "file",
      name: "FilePlayer",
      canPlay: _patterns.canPlay.file,
      canEnablePIP: function canEnablePIP(url) {
        return _patterns.canPlay.file(url) && (document.pictureInPictureEnabled || (0, _utils.supportsWebKitPresentationMode)()) && !_patterns.AUDIO_EXTENSIONS.test(url);
      },
      lazyPlayer: (0, _react.lazy)(function() {
        return Promise.resolve().then(function() {
          return _interopRequireWildcard(require_FilePlayer());
        });
      })
    }];
    exports["default"] = _default;
  }
});

// node_modules/memoize-one/dist/memoize-one.esm.js
var memoize_one_esm_exports = {};
__export(memoize_one_esm_exports, {
  default: () => memoize_one_esm_default
});
function isEqual(first, second) {
  if (first === second) {
    return true;
  }
  if (safeIsNaN(first) && safeIsNaN(second)) {
    return true;
  }
  return false;
}
function areInputsEqual(newInputs, lastInputs) {
  if (newInputs.length !== lastInputs.length) {
    return false;
  }
  for (var i = 0; i < newInputs.length; i++) {
    if (!isEqual(newInputs[i], lastInputs[i])) {
      return false;
    }
  }
  return true;
}
function memoizeOne(resultFn, isEqual3) {
  if (isEqual3 === void 0) {
    isEqual3 = areInputsEqual;
  }
  var lastThis;
  var lastArgs = [];
  var lastResult;
  var calledOnce = false;
  function memoized() {
    var newArgs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      newArgs[_i] = arguments[_i];
    }
    if (calledOnce && lastThis === this && isEqual3(newArgs, lastArgs)) {
      return lastResult;
    }
    lastResult = resultFn.apply(this, newArgs);
    calledOnce = true;
    lastThis = this;
    lastArgs = newArgs;
    return lastResult;
  }
  return memoized;
}
var safeIsNaN, memoize_one_esm_default;
var init_memoize_one_esm = __esm({
  "node_modules/memoize-one/dist/memoize-one.esm.js"() {
    safeIsNaN = Number.isNaN || function ponyfill(value) {
      return typeof value === "number" && value !== value;
    };
    memoize_one_esm_default = memoizeOne;
  }
});

// node_modules/react-fast-compare/index.js
var require_react_fast_compare = __commonJS({
  "node_modules/react-fast-compare/index.js"(exports, module) {
    var hasElementType = typeof Element !== "undefined";
    var hasMap = typeof Map === "function";
    var hasSet = typeof Set === "function";
    var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
    function equal(a, b) {
      if (a === b) return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor) return false;
        var length, i, keys2;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length) return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b[i])) return false;
          return true;
        }
        var it;
        if (hasMap && a instanceof Map && b instanceof Map) {
          if (a.size !== b.size) return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0])) return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!equal(i.value[1], b.get(i.value[0]))) return false;
          return true;
        }
        if (hasSet && a instanceof Set && b instanceof Set) {
          if (a.size !== b.size) return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0])) return false;
          return true;
        }
        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
          length = a.length;
          if (length != b.length) return false;
          for (i = length; i-- !== 0; )
            if (a[i] !== b[i]) return false;
          return true;
        }
        if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === "function" && typeof b.valueOf === "function") return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString && typeof a.toString === "function" && typeof b.toString === "function") return a.toString() === b.toString();
        keys2 = Object.keys(a);
        length = keys2.length;
        if (length !== Object.keys(b).length) return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys2[i])) return false;
        if (hasElementType && a instanceof Element) return false;
        for (i = length; i-- !== 0; ) {
          if ((keys2[i] === "_owner" || keys2[i] === "__v" || keys2[i] === "__o") && a.$$typeof) {
            continue;
          }
          if (!equal(a[keys2[i]], b[keys2[i]])) return false;
        }
        return true;
      }
      return a !== a && b !== b;
    }
    module.exports = function isEqual3(a, b) {
      try {
        return equal(a, b);
      } catch (error2) {
        if ((error2.message || "").match(/stack|recursion/i)) {
          console.warn("react-fast-compare cannot handle circular refs");
          return false;
        }
        throw error2;
      }
    };
  }
});

// node_modules/react-player/lib/props.js
var require_props = __commonJS({
  "node_modules/react-player/lib/props.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.defaultProps = exports.propTypes = void 0;
    var _propTypes = _interopRequireDefault(require_prop_types());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var string = _propTypes["default"].string;
    var bool = _propTypes["default"].bool;
    var number = _propTypes["default"].number;
    var array = _propTypes["default"].array;
    var oneOfType = _propTypes["default"].oneOfType;
    var shape = _propTypes["default"].shape;
    var object = _propTypes["default"].object;
    var func = _propTypes["default"].func;
    var node = _propTypes["default"].node;
    var propTypes = {
      url: oneOfType([string, array, object]),
      playing: bool,
      loop: bool,
      controls: bool,
      volume: number,
      muted: bool,
      playbackRate: number,
      width: oneOfType([string, number]),
      height: oneOfType([string, number]),
      style: object,
      progressInterval: number,
      playsinline: bool,
      pip: bool,
      stopOnUnmount: bool,
      light: oneOfType([bool, string]),
      playIcon: node,
      previewTabIndex: number,
      fallback: node,
      oEmbedUrl: string,
      wrapper: oneOfType([string, func, shape({
        render: func.isRequired
      })]),
      config: shape({
        soundcloud: shape({
          options: object
        }),
        youtube: shape({
          playerVars: object,
          embedOptions: object,
          onUnstarted: func
        }),
        facebook: shape({
          appId: string,
          version: string,
          playerId: string,
          attributes: object
        }),
        dailymotion: shape({
          params: object
        }),
        vimeo: shape({
          playerOptions: object,
          title: string
        }),
        file: shape({
          attributes: object,
          tracks: array,
          forceVideo: bool,
          forceAudio: bool,
          forceHLS: bool,
          forceDASH: bool,
          forceFLV: bool,
          hlsOptions: object,
          hlsVersion: string,
          dashVersion: string,
          flvVersion: string
        }),
        wistia: shape({
          options: object,
          playerId: string,
          customControls: array
        }),
        mixcloud: shape({
          options: object
        }),
        twitch: shape({
          options: object,
          playerId: string
        }),
        vidyard: shape({
          options: object
        })
      }),
      onReady: func,
      onStart: func,
      onPlay: func,
      onPause: func,
      onBuffer: func,
      onBufferEnd: func,
      onEnded: func,
      onError: func,
      onDuration: func,
      onSeek: func,
      onPlaybackRateChange: func,
      onProgress: func,
      onClickPreview: func,
      onEnablePIP: func,
      onDisablePIP: func
    };
    exports.propTypes = propTypes;
    var noop8 = function noop9() {
    };
    var defaultProps2 = {
      playing: false,
      loop: false,
      controls: false,
      volume: null,
      muted: false,
      playbackRate: 1,
      width: "640px",
      height: "360px",
      style: {},
      progressInterval: 1e3,
      playsinline: false,
      pip: false,
      stopOnUnmount: true,
      light: false,
      fallback: null,
      wrapper: "div",
      previewTabIndex: 0,
      oEmbedUrl: "https://noembed.com/embed?url={url}",
      config: {
        soundcloud: {
          options: {
            visual: true,
            // Undocumented, but makes player fill container and look better
            buying: false,
            liking: false,
            download: false,
            sharing: false,
            show_comments: false,
            show_playcount: false
          }
        },
        youtube: {
          playerVars: {
            playsinline: 1,
            showinfo: 0,
            rel: 0,
            iv_load_policy: 3,
            modestbranding: 1
          },
          embedOptions: {},
          onUnstarted: noop8
        },
        facebook: {
          appId: "1309697205772819",
          version: "v3.3",
          playerId: null,
          attributes: {}
        },
        dailymotion: {
          params: {
            api: 1,
            "endscreen-enable": false
          }
        },
        vimeo: {
          playerOptions: {
            autopause: false,
            byline: false,
            portrait: false,
            title: false
          },
          title: null
        },
        file: {
          attributes: {},
          tracks: [],
          forceVideo: false,
          forceAudio: false,
          forceHLS: false,
          forceDASH: false,
          forceFLV: false,
          hlsOptions: {},
          hlsVersion: "1.1.4",
          dashVersion: "3.1.3",
          flvVersion: "1.5.0"
        },
        wistia: {
          options: {},
          playerId: null,
          customControls: null
        },
        mixcloud: {
          options: {
            hide_cover: 1
          }
        },
        twitch: {
          options: {},
          playerId: null
        },
        vidyard: {
          options: {}
        }
      },
      onReady: noop8,
      onStart: noop8,
      onPlay: noop8,
      onPause: noop8,
      onBuffer: noop8,
      onBufferEnd: noop8,
      onEnded: noop8,
      onError: noop8,
      onDuration: noop8,
      onSeek: noop8,
      onPlaybackRateChange: noop8,
      onProgress: noop8,
      onClickPreview: noop8,
      onEnablePIP: noop8,
      onDisablePIP: noop8
    };
    exports.defaultProps = defaultProps2;
  }
});

// node_modules/react-player/lib/Player.js
var require_Player = __commonJS({
  "node_modules/react-player/lib/Player.js"(exports) {
    "use strict";
    function _typeof2(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof2 = function _typeof3(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof2 = function _typeof3(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof2(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _reactFastCompare = _interopRequireDefault(require_react_fast_compare());
    var _props = require_props();
    var _utils = require_utils();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _classCallCheck2(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass2(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits2(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper2(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct2();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf2(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf2(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn2(this, result);
      };
    }
    function _possibleConstructorReturn2(self2, call) {
      if (call && (_typeof2(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized2(self2);
    }
    function _assertThisInitialized2(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct2() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf2(o) {
      _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf2(o);
    }
    function _defineProperty4(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var SEEK_ON_PLAY_EXPIRY = 5e3;
    var Player = function(_Component) {
      _inherits2(Player2, _Component);
      var _super = _createSuper2(Player2);
      function Player2() {
        var _this;
        _classCallCheck2(this, Player2);
        for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
          _args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(_args));
        _defineProperty4(_assertThisInitialized2(_this), "mounted", false);
        _defineProperty4(_assertThisInitialized2(_this), "isReady", false);
        _defineProperty4(_assertThisInitialized2(_this), "isPlaying", false);
        _defineProperty4(_assertThisInitialized2(_this), "isLoading", true);
        _defineProperty4(_assertThisInitialized2(_this), "loadOnReady", null);
        _defineProperty4(_assertThisInitialized2(_this), "startOnPlay", true);
        _defineProperty4(_assertThisInitialized2(_this), "seekOnPlay", null);
        _defineProperty4(_assertThisInitialized2(_this), "onDurationCalled", false);
        _defineProperty4(_assertThisInitialized2(_this), "handlePlayerMount", function(player) {
          if (_this.player) return;
          _this.player = player;
          _this.player.load(_this.props.url);
          _this.progress();
        });
        _defineProperty4(_assertThisInitialized2(_this), "getInternalPlayer", function(key) {
          if (!_this.player) return null;
          return _this.player[key];
        });
        _defineProperty4(_assertThisInitialized2(_this), "progress", function() {
          if (_this.props.url && _this.player && _this.isReady) {
            var playedSeconds = _this.getCurrentTime() || 0;
            var loadedSeconds = _this.getSecondsLoaded();
            var duration = _this.getDuration();
            if (duration) {
              var progress = {
                playedSeconds,
                played: playedSeconds / duration
              };
              if (loadedSeconds !== null) {
                progress.loadedSeconds = loadedSeconds;
                progress.loaded = loadedSeconds / duration;
              }
              if (progress.playedSeconds !== _this.prevPlayed || progress.loadedSeconds !== _this.prevLoaded) {
                _this.props.onProgress(progress);
              }
              _this.prevPlayed = progress.playedSeconds;
              _this.prevLoaded = progress.loadedSeconds;
            }
          }
          _this.progressTimeout = setTimeout(_this.progress, _this.props.progressFrequency || _this.props.progressInterval);
        });
        _defineProperty4(_assertThisInitialized2(_this), "handleReady", function() {
          if (!_this.mounted) return;
          _this.isReady = true;
          _this.isLoading = false;
          var _this$props = _this.props, onReady = _this$props.onReady, playing = _this$props.playing, volume = _this$props.volume, muted = _this$props.muted;
          onReady();
          if (!muted && volume !== null) {
            _this.player.setVolume(volume);
          }
          if (_this.loadOnReady) {
            _this.player.load(_this.loadOnReady, true);
            _this.loadOnReady = null;
          } else if (playing) {
            _this.player.play();
          }
          _this.handleDurationCheck();
        });
        _defineProperty4(_assertThisInitialized2(_this), "handlePlay", function() {
          _this.isPlaying = true;
          _this.isLoading = false;
          var _this$props2 = _this.props, onStart = _this$props2.onStart, onPlay = _this$props2.onPlay, playbackRate = _this$props2.playbackRate;
          if (_this.startOnPlay) {
            if (_this.player.setPlaybackRate && playbackRate !== 1) {
              _this.player.setPlaybackRate(playbackRate);
            }
            onStart();
            _this.startOnPlay = false;
          }
          onPlay();
          if (_this.seekOnPlay) {
            _this.seekTo(_this.seekOnPlay);
            _this.seekOnPlay = null;
          }
          _this.handleDurationCheck();
        });
        _defineProperty4(_assertThisInitialized2(_this), "handlePause", function(e) {
          _this.isPlaying = false;
          if (!_this.isLoading) {
            _this.props.onPause(e);
          }
        });
        _defineProperty4(_assertThisInitialized2(_this), "handleEnded", function() {
          var _this$props3 = _this.props, activePlayer = _this$props3.activePlayer, loop = _this$props3.loop, onEnded = _this$props3.onEnded;
          if (activePlayer.loopOnEnded && loop) {
            _this.seekTo(0);
          }
          if (!loop) {
            _this.isPlaying = false;
            onEnded();
          }
        });
        _defineProperty4(_assertThisInitialized2(_this), "handleError", function() {
          var _this$props4;
          _this.isLoading = false;
          (_this$props4 = _this.props).onError.apply(_this$props4, arguments);
        });
        _defineProperty4(_assertThisInitialized2(_this), "handleDurationCheck", function() {
          clearTimeout(_this.durationCheckTimeout);
          var duration = _this.getDuration();
          if (duration) {
            if (!_this.onDurationCalled) {
              _this.props.onDuration(duration);
              _this.onDurationCalled = true;
            }
          } else {
            _this.durationCheckTimeout = setTimeout(_this.handleDurationCheck, 100);
          }
        });
        _defineProperty4(_assertThisInitialized2(_this), "handleLoaded", function() {
          _this.isLoading = false;
        });
        return _this;
      }
      _createClass2(Player2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.mounted = true;
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          clearTimeout(this.progressTimeout);
          clearTimeout(this.durationCheckTimeout);
          if (this.isReady && this.props.stopOnUnmount) {
            this.player.stop();
            if (this.player.disablePIP) {
              this.player.disablePIP();
            }
          }
          this.mounted = false;
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          var _this2 = this;
          if (!this.player) {
            return;
          }
          var _this$props5 = this.props, url = _this$props5.url, playing = _this$props5.playing, volume = _this$props5.volume, muted = _this$props5.muted, playbackRate = _this$props5.playbackRate, pip = _this$props5.pip, loop = _this$props5.loop, activePlayer = _this$props5.activePlayer, disableDeferredLoading = _this$props5.disableDeferredLoading;
          if (!(0, _reactFastCompare["default"])(prevProps.url, url)) {
            if (this.isLoading && !activePlayer.forceLoad && !disableDeferredLoading && !(0, _utils.isMediaStream)(url)) {
              console.warn("ReactPlayer: the attempt to load ".concat(url, " is being deferred until the player has loaded"));
              this.loadOnReady = url;
              return;
            }
            this.isLoading = true;
            this.startOnPlay = true;
            this.onDurationCalled = false;
            this.player.load(url, this.isReady);
          }
          if (!prevProps.playing && playing && !this.isPlaying) {
            this.player.play();
          }
          if (prevProps.playing && !playing && this.isPlaying) {
            this.player.pause();
          }
          if (!prevProps.pip && pip && this.player.enablePIP) {
            this.player.enablePIP();
          }
          if (prevProps.pip && !pip && this.player.disablePIP) {
            this.player.disablePIP();
          }
          if (prevProps.volume !== volume && volume !== null) {
            this.player.setVolume(volume);
          }
          if (prevProps.muted !== muted) {
            if (muted) {
              this.player.mute();
            } else {
              this.player.unmute();
              if (volume !== null) {
                setTimeout(function() {
                  return _this2.player.setVolume(volume);
                });
              }
            }
          }
          if (prevProps.playbackRate !== playbackRate && this.player.setPlaybackRate) {
            this.player.setPlaybackRate(playbackRate);
          }
          if (prevProps.loop !== loop && this.player.setLoop) {
            this.player.setLoop(loop);
          }
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          if (!this.isReady) return null;
          return this.player.getDuration();
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          if (!this.isReady) return null;
          return this.player.getCurrentTime();
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          if (!this.isReady) return null;
          return this.player.getSecondsLoaded();
        }
      }, {
        key: "seekTo",
        value: function seekTo(amount, type) {
          var _this3 = this;
          if (!this.isReady) {
            if (amount !== 0) {
              this.seekOnPlay = amount;
              setTimeout(function() {
                _this3.seekOnPlay = null;
              }, SEEK_ON_PLAY_EXPIRY);
            }
            return;
          }
          var isFraction = !type ? amount > 0 && amount < 1 : type === "fraction";
          if (isFraction) {
            var duration = this.player.getDuration();
            if (!duration) {
              console.warn("ReactPlayer: could not seek using fraction – duration not yet available");
              return;
            }
            this.player.seekTo(duration * amount);
            return;
          }
          this.player.seekTo(amount);
        }
      }, {
        key: "render",
        value: function render() {
          var Player3 = this.props.activePlayer;
          if (!Player3) {
            return null;
          }
          return _react["default"].createElement(Player3, _extends2({}, this.props, {
            onMount: this.handlePlayerMount,
            onReady: this.handleReady,
            onPlay: this.handlePlay,
            onPause: this.handlePause,
            onEnded: this.handleEnded,
            onLoaded: this.handleLoaded,
            onError: this.handleError
          }));
        }
      }]);
      return Player2;
    }(_react.Component);
    exports["default"] = Player;
    _defineProperty4(Player, "displayName", "Player");
    _defineProperty4(Player, "propTypes", _props.propTypes);
    _defineProperty4(Player, "defaultProps", _props.defaultProps);
  }
});

// node_modules/react-player/lib/Preview.js
var require_Preview = __commonJS({
  "node_modules/react-player/lib/Preview.js"(exports) {
    "use strict";
    function _typeof2(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof2 = function _typeof3(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof2 = function _typeof3(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof2(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache2 = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache2;
      };
      return cache2;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache2 = _getRequireWildcardCache();
      if (cache2 && cache2.has(obj)) {
        return cache2.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache2) {
        cache2.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys4(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread4(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys4(Object(source), true).forEach(function(key) {
            _defineProperty4(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys4(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _classCallCheck2(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass2(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits2(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper2(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct2();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf2(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf2(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn2(this, result);
      };
    }
    function _possibleConstructorReturn2(self2, call) {
      if (call && (_typeof2(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized2(self2);
    }
    function _assertThisInitialized2(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct2() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf2(o) {
      _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf2(o);
    }
    function _defineProperty4(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var ICON_SIZE = "64px";
    var cache = {};
    var Preview = function(_Component) {
      _inherits2(Preview2, _Component);
      var _super = _createSuper2(Preview2);
      function Preview2() {
        var _this;
        _classCallCheck2(this, Preview2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty4(_assertThisInitialized2(_this), "mounted", false);
        _defineProperty4(_assertThisInitialized2(_this), "state", {
          image: null
        });
        _defineProperty4(_assertThisInitialized2(_this), "handleKeyPress", function(e) {
          if (e.key === "Enter" || e.key === " ") {
            _this.props.onClick();
          }
        });
        return _this;
      }
      _createClass2(Preview2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.mounted = true;
          this.fetchImage(this.props);
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          var _this$props = this.props, url = _this$props.url, light = _this$props.light;
          if (prevProps.url !== url || prevProps.light !== light) {
            this.fetchImage(this.props);
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.mounted = false;
        }
      }, {
        key: "fetchImage",
        value: function fetchImage(_ref) {
          var _this2 = this;
          var url = _ref.url, light = _ref.light, oEmbedUrl = _ref.oEmbedUrl;
          if (typeof light === "string") {
            this.setState({
              image: light
            });
            return;
          }
          if (cache[url]) {
            this.setState({
              image: cache[url]
            });
            return;
          }
          this.setState({
            image: null
          });
          return window.fetch(oEmbedUrl.replace("{url}", url)).then(function(response) {
            return response.json();
          }).then(function(data) {
            if (data.thumbnail_url && _this2.mounted) {
              var image2 = data.thumbnail_url.replace("height=100", "height=480");
              _this2.setState({
                image: image2
              });
              cache[url] = image2;
            }
          });
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props2 = this.props, onClick = _this$props2.onClick, playIcon = _this$props2.playIcon, previewTabIndex = _this$props2.previewTabIndex;
          var image2 = this.state.image;
          var flexCenter = {
            display: "flex",
            alignItems: "center",
            justifyContent: "center"
          };
          var styles = {
            preview: _objectSpread4({
              width: "100%",
              height: "100%",
              backgroundImage: image2 ? "url(".concat(image2, ")") : void 0,
              backgroundSize: "cover",
              backgroundPosition: "center",
              cursor: "pointer"
            }, flexCenter),
            shadow: _objectSpread4({
              background: "radial-gradient(rgb(0, 0, 0, 0.3), rgba(0, 0, 0, 0) 60%)",
              borderRadius: ICON_SIZE,
              width: ICON_SIZE,
              height: ICON_SIZE
            }, flexCenter),
            playIcon: {
              borderStyle: "solid",
              borderWidth: "16px 0 16px 26px",
              borderColor: "transparent transparent transparent white",
              marginLeft: "7px"
            }
          };
          var defaultPlayIcon = _react["default"].createElement("div", {
            style: styles.shadow,
            className: "react-player__shadow"
          }, _react["default"].createElement("div", {
            style: styles.playIcon,
            className: "react-player__play-icon"
          }));
          return _react["default"].createElement("div", {
            style: styles.preview,
            className: "react-player__preview",
            onClick,
            tabIndex: previewTabIndex,
            onKeyPress: this.handleKeyPress
          }, playIcon || defaultPlayIcon);
        }
      }]);
      return Preview2;
    }(_react.Component);
    exports["default"] = Preview;
  }
});

// node_modules/react-player/lib/ReactPlayer.js
var require_ReactPlayer = __commonJS({
  "node_modules/react-player/lib/ReactPlayer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.createReactPlayer = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _deepmerge = _interopRequireDefault(require_cjs());
    var _memoizeOne = _interopRequireDefault((init_memoize_one_esm(), __toCommonJS(memoize_one_esm_exports)));
    var _reactFastCompare = _interopRequireDefault(require_react_fast_compare());
    var _props = require_props();
    var _utils = require_utils();
    var _Player3 = _interopRequireDefault(require_Player());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _typeof2(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof2 = function _typeof3(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof2 = function _typeof3(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof2(obj);
    }
    function ownKeys4(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread4(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys4(Object(source), true).forEach(function(key) {
            _defineProperty4(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys4(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _extends2() {
      _extends2 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    function _toConsumableArray3(arr) {
      return _arrayWithoutHoles3(arr) || _iterableToArray4(arr) || _unsupportedIterableToArray4(arr) || _nonIterableSpread3();
    }
    function _nonIterableSpread3() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray4(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray3(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray3(o, minLen);
    }
    function _iterableToArray4(iter) {
      if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
    }
    function _arrayWithoutHoles3(arr) {
      if (Array.isArray(arr)) return _arrayLikeToArray3(arr);
    }
    function _arrayLikeToArray3(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function _classCallCheck2(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass2(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits2(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper2(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct2();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf2(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf2(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn2(this, result);
      };
    }
    function _possibleConstructorReturn2(self2, call) {
      if (call && (_typeof2(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized2(self2);
    }
    function _assertThisInitialized2(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct2() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf2(o) {
      _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf2(o);
    }
    function _defineProperty4(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function") return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var Preview = (0, _react.lazy)(function() {
      return Promise.resolve().then(function() {
        return _interopRequireWildcard(require_Preview());
      });
    });
    var IS_BROWSER = typeof window !== "undefined" && window.document;
    var IS_GLOBAL = typeof global !== "undefined" && global.window && global.window.document;
    var SUPPORTED_PROPS = Object.keys(_props.propTypes);
    var UniversalSuspense = IS_BROWSER || IS_GLOBAL ? _react.Suspense : function() {
      return null;
    };
    var customPlayers = [];
    var createReactPlayer = function createReactPlayer2(players, fallback) {
      var _class, _temp;
      return _temp = _class = function(_Component) {
        _inherits2(ReactPlayer3, _Component);
        var _super = _createSuper2(ReactPlayer3);
        function ReactPlayer3() {
          var _this;
          _classCallCheck2(this, ReactPlayer3);
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _super.call.apply(_super, [this].concat(args));
          _defineProperty4(_assertThisInitialized2(_this), "state", {
            showPreview: !!_this.props.light
          });
          _defineProperty4(_assertThisInitialized2(_this), "references", {
            wrapper: function wrapper(_wrapper) {
              _this.wrapper = _wrapper;
            },
            player: function player(_player) {
              _this.player = _player;
            }
          });
          _defineProperty4(_assertThisInitialized2(_this), "handleClickPreview", function(e) {
            _this.setState({
              showPreview: false
            });
            _this.props.onClickPreview(e);
          });
          _defineProperty4(_assertThisInitialized2(_this), "showPreview", function() {
            _this.setState({
              showPreview: true
            });
          });
          _defineProperty4(_assertThisInitialized2(_this), "getDuration", function() {
            if (!_this.player) return null;
            return _this.player.getDuration();
          });
          _defineProperty4(_assertThisInitialized2(_this), "getCurrentTime", function() {
            if (!_this.player) return null;
            return _this.player.getCurrentTime();
          });
          _defineProperty4(_assertThisInitialized2(_this), "getSecondsLoaded", function() {
            if (!_this.player) return null;
            return _this.player.getSecondsLoaded();
          });
          _defineProperty4(_assertThisInitialized2(_this), "getInternalPlayer", function() {
            var key = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "player";
            if (!_this.player) return null;
            return _this.player.getInternalPlayer(key);
          });
          _defineProperty4(_assertThisInitialized2(_this), "seekTo", function(fraction, type) {
            if (!_this.player) return null;
            _this.player.seekTo(fraction, type);
          });
          _defineProperty4(_assertThisInitialized2(_this), "handleReady", function() {
            _this.props.onReady(_assertThisInitialized2(_this));
          });
          _defineProperty4(_assertThisInitialized2(_this), "getActivePlayer", (0, _memoizeOne["default"])(function(url) {
            for (var _i = 0, _arr = [].concat(customPlayers, _toConsumableArray3(players)); _i < _arr.length; _i++) {
              var player = _arr[_i];
              if (player.canPlay(url)) {
                return player;
              }
            }
            if (fallback) {
              return fallback;
            }
            return null;
          }));
          _defineProperty4(_assertThisInitialized2(_this), "getConfig", (0, _memoizeOne["default"])(function(url, key) {
            var config = _this.props.config;
            return _deepmerge["default"].all([_props.defaultProps.config, _props.defaultProps.config[key] || {}, config, config[key] || {}]);
          }));
          _defineProperty4(_assertThisInitialized2(_this), "getAttributes", (0, _memoizeOne["default"])(function(url) {
            return (0, _utils.omit)(_this.props, SUPPORTED_PROPS);
          }));
          _defineProperty4(_assertThisInitialized2(_this), "renderActivePlayer", function(url) {
            if (!url) return null;
            var player = _this.getActivePlayer(url);
            if (!player) return null;
            var config = _this.getConfig(url, player.key);
            return _react["default"].createElement(_Player3["default"], _extends2({}, _this.props, {
              key: player.key,
              ref: _this.references.player,
              config,
              activePlayer: player.lazyPlayer || player,
              onReady: _this.handleReady
            }));
          });
          return _this;
        }
        _createClass2(ReactPlayer3, [{
          key: "shouldComponentUpdate",
          value: function shouldComponentUpdate(nextProps, nextState) {
            return !(0, _reactFastCompare["default"])(this.props, nextProps) || !(0, _reactFastCompare["default"])(this.state, nextState);
          }
        }, {
          key: "componentDidUpdate",
          value: function componentDidUpdate(prevProps) {
            var light = this.props.light;
            if (!prevProps.light && light) {
              this.setState({
                showPreview: true
              });
            }
            if (prevProps.light && !light) {
              this.setState({
                showPreview: false
              });
            }
          }
        }, {
          key: "renderPreview",
          value: function renderPreview(url) {
            if (!url) return null;
            var _this$props = this.props, light = _this$props.light, playIcon = _this$props.playIcon, previewTabIndex = _this$props.previewTabIndex, oEmbedUrl = _this$props.oEmbedUrl;
            return _react["default"].createElement(Preview, {
              url,
              light,
              playIcon,
              previewTabIndex,
              oEmbedUrl,
              onClick: this.handleClickPreview
            });
          }
        }, {
          key: "render",
          value: function render() {
            var _this$props2 = this.props, url = _this$props2.url, style = _this$props2.style, width = _this$props2.width, height = _this$props2.height, fallback2 = _this$props2.fallback, Wrapper = _this$props2.wrapper;
            var showPreview = this.state.showPreview;
            var attributes = this.getAttributes(url);
            return _react["default"].createElement(Wrapper, _extends2({
              ref: this.references.wrapper,
              style: _objectSpread4(_objectSpread4({}, style), {}, {
                width,
                height
              })
            }, attributes), _react["default"].createElement(UniversalSuspense, {
              fallback: fallback2
            }, showPreview ? this.renderPreview(url) : this.renderActivePlayer(url)));
          }
        }]);
        return ReactPlayer3;
      }(_react.Component), _defineProperty4(_class, "displayName", "ReactPlayer"), _defineProperty4(_class, "propTypes", _props.propTypes), _defineProperty4(_class, "defaultProps", _props.defaultProps), _defineProperty4(_class, "addCustomPlayer", function(player) {
        customPlayers.push(player);
      }), _defineProperty4(_class, "removeCustomPlayers", function() {
        customPlayers.length = 0;
      }), _defineProperty4(_class, "canPlay", function(url) {
        for (var _i2 = 0, _arr2 = [].concat(customPlayers, _toConsumableArray3(players)); _i2 < _arr2.length; _i2++) {
          var _Player = _arr2[_i2];
          if (_Player.canPlay(url)) {
            return true;
          }
        }
        return false;
      }), _defineProperty4(_class, "canEnablePIP", function(url) {
        for (var _i3 = 0, _arr3 = [].concat(customPlayers, _toConsumableArray3(players)); _i3 < _arr3.length; _i3++) {
          var _Player2 = _arr3[_i3];
          if (_Player2.canEnablePIP && _Player2.canEnablePIP(url)) {
            return true;
          }
        }
        return false;
      }), _temp;
    };
    exports.createReactPlayer = createReactPlayer;
  }
});

// node_modules/react-player/lib/index.js
var require_lib = __commonJS({
  "node_modules/react-player/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _players = _interopRequireDefault(require_players());
    var _ReactPlayer = require_ReactPlayer();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var fallback = _players["default"][_players["default"].length - 1];
    var _default = (0, _ReactPlayer.createReactPlayer)(_players["default"], fallback);
    exports["default"] = _default;
  }
});

// node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js
var require_use_sync_external_store_shim_development = __commonJS({
  "node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js"(exports) {
    "use strict";
    (function() {
      function is(x, y) {
        return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
      }
      function useSyncExternalStore$2(subscribe, getSnapshot) {
        didWarnOld18Alpha || void 0 === React212.startTransition || (didWarnOld18Alpha = true, console.error(
          "You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release."
        ));
        var value = getSnapshot();
        if (!didWarnUncachedGetSnapshot) {
          var cachedValue = getSnapshot();
          objectIs(value, cachedValue) || (console.error(
            "The result of getSnapshot should be cached to avoid an infinite loop"
          ), didWarnUncachedGetSnapshot = true);
        }
        cachedValue = useState70({
          inst: { value, getSnapshot }
        });
        var inst = cachedValue[0].inst, forceUpdate = cachedValue[1];
        useLayoutEffect10(
          function() {
            inst.value = value;
            inst.getSnapshot = getSnapshot;
            checkIfSnapshotChanged(inst) && forceUpdate({ inst });
          },
          [subscribe, value, getSnapshot]
        );
        useEffect80(
          function() {
            checkIfSnapshotChanged(inst) && forceUpdate({ inst });
            return subscribe(function() {
              checkIfSnapshotChanged(inst) && forceUpdate({ inst });
            });
          },
          [subscribe]
        );
        useDebugValue(value);
        return value;
      }
      function checkIfSnapshotChanged(inst) {
        var latestGetSnapshot = inst.getSnapshot;
        inst = inst.value;
        try {
          var nextValue = latestGetSnapshot();
          return !objectIs(inst, nextValue);
        } catch (error2) {
          return true;
        }
      }
      function useSyncExternalStore$1(subscribe, getSnapshot) {
        return getSnapshot();
      }
      "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
      var React212 = require_react(), objectIs = "function" === typeof Object.is ? Object.is : is, useState70 = React212.useState, useEffect80 = React212.useEffect, useLayoutEffect10 = React212.useLayoutEffect, useDebugValue = React212.useDebugValue, didWarnOld18Alpha = false, didWarnUncachedGetSnapshot = false, shim = "undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement ? useSyncExternalStore$1 : useSyncExternalStore$2;
      exports.useSyncExternalStore = void 0 !== React212.useSyncExternalStore ? React212.useSyncExternalStore : shim;
      "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
    })();
  }
});

// node_modules/use-sync-external-store/shim/index.js
var require_shim = __commonJS({
  "node_modules/use-sync-external-store/shim/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_use_sync_external_store_shim_development();
    }
  }
});

// node_modules/dayjs/plugin/calendar.js
var require_calendar = __commonJS({
  "node_modules/dayjs/plugin/calendar.js"(exports, module) {
    !function(e, t2) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = t2() : "function" == typeof define && define.amd ? define(t2) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_plugin_calendar = t2();
    }(exports, function() {
      "use strict";
      return function(e, t2, a) {
        var n = "h:mm A", d = { lastDay: "[Yesterday at] " + n, sameDay: "[Today at] " + n, nextDay: "[Tomorrow at] " + n, nextWeek: "dddd [at] " + n, lastWeek: "[Last] dddd [at] " + n, sameElse: "MM/DD/YYYY" };
        t2.prototype.calendar = function(e2, t3) {
          var n2 = t3 || this.$locale().calendar || d, o = a(e2 || void 0).startOf("d"), s = this.diff(o, "d", true), i = "sameElse", f = s < -6 ? i : s < -1 ? "lastWeek" : s < 0 ? "lastDay" : s < 1 ? "sameDay" : s < 2 ? "nextDay" : s < 7 ? "nextWeek" : i, l = n2[f] || d[f];
          return "function" == typeof l ? l.call(this, a()) : this.format(l);
        };
      };
    });
  }
});

// node_modules/dayjs/plugin/localizedFormat.js
var require_localizedFormat = __commonJS({
  "node_modules/dayjs/plugin/localizedFormat.js"(exports, module) {
    !function(e, t2) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = t2() : "function" == typeof define && define.amd ? define(t2) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_plugin_localizedFormat = t2();
    }(exports, function() {
      "use strict";
      var e = { LTS: "h:mm:ss A", LT: "h:mm A", L: "MM/DD/YYYY", LL: "MMMM D, YYYY", LLL: "MMMM D, YYYY h:mm A", LLLL: "dddd, MMMM D, YYYY h:mm A" };
      return function(t2, o, n) {
        var r = o.prototype, i = r.format;
        n.en.formats = e, r.format = function(t3) {
          void 0 === t3 && (t3 = "YYYY-MM-DDTHH:mm:ssZ");
          var o2 = this.$locale().formats, n2 = function(t4, o3) {
            return t4.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g, function(t5, n3, r2) {
              var i2 = r2 && r2.toUpperCase();
              return n3 || o3[r2] || e[r2] || o3[i2].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function(e2, t6, o4) {
                return t6 || o4.slice(1);
              });
            });
          }(t3, void 0 === o2 ? {} : o2);
          return i.call(this, n2);
        };
      };
    });
  }
});

// node_modules/lodash.throttle/index.js
var require_lodash = __commonJS({
  "node_modules/lodash.throttle/index.js"(exports, module) {
    var FUNC_ERROR_TEXT = "Expected a function";
    var NAN = 0 / 0;
    var symbolTag = "[object Symbol]";
    var reTrim = /^\s+|\s+$/g;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root2 = freeGlobal || freeSelf || Function("return this")();
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    var nativeMax = Math.max;
    var nativeMin = Math.min;
    var now = function() {
      return root2.Date.now();
    };
    function debounce7(func, wait, options2) {
      var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject2(options2)) {
        leading = !!options2.leading;
        maxing = "maxWait" in options2;
        maxWait = maxing ? nativeMax(toNumber(options2.maxWait) || 0, wait) : maxWait;
        trailing = "trailing" in options2 ? !!options2.trailing : trailing;
      }
      function invokeFunc(time) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = void 0;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }
      function leadingEdge(time) {
        lastInvokeTime = time;
        timerId = setTimeout(timerExpired, wait);
        return leading ? invokeFunc(time) : result;
      }
      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, result2 = wait - timeSinceLastCall;
        return maxing ? nativeMin(result2, maxWait - timeSinceLastInvoke) : result2;
      }
      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }
      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        timerId = setTimeout(timerExpired, remainingWait(time));
      }
      function trailingEdge(time) {
        timerId = void 0;
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = void 0;
        return result;
      }
      function cancel() {
        if (timerId !== void 0) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = void 0;
      }
      function flush() {
        return timerId === void 0 ? result : trailingEdge(now());
      }
      function debounced() {
        var time = now(), isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
          if (timerId === void 0) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === void 0) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }
    function throttle8(func, wait, options2) {
      var leading = true, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject2(options2)) {
        leading = "leading" in options2 ? !!options2.leading : leading;
        trailing = "trailing" in options2 ? !!options2.trailing : trailing;
      }
      return debounce7(func, wait, {
        "leading": leading,
        "maxWait": wait,
        "trailing": trailing
      });
    }
    function isObject2(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject2(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject2(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, "");
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    module.exports = throttle8;
  }
});

// node_modules/attr-accept/dist/es/index.js
var require_es = __commonJS({
  "node_modules/attr-accept/dist/es/index.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.default = function(file, acceptedFiles) {
      if (file && acceptedFiles) {
        var acceptedFilesArray = Array.isArray(acceptedFiles) ? acceptedFiles : acceptedFiles.split(",");
        if (acceptedFilesArray.length === 0) {
          return true;
        }
        var fileName = file.name || "";
        var mimeType = (file.type || "").toLowerCase();
        var baseMimeType = mimeType.replace(/\/.*$/, "");
        return acceptedFilesArray.some(function(type) {
          var validType = type.trim().toLowerCase();
          if (validType.charAt(0) === ".") {
            return fileName.toLowerCase().endsWith(validType);
          } else if (validType.endsWith("/*")) {
            return baseMimeType === validType.replace(/\/.*$/, "");
          }
          return mimeType === validType;
        });
      }
      return true;
    };
  }
});

// node_modules/react-image-gallery/build/image-gallery.js
var require_image_gallery = __commonJS({
  "node_modules/react-image-gallery/build/image-gallery.js"(exports, module) {
    !function(e, t2) {
      "object" == typeof exports && "object" == typeof module ? module.exports = t2(require_react()) : "function" == typeof define && define.amd ? define(["react"], t2) : "object" == typeof exports ? exports.ImageGallery = t2(require_react()) : e.ImageGallery = t2(e.React);
    }(exports, function(e) {
      return (() => {
        var t2 = { 703: (e2, t3, n2) => {
          "use strict";
          var i2 = n2(414);
          function r2() {
          }
          function a() {
          }
          a.resetWarningCache = r2, e2.exports = function() {
            function e3(e4, t5, n4, r3, a2, s) {
              if (s !== i2) {
                var o = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");
                throw o.name = "Invariant Violation", o;
              }
            }
            function t4() {
              return e3;
            }
            e3.isRequired = e3;
            var n3 = { array: e3, bool: e3, func: e3, number: e3, object: e3, string: e3, symbol: e3, any: e3, arrayOf: t4, element: e3, elementType: e3, instanceOf: t4, node: e3, objectOf: t4, oneOf: t4, oneOfType: t4, shape: t4, exact: t4, checkPropTypes: a, resetWarningCache: r2 };
            return n3.PropTypes = n3, n3;
          };
        }, 697: (e2, t3, n2) => {
          e2.exports = n2(703)();
        }, 414: (e2) => {
          "use strict";
          e2.exports = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
        }, 590: (e2) => {
          var t3 = "undefined" != typeof Element, n2 = "function" == typeof Map, i2 = "function" == typeof Set, r2 = "function" == typeof ArrayBuffer && !!ArrayBuffer.isView;
          function a(e3, s) {
            if (e3 === s) return true;
            if (e3 && s && "object" == typeof e3 && "object" == typeof s) {
              if (e3.constructor !== s.constructor) return false;
              var o, l, u2, c;
              if (Array.isArray(e3)) {
                if ((o = e3.length) != s.length) return false;
                for (l = o; 0 != l--; ) if (!a(e3[l], s[l])) return false;
                return true;
              }
              if (n2 && e3 instanceof Map && s instanceof Map) {
                if (e3.size !== s.size) return false;
                for (c = e3.entries(); !(l = c.next()).done; ) if (!s.has(l.value[0])) return false;
                for (c = e3.entries(); !(l = c.next()).done; ) if (!a(l.value[1], s.get(l.value[0]))) return false;
                return true;
              }
              if (i2 && e3 instanceof Set && s instanceof Set) {
                if (e3.size !== s.size) return false;
                for (c = e3.entries(); !(l = c.next()).done; ) if (!s.has(l.value[0])) return false;
                return true;
              }
              if (r2 && ArrayBuffer.isView(e3) && ArrayBuffer.isView(s)) {
                if ((o = e3.length) != s.length) return false;
                for (l = o; 0 != l--; ) if (e3[l] !== s[l]) return false;
                return true;
              }
              if (e3.constructor === RegExp) return e3.source === s.source && e3.flags === s.flags;
              if (e3.valueOf !== Object.prototype.valueOf) return e3.valueOf() === s.valueOf();
              if (e3.toString !== Object.prototype.toString) return e3.toString() === s.toString();
              if ((o = (u2 = Object.keys(e3)).length) !== Object.keys(s).length) return false;
              for (l = o; 0 != l--; ) if (!Object.prototype.hasOwnProperty.call(s, u2[l])) return false;
              if (t3 && e3 instanceof Element) return false;
              for (l = o; 0 != l--; ) if (("_owner" !== u2[l] && "__v" !== u2[l] && "__o" !== u2[l] || !e3.$$typeof) && !a(e3[u2[l]], s[u2[l]])) return false;
              return true;
            }
            return e3 != e3 && s != s;
          }
          e2.exports = function(e3, t4) {
            try {
              return a(e3, t4);
            } catch (e4) {
              if ((e4.message || "").match(/stack|recursion/i)) return console.warn("react-fast-compare cannot handle circular refs"), false;
              throw e4;
            }
          };
        }, 37: function(e2, t3, n2) {
          !function(e3, t4) {
            function n3() {
              return n3 = Object.assign || function(e4) {
                for (var t5 = 1; t5 < arguments.length; t5++) {
                  var n4 = arguments[t5];
                  for (var i3 in n4) Object.prototype.hasOwnProperty.call(n4, i3) && (e4[i3] = n4[i3]);
                }
                return e4;
              }, n3.apply(this, arguments);
            }
            var i2 = "Left", r2 = "Right", a = "Down", s = { delta: 10, preventDefaultTouchmoveEvent: false, rotationAngle: 0, trackMouse: false, trackTouch: true }, o = { first: true, initial: [0, 0], start: 0, swiping: false, xy: [0, 0] }, l = "mousemove", u2 = "mouseup";
            function c(e4, t5) {
              if (0 === t5) return e4;
              var n4 = Math.PI / 180 * t5;
              return [e4[0] * Math.cos(n4) + e4[1] * Math.sin(n4), e4[1] * Math.cos(n4) - e4[0] * Math.sin(n4)];
            }
            function h(e4, t5) {
              var s2 = function(t6) {
                t6 && "touches" in t6 && t6.touches.length > 1 || e4(function(e5, i3) {
                  i3.trackMouse && (document.addEventListener(l, h2), document.addEventListener(u2, f));
                  var r3 = "touches" in t6 ? t6.touches[0] : t6, a2 = c([r3.clientX, r3.clientY], i3.rotationAngle);
                  return n3({}, e5, o, { initial: [].concat(a2), xy: a2, start: t6.timeStamp || 0 });
                });
              }, h2 = function(t6) {
                e4(function(e5, s3) {
                  if ("touches" in t6 && t6.touches.length > 1) return e5;
                  var o2 = "touches" in t6 ? t6.touches[0] : t6, l2 = c([o2.clientX, o2.clientY], s3.rotationAngle), u3 = l2[0], h3 = l2[1], d2 = u3 - e5.xy[0], f2 = h3 - e5.xy[1], p2 = Math.abs(d2), m2 = Math.abs(f2), g = (t6.timeStamp || 0) - e5.start, v = Math.sqrt(p2 * p2 + m2 * m2) / (g || 1), b = [d2 / (g || 1), f2 / (g || 1)];
                  if (p2 < s3.delta && m2 < s3.delta && !e5.swiping) return e5;
                  var y = function(e6, t7, n4, s4) {
                    return e6 > t7 ? n4 > 0 ? r2 : i2 : s4 > 0 ? a : "Up";
                  }(p2, m2, d2, f2), w = { absX: p2, absY: m2, deltaX: d2, deltaY: f2, dir: y, event: t6, first: e5.first, initial: e5.initial, velocity: v, vxvy: b };
                  s3.onSwiping && s3.onSwiping(w);
                  var T = false;
                  return (s3.onSwiping || s3.onSwiped || "onSwiped" + y in s3) && (T = true), T && s3.preventDefaultTouchmoveEvent && s3.trackTouch && t6.cancelable && t6.preventDefault(), n3({}, e5, { first: false, eventData: w, swiping: true });
                });
              }, d = function(t6) {
                e4(function(e5, i3) {
                  var r3;
                  if (e5.swiping && e5.eventData) {
                    r3 = n3({}, e5.eventData, { event: t6 }), i3.onSwiped && i3.onSwiped(r3);
                    var a2 = "onSwiped" + r3.dir;
                    a2 in i3 && i3[a2](r3);
                  } else i3.onTap && i3.onTap({ event: t6 });
                  return n3({}, e5, o, { eventData: r3 });
                });
              }, f = function(e5) {
                document.removeEventListener(l, h2), document.removeEventListener(u2, f), d(e5);
              }, p = function(e5, t6) {
                var n4 = function() {
                };
                if (e5 && e5.addEventListener) {
                  var i3 = [["touchstart", s2], ["touchmove", h2], ["touchend", d]];
                  i3.forEach(function(n5) {
                    var i4 = n5[0], r3 = n5[1];
                    return e5.addEventListener(i4, r3, { passive: t6 });
                  }), n4 = function() {
                    return i3.forEach(function(t7) {
                      var n5 = t7[0], i4 = t7[1];
                      return e5.removeEventListener(n5, i4);
                    });
                  };
                }
                return n4;
              }, m = { ref: function(t6) {
                null !== t6 && e4(function(e5, i3) {
                  if (e5.el === t6) return e5;
                  var r3 = {};
                  return e5.el && e5.el !== t6 && e5.cleanUpTouch && (e5.cleanUpTouch(), r3.cleanUpTouch = void 0), i3.trackTouch && t6 && (r3.cleanUpTouch = p(t6, !i3.preventDefaultTouchmoveEvent)), n3({}, e5, { el: t6 }, r3);
                });
              } };
              return t5.trackMouse && (m.onMouseDown = s2), [m, p];
            }
            e3.DOWN = a, e3.LEFT = i2, e3.RIGHT = r2, e3.UP = "Up", e3.useSwipeable = function(e4) {
              var i3 = e4.trackMouse, r3 = t4.useRef(n3({}, o)), a2 = t4.useRef(n3({}, s));
              a2.current = n3({}, s, e4);
              var l2 = t4.useMemo(function() {
                return h(function(e5) {
                  return r3.current = e5(r3.current, a2.current);
                }, { trackMouse: i3 });
              }, [i3]), u3 = l2[0], c2 = l2[1];
              return r3.current = function(e5, t5, i4) {
                var r4 = {};
                return !t5.trackTouch && e5.cleanUpTouch ? (e5.cleanUpTouch(), r4.cleanUpTouch = void 0) : t5.trackTouch && !e5.cleanUpTouch && e5.el && (r4.cleanUpTouch = i4(e5.el, !t5.preventDefaultTouchmoveEvent)), n3({}, e5, r4);
              }(r3.current, a2.current, c2), u3;
            };
          }(t3, n2(888));
        }, 888: (t3) => {
          "use strict";
          t3.exports = e;
        } }, n = {};
        function i(e2) {
          var r2 = n[e2];
          if (void 0 !== r2) return r2.exports;
          var a = n[e2] = { exports: {} };
          return t2[e2].call(a.exports, a, a.exports, i), a.exports;
        }
        i.n = (e2) => {
          var t3 = e2 && e2.__esModule ? () => e2.default : () => e2;
          return i.d(t3, { a: t3 }), t3;
        }, i.d = (e2, t3) => {
          for (var n2 in t3) i.o(t3, n2) && !i.o(e2, n2) && Object.defineProperty(e2, n2, { enumerable: true, get: t3[n2] });
        }, i.g = function() {
          if ("object" == typeof globalThis) return globalThis;
          try {
            return this || new Function("return this")();
          } catch (e2) {
            if ("object" == typeof window) return window;
          }
        }(), i.o = (e2, t3) => Object.prototype.hasOwnProperty.call(e2, t3), i.r = (e2) => {
          "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
        };
        var r = {};
        return (() => {
          "use strict";
          function e2(t4) {
            var n3, i2, r2 = "";
            if ("string" == typeof t4 || "number" == typeof t4) r2 += t4;
            else if ("object" == typeof t4) if (Array.isArray(t4)) for (n3 = 0; n3 < t4.length; n3++) t4[n3] && (i2 = e2(t4[n3])) && (r2 && (r2 += " "), r2 += i2);
            else for (n3 in t4) t4[n3] && (r2 && (r2 += " "), r2 += n3);
            return r2;
          }
          function t3() {
            for (var t4, n3, i2 = 0, r2 = ""; i2 < arguments.length; ) (t4 = arguments[i2++]) && (n3 = e2(t4)) && (r2 && (r2 += " "), r2 += n3);
            return r2;
          }
          i.r(r), i.d(r, { default: () => Pe });
          var n2 = i(888), a = i.n(n2);
          const s = function(e3) {
            var t4 = typeof e3;
            return null != e3 && ("object" == t4 || "function" == t4);
          }, o = "object" == typeof global && global && global.Object === Object && global;
          var l = "object" == typeof self && self && self.Object === Object && self;
          const u2 = o || l || Function("return this")(), c = function() {
            return u2.Date.now();
          };
          var h = /\s/;
          var d = /^\s+/;
          const f = function(e3) {
            return e3 ? e3.slice(0, function(e4) {
              for (var t4 = e4.length; t4-- && h.test(e4.charAt(t4)); ) ;
              return t4;
            }(e3) + 1).replace(d, "") : e3;
          }, p = u2.Symbol;
          var m = Object.prototype, g = m.hasOwnProperty, v = m.toString, b = p ? p.toStringTag : void 0;
          var y = Object.prototype.toString;
          var w = p ? p.toStringTag : void 0;
          const T = function(e3) {
            return null == e3 ? void 0 === e3 ? "[object Undefined]" : "[object Null]" : w && w in Object(e3) ? function(e4) {
              var t4 = g.call(e4, b), n3 = e4[b];
              try {
                e4[b] = void 0;
                var i2 = true;
              } catch (e5) {
              }
              var r2 = v.call(e4);
              return i2 && (t4 ? e4[b] = n3 : delete e4[b]), r2;
            }(e3) : function(e4) {
              return y.call(e4);
            }(e3);
          };
          var S = /^[-+]0x[0-9a-f]+$/i, O = /^0b[01]+$/i, E = /^0o[0-7]+$/i, k = parseInt;
          const I = function(e3) {
            if ("number" == typeof e3) return e3;
            if (function(e4) {
              return "symbol" == typeof e4 || function(e5) {
                return null != e5 && "object" == typeof e5;
              }(e4) && "[object Symbol]" == T(e4);
            }(e3)) return NaN;
            if (s(e3)) {
              var t4 = "function" == typeof e3.valueOf ? e3.valueOf() : e3;
              e3 = s(t4) ? t4 + "" : t4;
            }
            if ("string" != typeof e3) return 0 === e3 ? e3 : +e3;
            e3 = f(e3);
            var n3 = O.test(e3);
            return n3 || E.test(e3) ? k(e3.slice(2), n3 ? 2 : 8) : S.test(e3) ? NaN : +e3;
          };
          var x = Math.max, _23 = Math.min;
          const R = function(e3, t4, n3) {
            var i2, r2, a2, o2, l2, u3, h2 = 0, d2 = false, f2 = false, p2 = true;
            if ("function" != typeof e3) throw new TypeError("Expected a function");
            function m2(t5) {
              var n4 = i2, a3 = r2;
              return i2 = r2 = void 0, h2 = t5, o2 = e3.apply(a3, n4);
            }
            function g2(e4) {
              return h2 = e4, l2 = setTimeout(b2, t4), d2 ? m2(e4) : o2;
            }
            function v2(e4) {
              var n4 = e4 - u3;
              return void 0 === u3 || n4 >= t4 || n4 < 0 || f2 && e4 - h2 >= a2;
            }
            function b2() {
              var e4 = c();
              if (v2(e4)) return y2(e4);
              l2 = setTimeout(b2, function(e5) {
                var n4 = t4 - (e5 - u3);
                return f2 ? _23(n4, a2 - (e5 - h2)) : n4;
              }(e4));
            }
            function y2(e4) {
              return l2 = void 0, p2 && i2 ? m2(e4) : (i2 = r2 = void 0, o2);
            }
            function w2() {
              var e4 = c(), n4 = v2(e4);
              if (i2 = arguments, r2 = this, u3 = e4, n4) {
                if (void 0 === l2) return g2(u3);
                if (f2) return clearTimeout(l2), l2 = setTimeout(b2, t4), m2(u3);
              }
              return void 0 === l2 && (l2 = setTimeout(b2, t4)), o2;
            }
            return t4 = I(t4) || 0, s(n3) && (d2 = !!n3.leading, a2 = (f2 = "maxWait" in n3) ? x(I(n3.maxWait) || 0, t4) : a2, p2 = "trailing" in n3 ? !!n3.trailing : p2), w2.cancel = function() {
              void 0 !== l2 && clearTimeout(l2), h2 = 0, i2 = u3 = r2 = l2 = void 0;
            }, w2.flush = function() {
              return void 0 === l2 ? o2 : y2(c());
            }, w2;
          }, L = function(e3, t4, n3) {
            var i2 = true, r2 = true;
            if ("function" != typeof e3) throw new TypeError("Expected a function");
            return s(n3) && (i2 = "leading" in n3 ? !!n3.leading : i2, r2 = "trailing" in n3 ? !!n3.trailing : r2), R(e3, t4, { leading: i2, maxWait: t4, trailing: r2 });
          };
          var P = i(590), M = i.n(P), W = function() {
            if ("undefined" != typeof Map) return Map;
            function e3(e4, t4) {
              var n3 = -1;
              return e4.some(function(e5, i2) {
                return e5[0] === t4 && (n3 = i2, true);
              }), n3;
            }
            return function() {
              function t4() {
                this.__entries__ = [];
              }
              return Object.defineProperty(t4.prototype, "size", { get: function() {
                return this.__entries__.length;
              }, enumerable: true, configurable: true }), t4.prototype.get = function(t5) {
                var n3 = e3(this.__entries__, t5), i2 = this.__entries__[n3];
                return i2 && i2[1];
              }, t4.prototype.set = function(t5, n3) {
                var i2 = e3(this.__entries__, t5);
                ~i2 ? this.__entries__[i2][1] = n3 : this.__entries__.push([t5, n3]);
              }, t4.prototype.delete = function(t5) {
                var n3 = this.__entries__, i2 = e3(n3, t5);
                ~i2 && n3.splice(i2, 1);
              }, t4.prototype.has = function(t5) {
                return !!~e3(this.__entries__, t5);
              }, t4.prototype.clear = function() {
                this.__entries__.splice(0);
              }, t4.prototype.forEach = function(e4, t5) {
                void 0 === t5 && (t5 = null);
                for (var n3 = 0, i2 = this.__entries__; n3 < i2.length; n3++) {
                  var r2 = i2[n3];
                  e4.call(t5, r2[1], r2[0]);
                }
              }, t4;
            }();
          }(), D = "undefined" != typeof window && "undefined" != typeof document && window.document === document, F = void 0 !== i.g && i.g.Math === Math ? i.g : "undefined" != typeof self && self.Math === Math ? self : "undefined" != typeof window && window.Math === Math ? window : Function("return this")(), C = "function" == typeof requestAnimationFrame ? requestAnimationFrame.bind(F) : function(e3) {
            return setTimeout(function() {
              return e3(Date.now());
            }, 1e3 / 60);
          }, N = ["top", "right", "bottom", "left", "width", "height", "size", "weight"], z = "undefined" != typeof MutationObserver, j = function() {
            function e3() {
              this.connected_ = false, this.mutationEventsAdded_ = false, this.mutationsObserver_ = null, this.observers_ = [], this.onTransitionEnd_ = this.onTransitionEnd_.bind(this), this.refresh = /* @__PURE__ */ function(e4, t4) {
                var n3 = false, i2 = false, r2 = 0;
                function a2() {
                  n3 && (n3 = false, e4()), i2 && o2();
                }
                function s2() {
                  C(a2);
                }
                function o2() {
                  var e5 = Date.now();
                  if (n3) {
                    if (e5 - r2 < 2) return;
                    i2 = true;
                  } else n3 = true, i2 = false, setTimeout(s2, 20);
                  r2 = e5;
                }
                return o2;
              }(this.refresh.bind(this));
            }
            return e3.prototype.addObserver = function(e4) {
              ~this.observers_.indexOf(e4) || this.observers_.push(e4), this.connected_ || this.connect_();
            }, e3.prototype.removeObserver = function(e4) {
              var t4 = this.observers_, n3 = t4.indexOf(e4);
              ~n3 && t4.splice(n3, 1), !t4.length && this.connected_ && this.disconnect_();
            }, e3.prototype.refresh = function() {
              this.updateObservers_() && this.refresh();
            }, e3.prototype.updateObservers_ = function() {
              var e4 = this.observers_.filter(function(e5) {
                return e5.gatherActive(), e5.hasActive();
              });
              return e4.forEach(function(e5) {
                return e5.broadcastActive();
              }), e4.length > 0;
            }, e3.prototype.connect_ = function() {
              D && !this.connected_ && (document.addEventListener("transitionend", this.onTransitionEnd_), window.addEventListener("resize", this.refresh), z ? (this.mutationsObserver_ = new MutationObserver(this.refresh), this.mutationsObserver_.observe(document, { attributes: true, childList: true, characterData: true, subtree: true })) : (document.addEventListener("DOMSubtreeModified", this.refresh), this.mutationEventsAdded_ = true), this.connected_ = true);
            }, e3.prototype.disconnect_ = function() {
              D && this.connected_ && (document.removeEventListener("transitionend", this.onTransitionEnd_), window.removeEventListener("resize", this.refresh), this.mutationsObserver_ && this.mutationsObserver_.disconnect(), this.mutationEventsAdded_ && document.removeEventListener("DOMSubtreeModified", this.refresh), this.mutationsObserver_ = null, this.mutationEventsAdded_ = false, this.connected_ = false);
            }, e3.prototype.onTransitionEnd_ = function(e4) {
              var t4 = e4.propertyName, n3 = void 0 === t4 ? "" : t4;
              N.some(function(e5) {
                return !!~n3.indexOf(e5);
              }) && this.refresh();
            }, e3.getInstance = function() {
              return this.instance_ || (this.instance_ = new e3()), this.instance_;
            }, e3.instance_ = null, e3;
          }(), B = function(e3, t4) {
            for (var n3 = 0, i2 = Object.keys(t4); n3 < i2.length; n3++) {
              var r2 = i2[n3];
              Object.defineProperty(e3, r2, { value: t4[r2], enumerable: false, writable: false, configurable: true });
            }
            return e3;
          }, A = function(e3) {
            return e3 && e3.ownerDocument && e3.ownerDocument.defaultView || F;
          }, G = V(0, 0, 0, 0);
          function U(e3) {
            return parseFloat(e3) || 0;
          }
          function H(e3) {
            for (var t4 = [], n3 = 1; n3 < arguments.length; n3++) t4[n3 - 1] = arguments[n3];
            return t4.reduce(function(t5, n4) {
              return t5 + U(e3["border-" + n4 + "-width"]);
            }, 0);
          }
          var q = "undefined" != typeof SVGGraphicsElement ? function(e3) {
            return e3 instanceof A(e3).SVGGraphicsElement;
          } : function(e3) {
            return e3 instanceof A(e3).SVGElement && "function" == typeof e3.getBBox;
          };
          function K(e3) {
            return D ? q(e3) ? function(e4) {
              var t4 = e4.getBBox();
              return V(0, 0, t4.width, t4.height);
            }(e3) : function(e4) {
              var t4 = e4.clientWidth, n3 = e4.clientHeight;
              if (!t4 && !n3) return G;
              var i2 = A(e4).getComputedStyle(e4), r2 = function(e5) {
                for (var t5 = {}, n4 = 0, i3 = ["top", "right", "bottom", "left"]; n4 < i3.length; n4++) {
                  var r3 = i3[n4], a3 = e5["padding-" + r3];
                  t5[r3] = U(a3);
                }
                return t5;
              }(i2), a2 = r2.left + r2.right, s2 = r2.top + r2.bottom, o2 = U(i2.width), l2 = U(i2.height);
              if ("border-box" === i2.boxSizing && (Math.round(o2 + a2) !== t4 && (o2 -= H(i2, "left", "right") + a2), Math.round(l2 + s2) !== n3 && (l2 -= H(i2, "top", "bottom") + s2)), !function(e5) {
                return e5 === A(e5).document.documentElement;
              }(e4)) {
                var u3 = Math.round(o2 + a2) - t4, c2 = Math.round(l2 + s2) - n3;
                1 !== Math.abs(u3) && (o2 -= u3), 1 !== Math.abs(c2) && (l2 -= c2);
              }
              return V(r2.left, r2.top, o2, l2);
            }(e3) : G;
          }
          function V(e3, t4, n3, i2) {
            return { x: e3, y: t4, width: n3, height: i2 };
          }
          var X = function() {
            function e3(e4) {
              this.broadcastWidth = 0, this.broadcastHeight = 0, this.contentRect_ = V(0, 0, 0, 0), this.target = e4;
            }
            return e3.prototype.isActive = function() {
              var e4 = K(this.target);
              return this.contentRect_ = e4, e4.width !== this.broadcastWidth || e4.height !== this.broadcastHeight;
            }, e3.prototype.broadcastRect = function() {
              var e4 = this.contentRect_;
              return this.broadcastWidth = e4.width, this.broadcastHeight = e4.height, e4;
            }, e3;
          }(), Y = function(e3, t4) {
            var n3, i2, r2, a2, s2, o2, l2, u3 = (i2 = (n3 = t4).x, r2 = n3.y, a2 = n3.width, s2 = n3.height, o2 = "undefined" != typeof DOMRectReadOnly ? DOMRectReadOnly : Object, l2 = Object.create(o2.prototype), B(l2, { x: i2, y: r2, width: a2, height: s2, top: r2, right: i2 + a2, bottom: s2 + r2, left: i2 }), l2);
            B(this, { target: e3, contentRect: u3 });
          }, $ = function() {
            function e3(e4, t4, n3) {
              if (this.activeObservations_ = [], this.observations_ = new W(), "function" != typeof e4) throw new TypeError("The callback provided as parameter 1 is not a function.");
              this.callback_ = e4, this.controller_ = t4, this.callbackCtx_ = n3;
            }
            return e3.prototype.observe = function(e4) {
              if (!arguments.length) throw new TypeError("1 argument required, but only 0 present.");
              if ("undefined" != typeof Element && Element instanceof Object) {
                if (!(e4 instanceof A(e4).Element)) throw new TypeError('parameter 1 is not of type "Element".');
                var t4 = this.observations_;
                t4.has(e4) || (t4.set(e4, new X(e4)), this.controller_.addObserver(this), this.controller_.refresh());
              }
            }, e3.prototype.unobserve = function(e4) {
              if (!arguments.length) throw new TypeError("1 argument required, but only 0 present.");
              if ("undefined" != typeof Element && Element instanceof Object) {
                if (!(e4 instanceof A(e4).Element)) throw new TypeError('parameter 1 is not of type "Element".');
                var t4 = this.observations_;
                t4.has(e4) && (t4.delete(e4), t4.size || this.controller_.removeObserver(this));
              }
            }, e3.prototype.disconnect = function() {
              this.clearActive(), this.observations_.clear(), this.controller_.removeObserver(this);
            }, e3.prototype.gatherActive = function() {
              var e4 = this;
              this.clearActive(), this.observations_.forEach(function(t4) {
                t4.isActive() && e4.activeObservations_.push(t4);
              });
            }, e3.prototype.broadcastActive = function() {
              if (this.hasActive()) {
                var e4 = this.callbackCtx_, t4 = this.activeObservations_.map(function(e5) {
                  return new Y(e5.target, e5.broadcastRect());
                });
                this.callback_.call(e4, t4, e4), this.clearActive();
              }
            }, e3.prototype.clearActive = function() {
              this.activeObservations_.splice(0);
            }, e3.prototype.hasActive = function() {
              return this.activeObservations_.length > 0;
            }, e3;
          }(), J = "undefined" != typeof WeakMap ? /* @__PURE__ */ new WeakMap() : new W(), Q = function e3(t4) {
            if (!(this instanceof e3)) throw new TypeError("Cannot call a class as a function.");
            if (!arguments.length) throw new TypeError("1 argument required, but only 0 present.");
            var n3 = j.getInstance(), i2 = new $(t4, n3, this);
            J.set(this, i2);
          };
          ["observe", "unobserve", "disconnect"].forEach(function(e3) {
            Q.prototype[e3] = function() {
              var t4;
              return (t4 = J.get(this))[e3].apply(t4, arguments);
            };
          });
          const Z = void 0 !== F.ResizeObserver ? F.ResizeObserver : Q;
          var ee = i(37), te = i(697), ne = a().memo(function(e3) {
            var t4 = e3.description, n3 = e3.fullscreen, i2 = e3.handleImageLoaded, r2 = e3.isFullscreen, s2 = e3.onImageError, o2 = e3.original, l2 = e3.originalAlt, u3 = e3.originalHeight, c2 = e3.originalWidth, h2 = e3.originalTitle, d2 = e3.sizes, f2 = e3.srcSet, p2 = e3.loading, m2 = r2 && n3 || o2;
            return a().createElement(a().Fragment, null, a().createElement("img", { className: "image-gallery-image", src: m2, alt: l2, srcSet: f2, height: u3, width: c2, sizes: d2, title: h2, onLoad: function(e4) {
              return i2(e4, o2);
            }, onError: s2, loading: p2 }), t4 && a().createElement("span", { className: "image-gallery-description" }, t4));
          });
          ne.displayName = "Item", ne.propTypes = { description: te.string, fullscreen: te.string, handleImageLoaded: te.func.isRequired, isFullscreen: te.bool, onImageError: te.func.isRequired, original: te.string.isRequired, originalAlt: te.string, originalHeight: te.string, originalWidth: te.string, originalTitle: te.string, sizes: te.string, srcSet: te.string, loading: te.string }, ne.defaultProps = { description: "", fullscreen: "", isFullscreen: false, originalAlt: "", originalHeight: "", originalWidth: "", originalTitle: "", sizes: "", srcSet: "", loading: "eager" };
          const ie = ne;
          var re = { left: a().createElement("polyline", { points: "15 18 9 12 15 6" }), right: a().createElement("polyline", { points: "9 18 15 12 9 6" }), maximize: a().createElement("path", { d: "M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3" }), minimize: a().createElement("path", { d: "M8 3v3a2 2 0 0 1-2 2H3m18 0h-3a2 2 0 0 1-2-2V3m0 18v-3a2 2 0 0 1 2-2h3M3 16h3a2 2 0 0 1 2 2v3" }), play: a().createElement("polygon", { points: "5 3 19 12 5 21 5 3" }), pause: a().createElement(a().Fragment, null, a().createElement("rect", { x: "6", y: "4", width: "4", height: "16" }), a().createElement("rect", { x: "14", y: "4", width: "4", height: "16" })) }, ae = function(e3) {
            var t4 = e3.strokeWidth, n3 = e3.viewBox, i2 = e3.icon;
            return a().createElement("svg", { className: "image-gallery-svg", xmlns: "http://www.w3.org/2000/svg", viewBox: n3, fill: "none", stroke: "currentColor", strokeWidth: t4, strokeLinecap: "round", strokeLinejoin: "round" }, re[i2]);
          };
          ae.propTypes = { strokeWidth: te.number, viewBox: te.string, icon: (0, te.oneOf)(["left", "right", "maximize", "minimize", "play", "pause"]).isRequired }, ae.defaultProps = { strokeWidth: 1, viewBox: "0 0 24 24" };
          const se = ae;
          var oe = a().memo(function(e3) {
            var t4 = e3.isFullscreen, n3 = e3.onClick;
            return a().createElement("button", { type: "button", className: "image-gallery-icon image-gallery-fullscreen-button", onClick: n3, "aria-label": "Open Fullscreen" }, a().createElement(se, { strokeWidth: 2, icon: t4 ? "minimize" : "maximize" }));
          });
          oe.displayName = "Fullscreen", oe.propTypes = { isFullscreen: te.bool.isRequired, onClick: te.func.isRequired };
          const le = oe;
          var ue = a().memo(function(e3) {
            var t4 = e3.disabled, n3 = e3.onClick;
            return a().createElement("button", { type: "button", className: "image-gallery-icon image-gallery-left-nav", disabled: t4, onClick: n3, "aria-label": "Previous Slide" }, a().createElement(se, { icon: "left", viewBox: "6 0 12 24" }));
          });
          ue.displayName = "LeftNav", ue.propTypes = { disabled: te.bool.isRequired, onClick: te.func.isRequired };
          const ce = ue;
          var he = a().memo(function(e3) {
            var t4 = e3.disabled, n3 = e3.onClick;
            return a().createElement("button", { type: "button", className: "image-gallery-icon image-gallery-right-nav", disabled: t4, onClick: n3, "aria-label": "Next Slide" }, a().createElement(se, { icon: "right", viewBox: "6 0 12 24" }));
          });
          he.displayName = "RightNav", he.propTypes = { disabled: te.bool.isRequired, onClick: te.func.isRequired };
          const de = he;
          var fe = a().memo(function(e3) {
            var t4 = e3.isPlaying, n3 = e3.onClick;
            return a().createElement("button", { type: "button", className: "image-gallery-icon image-gallery-play-button", onClick: n3, "aria-label": "Play or Pause Slideshow" }, a().createElement(se, { strokeWidth: 2, icon: t4 ? "pause" : "play" }));
          });
          fe.displayName = "PlayPause", fe.propTypes = { isPlaying: te.bool.isRequired, onClick: te.func.isRequired };
          const pe = fe;
          function me() {
            return me = Object.assign || function(e3) {
              for (var t4 = 1; t4 < arguments.length; t4++) {
                var n3 = arguments[t4];
                for (var i2 in n3) Object.prototype.hasOwnProperty.call(n3, i2) && (e3[i2] = n3[i2]);
              }
              return e3;
            }, me.apply(this, arguments);
          }
          var ge = function(e3) {
            var t4 = e3.children, n3 = e3.className, i2 = e3.delta, r2 = e3.onSwiping, s2 = e3.onSwiped, o2 = (0, ee.useSwipeable)({ delta: i2, onSwiping: r2, onSwiped: s2 });
            return a().createElement("div", me({}, o2, { className: n3 }), t4);
          };
          ge.propTypes = { children: te.node.isRequired, className: te.string, delta: te.number, onSwiped: te.func, onSwiping: te.func }, ge.defaultProps = { className: "", delta: 0, onSwiping: function() {
          }, onSwiped: function() {
          } };
          const ve = ge;
          function be(e3) {
            return be = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
              return typeof e4;
            } : function(e4) {
              return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
            }, be(e3);
          }
          function ye(e3, t4) {
            var n3 = Object.keys(e3);
            if (Object.getOwnPropertySymbols) {
              var i2 = Object.getOwnPropertySymbols(e3);
              t4 && (i2 = i2.filter(function(t5) {
                return Object.getOwnPropertyDescriptor(e3, t5).enumerable;
              })), n3.push.apply(n3, i2);
            }
            return n3;
          }
          function we(e3) {
            for (var t4 = 1; t4 < arguments.length; t4++) {
              var n3 = null != arguments[t4] ? arguments[t4] : {};
              t4 % 2 ? ye(Object(n3), true).forEach(function(t5) {
                Te(e3, t5, n3[t5]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(n3)) : ye(Object(n3)).forEach(function(t5) {
                Object.defineProperty(e3, t5, Object.getOwnPropertyDescriptor(n3, t5));
              });
            }
            return e3;
          }
          function Te(e3, t4, n3) {
            return t4 in e3 ? Object.defineProperty(e3, t4, { value: n3, enumerable: true, configurable: true, writable: true }) : e3[t4] = n3, e3;
          }
          function Se(e3, t4) {
            for (var n3 = 0; n3 < t4.length; n3++) {
              var i2 = t4[n3];
              i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(e3, i2.key, i2);
            }
          }
          function Oe(e3, t4) {
            return Oe = Object.setPrototypeOf || function(e4, t5) {
              return e4.__proto__ = t5, e4;
            }, Oe(e3, t4);
          }
          function Ee(e3, t4) {
            return !t4 || "object" !== be(t4) && "function" != typeof t4 ? ke(e3) : t4;
          }
          function ke(e3) {
            if (void 0 === e3) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return e3;
          }
          function Ie(e3) {
            return Ie = Object.setPrototypeOf ? Object.getPrototypeOf : function(e4) {
              return e4.__proto__ || Object.getPrototypeOf(e4);
            }, Ie(e3);
          }
          var xe = ["fullscreenchange", "MSFullscreenChange", "mozfullscreenchange", "webkitfullscreenchange"], _e = (0, te.arrayOf)((0, te.shape)({ srcSet: te.string, media: te.string }));
          function Re(e3) {
            var t4 = parseInt(e3.keyCode || e3.which || 0, 10);
            return 66 === t4 || 62 === t4;
          }
          var Le = function(e3) {
            !function(e4, t4) {
              if ("function" != typeof t4 && null !== t4) throw new TypeError("Super expression must either be null or a function");
              e4.prototype = Object.create(t4 && t4.prototype, { constructor: { value: e4, writable: true, configurable: true } }), t4 && Oe(e4, t4);
            }(l2, e3);
            var n3, i2, r2, s2, o2 = (r2 = l2, s2 = function() {
              if ("undefined" == typeof Reflect || !Reflect.construct) return false;
              if (Reflect.construct.sham) return false;
              if ("function" == typeof Proxy) return true;
              try {
                return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                })), true;
              } catch (e4) {
                return false;
              }
            }(), function() {
              var e4, t4 = Ie(r2);
              if (s2) {
                var n4 = Ie(this).constructor;
                e4 = Reflect.construct(t4, arguments, n4);
              } else e4 = t4.apply(this, arguments);
              return Ee(this, e4);
            });
            function l2(e4) {
              var t4;
              return function(e5, t5) {
                if (!(e5 instanceof t5)) throw new TypeError("Cannot call a class as a function");
              }(this, l2), (t4 = o2.call(this, e4)).state = { currentIndex: e4.startIndex, thumbsTranslate: 0, thumbsSwipedTranslate: 0, currentSlideOffset: 0, galleryWidth: 0, thumbnailsWrapperWidth: 0, thumbnailsWrapperHeight: 0, thumbsStyle: { transition: "all ".concat(e4.slideDuration, "ms ease-out") }, isFullscreen: false, isSwipingThumbnail: false, isPlaying: false }, t4.loadedImages = {}, t4.imageGallery = a().createRef(), t4.thumbnailsWrapper = a().createRef(), t4.thumbnails = a().createRef(), t4.imageGallerySlideWrapper = a().createRef(), t4.handleImageLoaded = t4.handleImageLoaded.bind(ke(t4)), t4.handleKeyDown = t4.handleKeyDown.bind(ke(t4)), t4.handleMouseDown = t4.handleMouseDown.bind(ke(t4)), t4.handleResize = t4.handleResize.bind(ke(t4)), t4.handleTouchMove = t4.handleTouchMove.bind(ke(t4)), t4.handleOnSwiped = t4.handleOnSwiped.bind(ke(t4)), t4.handleScreenChange = t4.handleScreenChange.bind(ke(t4)), t4.handleSwiping = t4.handleSwiping.bind(ke(t4)), t4.handleThumbnailSwiping = t4.handleThumbnailSwiping.bind(ke(t4)), t4.handleOnThumbnailSwiped = t4.handleOnThumbnailSwiped.bind(ke(t4)), t4.onThumbnailMouseLeave = t4.onThumbnailMouseLeave.bind(ke(t4)), t4.handleImageError = t4.handleImageError.bind(ke(t4)), t4.pauseOrPlay = t4.pauseOrPlay.bind(ke(t4)), t4.renderThumbInner = t4.renderThumbInner.bind(ke(t4)), t4.renderItem = t4.renderItem.bind(ke(t4)), t4.slideLeft = t4.slideLeft.bind(ke(t4)), t4.slideRight = t4.slideRight.bind(ke(t4)), t4.toggleFullScreen = t4.toggleFullScreen.bind(ke(t4)), t4.togglePlay = t4.togglePlay.bind(ke(t4)), t4.unthrottledSlideToIndex = t4.slideToIndex, t4.slideToIndex = L(t4.unthrottledSlideToIndex, e4.slideDuration, { trailing: false }), e4.lazyLoad && (t4.lazyLoaded = []), t4;
            }
            return n3 = l2, i2 = [{ key: "componentDidMount", value: function() {
              var e4 = this.props, t4 = e4.autoPlay, n4 = e4.useWindowKeyDown;
              t4 && this.play(), n4 ? window.addEventListener("keydown", this.handleKeyDown) : this.imageGallery.current.addEventListener("keydown", this.handleKeyDown), window.addEventListener("mousedown", this.handleMouseDown), window.addEventListener("touchmove", this.handleTouchMove, { passive: false }), this.initSlideWrapperResizeObserver(this.imageGallerySlideWrapper), this.initThumbnailWrapperResizeObserver(this.thumbnailsWrapper), this.addScreenChangeEvent();
            } }, { key: "componentDidUpdate", value: function(e4, t4) {
              var n4 = this.props, i3 = n4.items, r3 = n4.lazyLoad, a2 = n4.slideDuration, s3 = n4.slideInterval, o3 = n4.startIndex, l3 = n4.thumbnailPosition, u3 = n4.showThumbnails, c2 = n4.useWindowKeyDown, h2 = this.state, d2 = h2.currentIndex, f2 = h2.isPlaying, p2 = e4.items.length !== i3.length, m2 = !M()(e4.items, i3), g2 = e4.startIndex !== o3, v2 = e4.thumbnailPosition !== l3, b2 = e4.showThumbnails !== u3;
              s3 === e4.slideInterval && a2 === e4.slideDuration || f2 && (this.pause(), this.play()), v2 && (this.removeResizeObserver(), this.initSlideWrapperResizeObserver(this.imageGallerySlideWrapper), this.initThumbnailWrapperResizeObserver(this.thumbnailsWrapper)), b2 && u3 && this.initThumbnailWrapperResizeObserver(this.thumbnailsWrapper), b2 && !u3 && this.removeThumbnailsResizeObserver(), (p2 || b2) && this.handleResize(), t4.currentIndex !== d2 && this.slideThumbnailBar(), e4.slideDuration !== a2 && (this.slideToIndex = L(this.unthrottledSlideToIndex, a2, { trailing: false })), !r3 || e4.lazyLoad && !m2 || (this.lazyLoaded = []), c2 !== e4.useWindowKeyDown && (c2 ? (this.imageGallery.current.removeEventListener("keydown", this.handleKeyDown), window.addEventListener("keydown", this.handleKeyDown)) : (window.removeEventListener("keydown", this.handleKeyDown), this.imageGallery.current.addEventListener("keydown", this.handleKeyDown))), (g2 || m2) && this.setState({ currentIndex: o3, slideStyle: { transition: "none" } });
            } }, { key: "componentWillUnmount", value: function() {
              var e4 = this.props.useWindowKeyDown;
              window.removeEventListener("mousedown", this.handleMouseDown), window.removeEventListener("touchmove", this.handleTouchMove), this.removeScreenChangeEvent(), this.removeResizeObserver(), this.playPauseIntervalId && (window.clearInterval(this.playPauseIntervalId), this.playPauseIntervalId = null), this.transitionTimer && window.clearTimeout(this.transitionTimer), e4 ? window.removeEventListener("keydown", this.handleKeyDown) : this.imageGallery.current.removeEventListener("keydown", this.handleKeyDown);
            } }, { key: "onSliding", value: function() {
              var e4 = this, t4 = this.state, n4 = t4.currentIndex, i3 = t4.isTransitioning, r3 = this.props, a2 = r3.onSlide, s3 = r3.slideDuration;
              this.transitionTimer = window.setTimeout(function() {
                i3 && (e4.setState({ isTransitioning: !i3, isSwipingThumbnail: false }), a2 && a2(n4));
              }, s3 + 50);
            } }, { key: "onThumbnailClick", value: function(e4, t4) {
              var n4 = this.props.onThumbnailClick;
              e4.target.parentNode.parentNode.blur(), this.slideToIndex(t4, e4), n4 && n4(e4, t4);
            } }, { key: "onThumbnailMouseOver", value: function(e4, t4) {
              var n4 = this;
              this.thumbnailMouseOverTimer && (window.clearTimeout(this.thumbnailMouseOverTimer), this.thumbnailMouseOverTimer = null), this.thumbnailMouseOverTimer = window.setTimeout(function() {
                n4.slideToIndex(t4), n4.pause();
              }, 300);
            } }, { key: "onThumbnailMouseLeave", value: function() {
              if (this.thumbnailMouseOverTimer) {
                var e4 = this.props.autoPlay;
                window.clearTimeout(this.thumbnailMouseOverTimer), this.thumbnailMouseOverTimer = null, e4 && this.play();
              }
            } }, { key: "setThumbsTranslate", value: function(e4) {
              this.setState({ thumbsTranslate: e4 });
            } }, { key: "setModalFullscreen", value: function(e4) {
              var t4 = this.props.onScreenChange;
              this.setState({ modalFullscreen: e4 }), t4 && t4(e4);
            } }, { key: "getThumbsTranslate", value: function(e4) {
              var t4, n4 = this.props, i3 = n4.disableThumbnailScroll, r3 = n4.items, a2 = this.state, s3 = a2.thumbnailsWrapperWidth, o3 = a2.thumbnailsWrapperHeight, l3 = this.thumbnails && this.thumbnails.current;
              if (i3) return 0;
              if (l3) {
                if (this.isThumbnailVertical()) {
                  if (l3.scrollHeight <= o3) return 0;
                  t4 = l3.scrollHeight - o3;
                } else {
                  if (l3.scrollWidth <= s3 || s3 <= 0) return 0;
                  t4 = l3.scrollWidth - s3;
                }
                return e4 * (t4 / (r3.length - 1));
              }
              return 0;
            } }, { key: "getThumbnailPositionClassName", value: function(e4) {
              switch (e4) {
                case "left":
                  e4 = " ".concat("image-gallery-thumbnails-left");
                  break;
                case "right":
                  e4 = " ".concat("image-gallery-thumbnails-right");
                  break;
                case "bottom":
                  e4 = " ".concat("image-gallery-thumbnails-bottom");
                  break;
                case "top":
                  e4 = " ".concat("image-gallery-thumbnails-top");
              }
              return e4;
            } }, { key: "getAlignmentClassName", value: function(e4) {
              var t4 = this.state.currentIndex, n4 = this.props, i3 = n4.infinite, r3 = n4.items, a2 = "", s3 = "image-gallery-left", o3 = "image-gallery-right";
              switch (e4) {
                case t4 - 1:
                  a2 = " ".concat(s3);
                  break;
                case t4:
                  a2 = " ".concat("image-gallery-center");
                  break;
                case t4 + 1:
                  a2 = " ".concat(o3);
              }
              return r3.length >= 3 && i3 && (0 === e4 && t4 === r3.length - 1 ? a2 = " ".concat(o3) : e4 === r3.length - 1 && 0 === t4 && (a2 = " ".concat(s3))), a2;
            } }, { key: "getTranslateXForTwoSlide", value: function(e4) {
              var t4 = this.state, n4 = t4.currentIndex, i3 = t4.currentSlideOffset, r3 = t4.previousIndex, a2 = n4 !== r3, s3 = 0 === e4 && 0 === r3, o3 = 1 === e4 && 1 === r3, l3 = 0 === e4 && 1 === n4, u3 = 1 === e4 && 0 === n4, c2 = 0 === i3, h2 = -100 * n4 + 100 * e4 + i3;
              return i3 > 0 ? this.direction = "left" : i3 < 0 && (this.direction = "right"), u3 && i3 > 0 && (h2 = -100 + i3), l3 && i3 < 0 && (h2 = 100 + i3), a2 ? s3 && c2 && "left" === this.direction ? h2 = 100 : o3 && c2 && "right" === this.direction && (h2 = -100) : (u3 && c2 && "left" === this.direction && (h2 = -100), l3 && c2 && "right" === this.direction && (h2 = 100)), h2;
            } }, { key: "getThumbnailBarHeight", value: function() {
              return this.isThumbnailVertical() ? { height: this.state.gallerySlideWrapperHeight } : {};
            } }, { key: "getSlideStyle", value: function(e4) {
              var t4 = this.state, n4 = t4.currentIndex, i3 = t4.currentSlideOffset, r3 = t4.slideStyle, a2 = this.props, s3 = a2.infinite, o3 = a2.items, l3 = a2.useTranslate3D, u3 = a2.isRTL, c2 = -100 * n4, h2 = o3.length - 1, d2 = (c2 + 100 * e4) * (u3 ? -1 : 1) + i3;
              s3 && o3.length > 2 && (0 === n4 && e4 === h2 ? d2 = -100 * (u3 ? -1 : 1) + i3 : n4 === h2 && 0 === e4 && (d2 = 100 * (u3 ? -1 : 1) + i3)), s3 && 2 === o3.length && (d2 = this.getTranslateXForTwoSlide(e4));
              var f2 = "translate(".concat(d2, "%, 0)");
              return l3 && (f2 = "translate3d(".concat(d2, "%, 0, 0)")), we({ display: this.isSlideVisible(e4) ? "inherit" : "none", WebkitTransform: f2, MozTransform: f2, msTransform: f2, OTransform: f2, transform: f2 }, r3);
            } }, { key: "getCurrentIndex", value: function() {
              return this.state.currentIndex;
            } }, { key: "getThumbnailStyle", value: function() {
              var e4, t4 = this.props, n4 = t4.useTranslate3D, i3 = t4.isRTL, r3 = this.state, a2 = r3.thumbsTranslate, s3 = r3.thumbsStyle, o3 = i3 ? -1 * a2 : a2;
              return this.isThumbnailVertical() ? (e4 = "translate(0, ".concat(a2, "px)"), n4 && (e4 = "translate3d(0, ".concat(a2, "px, 0)"))) : (e4 = "translate(".concat(o3, "px, 0)"), n4 && (e4 = "translate3d(".concat(o3, "px, 0, 0)"))), we({ WebkitTransform: e4, MozTransform: e4, msTransform: e4, OTransform: e4, transform: e4 }, s3);
            } }, { key: "getSlideItems", value: function() {
              var e4 = this, n4 = this.state.currentIndex, i3 = this.props, r3 = i3.items, s3 = i3.slideOnThumbnailOver, o3 = i3.onClick, l3 = i3.lazyLoad, u3 = i3.onTouchMove, c2 = i3.onTouchEnd, h2 = i3.onTouchStart, d2 = i3.onMouseOver, f2 = i3.onMouseLeave, p2 = i3.renderItem, m2 = i3.renderThumbInner, g2 = i3.showThumbnails, v2 = i3.showBullets, b2 = [], y2 = [], w2 = [];
              return r3.forEach(function(i4, r4) {
                var T2 = e4.getAlignmentClassName(r4), S2 = i4.originalClass ? " ".concat(i4.originalClass) : "", O2 = i4.thumbnailClass ? " ".concat(i4.thumbnailClass) : "", E2 = i4.renderItem || p2 || e4.renderItem, k2 = i4.renderThumbInner || m2 || e4.renderThumbInner, I2 = !l3 || T2 || e4.lazyLoaded[r4];
                I2 && l3 && !e4.lazyLoaded[r4] && (e4.lazyLoaded[r4] = true);
                var x2 = e4.getSlideStyle(r4), _24 = a().createElement("div", { "aria-label": "Go to Slide ".concat(r4 + 1), key: "slide-".concat(r4), tabIndex: "-1", className: "image-gallery-slide ".concat(T2, " ").concat(S2), style: x2, onClick: o3, onKeyUp: e4.handleSlideKeyUp, onTouchMove: u3, onTouchEnd: c2, onTouchStart: h2, onMouseOver: d2, onFocus: d2, onMouseLeave: f2, role: "button" }, I2 ? E2(i4) : a().createElement("div", { style: { height: "100%" } }));
                if (b2.push(_24), g2 && i4.thumbnail) {
                  var R2 = t3("image-gallery-thumbnail", O2, { active: n4 === r4 });
                  y2.push(a().createElement("button", { key: "thumbnail-".concat(r4), type: "button", tabIndex: "0", "aria-pressed": n4 === r4 ? "true" : "false", "aria-label": "Go to Slide ".concat(r4 + 1), className: R2, onMouseLeave: s3 ? e4.onThumbnailMouseLeave : null, onMouseOver: function(t4) {
                    return e4.handleThumbnailMouseOver(t4, r4);
                  }, onFocus: function(t4) {
                    return e4.handleThumbnailMouseOver(t4, r4);
                  }, onKeyUp: function(t4) {
                    return e4.handleThumbnailKeyUp(t4, r4);
                  }, onClick: function(t4) {
                    return e4.onThumbnailClick(t4, r4);
                  } }, k2(i4)));
                }
                if (v2) {
                  var L2 = t3("image-gallery-bullet", i4.bulletClass, { active: n4 === r4 });
                  w2.push(a().createElement("button", { type: "button", key: "bullet-".concat(r4), className: L2, onClick: function(t4) {
                    return i4.bulletOnClick && i4.bulletOnClick({ item: i4, itemIndex: r4, currentIndex: n4 }), t4.target.blur(), e4.slideToIndex.call(e4, r4, t4);
                  }, "aria-pressed": n4 === r4 ? "true" : "false", "aria-label": "Go to Slide ".concat(r4 + 1) }));
                }
              }), { slides: b2, thumbnails: y2, bullets: w2 };
            } }, { key: "ignoreIsTransitioning", value: function() {
              var e4 = this.props.items, t4 = this.state, n4 = t4.previousIndex, i3 = t4.currentIndex, r3 = e4.length - 1;
              return Math.abs(n4 - i3) > 1 && !(0 === n4 && i3 === r3) && !(n4 === r3 && 0 === i3);
            } }, { key: "isFirstOrLastSlide", value: function(e4) {
              return e4 === this.props.items.length - 1 || 0 === e4;
            } }, { key: "slideIsTransitioning", value: function(e4) {
              var t4 = this.state, n4 = t4.isTransitioning, i3 = t4.previousIndex, r3 = t4.currentIndex;
              return n4 && !(e4 === i3 || e4 === r3);
            } }, { key: "isSlideVisible", value: function(e4) {
              return !this.slideIsTransitioning(e4) || this.ignoreIsTransitioning() && !this.isFirstOrLastSlide(e4);
            } }, { key: "slideThumbnailBar", value: function() {
              var e4 = this.state, t4 = e4.currentIndex, n4 = e4.isSwipingThumbnail, i3 = -this.getThumbsTranslate(t4);
              n4 || (0 === t4 ? this.setState({ thumbsTranslate: 0, thumbsSwipedTranslate: 0 }) : this.setState({ thumbsTranslate: i3, thumbsSwipedTranslate: i3 }));
            } }, { key: "canSlide", value: function() {
              return this.props.items.length >= 2;
            } }, { key: "canSlideLeft", value: function() {
              var e4 = this.props, t4 = e4.infinite, n4 = e4.isRTL;
              return t4 || (n4 ? this.canSlideNext() : this.canSlidePrevious());
            } }, { key: "canSlideRight", value: function() {
              var e4 = this.props, t4 = e4.infinite, n4 = e4.isRTL;
              return t4 || (n4 ? this.canSlidePrevious() : this.canSlideNext());
            } }, { key: "canSlidePrevious", value: function() {
              return this.state.currentIndex > 0;
            } }, { key: "canSlideNext", value: function() {
              return this.state.currentIndex < this.props.items.length - 1;
            } }, { key: "handleSwiping", value: function(e4) {
              var t4 = e4.event, n4 = e4.absX, i3 = e4.dir, r3 = this.props, a2 = r3.disableSwipe, s3 = r3.stopPropagation, o3 = this.state, l3 = o3.galleryWidth, u3 = o3.isTransitioning, c2 = o3.swipingUpDown, h2 = o3.swipingLeftRight;
              if (i3 !== ee.UP && i3 !== ee.DOWN && !c2 || h2) {
                if (i3 !== ee.LEFT && i3 !== ee.RIGHT || h2 || this.setState({ swipingLeftRight: true }), !a2) {
                  var d2 = this.props.swipingTransitionDuration;
                  if (s3 && t4.preventDefault(), u3) this.setState({ currentSlideOffset: 0 });
                  else {
                    var f2 = i3 === ee.RIGHT ? 1 : -1, p2 = n4 / l3 * 100;
                    Math.abs(p2) >= 100 && (p2 = 100);
                    var m2 = { transition: "transform ".concat(d2, "ms ease-out") };
                    this.setState({ currentSlideOffset: f2 * p2, slideStyle: m2 });
                  }
                }
              } else c2 || this.setState({ swipingUpDown: true });
            } }, { key: "handleThumbnailSwiping", value: function(e4) {
              var t4 = e4.event, n4 = e4.absX, i3 = e4.absY, r3 = e4.dir, a2 = this.props, s3 = a2.stopPropagation, o3 = a2.swipingThumbnailTransitionDuration, l3 = this.state, u3 = l3.thumbsSwipedTranslate, c2 = l3.thumbnailsWrapperHeight, h2 = l3.thumbnailsWrapperWidth, d2 = l3.swipingUpDown, f2 = l3.swipingLeftRight;
              if (this.isThumbnailVertical()) {
                if ((r3 === ee.LEFT || r3 === ee.RIGHT || f2) && !d2) return void (f2 || this.setState({ swipingLeftRight: true }));
                r3 !== ee.UP && r3 !== ee.DOWN || d2 || this.setState({ swipingUpDown: true });
              } else {
                if ((r3 === ee.UP || r3 === ee.DOWN || d2) && !f2) return void (d2 || this.setState({ swipingUpDown: true }));
                r3 !== ee.LEFT && r3 !== ee.RIGHT || f2 || this.setState({ swipingLeftRight: true });
              }
              var p2, m2, g2, v2, b2, y2 = this.thumbnails && this.thumbnails.current;
              if (this.isThumbnailVertical() ? (p2 = u3 + (r3 === ee.DOWN ? i3 : -i3), m2 = y2.scrollHeight - c2 + 20, g2 = Math.abs(p2) > m2, v2 = p2 > 20, b2 = y2.scrollHeight <= c2) : (p2 = u3 + (r3 === ee.RIGHT ? n4 : -n4), m2 = y2.scrollWidth - h2 + 20, g2 = Math.abs(p2) > m2, v2 = p2 > 20, b2 = y2.scrollWidth <= h2), !b2 && (r3 !== ee.LEFT && r3 !== ee.UP || !g2) && (r3 !== ee.RIGHT && r3 !== ee.DOWN || !v2)) {
                s3 && t4.stopPropagation();
                var w2 = { transition: "transform ".concat(o3, "ms ease-out") };
                this.setState({ thumbsTranslate: p2, thumbsStyle: w2 });
              }
            } }, { key: "handleOnThumbnailSwiped", value: function() {
              var e4 = this.state.thumbsTranslate, t4 = this.props.slideDuration;
              this.resetSwipingDirection(), this.setState({ isSwipingThumbnail: true, thumbsSwipedTranslate: e4, thumbsStyle: { transition: "all ".concat(t4, "ms ease-out") } });
            } }, { key: "sufficientSwipe", value: function() {
              var e4 = this.state.currentSlideOffset, t4 = this.props.swipeThreshold;
              return Math.abs(e4) > t4;
            } }, { key: "resetSwipingDirection", value: function() {
              var e4 = this.state, t4 = e4.swipingUpDown, n4 = e4.swipingLeftRight;
              t4 && this.setState({ swipingUpDown: false }), n4 && this.setState({ swipingLeftRight: false });
            } }, { key: "handleOnSwiped", value: function(e4) {
              var t4 = e4.event, n4 = e4.dir, i3 = e4.velocity, r3 = this.props, a2 = r3.disableSwipe, s3 = r3.stopPropagation, o3 = r3.flickThreshold;
              if (!a2) {
                var l3 = this.props.isRTL;
                s3 && t4.stopPropagation(), this.resetSwipingDirection();
                var u3 = (n4 === ee.LEFT ? 1 : -1) * (l3 ? -1 : 1), c2 = n4 === ee.UP || n4 === ee.DOWN, h2 = i3 > o3 && !c2;
                this.handleOnSwipedTo(u3, h2);
              }
            } }, { key: "handleOnSwipedTo", value: function(e4, t4) {
              var n4 = this.state, i3 = n4.currentIndex, r3 = n4.isTransitioning, a2 = i3;
              !this.sufficientSwipe() && !t4 || r3 || (a2 += e4), (-1 === e4 && !this.canSlideLeft() || 1 === e4 && !this.canSlideRight()) && (a2 = i3), this.unthrottledSlideToIndex(a2);
            } }, { key: "handleTouchMove", value: function(e4) {
              this.state.swipingLeftRight && e4.preventDefault();
            } }, { key: "handleMouseDown", value: function() {
              this.imageGallery.current.classList.add("image-gallery-using-mouse");
            } }, { key: "handleKeyDown", value: function(e4) {
              var t4 = this.props, n4 = t4.disableKeyDown, i3 = t4.useBrowserFullscreen, r3 = this.state.isFullscreen;
              if (this.imageGallery.current.classList.remove("image-gallery-using-mouse"), !n4) switch (parseInt(e4.keyCode || e4.which || 0, 10)) {
                case 37:
                  this.canSlideLeft() && !this.playPauseIntervalId && this.slideLeft(e4);
                  break;
                case 39:
                  this.canSlideRight() && !this.playPauseIntervalId && this.slideRight(e4);
                  break;
                case 27:
                  r3 && !i3 && this.exitFullScreen();
              }
            } }, { key: "handleImageError", value: function(e4) {
              var t4 = this.props.onErrorImageURL;
              t4 && -1 === e4.target.src.indexOf(t4) && (e4.target.src = t4);
            } }, { key: "removeThumbnailsResizeObserver", value: function() {
              this.resizeThumbnailWrapperObserver && this.thumbnailsWrapper && this.thumbnailsWrapper.current && (this.resizeThumbnailWrapperObserver.unobserve(this.thumbnailsWrapper.current), this.resizeThumbnailWrapperObserver = null);
            } }, { key: "removeResizeObserver", value: function() {
              this.resizeSlideWrapperObserver && this.imageGallerySlideWrapper && this.imageGallerySlideWrapper.current && (this.resizeSlideWrapperObserver.unobserve(this.imageGallerySlideWrapper.current), this.resizeSlideWrapperObserver = null), this.removeThumbnailsResizeObserver();
            } }, { key: "handleResize", value: function() {
              var e4 = this.state.currentIndex;
              this.imageGallery && (this.imageGallery && this.imageGallery.current && this.setState({ galleryWidth: this.imageGallery.current.offsetWidth }), this.imageGallerySlideWrapper && this.imageGallerySlideWrapper.current && this.setState({ gallerySlideWrapperHeight: this.imageGallerySlideWrapper.current.offsetHeight }), this.setThumbsTranslate(-this.getThumbsTranslate(e4)));
            } }, { key: "initSlideWrapperResizeObserver", value: function(e4) {
              var t4 = this;
              e4 && !e4.current || (this.resizeSlideWrapperObserver = new Z(R(function(e5) {
                e5 && e5.forEach(function(e6) {
                  t4.setState({ thumbnailsWrapperWidth: e6.contentRect.width }, t4.handleResize);
                });
              }, 50)), this.resizeSlideWrapperObserver.observe(e4.current));
            } }, { key: "initThumbnailWrapperResizeObserver", value: function(e4) {
              var t4 = this;
              e4 && !e4.current || (this.resizeThumbnailWrapperObserver = new Z(R(function(e5) {
                e5 && e5.forEach(function(e6) {
                  t4.setState({ thumbnailsWrapperHeight: e6.contentRect.height }, t4.handleResize);
                });
              }, 50)), this.resizeThumbnailWrapperObserver.observe(e4.current));
            } }, { key: "toggleFullScreen", value: function() {
              this.state.isFullscreen ? this.exitFullScreen() : this.fullScreen();
            } }, { key: "togglePlay", value: function() {
              this.playPauseIntervalId ? this.pause() : this.play();
            } }, { key: "handleScreenChange", value: function() {
              var e4 = this.props, t4 = e4.onScreenChange, n4 = e4.useBrowserFullscreen, i3 = document.fullscreenElement || document.msFullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement, r3 = this.imageGallery.current === i3;
              t4 && t4(r3), n4 && this.setState({ isFullscreen: r3 });
            } }, { key: "slideToIndex", value: function(e4, t4) {
              var n4 = this.state, i3 = n4.currentIndex, r3 = n4.isTransitioning, a2 = this.props, s3 = a2.items, o3 = a2.slideDuration, l3 = a2.onBeforeSlide;
              if (!r3) {
                t4 && this.playPauseIntervalId && (this.pause(false), this.play(false));
                var u3 = s3.length - 1, c2 = e4;
                e4 < 0 ? c2 = u3 : e4 > u3 && (c2 = 0), l3 && c2 !== i3 && l3(c2), this.setState({ previousIndex: i3, currentIndex: c2, isTransitioning: c2 !== i3, currentSlideOffset: 0, slideStyle: { transition: "all ".concat(o3, "ms ease-out") } }, this.onSliding);
              }
            } }, { key: "slideLeft", value: function(e4) {
              var t4 = this.props.isRTL;
              this.slideTo(e4, t4 ? "right" : "left");
            } }, { key: "slideRight", value: function(e4) {
              var t4 = this.props.isRTL;
              this.slideTo(e4, t4 ? "left" : "right");
            } }, { key: "slideTo", value: function(e4, t4) {
              var n4 = this, i3 = this.state, r3 = i3.currentIndex, a2 = i3.currentSlideOffset, s3 = i3.isTransitioning, o3 = this.props.items, l3 = r3 + ("left" === t4 ? -1 : 1);
              s3 || (2 === o3.length ? this.setState({ currentSlideOffset: a2 + ("left" === t4 ? 1e-3 : -1e-3), slideStyle: { transition: "none" } }, function() {
                window.setTimeout(function() {
                  return n4.slideToIndex(l3, e4);
                }, 25);
              }) : this.slideToIndex(l3, e4));
            } }, { key: "handleThumbnailMouseOver", value: function(e4, t4) {
              this.props.slideOnThumbnailOver && this.onThumbnailMouseOver(e4, t4);
            } }, { key: "handleThumbnailKeyUp", value: function(e4, t4) {
              Re(e4) && this.onThumbnailClick(e4, t4);
            } }, { key: "handleSlideKeyUp", value: function(e4) {
              Re(e4) && (0, this.props.onClick)(e4);
            } }, { key: "isThumbnailVertical", value: function() {
              var e4 = this.props.thumbnailPosition;
              return "left" === e4 || "right" === e4;
            } }, { key: "addScreenChangeEvent", value: function() {
              var e4 = this;
              xe.forEach(function(t4) {
                document.addEventListener(t4, e4.handleScreenChange);
              });
            } }, { key: "removeScreenChangeEvent", value: function() {
              var e4 = this;
              xe.forEach(function(t4) {
                document.removeEventListener(t4, e4.handleScreenChange);
              });
            } }, { key: "fullScreen", value: function() {
              var e4 = this.props.useBrowserFullscreen, t4 = this.imageGallery.current;
              e4 ? t4.requestFullscreen ? t4.requestFullscreen() : t4.msRequestFullscreen ? t4.msRequestFullscreen() : t4.mozRequestFullScreen ? t4.mozRequestFullScreen() : t4.webkitRequestFullscreen ? t4.webkitRequestFullscreen() : this.setModalFullscreen(true) : this.setModalFullscreen(true), this.setState({ isFullscreen: true });
            } }, { key: "exitFullScreen", value: function() {
              var e4 = this.state.isFullscreen, t4 = this.props.useBrowserFullscreen;
              e4 && (t4 ? document.exitFullscreen ? document.exitFullscreen() : document.webkitExitFullscreen ? document.webkitExitFullscreen() : document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.msExitFullscreen ? document.msExitFullscreen() : this.setModalFullscreen(false) : this.setModalFullscreen(false), this.setState({ isFullscreen: false }));
            } }, { key: "pauseOrPlay", value: function() {
              var e4 = this.props.infinite, t4 = this.state.currentIndex;
              e4 || this.canSlideRight() ? this.slideToIndex(t4 + 1) : this.pause();
            } }, { key: "play", value: function() {
              var e4 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0], t4 = this.props, n4 = t4.onPlay, i3 = t4.slideInterval, r3 = t4.slideDuration, a2 = this.state.currentIndex;
              this.playPauseIntervalId || (this.setState({ isPlaying: true }), this.playPauseIntervalId = window.setInterval(this.pauseOrPlay, Math.max(i3, r3)), n4 && e4 && n4(a2));
            } }, { key: "pause", value: function() {
              var e4 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0], t4 = this.props.onPause, n4 = this.state.currentIndex;
              this.playPauseIntervalId && (window.clearInterval(this.playPauseIntervalId), this.playPauseIntervalId = null, this.setState({ isPlaying: false }), t4 && e4 && t4(n4));
            } }, { key: "isImageLoaded", value: function(e4) {
              return !!this.loadedImages[e4.original] || (this.loadedImages[e4.original] = true, false);
            } }, { key: "handleImageLoaded", value: function(e4, t4) {
              var n4 = this.props.onImageLoad;
              !this.loadedImages[t4] && n4 && (this.loadedImages[t4] = true, n4(e4));
            } }, { key: "renderItem", value: function(e4) {
              var t4 = this.state.isFullscreen, n4 = this.props.onImageError || this.handleImageError;
              return a().createElement(ie, { description: e4.description, fullscreen: e4.fullscreen, handleImageLoaded: this.handleImageLoaded, isFullscreen: t4, onImageError: n4, original: e4.original, originalAlt: e4.originalAlt, originalHeight: e4.originalHeight, originalWidth: e4.originalWidth, originalTitle: e4.originalTitle, sizes: e4.sizes, loading: e4.loading, srcSet: e4.srcSet });
            } }, { key: "renderThumbInner", value: function(e4) {
              var t4 = this.props.onThumbnailError || this.handleImageError;
              return a().createElement("span", { className: "image-gallery-thumbnail-inner" }, a().createElement("img", { className: "image-gallery-thumbnail-image", src: e4.thumbnail, height: e4.thumbnailHeight, width: e4.thumbnailWidth, alt: e4.thumbnailAlt, title: e4.thumbnailTitle, loading: e4.thumbnailLoading, onError: t4 }), e4.thumbnailLabel && a().createElement("div", { className: "image-gallery-thumbnail-label" }, e4.thumbnailLabel));
            } }, { key: "render", value: function() {
              var e4 = this.state, n4 = e4.currentIndex, i3 = e4.isFullscreen, r3 = e4.modalFullscreen, s3 = e4.isPlaying, o3 = this.props, l3 = o3.additionalClass, u3 = o3.disableThumbnailSwipe, c2 = o3.indexSeparator, h2 = o3.isRTL, d2 = o3.items, f2 = o3.thumbnailPosition, p2 = o3.renderFullscreenButton, m2 = o3.renderCustomControls, g2 = o3.renderLeftNav, v2 = o3.renderRightNav, b2 = o3.showBullets, y2 = o3.showFullscreenButton, w2 = o3.showIndex, T2 = o3.showThumbnails, S2 = o3.showNav, O2 = o3.showPlayButton, E2 = o3.renderPlayPauseButton, k2 = this.getThumbnailStyle(), I2 = this.getSlideItems(), x2 = I2.slides, _24 = I2.thumbnails, R2 = I2.bullets, L2 = t3("image-gallery-slide-wrapper", this.getThumbnailPositionClassName(f2), { "image-gallery-rtl": h2 }), P2 = a().createElement("div", { ref: this.imageGallerySlideWrapper, className: L2 }, m2 && m2(), this.canSlide() ? a().createElement(a().Fragment, null, S2 && a().createElement(a().Fragment, null, g2(this.slideLeft, !this.canSlideLeft()), v2(this.slideRight, !this.canSlideRight())), a().createElement(ve, { className: "image-gallery-swipe", delta: 0, onSwiping: this.handleSwiping, onSwiped: this.handleOnSwiped }, a().createElement("div", { className: "image-gallery-slides" }, x2))) : a().createElement("div", { className: "image-gallery-slides" }, x2), O2 && E2(this.togglePlay, s3), b2 && a().createElement("div", { className: "image-gallery-bullets" }, a().createElement("div", { className: "image-gallery-bullets-container", role: "navigation", "aria-label": "Bullet Navigation" }, R2)), y2 && p2(this.toggleFullScreen, i3), w2 && a().createElement("div", { className: "image-gallery-index" }, a().createElement("span", { className: "image-gallery-index-current" }, n4 + 1), a().createElement("span", { className: "image-gallery-index-separator" }, c2), a().createElement("span", { className: "image-gallery-index-total" }, d2.length))), M2 = t3("image-gallery", l3, { "fullscreen-modal": r3 }), W2 = t3("image-gallery-content", this.getThumbnailPositionClassName(f2), { fullscreen: i3 }), D2 = t3("image-gallery-thumbnails-wrapper", this.getThumbnailPositionClassName(f2), { "thumbnails-wrapper-rtl": !this.isThumbnailVertical() && h2 }, { "thumbnails-swipe-horizontal": !this.isThumbnailVertical() && !u3 }, { "thumbnails-swipe-vertical": this.isThumbnailVertical() && !u3 });
              return a().createElement("div", { ref: this.imageGallery, className: M2, "aria-live": "polite" }, a().createElement("div", { className: W2 }, ("bottom" === f2 || "right" === f2) && P2, T2 && _24.length > 0 ? a().createElement(ve, { className: D2, delta: 0, onSwiping: !u3 && this.handleThumbnailSwiping, onSwiped: !u3 && this.handleOnThumbnailSwiped }, a().createElement("div", { className: "image-gallery-thumbnails", ref: this.thumbnailsWrapper, style: this.getThumbnailBarHeight() }, a().createElement("nav", { ref: this.thumbnails, className: "image-gallery-thumbnails-container", style: k2, "aria-label": "Thumbnail Navigation" }, _24))) : null, ("top" === f2 || "left" === f2) && P2));
            } }], i2 && Se(n3.prototype, i2), l2;
          }(a().Component);
          Le.propTypes = { flickThreshold: te.number, items: (0, te.arrayOf)((0, te.shape)({ bulletClass: te.string, bulletOnClick: te.func, description: te.string, original: te.string, originalHeight: te.number, originalWidth: te.number, loading: te.string, thumbnailHeight: te.number, thumbnailWidth: te.number, thumbnailLoading: te.string, fullscreen: te.string, originalAlt: te.string, originalTitle: te.string, thumbnail: te.string, thumbnailAlt: te.string, thumbnailLabel: te.string, thumbnailTitle: te.string, originalClass: te.string, thumbnailClass: te.string, renderItem: te.func, renderThumbInner: te.func, imageSet: _e, srcSet: te.string, sizes: te.string })).isRequired, showNav: te.bool, autoPlay: te.bool, lazyLoad: te.bool, infinite: te.bool, showIndex: te.bool, showBullets: te.bool, showThumbnails: te.bool, showPlayButton: te.bool, showFullscreenButton: te.bool, disableThumbnailScroll: te.bool, disableKeyDown: te.bool, disableSwipe: te.bool, disableThumbnailSwipe: te.bool, useBrowserFullscreen: te.bool, onErrorImageURL: te.string, indexSeparator: te.string, thumbnailPosition: (0, te.oneOf)(["top", "bottom", "left", "right"]), startIndex: te.number, slideDuration: te.number, slideInterval: te.number, slideOnThumbnailOver: te.bool, swipeThreshold: te.number, swipingTransitionDuration: te.number, swipingThumbnailTransitionDuration: te.number, onSlide: te.func, onBeforeSlide: te.func, onScreenChange: te.func, onPause: te.func, onPlay: te.func, onClick: te.func, onImageLoad: te.func, onImageError: te.func, onTouchMove: te.func, onTouchEnd: te.func, onTouchStart: te.func, onMouseOver: te.func, onMouseLeave: te.func, onThumbnailError: te.func, onThumbnailClick: te.func, renderCustomControls: te.func, renderLeftNav: te.func, renderRightNav: te.func, renderPlayPauseButton: te.func, renderFullscreenButton: te.func, renderItem: te.func, renderThumbInner: te.func, stopPropagation: te.bool, additionalClass: te.string, useTranslate3D: te.bool, isRTL: te.bool, useWindowKeyDown: te.bool }, Le.defaultProps = { onErrorImageURL: "", additionalClass: "", showNav: true, autoPlay: false, lazyLoad: false, infinite: true, showIndex: false, showBullets: false, showThumbnails: true, showPlayButton: true, showFullscreenButton: true, disableThumbnailScroll: false, disableKeyDown: false, disableSwipe: false, disableThumbnailSwipe: false, useTranslate3D: true, isRTL: false, useBrowserFullscreen: true, flickThreshold: 0.4, stopPropagation: false, indexSeparator: " / ", thumbnailPosition: "bottom", startIndex: 0, slideDuration: 450, swipingTransitionDuration: 0, swipingThumbnailTransitionDuration: 0, onSlide: null, onBeforeSlide: null, onScreenChange: null, onPause: null, onPlay: null, onClick: null, onImageLoad: null, onImageError: null, onTouchMove: null, onTouchEnd: null, onTouchStart: null, onMouseOver: null, onMouseLeave: null, onThumbnailError: null, onThumbnailClick: null, renderCustomControls: null, renderThumbInner: null, renderItem: null, slideInterval: 3e3, slideOnThumbnailOver: false, swipeThreshold: 30, renderLeftNav: function(e3, t4) {
            return a().createElement(ce, { onClick: e3, disabled: t4 });
          }, renderRightNav: function(e3, t4) {
            return a().createElement(de, { onClick: e3, disabled: t4 });
          }, renderPlayPauseButton: function(e3, t4) {
            return a().createElement(pe, { onClick: e3, isPlaying: t4 });
          }, renderFullscreenButton: function(e3, t4) {
            return a().createElement(le, { onClick: e3, isFullscreen: t4 });
          }, useWindowKeyDown: true };
          const Pe = Le;
        })(), r;
      })();
    });
  }
});

// node_modules/emoji-regex/index.js
var require_emoji_regex = __commonJS({
  "node_modules/emoji-regex/index.js"(exports, module) {
    "use strict";
    module.exports = function() {
      return /\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67)\uDB40\uDC7F|(?:\uD83E\uDDD1\uD83C\uDFFF\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFE])|(?:\uD83E\uDDD1\uD83C\uDFFE\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFD\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFC\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFB\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFB\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFC-\uDFFF])|\uD83D\uDC68(?:\uD83C\uDFFB(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF]))|\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFC-\uDFFF])|[\u2695\u2696\u2708]\uFE0F|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))?|(?:\uD83C[\uDFFC-\uDFFF])\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF]))|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFE])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])\uFE0F|\u200D(?:(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D[\uDC66\uDC67])|\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC)?|(?:\uD83D\uDC69(?:\uD83C\uDFFB\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|(?:\uD83C[\uDFFC-\uDFFF])\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69]))|\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1)(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC69(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83E\uDDD1(?:\u200D(?:\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D\uDC69\u200D\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83E\uDDD1(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|\uD83D\uDC69(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|\uD83D\uDE36\u200D\uD83C\uDF2B|\uD83C\uDFF3\uFE0F\u200D\u26A7|\uD83D\uDC3B\u200D\u2744|(?:(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF])\u200D[\u2640\u2642]|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|\uD83C\uDFF4\u200D\u2620|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])\u200D[\u2640\u2642]|[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u2328\u23CF\u23ED-\u23EF\u23F1\u23F2\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB\u25FC\u2600-\u2604\u260E\u2611\u2618\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u2692\u2694-\u2697\u2699\u269B\u269C\u26A0\u26A7\u26B0\u26B1\u26C8\u26CF\u26D1\u26D3\u26E9\u26F0\u26F1\u26F4\u26F7\u26F8\u2702\u2708\u2709\u270F\u2712\u2714\u2716\u271D\u2721\u2733\u2734\u2744\u2747\u2763\u27A1\u2934\u2935\u2B05-\u2B07\u3030\u303D\u3297\u3299]|\uD83C[\uDD70\uDD71\uDD7E\uDD7F\uDE02\uDE37\uDF21\uDF24-\uDF2C\uDF36\uDF7D\uDF96\uDF97\uDF99-\uDF9B\uDF9E\uDF9F\uDFCD\uDFCE\uDFD4-\uDFDF\uDFF5\uDFF7]|\uD83D[\uDC3F\uDCFD\uDD49\uDD4A\uDD6F\uDD70\uDD73\uDD76-\uDD79\uDD87\uDD8A-\uDD8D\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA\uDECB\uDECD-\uDECF\uDEE0-\uDEE5\uDEE9\uDEF0\uDEF3])\uFE0F|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|\uD83D\uDC69\u200D\uD83D\uDC67|\uD83D\uDC69\u200D\uD83D\uDC66|\uD83D\uDE35\u200D\uD83D\uDCAB|\uD83D\uDE2E\u200D\uD83D\uDCA8|\uD83D\uDC15\u200D\uD83E\uDDBA|\uD83E\uDDD1(?:\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC|\uD83C\uDFFB)?|\uD83D\uDC69(?:\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC|\uD83C\uDFFB)?|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF6\uD83C\uDDE6|\uD83C\uDDF4\uD83C\uDDF2|\uD83D\uDC08\u200D\u2B1B|\u2764\uFE0F\u200D(?:\uD83D\uDD25|\uD83E\uDE79)|\uD83D\uDC41\uFE0F|\uD83C\uDFF3\uFE0F|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|[#\*0-9]\uFE0F\u20E3|\u2764\uFE0F|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])|\uD83C\uDFF4|(?:[\u270A\u270B]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270C\u270D]|\uD83D[\uDD74\uDD90])(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])|[\u270A\u270B]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC08\uDC15\uDC3B\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE2E\uDE35\uDE36\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5]|\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD]|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF]|[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF84\uDF86-\uDF93\uDFA0-\uDFC1\uDFC5\uDFC6\uDFC8\uDFC9\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC07\uDC09-\uDC14\uDC16-\uDC3A\uDC3C-\uDC3E\uDC40\uDC44\uDC45\uDC51-\uDC65\uDC6A\uDC79-\uDC7B\uDC7D-\uDC80\uDC84\uDC88-\uDC8E\uDC90\uDC92-\uDCA9\uDCAB-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDDA4\uDDFB-\uDE2D\uDE2F-\uDE34\uDE37-\uDE44\uDE48-\uDE4A\uDE80-\uDEA2\uDEA4-\uDEB3\uDEB7-\uDEBF\uDEC1-\uDEC5\uDED0-\uDED2\uDED5-\uDED7\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0D\uDD0E\uDD10-\uDD17\uDD1D\uDD20-\uDD25\uDD27-\uDD2F\uDD3A\uDD3F-\uDD45\uDD47-\uDD76\uDD78\uDD7A-\uDDB4\uDDB7\uDDBA\uDDBC-\uDDCB\uDDD0\uDDE0-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6]|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDED5-\uDED7\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDD78\uDD7A-\uDDCB\uDDCD-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26A7\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDED5-\uDED7\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDD78\uDD7A-\uDDCB\uDDCD-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6])\uFE0F|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDC8F\uDC91\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1F\uDD26\uDD30-\uDD39\uDD3C-\uDD3E\uDD77\uDDB5\uDDB6\uDDB8\uDDB9\uDDBB\uDDCD-\uDDCF\uDDD1-\uDDDD])/g;
    };
  }
});

// node_modules/lodash.uniqby/index.js
var require_lodash2 = __commonJS({
  "node_modules/lodash.uniqby/index.js"(exports, module) {
    var LARGE_ARRAY_SIZE = 200;
    var FUNC_ERROR_TEXT = "Expected a function";
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var UNORDERED_COMPARE_FLAG = 1;
    var PARTIAL_COMPARE_FLAG = 2;
    var INFINITY = 1 / 0;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    var reIsPlainProp = /^\w*$/;
    var reLeadingDot = /^\./;
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reEscapeChar = /\\(\\)?/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root2 = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        return freeProcess && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function arrayIncludes(array, value) {
      var length = array ? array.length : 0;
      return !!length && baseIndexOf(array, value, 0) > -1;
    }
    function arrayIncludesWith(array, value, comparator) {
      var index3 = -1, length = array ? array.length : 0;
      while (++index3 < length) {
        if (comparator(value, array[index3])) {
          return true;
        }
      }
      return false;
    }
    function arraySome(array, predicate) {
      var index3 = -1, length = array ? array.length : 0;
      while (++index3 < length) {
        if (predicate(array[index3], index3, array)) {
          return true;
        }
      }
      return false;
    }
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length, index3 = fromIndex + (fromRight ? 1 : -1);
      while (fromRight ? index3-- : ++index3 < length) {
        if (predicate(array[index3], index3, array)) {
          return index3;
        }
      }
      return -1;
    }
    function baseIndexOf(array, value, fromIndex) {
      if (value !== value) {
        return baseFindIndex(array, baseIsNaN, fromIndex);
      }
      var index3 = fromIndex - 1, length = array.length;
      while (++index3 < length) {
        if (array[index3] === value) {
          return index3;
        }
      }
      return -1;
    }
    function baseIsNaN(value) {
      return value !== value;
    }
    function baseProperty(key) {
      return function(object) {
        return object == null ? void 0 : object[key];
      };
    }
    function baseTimes(n, iteratee) {
      var index3 = -1, result = Array(n);
      while (++index3 < n) {
        result[index3] = iteratee(index3);
      }
      return result;
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    function cacheHas(cache, key) {
      return cache.has(key);
    }
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    function isHostObject(value) {
      var result = false;
      if (value != null && typeof value.toString != "function") {
        try {
          result = !!(value + "");
        } catch (e) {
        }
      }
      return result;
    }
    function mapToArray(map3) {
      var index3 = -1, result = Array(map3.size);
      map3.forEach(function(value, key) {
        result[++index3] = [key, value];
      });
      return result;
    }
    function overArg(func, transform3) {
      return function(arg) {
        return func(transform3(arg));
      };
    }
    function setToArray(set) {
      var index3 = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index3] = value;
      });
      return result;
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root2["__core-js_shared__"];
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var Symbol2 = root2.Symbol;
    var Uint8Array2 = root2.Uint8Array;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var splice2 = arrayProto.splice;
    var nativeKeys = overArg(Object.keys, Object);
    var DataView2 = getNative(root2, "DataView");
    var Map2 = getNative(root2, "Map");
    var Promise2 = getNative(root2, "Promise");
    var Set2 = getNative(root2, "Set");
    var WeakMap2 = getNative(root2, "WeakMap");
    var nativeCreate = getNative(Object, "create");
    var dataViewCtorString = toSource(DataView2);
    var mapCtorString = toSource(Map2);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set2);
    var weakMapCtorString = toSource(WeakMap2);
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function Hash(entries) {
      var index3 = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index3 < length) {
        var entry = entries[index3];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
    }
    function hashDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index3 = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index3 < length) {
        var entry = entries[index3];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
    }
    function listCacheDelete(key) {
      var data = this.__data__, index3 = assocIndexOf(data, key);
      if (index3 < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index3 == lastIndex) {
        data.pop();
      } else {
        splice2.call(data, index3, 1);
      }
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index3 = assocIndexOf(data, key);
      return index3 < 0 ? void 0 : data[index3][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index3 = assocIndexOf(data, key);
      if (index3 < 0) {
        data.push([key, value]);
      } else {
        data[index3][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index3 = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index3 < length) {
        var entry = entries[index3];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key) {
      return getMapData(this, key)["delete"](key);
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      getMapData(this, key).set(key, value);
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function SetCache(values) {
      var index3 = -1, length = values ? values.length : 0;
      this.__data__ = new MapCache();
      while (++index3 < length) {
        this.add(values[index3]);
      }
    }
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    function Stack(entries) {
      this.__data__ = new ListCache(entries);
    }
    function stackClear() {
      this.__data__ = new ListCache();
    }
    function stackDelete(key) {
      return this.__data__["delete"](key);
    }
    function stackGet(key) {
      return this.__data__.get(key);
    }
    function stackHas(key) {
      return this.__data__.has(key);
    }
    function stackSet(key, value) {
      var cache = this.__data__;
      if (cache instanceof ListCache) {
        var pairs = cache.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          return this;
        }
        cache = this.__data__ = new MapCache(pairs);
      }
      cache.set(key, value);
      return this;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    function arrayLikeKeys(value, inherited) {
      var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
      var length = result.length, skipIndexes = !!length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseGet(object, path2) {
      path2 = isKey(path2, object) ? [path2] : castPath(path2);
      var index3 = 0, length = path2.length;
      while (object != null && index3 < length) {
        object = object[toKey(path2[index3++])];
      }
      return index3 && index3 == length ? object : void 0;
    }
    function baseGetTag(value) {
      return objectToString.call(value);
    }
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }
    function baseIsEqual(value, other, customizer, bitmask, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObject2(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
    }
    function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
      var objIsArr = isArray(object), othIsArr = isArray(other), objTag = arrayTag, othTag = arrayTag;
      if (!objIsArr) {
        objTag = getTag(object);
        objTag = objTag == argsTag ? objectTag : objTag;
      }
      if (!othIsArr) {
        othTag = getTag(other);
        othTag = othTag == argsTag ? objectTag : othTag;
      }
      var objIsObj = objTag == objectTag && !isHostObject(object), othIsObj = othTag == objectTag && !isHostObject(other), isSameTag = objTag == othTag;
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, equalFunc, customizer, bitmask, stack) : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
      }
      if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack());
          return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack());
      return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
    }
    function baseIsMatch(object, source, matchData, customizer) {
      var index3 = matchData.length, length = index3, noCustomizer = !customizer;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index3--) {
        var data = matchData[index3];
        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
          return false;
        }
      }
      while (++index3 < length) {
        data = matchData[index3];
        var key = data[0], objValue = object[key], srcValue = data[1];
        if (noCustomizer && data[2]) {
          if (objValue === void 0 && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack();
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === void 0 ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack) : result)) {
            return false;
          }
        }
      }
      return true;
    }
    function baseIsNative(value) {
      if (!isObject2(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
    }
    function baseIteratee(value) {
      if (typeof value == "function") {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == "object") {
        return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
      }
      return property(value);
    }
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }
    function baseMatchesProperty(path2, srcValue) {
      if (isKey(path2) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path2), srcValue);
      }
      return function(object) {
        var objValue = get2(object, path2);
        return objValue === void 0 && objValue === srcValue ? hasIn(object, path2) : baseIsEqual(srcValue, objValue, void 0, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
      };
    }
    function basePropertyDeep(path2) {
      return function(object) {
        return baseGet(object, path2);
      };
    }
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function baseUniq(array, iteratee, comparator) {
      var index3 = -1, includes = arrayIncludes, length = array.length, isCommon = true, result = [], seen = result;
      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      } else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache();
      } else {
        seen = iteratee ? [] : result;
      }
      outer:
        while (++index3 < length) {
          var value = array[index3], computed = iteratee ? iteratee(value) : value;
          value = comparator || value !== 0 ? value : 0;
          if (isCommon && computed === computed) {
            var seenIndex = seen.length;
            while (seenIndex--) {
              if (seen[seenIndex] === computed) {
                continue outer;
              }
            }
            if (iteratee) {
              seen.push(computed);
            }
            result.push(value);
          } else if (!includes(seen, computed, comparator)) {
            if (seen !== result) {
              seen.push(computed);
            }
            result.push(value);
          }
        }
      return result;
    }
    function castPath(value) {
      return isArray(value) ? value : stringToPath(value);
    }
    var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop8 : function(values) {
      return new Set2(values);
    };
    function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG, arrLength = array.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index3 = -1, result = true, seen = bitmask & UNORDERED_COMPARE_FLAG ? new SetCache() : void 0;
      stack.set(array, other);
      stack.set(other, array);
      while (++index3 < arrLength) {
        var arrValue = array[index3], othValue = other[index3];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index3, other, array, stack) : customizer(arrValue, othValue, index3, array, other, stack);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue2, othIndex) {
            if (!seen.has(othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, customizer, bitmask, stack))) {
              return seen.add(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
          result = false;
          break;
        }
      }
      stack["delete"](array);
      stack["delete"](other);
      return result;
    }
    function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
        case numberTag:
          return eq(+object, +other);
        case errorTag:
          return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
          return object == other + "";
        case mapTag:
          var convert2 = mapToArray;
        case setTag:
          var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
          convert2 || (convert2 = setToArray);
          if (object.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= UNORDERED_COMPARE_FLAG;
          stack.set(object, other);
          var result = equalArrays(convert2(object), convert2(other), equalFunc, customizer, bitmask, stack);
          stack["delete"](object);
          return result;
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG, objProps = keys2(object), objLength = objProps.length, othProps = keys2(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index3 = objLength;
      while (index3--) {
        var key = objProps[index3];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);
      var skipCtor = isPartial;
      while (++index3 < objLength) {
        key = objProps[index3];
        var objValue = object[key], othValue = other[key];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack["delete"](object);
      stack["delete"](other);
      return result;
    }
    function getMapData(map3, key) {
      var data = map3.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function getMatchData(object) {
      var result = keys2(object), length = result.length;
      while (length--) {
        var key = result[length], value = object[key];
        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    var getTag = baseGetTag;
    if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
      getTag = function(value) {
        var result = objectToString.call(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : void 0;
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    function hasPath(object, path2, hasFunc) {
      path2 = isKey(path2, object) ? [path2] : castPath(path2);
      var result, index3 = -1, length = path2.length;
      while (++index3 < length) {
        var key = toKey(path2[index3]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result) {
        return result;
      }
      var length = object ? object.length : 0;
      return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
    }
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function isStrictComparable(value) {
      return value === value && !isObject2(value);
    }
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
      };
    }
    var stringToPath = memoize(function(string) {
      string = toString2(string);
      var result = [];
      if (reLeadingDot.test(string)) {
        result.push("");
      }
      string.replace(rePropName, function(match, number, quote, string2) {
        result.push(quote ? string2.replace(reEscapeChar, "$1") : number || match);
      });
      return result;
    });
    function toKey(value) {
      if (typeof value == "string" || isSymbol(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    function uniqBy10(array, iteratee) {
      return array && array.length ? baseUniq(array, baseIteratee(iteratee, 2)) : [];
    }
    function memoize(func, resolver) {
      if (typeof func != "function" || resolver && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result);
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache)();
      return memoized;
    }
    memoize.Cache = MapCache;
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    function isArguments(value) {
      return isArrayLikeObject(value) && hasOwnProperty.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
    }
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    function isFunction(value) {
      var tag = isObject2(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject2(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    function toString2(value) {
      return value == null ? "" : baseToString(value);
    }
    function get2(object, path2, defaultValue) {
      var result = object == null ? void 0 : baseGet(object, path2);
      return result === void 0 ? defaultValue : result;
    }
    function hasIn(object, path2) {
      return object != null && hasPath(object, path2, baseHasIn);
    }
    function keys2(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    function identity(value) {
      return value;
    }
    function noop8() {
    }
    function property(path2) {
      return isKey(path2) ? baseProperty(toKey(path2)) : basePropertyDeep(path2);
    }
    module.exports = uniqBy10;
  }
});

// node_modules/textarea-caret/index.js
var require_textarea_caret = __commonJS({
  "node_modules/textarea-caret/index.js"(exports, module) {
    (function() {
      var properties = [
        "direction",
        // RTL support
        "boxSizing",
        "width",
        // on Chrome and IE, exclude the scrollbar, so the mirror div wraps exactly as the textarea does
        "height",
        "overflowX",
        "overflowY",
        // copy the scrollbar for IE
        "borderTopWidth",
        "borderRightWidth",
        "borderBottomWidth",
        "borderLeftWidth",
        "borderStyle",
        "paddingTop",
        "paddingRight",
        "paddingBottom",
        "paddingLeft",
        // https://developer.mozilla.org/en-US/docs/Web/CSS/font
        "fontStyle",
        "fontVariant",
        "fontWeight",
        "fontStretch",
        "fontSize",
        "fontSizeAdjust",
        "lineHeight",
        "fontFamily",
        "textAlign",
        "textTransform",
        "textIndent",
        "textDecoration",
        // might not make a difference, but better be safe
        "letterSpacing",
        "wordSpacing",
        "tabSize",
        "MozTabSize"
      ];
      var isBrowser = typeof window !== "undefined";
      var isFirefox = isBrowser && window.mozInnerScreenX != null;
      function getCaretCoordinates2(element2, position, options2) {
        if (!isBrowser) {
          throw new Error("textarea-caret-position#getCaretCoordinates should only be called in a browser");
        }
        var debug = options2 && options2.debug || false;
        if (debug) {
          var el = document.querySelector("#input-textarea-caret-position-mirror-div");
          if (el) el.parentNode.removeChild(el);
        }
        var div = document.createElement("div");
        div.id = "input-textarea-caret-position-mirror-div";
        document.body.appendChild(div);
        var style = div.style;
        var computed = window.getComputedStyle ? window.getComputedStyle(element2) : element2.currentStyle;
        var isInput = element2.nodeName === "INPUT";
        style.whiteSpace = "pre-wrap";
        if (!isInput)
          style.wordWrap = "break-word";
        style.position = "absolute";
        if (!debug)
          style.visibility = "hidden";
        properties.forEach(function(prop) {
          if (isInput && prop === "lineHeight") {
            style.lineHeight = computed.height;
          } else {
            style[prop] = computed[prop];
          }
        });
        if (isFirefox) {
          if (element2.scrollHeight > parseInt(computed.height))
            style.overflowY = "scroll";
        } else {
          style.overflow = "hidden";
        }
        div.textContent = element2.value.substring(0, position);
        if (isInput)
          div.textContent = div.textContent.replace(/\s/g, " ");
        var span = document.createElement("span");
        span.textContent = element2.value.substring(position) || ".";
        div.appendChild(span);
        var coordinates = {
          top: span.offsetTop + parseInt(computed["borderTopWidth"]),
          left: span.offsetLeft + parseInt(computed["borderLeftWidth"]),
          height: parseInt(computed["lineHeight"])
        };
        if (debug) {
          span.style.backgroundColor = "#aaa";
        } else {
          document.body.removeChild(div);
        }
        return coordinates;
      }
      if (typeof module != "undefined" && typeof module.exports != "undefined") {
        module.exports = getCaretCoordinates2;
      } else if (isBrowser) {
        window.getCaretCoordinates = getCaretCoordinates2;
      }
    })();
  }
});

// node_modules/lodash.debounce/index.js
var require_lodash3 = __commonJS({
  "node_modules/lodash.debounce/index.js"(exports, module) {
    var FUNC_ERROR_TEXT = "Expected a function";
    var NAN = 0 / 0;
    var symbolTag = "[object Symbol]";
    var reTrim = /^\s+|\s+$/g;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root2 = freeGlobal || freeSelf || Function("return this")();
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    var nativeMax = Math.max;
    var nativeMin = Math.min;
    var now = function() {
      return root2.Date.now();
    };
    function debounce7(func, wait, options2) {
      var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject2(options2)) {
        leading = !!options2.leading;
        maxing = "maxWait" in options2;
        maxWait = maxing ? nativeMax(toNumber(options2.maxWait) || 0, wait) : maxWait;
        trailing = "trailing" in options2 ? !!options2.trailing : trailing;
      }
      function invokeFunc(time) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = void 0;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }
      function leadingEdge(time) {
        lastInvokeTime = time;
        timerId = setTimeout(timerExpired, wait);
        return leading ? invokeFunc(time) : result;
      }
      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, result2 = wait - timeSinceLastCall;
        return maxing ? nativeMin(result2, maxWait - timeSinceLastInvoke) : result2;
      }
      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }
      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        timerId = setTimeout(timerExpired, remainingWait(time));
      }
      function trailingEdge(time) {
        timerId = void 0;
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = void 0;
        return result;
      }
      function cancel() {
        if (timerId !== void 0) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = void 0;
      }
      function flush() {
        return timerId === void 0 ? result : trailingEdge(now());
      }
      function debounced() {
        var time = now(), isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
          if (timerId === void 0) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === void 0) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }
    function isObject2(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject2(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject2(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, "");
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    module.exports = debounce7;
  }
});

// node_modules/lodash.defaultsdeep/index.js
var require_lodash4 = __commonJS({
  "node_modules/lodash.defaultsdeep/index.js"(exports, module) {
    var LARGE_ARRAY_SIZE = 200;
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var HOT_COUNT = 800;
    var HOT_SPAN = 16;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var asyncTag = "[object AsyncFunction]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var nullTag = "[object Null]";
    var objectTag = "[object Object]";
    var proxyTag = "[object Proxy]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var undefinedTag = "[object Undefined]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root2 = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        var types2 = freeModule && freeModule.require && freeModule.require("util").types;
        if (types2) {
          return types2;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    function baseTimes(n, iteratee) {
      var index3 = -1, result = Array(n);
      while (++index3 < n) {
        result[index3] = iteratee(index3);
      }
      return result;
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    function overArg(func, transform3) {
      return function(arg) {
        return func(transform3(arg));
      };
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root2["__core-js_shared__"];
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var nativeObjectToString = objectProto.toString;
    var objectCtorString = funcToString.call(Object);
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var Buffer = moduleExports ? root2.Buffer : void 0;
    var Symbol2 = root2.Symbol;
    var Uint8Array2 = root2.Uint8Array;
    var allocUnsafe = Buffer ? Buffer.allocUnsafe : void 0;
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    var objectCreate = Object.create;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var splice2 = arrayProto.splice;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    var defineProperty = function() {
      try {
        var func = getNative(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e) {
      }
    }();
    var nativeIsBuffer = Buffer ? Buffer.isBuffer : void 0;
    var nativeMax = Math.max;
    var nativeNow = Date.now;
    var Map2 = getNative(root2, "Map");
    var nativeCreate = getNative(Object, "create");
    var baseCreate = /* @__PURE__ */ function() {
      function object() {
      }
      return function(proto) {
        if (!isObject2(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object();
        object.prototype = void 0;
        return result;
      };
    }();
    function Hash(entries) {
      var index3 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index3 < length) {
        var entry = entries[index3];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index3 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index3 < length) {
        var entry = entries[index3];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    function listCacheDelete(key) {
      var data = this.__data__, index3 = assocIndexOf(data, key);
      if (index3 < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index3 == lastIndex) {
        data.pop();
      } else {
        splice2.call(data, index3, 1);
      }
      --this.size;
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index3 = assocIndexOf(data, key);
      return index3 < 0 ? void 0 : data[index3][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index3 = assocIndexOf(data, key);
      if (index3 < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index3][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index3 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index3 < length) {
        var entry = entries[index3];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      var data = getMapData(this, key), size = data.size;
      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    function stackDelete(key) {
      var data = this.__data__, result = data["delete"](key);
      this.size = data.size;
      return result;
    }
    function stackGet(key) {
      return this.__data__.get(key);
    }
    function stackHas(key) {
      return this.__data__.has(key);
    }
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
        (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
        isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function assignMergeValue(object, key, value) {
      if (value !== void 0 && !eq(object[key], value) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseAssignValue(object, key, value) {
      if (key == "__proto__" && defineProperty) {
        defineProperty(object, key, {
          "configurable": true,
          "enumerable": true,
          "value": value,
          "writable": true
        });
      } else {
        object[key] = value;
      }
    }
    var baseFor = createBaseFor();
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    function baseIsNative(value) {
      if (!isObject2(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    function baseKeysIn(object) {
      if (!isObject2(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object), result = [];
      for (var key in object) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack());
        if (isObject2(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        } else {
          var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
          if (newValue === void 0) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
      var isCommon = newValue === void 0;
      if (isCommon) {
        var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          } else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          } else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          } else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          } else {
            newValue = [];
          }
        } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          } else if (!isObject2(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        } else {
          isCommon = false;
        }
      }
      if (isCommon) {
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack["delete"](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }
    function baseRest(func, start2) {
      return setToString(overRest(func, start2, identity), func + "");
    }
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": constant(string),
        "writable": true
      });
    };
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
      buffer.copy(result);
      return result;
    }
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
      return result;
    }
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }
    function copyArray(source, array) {
      var index3 = -1, length = source.length;
      array || (array = Array(length));
      while (++index3 < length) {
        array[index3] = source[index3];
      }
      return array;
    }
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});
      var index3 = -1, length = props.length;
      while (++index3 < length) {
        var key = props[index3];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
        if (newValue === void 0) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index3 = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
        customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? void 0 : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index3 < length) {
          var source = sources[index3];
          if (source) {
            assigner(object, source, index3, customizer);
          }
        }
        return object;
      });
    }
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index3 = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
        while (length--) {
          var key = props[fromRight ? length : ++index3];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject2(objValue) && isObject2(srcValue)) {
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, void 0, customDefaultsMerge, stack);
        stack["delete"](srcValue);
      }
      return objValue;
    }
    function getMapData(map3, key) {
      var data = map3.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    function initCloneObject(object) {
      return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isIterateeCall(value, index3, object) {
      if (!isObject2(object)) {
        return false;
      }
      var type = typeof index3;
      if (type == "number" ? isArrayLike(object) && isIndex(index3, object.length) : type == "string" && index3 in object) {
        return eq(object[index3], value);
      }
      return false;
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    function overRest(func, start2, transform3) {
      start2 = nativeMax(start2 === void 0 ? func.length - 1 : start2, 0);
      return function() {
        var args = arguments, index3 = -1, length = nativeMax(args.length - start2, 0), array = Array(length);
        while (++index3 < length) {
          array[index3] = args[start2 + index3];
        }
        index3 = -1;
        var otherArgs = Array(start2 + 1);
        while (++index3 < start2) {
          otherArgs[index3] = args[index3];
        }
        otherArgs[start2] = transform3(array);
        return apply(func, this, otherArgs);
      };
    }
    function safeGet(object, key) {
      if (key === "constructor" && typeof object[key] === "function") {
        return;
      }
      if (key == "__proto__") {
        return;
      }
      return object[key];
    }
    var setToString = shortOut(baseSetToString);
    function shortOut(func) {
      var count = 0, lastCalled = 0;
      return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(void 0, arguments);
      };
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    var isArguments = baseIsArguments(/* @__PURE__ */ function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    var isBuffer = nativeIsBuffer || stubFalse;
    function isFunction(value) {
      if (!isObject2(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject2(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }
    var defaultsDeep2 = baseRest(function(args) {
      args.push(void 0, customDefaultsMerge);
      return apply(mergeWith2, void 0, args);
    });
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }
    var mergeWith2 = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });
    function constant(value) {
      return function() {
        return value;
      };
    }
    function identity(value) {
      return value;
    }
    function stubFalse() {
      return false;
    }
    module.exports = defaultsDeep2;
  }
});

// node_modules/dayjs/plugin/updateLocale.js
var require_updateLocale = __commonJS({
  "node_modules/dayjs/plugin/updateLocale.js"(exports, module) {
    !function(e, n) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = n() : "function" == typeof define && define.amd ? define(n) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_plugin_updateLocale = n();
    }(exports, function() {
      "use strict";
      return function(e, n, t2) {
        t2.updateLocale = function(e2, n2) {
          var o = t2.Ls[e2];
          if (o) return (n2 ? Object.keys(n2) : []).forEach(function(e3) {
            o[e3] = n2[e3];
          }), o;
        };
      };
    });
  }
});

// node_modules/dayjs/plugin/localeData.js
var require_localeData = __commonJS({
  "node_modules/dayjs/plugin/localeData.js"(exports, module) {
    !function(n, e) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define(e) : (n = "undefined" != typeof globalThis ? globalThis : n || self).dayjs_plugin_localeData = e();
    }(exports, function() {
      "use strict";
      return function(n, e, t2) {
        var r = e.prototype, o = function(n2) {
          return n2 && (n2.indexOf ? n2 : n2.s);
        }, u2 = function(n2, e2, t3, r2, u3) {
          var i2 = n2.name ? n2 : n2.$locale(), a2 = o(i2[e2]), s2 = o(i2[t3]), f = a2 || s2.map(function(n3) {
            return n3.slice(0, r2);
          });
          if (!u3) return f;
          var d = i2.weekStart;
          return f.map(function(n3, e3) {
            return f[(e3 + (d || 0)) % 7];
          });
        }, i = function() {
          return t2.Ls[t2.locale()];
        }, a = function(n2, e2) {
          return n2.formats[e2] || function(n3) {
            return n3.replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function(n4, e3, t3) {
              return e3 || t3.slice(1);
            });
          }(n2.formats[e2.toUpperCase()]);
        }, s = function() {
          var n2 = this;
          return { months: function(e2) {
            return e2 ? e2.format("MMMM") : u2(n2, "months");
          }, monthsShort: function(e2) {
            return e2 ? e2.format("MMM") : u2(n2, "monthsShort", "months", 3);
          }, firstDayOfWeek: function() {
            return n2.$locale().weekStart || 0;
          }, weekdays: function(e2) {
            return e2 ? e2.format("dddd") : u2(n2, "weekdays");
          }, weekdaysMin: function(e2) {
            return e2 ? e2.format("dd") : u2(n2, "weekdaysMin", "weekdays", 2);
          }, weekdaysShort: function(e2) {
            return e2 ? e2.format("ddd") : u2(n2, "weekdaysShort", "weekdays", 3);
          }, longDateFormat: function(e2) {
            return a(n2.$locale(), e2);
          }, meridiem: this.$locale().meridiem, ordinal: this.$locale().ordinal };
        };
        r.localeData = function() {
          return s.bind(this)();
        }, t2.localeData = function() {
          var n2 = i();
          return { firstDayOfWeek: function() {
            return n2.weekStart || 0;
          }, weekdays: function() {
            return t2.weekdays();
          }, weekdaysShort: function() {
            return t2.weekdaysShort();
          }, weekdaysMin: function() {
            return t2.weekdaysMin();
          }, months: function() {
            return t2.months();
          }, monthsShort: function() {
            return t2.monthsShort();
          }, longDateFormat: function(e2) {
            return a(n2, e2);
          }, meridiem: n2.meridiem, ordinal: n2.ordinal };
        }, t2.months = function() {
          return u2(i(), "months");
        }, t2.monthsShort = function() {
          return u2(i(), "monthsShort", "months", 3);
        }, t2.weekdays = function(n2) {
          return u2(i(), "weekdays", null, null, n2);
        }, t2.weekdaysShort = function(n2) {
          return u2(i(), "weekdaysShort", "weekdays", 3, n2);
        }, t2.weekdaysMin = function(n2) {
          return u2(i(), "weekdaysMin", "weekdays", 2, n2);
        };
      };
    });
  }
});

// node_modules/dayjs/plugin/relativeTime.js
var require_relativeTime = __commonJS({
  "node_modules/dayjs/plugin/relativeTime.js"(exports, module) {
    !function(r, e) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define(e) : (r = "undefined" != typeof globalThis ? globalThis : r || self).dayjs_plugin_relativeTime = e();
    }(exports, function() {
      "use strict";
      return function(r, e, t2) {
        r = r || {};
        var n = e.prototype, o = { future: "in %s", past: "%s ago", s: "a few seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" };
        function i(r2, e2, t3, o2) {
          return n.fromToBase(r2, e2, t3, o2);
        }
        t2.en.relativeTime = o, n.fromToBase = function(e2, n2, i2, d2, u2) {
          for (var f, a, s, l = i2.$locale().relativeTime || o, h = r.thresholds || [{ l: "s", r: 44, d: "second" }, { l: "m", r: 89 }, { l: "mm", r: 44, d: "minute" }, { l: "h", r: 89 }, { l: "hh", r: 21, d: "hour" }, { l: "d", r: 35 }, { l: "dd", r: 25, d: "day" }, { l: "M", r: 45 }, { l: "MM", r: 10, d: "month" }, { l: "y", r: 17 }, { l: "yy", d: "year" }], m = h.length, c = 0; c < m; c += 1) {
            var y = h[c];
            y.d && (f = d2 ? t2(e2).diff(i2, y.d, true) : i2.diff(e2, y.d, true));
            var p = (r.rounding || Math.round)(Math.abs(f));
            if (s = f > 0, p <= y.r || !y.r) {
              p <= 1 && c > 0 && (y = h[c - 1]);
              var v = l[y.l];
              u2 && (p = u2("" + p)), a = "string" == typeof v ? v.replace("%d", p) : v(p, n2, y.l, s);
              break;
            }
          }
          if (n2) return a;
          var M = s ? l.future : l.past;
          return "function" == typeof M ? M(a) : M.replace("%s", a);
        }, n.to = function(r2, e2) {
          return i(r2, e2, this, true);
        }, n.from = function(r2, e2) {
          return i(r2, e2, this);
        };
        var d = function(r2) {
          return r2.$u ? t2.utc() : t2();
        };
        n.toNow = function(r2) {
          return this.to(d(this), r2);
        }, n.fromNow = function(r2) {
          return this.from(d(this), r2);
        };
      };
    });
  }
});

// node_modules/dayjs/plugin/utc.js
var require_utc = __commonJS({
  "node_modules/dayjs/plugin/utc.js"(exports, module) {
    !function(t2, i) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = i() : "function" == typeof define && define.amd ? define(i) : (t2 = "undefined" != typeof globalThis ? globalThis : t2 || self).dayjs_plugin_utc = i();
    }(exports, function() {
      "use strict";
      var t2 = "minute", i = /[+-]\d\d(?::?\d\d)?/g, e = /([+-]|\d\d)/g;
      return function(s, f, n) {
        var u2 = f.prototype;
        n.utc = function(t3) {
          var i2 = { date: t3, utc: true, args: arguments };
          return new f(i2);
        }, u2.utc = function(i2) {
          var e2 = n(this.toDate(), { locale: this.$L, utc: true });
          return i2 ? e2.add(this.utcOffset(), t2) : e2;
        }, u2.local = function() {
          return n(this.toDate(), { locale: this.$L, utc: false });
        };
        var o = u2.parse;
        u2.parse = function(t3) {
          t3.utc && (this.$u = true), this.$utils().u(t3.$offset) || (this.$offset = t3.$offset), o.call(this, t3);
        };
        var r = u2.init;
        u2.init = function() {
          if (this.$u) {
            var t3 = this.$d;
            this.$y = t3.getUTCFullYear(), this.$M = t3.getUTCMonth(), this.$D = t3.getUTCDate(), this.$W = t3.getUTCDay(), this.$H = t3.getUTCHours(), this.$m = t3.getUTCMinutes(), this.$s = t3.getUTCSeconds(), this.$ms = t3.getUTCMilliseconds();
          } else r.call(this);
        };
        var a = u2.utcOffset;
        u2.utcOffset = function(s2, f2) {
          var n2 = this.$utils().u;
          if (n2(s2)) return this.$u ? 0 : n2(this.$offset) ? a.call(this) : this.$offset;
          if ("string" == typeof s2 && (s2 = function(t3) {
            void 0 === t3 && (t3 = "");
            var s3 = t3.match(i);
            if (!s3) return null;
            var f3 = ("" + s3[0]).match(e) || ["-", 0, 0], n3 = f3[0], u4 = 60 * +f3[1] + +f3[2];
            return 0 === u4 ? 0 : "+" === n3 ? u4 : -u4;
          }(s2), null === s2)) return this;
          var u3 = Math.abs(s2) <= 16 ? 60 * s2 : s2, o2 = this;
          if (f2) return o2.$offset = u3, o2.$u = 0 === s2, o2;
          if (0 !== s2) {
            var r2 = this.$u ? this.toDate().getTimezoneOffset() : -1 * this.utcOffset();
            (o2 = this.local().add(u3 + r2, t2)).$offset = u3, o2.$x.$localOffset = r2;
          } else o2 = this.utc();
          return o2;
        };
        var h = u2.format;
        u2.format = function(t3) {
          var i2 = t3 || (this.$u ? "YYYY-MM-DDTHH:mm:ss[Z]" : "");
          return h.call(this, i2);
        }, u2.valueOf = function() {
          var t3 = this.$utils().u(this.$offset) ? 0 : this.$offset + (this.$x.$localOffset || this.$d.getTimezoneOffset());
          return this.$d.valueOf() - 6e4 * t3;
        }, u2.isUTC = function() {
          return !!this.$u;
        }, u2.toISOString = function() {
          return this.toDate().toISOString();
        }, u2.toString = function() {
          return this.toDate().toUTCString();
        };
        var l = u2.toDate;
        u2.toDate = function(t3) {
          return "s" === t3 && this.$offset ? n(this.format("YYYY-MM-DD HH:mm:ss:SSS")).toDate() : l.call(this);
        };
        var c = u2.diff;
        u2.diff = function(t3, i2, e2) {
          if (t3 && this.$u === t3.$u) return c.call(this, t3, i2, e2);
          var s2 = this.local(), f2 = n(t3).local();
          return c.call(s2, f2, i2, e2);
        };
      };
    });
  }
});

// node_modules/dayjs/plugin/timezone.js
var require_timezone = __commonJS({
  "node_modules/dayjs/plugin/timezone.js"(exports, module) {
    !function(t2, e) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define(e) : (t2 = "undefined" != typeof globalThis ? globalThis : t2 || self).dayjs_plugin_timezone = e();
    }(exports, function() {
      "use strict";
      var t2 = { year: 0, month: 1, day: 2, hour: 3, minute: 4, second: 5 }, e = {};
      return function(n, i, o) {
        var r, a = function(t3, n2, i2) {
          void 0 === i2 && (i2 = {});
          var o2 = new Date(t3), r2 = function(t4, n3) {
            void 0 === n3 && (n3 = {});
            var i3 = n3.timeZoneName || "short", o3 = t4 + "|" + i3, r3 = e[o3];
            return r3 || (r3 = new Intl.DateTimeFormat("en-US", { hour12: false, timeZone: t4, year: "numeric", month: "2-digit", day: "2-digit", hour: "2-digit", minute: "2-digit", second: "2-digit", timeZoneName: i3 }), e[o3] = r3), r3;
          }(n2, i2);
          return r2.formatToParts(o2);
        }, u2 = function(e2, n2) {
          for (var i2 = a(e2, n2), r2 = [], u3 = 0; u3 < i2.length; u3 += 1) {
            var f2 = i2[u3], s2 = f2.type, m = f2.value, c = t2[s2];
            c >= 0 && (r2[c] = parseInt(m, 10));
          }
          var d = r2[3], l = 24 === d ? 0 : d, h = r2[0] + "-" + r2[1] + "-" + r2[2] + " " + l + ":" + r2[4] + ":" + r2[5] + ":000", v = +e2;
          return (o.utc(h).valueOf() - (v -= v % 1e3)) / 6e4;
        }, f = i.prototype;
        f.tz = function(t3, e2) {
          void 0 === t3 && (t3 = r);
          var n2, i2 = this.utcOffset(), a2 = this.toDate(), u3 = a2.toLocaleString("en-US", { timeZone: t3 }), f2 = Math.round((a2 - new Date(u3)) / 1e3 / 60), s2 = 15 * -Math.round(a2.getTimezoneOffset() / 15) - f2;
          if (!Number(s2)) n2 = this.utcOffset(0, e2);
          else if (n2 = o(u3, { locale: this.$L }).$set("millisecond", this.$ms).utcOffset(s2, true), e2) {
            var m = n2.utcOffset();
            n2 = n2.add(i2 - m, "minute");
          }
          return n2.$x.$timezone = t3, n2;
        }, f.offsetName = function(t3) {
          var e2 = this.$x.$timezone || o.tz.guess(), n2 = a(this.valueOf(), e2, { timeZoneName: t3 }).find(function(t4) {
            return "timezonename" === t4.type.toLowerCase();
          });
          return n2 && n2.value;
        };
        var s = f.startOf;
        f.startOf = function(t3, e2) {
          if (!this.$x || !this.$x.$timezone) return s.call(this, t3, e2);
          var n2 = o(this.format("YYYY-MM-DD HH:mm:ss:SSS"), { locale: this.$L });
          return s.call(n2, t3, e2).tz(this.$x.$timezone, true);
        }, o.tz = function(t3, e2, n2) {
          var i2 = n2 && e2, a2 = n2 || e2 || r, f2 = u2(+o(), a2);
          if ("string" != typeof t3) return o(t3).tz(a2);
          var s2 = function(t4, e3, n3) {
            var i3 = t4 - 60 * e3 * 1e3, o2 = u2(i3, n3);
            if (e3 === o2) return [i3, e3];
            var r2 = u2(i3 -= 60 * (o2 - e3) * 1e3, n3);
            return o2 === r2 ? [i3, o2] : [t4 - 60 * Math.min(o2, r2) * 1e3, Math.max(o2, r2)];
          }(o.utc(t3, i2).valueOf(), f2, a2), m = s2[0], c = s2[1], d = o(m).utcOffset(c);
          return d.$x.$timezone = a2, d;
        }, o.tz.guess = function() {
          return Intl.DateTimeFormat().resolvedOptions().timeZone;
        }, o.tz.setDefault = function(t3) {
          r = t3;
        };
      };
    });
  }
});

// node_modules/dayjs/locale/de.js
var require_de = __commonJS({
  "node_modules/dayjs/locale/de.js"(exports, module) {
    !function(e, n) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = n(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], n) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_locale_de = n(e.dayjs);
    }(exports, function(e) {
      "use strict";
      function n(e2) {
        return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
      }
      var t2 = n(e), a = { s: "ein paar Sekunden", m: ["eine Minute", "einer Minute"], mm: "%d Minuten", h: ["eine Stunde", "einer Stunde"], hh: "%d Stunden", d: ["ein Tag", "einem Tag"], dd: ["%d Tage", "%d Tagen"], M: ["ein Monat", "einem Monat"], MM: ["%d Monate", "%d Monaten"], y: ["ein Jahr", "einem Jahr"], yy: ["%d Jahre", "%d Jahren"] };
      function i(e2, n2, t3) {
        var i2 = a[t3];
        return Array.isArray(i2) && (i2 = i2[n2 ? 0 : 1]), i2.replace("%d", e2);
      }
      var r = { name: "de", weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"), weekdaysShort: "So._Mo._Di._Mi._Do._Fr._Sa.".split("_"), weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"), months: "Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"), monthsShort: "Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sept._Okt._Nov._Dez.".split("_"), ordinal: function(e2) {
        return e2 + ".";
      }, weekStart: 1, yearStart: 4, formats: { LTS: "HH:mm:ss", LT: "HH:mm", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY HH:mm", LLLL: "dddd, D. MMMM YYYY HH:mm" }, relativeTime: { future: "in %s", past: "vor %s", s: i, m: i, mm: i, h: i, hh: i, d: i, dd: i, M: i, MM: i, y: i, yy: i } };
      return t2.default.locale(r, null, true), r;
    });
  }
});

// node_modules/dayjs/locale/es.js
var require_es2 = __commonJS({
  "node_modules/dayjs/locale/es.js"(exports, module) {
    !function(e, o) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = o(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], o) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_locale_es = o(e.dayjs);
    }(exports, function(e) {
      "use strict";
      function o(e2) {
        return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
      }
      var s = o(e), d = { name: "es", monthsShort: "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"), weekdays: "domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"), weekdaysShort: "dom._lun._mar._mié._jue._vie._sáb.".split("_"), weekdaysMin: "do_lu_ma_mi_ju_vi_sá".split("_"), months: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"), weekStart: 1, formats: { LT: "H:mm", LTS: "H:mm:ss", L: "DD/MM/YYYY", LL: "D [de] MMMM [de] YYYY", LLL: "D [de] MMMM [de] YYYY H:mm", LLLL: "dddd, D [de] MMMM [de] YYYY H:mm" }, relativeTime: { future: "en %s", past: "hace %s", s: "unos segundos", m: "un minuto", mm: "%d minutos", h: "una hora", hh: "%d horas", d: "un día", dd: "%d días", M: "un mes", MM: "%d meses", y: "un año", yy: "%d años" }, ordinal: function(e2) {
        return e2 + "º";
      } };
      return s.default.locale(d, null, true), d;
    });
  }
});

// node_modules/dayjs/locale/fr.js
var require_fr = __commonJS({
  "node_modules/dayjs/locale/fr.js"(exports, module) {
    !function(e, n) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = n(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], n) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_locale_fr = n(e.dayjs);
    }(exports, function(e) {
      "use strict";
      function n(e2) {
        return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
      }
      var t2 = n(e), i = { name: "fr", weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"), weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"), weekdaysMin: "di_lu_ma_me_je_ve_sa".split("_"), months: "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"), monthsShort: "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"), weekStart: 1, yearStart: 4, formats: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, relativeTime: { future: "dans %s", past: "il y a %s", s: "quelques secondes", m: "une minute", mm: "%d minutes", h: "une heure", hh: "%d heures", d: "un jour", dd: "%d jours", M: "un mois", MM: "%d mois", y: "un an", yy: "%d ans" }, ordinal: function(e2) {
        return "" + e2 + (1 === e2 ? "er" : "");
      } };
      return t2.default.locale(i, null, true), i;
    });
  }
});

// node_modules/dayjs/locale/hi.js
var require_hi = __commonJS({
  "node_modules/dayjs/locale/hi.js"(exports, module) {
    !function(_23, e) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = e(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], e) : (_23 = "undefined" != typeof globalThis ? globalThis : _23 || self).dayjs_locale_hi = e(_23.dayjs);
    }(exports, function(_23) {
      "use strict";
      function e(_24) {
        return _24 && "object" == typeof _24 && "default" in _24 ? _24 : { default: _24 };
      }
      var t2 = e(_23), d = { name: "hi", weekdays: "रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"), months: "जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"), weekdaysShort: "रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"), monthsShort: "जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"), weekdaysMin: "र_सो_मं_बु_गु_शु_श".split("_"), ordinal: function(_24) {
        return _24;
      }, formats: { LT: "A h:mm बजे", LTS: "A h:mm:ss बजे", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, A h:mm बजे", LLLL: "dddd, D MMMM YYYY, A h:mm बजे" }, relativeTime: { future: "%s में", past: "%s पहले", s: "कुछ ही क्षण", m: "एक मिनट", mm: "%d मिनट", h: "एक घंटा", hh: "%d घंटे", d: "एक दिन", dd: "%d दिन", M: "एक महीने", MM: "%d महीने", y: "एक वर्ष", yy: "%d वर्ष" } };
      return t2.default.locale(d, null, true), d;
    });
  }
});

// node_modules/dayjs/locale/it.js
var require_it = __commonJS({
  "node_modules/dayjs/locale/it.js"(exports, module) {
    !function(e, o) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = o(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], o) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_locale_it = o(e.dayjs);
    }(exports, function(e) {
      "use strict";
      function o(e2) {
        return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
      }
      var t2 = o(e), n = { name: "it", weekdays: "domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"), weekdaysShort: "dom_lun_mar_mer_gio_ven_sab".split("_"), weekdaysMin: "do_lu_ma_me_gi_ve_sa".split("_"), months: "gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"), weekStart: 1, monthsShort: "gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"), formats: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, relativeTime: { future: "tra %s", past: "%s fa", s: "qualche secondo", m: "un minuto", mm: "%d minuti", h: "un' ora", hh: "%d ore", d: "un giorno", dd: "%d giorni", M: "un mese", MM: "%d mesi", y: "un anno", yy: "%d anni" }, ordinal: function(e2) {
        return e2 + "º";
      } };
      return t2.default.locale(n, null, true), n;
    });
  }
});

// node_modules/dayjs/locale/ja.js
var require_ja = __commonJS({
  "node_modules/dayjs/locale/ja.js"(exports, module) {
    !function(e, _23) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = _23(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], _23) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_locale_ja = _23(e.dayjs);
    }(exports, function(e) {
      "use strict";
      function _23(e2) {
        return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
      }
      var t2 = _23(e), d = { name: "ja", weekdays: "日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"), weekdaysShort: "日_月_火_水_木_金_土".split("_"), weekdaysMin: "日_月_火_水_木_金_土".split("_"), months: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"), monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"), ordinal: function(e2) {
        return e2 + "日";
      }, formats: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY/MM/DD", LL: "YYYY年M月D日", LLL: "YYYY年M月D日 HH:mm", LLLL: "YYYY年M月D日 dddd HH:mm", l: "YYYY/MM/DD", ll: "YYYY年M月D日", lll: "YYYY年M月D日 HH:mm", llll: "YYYY年M月D日(ddd) HH:mm" }, meridiem: function(e2) {
        return e2 < 12 ? "午前" : "午後";
      }, relativeTime: { future: "%s後", past: "%s前", s: "数秒", m: "1分", mm: "%d分", h: "1時間", hh: "%d時間", d: "1日", dd: "%d日", M: "1ヶ月", MM: "%dヶ月", y: "1年", yy: "%d年" } };
      return t2.default.locale(d, null, true), d;
    });
  }
});

// node_modules/dayjs/locale/ko.js
var require_ko = __commonJS({
  "node_modules/dayjs/locale/ko.js"(exports, module) {
    !function(e, _23) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = _23(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], _23) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_locale_ko = _23(e.dayjs);
    }(exports, function(e) {
      "use strict";
      function _23(e2) {
        return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
      }
      var d = _23(e), t2 = { name: "ko", weekdays: "일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"), weekdaysShort: "일_월_화_수_목_금_토".split("_"), weekdaysMin: "일_월_화_수_목_금_토".split("_"), months: "1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"), monthsShort: "1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"), ordinal: function(e2) {
        return e2 + "일";
      }, formats: { LT: "A h:mm", LTS: "A h:mm:ss", L: "YYYY.MM.DD.", LL: "YYYY년 MMMM D일", LLL: "YYYY년 MMMM D일 A h:mm", LLLL: "YYYY년 MMMM D일 dddd A h:mm", l: "YYYY.MM.DD.", ll: "YYYY년 MMMM D일", lll: "YYYY년 MMMM D일 A h:mm", llll: "YYYY년 MMMM D일 dddd A h:mm" }, meridiem: function(e2) {
        return e2 < 12 ? "오전" : "오후";
      }, relativeTime: { future: "%s 후", past: "%s 전", s: "몇 초", m: "1분", mm: "%d분", h: "한 시간", hh: "%d시간", d: "하루", dd: "%d일", M: "한 달", MM: "%d달", y: "일 년", yy: "%d년" } };
      return d.default.locale(t2, null, true), t2;
    });
  }
});

// node_modules/dayjs/locale/nl.js
var require_nl = __commonJS({
  "node_modules/dayjs/locale/nl.js"(exports, module) {
    !function(e, a) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = a(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], a) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_locale_nl = a(e.dayjs);
    }(exports, function(e) {
      "use strict";
      function a(e2) {
        return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
      }
      var d = a(e), n = { name: "nl", weekdays: "zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"), weekdaysShort: "zo._ma._di._wo._do._vr._za.".split("_"), weekdaysMin: "zo_ma_di_wo_do_vr_za".split("_"), months: "januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"), monthsShort: "jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"), ordinal: function(e2) {
        return "[" + e2 + (1 === e2 || 8 === e2 || e2 >= 20 ? "ste" : "de") + "]";
      }, weekStart: 1, yearStart: 4, formats: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD-MM-YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, relativeTime: { future: "over %s", past: "%s geleden", s: "een paar seconden", m: "een minuut", mm: "%d minuten", h: "een uur", hh: "%d uur", d: "een dag", dd: "%d dagen", M: "een maand", MM: "%d maanden", y: "een jaar", yy: "%d jaar" } };
      return d.default.locale(n, null, true), n;
    });
  }
});

// node_modules/dayjs/locale/pt.js
var require_pt = __commonJS({
  "node_modules/dayjs/locale/pt.js"(exports, module) {
    !function(e, a) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = a(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], a) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_locale_pt = a(e.dayjs);
    }(exports, function(e) {
      "use strict";
      function a(e2) {
        return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
      }
      var o = a(e), t2 = { name: "pt", weekdays: "domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado".split("_"), weekdaysShort: "dom_seg_ter_qua_qui_sex_sab".split("_"), weekdaysMin: "Do_2ª_3ª_4ª_5ª_6ª_Sa".split("_"), months: "janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"), monthsShort: "jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"), ordinal: function(e2) {
        return e2 + "º";
      }, weekStart: 1, yearStart: 4, formats: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D [de] MMMM [de] YYYY", LLL: "D [de] MMMM [de] YYYY [às] HH:mm", LLLL: "dddd, D [de] MMMM [de] YYYY [às] HH:mm" }, relativeTime: { future: "em %s", past: "há %s", s: "alguns segundos", m: "um minuto", mm: "%d minutos", h: "uma hora", hh: "%d horas", d: "um dia", dd: "%d dias", M: "um mês", MM: "%d meses", y: "um ano", yy: "%d anos" } };
      return o.default.locale(t2, null, true), t2;
    });
  }
});

// node_modules/dayjs/locale/ru.js
var require_ru = __commonJS({
  "node_modules/dayjs/locale/ru.js"(exports, module) {
    !function(_23, t2) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = t2(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], t2) : (_23 = "undefined" != typeof globalThis ? globalThis : _23 || self).dayjs_locale_ru = t2(_23.dayjs);
    }(exports, function(_23) {
      "use strict";
      function t2(_24) {
        return _24 && "object" == typeof _24 && "default" in _24 ? _24 : { default: _24 };
      }
      var e = t2(_23), n = "января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"), s = "январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"), r = "янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"), o = "янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_"), i = /D[oD]?(\[[^[\]]*\]|\s)+MMMM?/;
      function d(_24, t3, e2) {
        var n2, s2;
        return "m" === e2 ? t3 ? "минута" : "минуту" : _24 + " " + (n2 = +_24, s2 = { mm: t3 ? "минута_минуты_минут" : "минуту_минуты_минут", hh: "час_часа_часов", dd: "день_дня_дней", MM: "месяц_месяца_месяцев", yy: "год_года_лет" }[e2].split("_"), n2 % 10 == 1 && n2 % 100 != 11 ? s2[0] : n2 % 10 >= 2 && n2 % 10 <= 4 && (n2 % 100 < 10 || n2 % 100 >= 20) ? s2[1] : s2[2]);
      }
      var u2 = function(_24, t3) {
        return i.test(t3) ? n[_24.month()] : s[_24.month()];
      };
      u2.s = s, u2.f = n;
      var a = function(_24, t3) {
        return i.test(t3) ? r[_24.month()] : o[_24.month()];
      };
      a.s = o, a.f = r;
      var m = { name: "ru", weekdays: "воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"), weekdaysShort: "вск_пнд_втр_срд_чтв_птн_сбт".split("_"), weekdaysMin: "вс_пн_вт_ср_чт_пт_сб".split("_"), months: u2, monthsShort: a, weekStart: 1, yearStart: 4, formats: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY г.", LLL: "D MMMM YYYY г., H:mm", LLLL: "dddd, D MMMM YYYY г., H:mm" }, relativeTime: { future: "через %s", past: "%s назад", s: "несколько секунд", m: d, mm: d, h: "час", hh: d, d: "день", dd: d, M: "месяц", MM: d, y: "год", yy: d }, ordinal: function(_24) {
        return _24;
      }, meridiem: function(_24) {
        return _24 < 4 ? "ночи" : _24 < 12 ? "утра" : _24 < 17 ? "дня" : "вечера";
      } };
      return e.default.locale(m, null, true), m;
    });
  }
});

// node_modules/dayjs/locale/tr.js
var require_tr = __commonJS({
  "node_modules/dayjs/locale/tr.js"(exports, module) {
    !function(a, e) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = e(require_dayjs_min()) : "function" == typeof define && define.amd ? define(["dayjs"], e) : (a = "undefined" != typeof globalThis ? globalThis : a || self).dayjs_locale_tr = e(a.dayjs);
    }(exports, function(a) {
      "use strict";
      function e(a2) {
        return a2 && "object" == typeof a2 && "default" in a2 ? a2 : { default: a2 };
      }
      var t2 = e(a), _23 = { name: "tr", weekdays: "Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"), weekdaysShort: "Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"), weekdaysMin: "Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"), months: "Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"), monthsShort: "Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"), weekStart: 1, formats: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, relativeTime: { future: "%s sonra", past: "%s önce", s: "birkaç saniye", m: "bir dakika", mm: "%d dakika", h: "bir saat", hh: "%d saat", d: "bir gün", dd: "%d gün", M: "bir ay", MM: "%d ay", y: "bir yıl", yy: "%d yıl" }, ordinal: function(a2) {
        return a2 + ".";
      } };
      return t2.default.locale(_23, null, true), _23;
    });
  }
});

// node_modules/dayjs/locale/en.js
var require_en = __commonJS({
  "node_modules/dayjs/locale/en.js"(exports, module) {
    !function(e, n) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = n() : "function" == typeof define && define.amd ? define(n) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_locale_en = n();
    }(exports, function() {
      "use strict";
      return { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), ordinal: function(e) {
        var n = ["th", "st", "nd", "rd"], t2 = e % 100;
        return "[" + e + (n[(t2 - 20) % 10] || n[t2] || n[0]) + "]";
      } };
    });
  }
});

// node_modules/fix-webm-duration/fix-webm-duration.js
var require_fix_webm_duration = __commonJS({
  "node_modules/fix-webm-duration/fix-webm-duration.js"(exports, module) {
    (function(name, definition2) {
      if (typeof define === "function" && define.amd) {
        define(definition2);
      } else if (typeof module !== "undefined" && module.exports) {
        module.exports = definition2();
      } else {
        window.ysFixWebmDuration = definition2();
      }
    })("fix-webm-duration", function() {
      var sections = {
        172351395: { name: "EBML", type: "Container" },
        646: { name: "EBMLVersion", type: "Uint" },
        759: { name: "EBMLReadVersion", type: "Uint" },
        754: { name: "EBMLMaxIDLength", type: "Uint" },
        755: { name: "EBMLMaxSizeLength", type: "Uint" },
        642: { name: "DocType", type: "String" },
        647: { name: "DocTypeVersion", type: "Uint" },
        645: { name: "DocTypeReadVersion", type: "Uint" },
        108: { name: "Void", type: "Binary" },
        63: { name: "CRC-32", type: "Binary" },
        190023271: { name: "SignatureSlot", type: "Container" },
        16010: { name: "SignatureAlgo", type: "Uint" },
        16026: { name: "SignatureHash", type: "Uint" },
        16037: { name: "SignaturePublicKey", type: "Binary" },
        16053: { name: "Signature", type: "Binary" },
        15963: { name: "SignatureElements", type: "Container" },
        15995: { name: "SignatureElementList", type: "Container" },
        9522: { name: "SignedElement", type: "Binary" },
        139690087: { name: "Segment", type: "Container" },
        21863284: { name: "SeekHead", type: "Container" },
        3515: { name: "Seek", type: "Container" },
        5035: { name: "SeekID", type: "Binary" },
        5036: { name: "SeekPosition", type: "Uint" },
        88713574: { name: "Info", type: "Container" },
        13220: { name: "SegmentUID", type: "Binary" },
        13188: { name: "SegmentFilename", type: "String" },
        1882403: { name: "PrevUID", type: "Binary" },
        1868715: { name: "PrevFilename", type: "String" },
        2013475: { name: "NextUID", type: "Binary" },
        1999803: { name: "NextFilename", type: "String" },
        1092: { name: "SegmentFamily", type: "Binary" },
        10532: { name: "ChapterTranslate", type: "Container" },
        10748: { name: "ChapterTranslateEditionUID", type: "Uint" },
        10687: { name: "ChapterTranslateCodec", type: "Uint" },
        10661: { name: "ChapterTranslateID", type: "Binary" },
        710577: { name: "TimecodeScale", type: "Uint" },
        1161: { name: "Duration", type: "Float" },
        1121: { name: "DateUTC", type: "Date" },
        15273: { name: "Title", type: "String" },
        3456: { name: "MuxingApp", type: "String" },
        5953: { name: "WritingApp", type: "String" },
        // 0xf43b675: { name: 'Cluster', type: 'Container' },
        103: { name: "Timecode", type: "Uint" },
        6228: { name: "SilentTracks", type: "Container" },
        6359: { name: "SilentTrackNumber", type: "Uint" },
        39: { name: "Position", type: "Uint" },
        43: { name: "PrevSize", type: "Uint" },
        35: { name: "SimpleBlock", type: "Binary" },
        32: { name: "BlockGroup", type: "Container" },
        33: { name: "Block", type: "Binary" },
        34: { name: "BlockVirtual", type: "Binary" },
        13729: { name: "BlockAdditions", type: "Container" },
        38: { name: "BlockMore", type: "Container" },
        110: { name: "BlockAddID", type: "Uint" },
        37: { name: "BlockAdditional", type: "Binary" },
        27: { name: "BlockDuration", type: "Uint" },
        122: { name: "ReferencePriority", type: "Uint" },
        123: { name: "ReferenceBlock", type: "Int" },
        125: { name: "ReferenceVirtual", type: "Int" },
        36: { name: "CodecState", type: "Binary" },
        13730: { name: "DiscardPadding", type: "Int" },
        14: { name: "Slices", type: "Container" },
        104: { name: "TimeSlice", type: "Container" },
        76: { name: "LaceNumber", type: "Uint" },
        77: { name: "FrameNumber", type: "Uint" },
        75: { name: "BlockAdditionID", type: "Uint" },
        78: { name: "Delay", type: "Uint" },
        79: { name: "SliceDuration", type: "Uint" },
        72: { name: "ReferenceFrame", type: "Container" },
        73: { name: "ReferenceOffset", type: "Uint" },
        74: { name: "ReferenceTimeCode", type: "Uint" },
        47: { name: "EncryptedBlock", type: "Binary" },
        106212971: { name: "Tracks", type: "Container" },
        46: { name: "TrackEntry", type: "Container" },
        87: { name: "TrackNumber", type: "Uint" },
        13253: { name: "TrackUID", type: "Uint" },
        3: { name: "TrackType", type: "Uint" },
        57: { name: "FlagEnabled", type: "Uint" },
        8: { name: "FlagDefault", type: "Uint" },
        5546: { name: "FlagForced", type: "Uint" },
        28: { name: "FlagLacing", type: "Uint" },
        11751: { name: "MinCache", type: "Uint" },
        11768: { name: "MaxCache", type: "Uint" },
        254851: { name: "DefaultDuration", type: "Uint" },
        216698: { name: "DefaultDecodedFieldDuration", type: "Uint" },
        209231: { name: "TrackTimecodeScale", type: "Float" },
        4991: { name: "TrackOffset", type: "Int" },
        5614: { name: "MaxBlockAdditionID", type: "Uint" },
        4974: { name: "Name", type: "String" },
        177564: { name: "Language", type: "String" },
        6: { name: "CodecID", type: "String" },
        9122: { name: "CodecPrivate", type: "Binary" },
        362120: { name: "CodecName", type: "String" },
        13382: { name: "AttachmentLink", type: "Uint" },
        1742487: { name: "CodecSettings", type: "String" },
        1785920: { name: "CodecInfoURL", type: "String" },
        438848: { name: "CodecDownloadURL", type: "String" },
        42: { name: "CodecDecodeAll", type: "Uint" },
        12203: { name: "TrackOverlay", type: "Uint" },
        5802: { name: "CodecDelay", type: "Uint" },
        5819: { name: "SeekPreRoll", type: "Uint" },
        9764: { name: "TrackTranslate", type: "Container" },
        9980: { name: "TrackTranslateEditionUID", type: "Uint" },
        9919: { name: "TrackTranslateCodec", type: "Uint" },
        9893: { name: "TrackTranslateTrackID", type: "Binary" },
        96: { name: "Video", type: "Container" },
        26: { name: "FlagInterlaced", type: "Uint" },
        5048: { name: "StereoMode", type: "Uint" },
        5056: { name: "AlphaMode", type: "Uint" },
        5049: { name: "OldStereoMode", type: "Uint" },
        48: { name: "PixelWidth", type: "Uint" },
        58: { name: "PixelHeight", type: "Uint" },
        5290: { name: "PixelCropBottom", type: "Uint" },
        5307: { name: "PixelCropTop", type: "Uint" },
        5324: { name: "PixelCropLeft", type: "Uint" },
        5341: { name: "PixelCropRight", type: "Uint" },
        5296: { name: "DisplayWidth", type: "Uint" },
        5306: { name: "DisplayHeight", type: "Uint" },
        5298: { name: "DisplayUnit", type: "Uint" },
        5299: { name: "AspectRatioType", type: "Uint" },
        963876: { name: "ColourSpace", type: "Binary" },
        1029411: { name: "GammaValue", type: "Float" },
        230371: { name: "FrameRate", type: "Float" },
        97: { name: "Audio", type: "Container" },
        53: { name: "SamplingFrequency", type: "Float" },
        14517: { name: "OutputSamplingFrequency", type: "Float" },
        31: { name: "Channels", type: "Uint" },
        15739: { name: "ChannelPositions", type: "Binary" },
        8804: { name: "BitDepth", type: "Uint" },
        98: { name: "TrackOperation", type: "Container" },
        99: { name: "TrackCombinePlanes", type: "Container" },
        100: { name: "TrackPlane", type: "Container" },
        101: { name: "TrackPlaneUID", type: "Uint" },
        102: { name: "TrackPlaneType", type: "Uint" },
        105: { name: "TrackJoinBlocks", type: "Container" },
        109: { name: "TrackJoinUID", type: "Uint" },
        64: { name: "TrickTrackUID", type: "Uint" },
        65: { name: "TrickTrackSegmentUID", type: "Binary" },
        70: { name: "TrickTrackFlag", type: "Uint" },
        71: { name: "TrickMasterTrackUID", type: "Uint" },
        68: { name: "TrickMasterTrackSegmentUID", type: "Binary" },
        11648: { name: "ContentEncodings", type: "Container" },
        8768: { name: "ContentEncoding", type: "Container" },
        4145: { name: "ContentEncodingOrder", type: "Uint" },
        4146: { name: "ContentEncodingScope", type: "Uint" },
        4147: { name: "ContentEncodingType", type: "Uint" },
        4148: { name: "ContentCompression", type: "Container" },
        596: { name: "ContentCompAlgo", type: "Uint" },
        597: { name: "ContentCompSettings", type: "Binary" },
        4149: { name: "ContentEncryption", type: "Container" },
        2017: { name: "ContentEncAlgo", type: "Uint" },
        2018: { name: "ContentEncKeyID", type: "Binary" },
        2019: { name: "ContentSignature", type: "Binary" },
        2020: { name: "ContentSigKeyID", type: "Binary" },
        2021: { name: "ContentSigAlgo", type: "Uint" },
        2022: { name: "ContentSigHashAlgo", type: "Uint" },
        206814059: { name: "Cues", type: "Container" },
        59: { name: "CuePoint", type: "Container" },
        51: { name: "CueTime", type: "Uint" },
        55: { name: "CueTrackPositions", type: "Container" },
        119: { name: "CueTrack", type: "Uint" },
        113: { name: "CueClusterPosition", type: "Uint" },
        112: { name: "CueRelativePosition", type: "Uint" },
        50: { name: "CueDuration", type: "Uint" },
        4984: { name: "CueBlockNumber", type: "Uint" },
        106: { name: "CueCodecState", type: "Uint" },
        91: { name: "CueReference", type: "Container" },
        22: { name: "CueRefTime", type: "Uint" },
        23: { name: "CueRefCluster", type: "Uint" },
        4959: { name: "CueRefNumber", type: "Uint" },
        107: { name: "CueRefCodecState", type: "Uint" },
        155296873: { name: "Attachments", type: "Container" },
        8615: { name: "AttachedFile", type: "Container" },
        1662: { name: "FileDescription", type: "String" },
        1646: { name: "FileName", type: "String" },
        1632: { name: "FileMimeType", type: "String" },
        1628: { name: "FileData", type: "Binary" },
        1710: { name: "FileUID", type: "Uint" },
        1653: { name: "FileReferral", type: "Binary" },
        1633: { name: "FileUsedStartTime", type: "Uint" },
        1634: { name: "FileUsedEndTime", type: "Uint" },
        4433776: { name: "Chapters", type: "Container" },
        1465: { name: "EditionEntry", type: "Container" },
        1468: { name: "EditionUID", type: "Uint" },
        1469: { name: "EditionFlagHidden", type: "Uint" },
        1499: { name: "EditionFlagDefault", type: "Uint" },
        1501: { name: "EditionFlagOrdered", type: "Uint" },
        54: { name: "ChapterAtom", type: "Container" },
        13252: { name: "ChapterUID", type: "Uint" },
        5716: { name: "ChapterStringUID", type: "String" },
        17: { name: "ChapterTimeStart", type: "Uint" },
        18: { name: "ChapterTimeEnd", type: "Uint" },
        24: { name: "ChapterFlagHidden", type: "Uint" },
        1432: { name: "ChapterFlagEnabled", type: "Uint" },
        11879: { name: "ChapterSegmentUID", type: "Binary" },
        11964: { name: "ChapterSegmentEditionUID", type: "Uint" },
        9155: { name: "ChapterPhysicalEquiv", type: "Uint" },
        15: { name: "ChapterTrack", type: "Container" },
        9: { name: "ChapterTrackNumber", type: "Uint" },
        0: { name: "ChapterDisplay", type: "Container" },
        5: { name: "ChapString", type: "String" },
        892: { name: "ChapLanguage", type: "String" },
        894: { name: "ChapCountry", type: "String" },
        10564: { name: "ChapProcess", type: "Container" },
        10581: { name: "ChapProcessCodecID", type: "Uint" },
        1293: { name: "ChapProcessPrivate", type: "Binary" },
        10513: { name: "ChapProcessCommand", type: "Container" },
        10530: { name: "ChapProcessTime", type: "Uint" },
        10547: { name: "ChapProcessData", type: "Binary" },
        39109479: { name: "Tags", type: "Container" },
        13171: { name: "Tag", type: "Container" },
        9152: { name: "Targets", type: "Container" },
        10442: { name: "TargetTypeValue", type: "Uint" },
        9162: { name: "TargetType", type: "String" },
        9157: { name: "TagTrackUID", type: "Uint" },
        9161: { name: "TagEditionUID", type: "Uint" },
        9156: { name: "TagChapterUID", type: "Uint" },
        9158: { name: "TagAttachmentUID", type: "Uint" },
        10184: { name: "SimpleTag", type: "Container" },
        1443: { name: "TagName", type: "String" },
        1146: { name: "TagLanguage", type: "String" },
        1156: { name: "TagDefault", type: "Uint" },
        1159: { name: "TagString", type: "String" },
        1157: { name: "TagBinary", type: "Binary" }
      };
      function doInherit(newClass, baseClass) {
        newClass.prototype = Object.create(baseClass.prototype);
        newClass.prototype.constructor = newClass;
      }
      function WebmBase(name, type) {
        this.name = name || "Unknown";
        this.type = type || "Unknown";
      }
      WebmBase.prototype.updateBySource = function() {
      };
      WebmBase.prototype.setSource = function(source) {
        this.source = source;
        this.updateBySource();
      };
      WebmBase.prototype.updateByData = function() {
      };
      WebmBase.prototype.setData = function(data) {
        this.data = data;
        this.updateByData();
      };
      function WebmUint(name, type) {
        WebmBase.call(this, name, type || "Uint");
      }
      doInherit(WebmUint, WebmBase);
      function padHex(hex) {
        return hex.length % 2 === 1 ? "0" + hex : hex;
      }
      WebmUint.prototype.updateBySource = function() {
        this.data = "";
        for (var i = 0; i < this.source.length; i++) {
          var hex = this.source[i].toString(16);
          this.data += padHex(hex);
        }
      };
      WebmUint.prototype.updateByData = function() {
        var length = this.data.length / 2;
        this.source = new Uint8Array(length);
        for (var i = 0; i < length; i++) {
          var hex = this.data.substr(i * 2, 2);
          this.source[i] = parseInt(hex, 16);
        }
      };
      WebmUint.prototype.getValue = function() {
        return parseInt(this.data, 16);
      };
      WebmUint.prototype.setValue = function(value) {
        this.setData(padHex(value.toString(16)));
      };
      function WebmFloat(name, type) {
        WebmBase.call(this, name, type || "Float");
      }
      doInherit(WebmFloat, WebmBase);
      WebmFloat.prototype.getFloatArrayType = function() {
        return this.source && this.source.length === 4 ? Float32Array : Float64Array;
      };
      WebmFloat.prototype.updateBySource = function() {
        var byteArray = this.source.reverse();
        var floatArrayType = this.getFloatArrayType();
        var floatArray = new floatArrayType(byteArray.buffer);
        this.data = floatArray[0];
      };
      WebmFloat.prototype.updateByData = function() {
        var floatArrayType = this.getFloatArrayType();
        var floatArray = new floatArrayType([this.data]);
        var byteArray = new Uint8Array(floatArray.buffer);
        this.source = byteArray.reverse();
      };
      WebmFloat.prototype.getValue = function() {
        return this.data;
      };
      WebmFloat.prototype.setValue = function(value) {
        this.setData(value);
      };
      function WebmContainer(name, type) {
        WebmBase.call(this, name, type || "Container");
      }
      doInherit(WebmContainer, WebmBase);
      WebmContainer.prototype.readByte = function() {
        return this.source[this.offset++];
      };
      WebmContainer.prototype.readUint = function() {
        var firstByte = this.readByte();
        var bytes = 8 - firstByte.toString(2).length;
        var value = firstByte - (1 << 7 - bytes);
        for (var i = 0; i < bytes; i++) {
          value *= 256;
          value += this.readByte();
        }
        return value;
      };
      WebmContainer.prototype.updateBySource = function() {
        this.data = [];
        for (this.offset = 0; this.offset < this.source.length; this.offset = end2) {
          var id = this.readUint();
          var len = this.readUint();
          var end2 = Math.min(this.offset + len, this.source.length);
          var data = this.source.slice(this.offset, end2);
          var info = sections[id] || { name: "Unknown", type: "Unknown" };
          var ctr = WebmBase;
          switch (info.type) {
            case "Container":
              ctr = WebmContainer;
              break;
            case "Uint":
              ctr = WebmUint;
              break;
            case "Float":
              ctr = WebmFloat;
              break;
          }
          var section = new ctr(info.name, info.type);
          section.setSource(data);
          this.data.push({
            id,
            idHex: id.toString(16),
            data: section
          });
        }
      };
      WebmContainer.prototype.writeUint = function(x, draft) {
        for (var bytes = 1, flag = 128; x >= flag && bytes < 8; bytes++, flag *= 128) {
        }
        if (!draft) {
          var value = flag + x;
          for (var i = bytes - 1; i >= 0; i--) {
            var c = value % 256;
            this.source[this.offset + i] = c;
            value = (value - c) / 256;
          }
        }
        this.offset += bytes;
      };
      WebmContainer.prototype.writeSections = function(draft) {
        this.offset = 0;
        for (var i = 0; i < this.data.length; i++) {
          var section = this.data[i], content = section.data.source, contentLength = content.length;
          this.writeUint(section.id, draft);
          this.writeUint(contentLength, draft);
          if (!draft) {
            this.source.set(content, this.offset);
          }
          this.offset += contentLength;
        }
        return this.offset;
      };
      WebmContainer.prototype.updateByData = function() {
        var length = this.writeSections("draft");
        this.source = new Uint8Array(length);
        this.writeSections();
      };
      WebmContainer.prototype.getSectionById = function(id) {
        for (var i = 0; i < this.data.length; i++) {
          var section = this.data[i];
          if (section.id === id) {
            return section.data;
          }
        }
        return null;
      };
      function WebmFile(source) {
        WebmContainer.call(this, "File", "File");
        this.setSource(source);
      }
      doInherit(WebmFile, WebmContainer);
      WebmFile.prototype.fixDuration = function(duration, options2) {
        var logger = options2 && options2.logger;
        if (logger === void 0) {
          logger = function(message) {
            console.log(message);
          };
        } else if (!logger) {
          logger = function() {
          };
        }
        var segmentSection = this.getSectionById(139690087);
        if (!segmentSection) {
          logger("[fix-webm-duration] Segment section is missing");
          return false;
        }
        var infoSection = segmentSection.getSectionById(88713574);
        if (!infoSection) {
          logger("[fix-webm-duration] Info section is missing");
          return false;
        }
        var timeScaleSection = infoSection.getSectionById(710577);
        if (!timeScaleSection) {
          logger("[fix-webm-duration] TimecodeScale section is missing");
          return false;
        }
        var durationSection = infoSection.getSectionById(1161);
        if (durationSection) {
          if (durationSection.getValue() <= 0) {
            logger(`[fix-webm-duration] Duration section is present, but the value is ${durationSection.getValue()}`);
            durationSection.setValue(duration);
          } else {
            logger(`[fix-webm-duration] Duration section is present, and the value is ${durationSection.getValue()}`);
            return false;
          }
        } else {
          logger("[fix-webm-duration] Duration section is missing");
          durationSection = new WebmFloat("Duration", "Float");
          durationSection.setValue(duration);
          infoSection.data.push({
            id: 1161,
            data: durationSection
          });
        }
        timeScaleSection.setValue(1e6);
        infoSection.updateByData();
        segmentSection.updateByData();
        this.updateByData();
        return true;
      };
      WebmFile.prototype.toBlob = function(mimeType) {
        return new Blob([this.source.buffer], { type: mimeType || "video/webm" });
      };
      function fixWebmDuration2(blob, duration, callback, options2) {
        if (typeof callback === "object") {
          options2 = callback;
          callback = void 0;
        }
        if (!callback) {
          return new Promise(function(resolve) {
            fixWebmDuration2(blob, duration, resolve, options2);
          });
        }
        try {
          var reader = new FileReader();
          reader.onloadend = function() {
            try {
              var file = new WebmFile(new Uint8Array(reader.result));
              if (file.fixDuration(duration, options2)) {
                blob = file.toBlob(blob.type);
              }
            } catch (ex) {
            }
            callback(blob);
          };
          reader.readAsArrayBuffer(blob);
        } catch (ex) {
          callback(blob);
        }
      }
      fixWebmDuration2.default = fixWebmDuration2;
      return fixWebmDuration2;
    });
  }
});

// node_modules/lodash.mergewith/index.js
var require_lodash5 = __commonJS({
  "node_modules/lodash.mergewith/index.js"(exports, module) {
    var LARGE_ARRAY_SIZE = 200;
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var HOT_COUNT = 800;
    var HOT_SPAN = 16;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var asyncTag = "[object AsyncFunction]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var nullTag = "[object Null]";
    var objectTag = "[object Object]";
    var proxyTag = "[object Proxy]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var undefinedTag = "[object Undefined]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root2 = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        var types2 = freeModule && freeModule.require && freeModule.require("util").types;
        if (types2) {
          return types2;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    function baseTimes(n, iteratee) {
      var index3 = -1, result = Array(n);
      while (++index3 < n) {
        result[index3] = iteratee(index3);
      }
      return result;
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    function overArg(func, transform3) {
      return function(arg) {
        return func(transform3(arg));
      };
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root2["__core-js_shared__"];
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var nativeObjectToString = objectProto.toString;
    var objectCtorString = funcToString.call(Object);
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var Buffer = moduleExports ? root2.Buffer : void 0;
    var Symbol2 = root2.Symbol;
    var Uint8Array2 = root2.Uint8Array;
    var allocUnsafe = Buffer ? Buffer.allocUnsafe : void 0;
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    var objectCreate = Object.create;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var splice2 = arrayProto.splice;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    var defineProperty = function() {
      try {
        var func = getNative(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e) {
      }
    }();
    var nativeIsBuffer = Buffer ? Buffer.isBuffer : void 0;
    var nativeMax = Math.max;
    var nativeNow = Date.now;
    var Map2 = getNative(root2, "Map");
    var nativeCreate = getNative(Object, "create");
    var baseCreate = /* @__PURE__ */ function() {
      function object() {
      }
      return function(proto) {
        if (!isObject2(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object();
        object.prototype = void 0;
        return result;
      };
    }();
    function Hash(entries) {
      var index3 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index3 < length) {
        var entry = entries[index3];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index3 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index3 < length) {
        var entry = entries[index3];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    function listCacheDelete(key) {
      var data = this.__data__, index3 = assocIndexOf(data, key);
      if (index3 < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index3 == lastIndex) {
        data.pop();
      } else {
        splice2.call(data, index3, 1);
      }
      --this.size;
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index3 = assocIndexOf(data, key);
      return index3 < 0 ? void 0 : data[index3][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index3 = assocIndexOf(data, key);
      if (index3 < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index3][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index3 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index3 < length) {
        var entry = entries[index3];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      var data = getMapData(this, key), size = data.size;
      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    function stackDelete(key) {
      var data = this.__data__, result = data["delete"](key);
      this.size = data.size;
      return result;
    }
    function stackGet(key) {
      return this.__data__.get(key);
    }
    function stackHas(key) {
      return this.__data__.has(key);
    }
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
        (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
        isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function assignMergeValue(object, key, value) {
      if (value !== void 0 && !eq(object[key], value) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseAssignValue(object, key, value) {
      if (key == "__proto__" && defineProperty) {
        defineProperty(object, key, {
          "configurable": true,
          "enumerable": true,
          "value": value,
          "writable": true
        });
      } else {
        object[key] = value;
      }
    }
    var baseFor = createBaseFor();
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    function baseIsNative(value) {
      if (!isObject2(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    function baseKeysIn(object) {
      if (!isObject2(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object), result = [];
      for (var key in object) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack());
        if (isObject2(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        } else {
          var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
          if (newValue === void 0) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
      var isCommon = newValue === void 0;
      if (isCommon) {
        var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          } else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          } else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          } else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          } else {
            newValue = [];
          }
        } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          } else if (!isObject2(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        } else {
          isCommon = false;
        }
      }
      if (isCommon) {
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack["delete"](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }
    function baseRest(func, start2) {
      return setToString(overRest(func, start2, identity), func + "");
    }
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": constant(string),
        "writable": true
      });
    };
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
      buffer.copy(result);
      return result;
    }
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
      return result;
    }
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }
    function copyArray(source, array) {
      var index3 = -1, length = source.length;
      array || (array = Array(length));
      while (++index3 < length) {
        array[index3] = source[index3];
      }
      return array;
    }
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});
      var index3 = -1, length = props.length;
      while (++index3 < length) {
        var key = props[index3];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
        if (newValue === void 0) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index3 = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
        customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? void 0 : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index3 < length) {
          var source = sources[index3];
          if (source) {
            assigner(object, source, index3, customizer);
          }
        }
        return object;
      });
    }
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index3 = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
        while (length--) {
          var key = props[fromRight ? length : ++index3];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }
    function getMapData(map3, key) {
      var data = map3.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    function initCloneObject(object) {
      return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isIterateeCall(value, index3, object) {
      if (!isObject2(object)) {
        return false;
      }
      var type = typeof index3;
      if (type == "number" ? isArrayLike(object) && isIndex(index3, object.length) : type == "string" && index3 in object) {
        return eq(object[index3], value);
      }
      return false;
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    function overRest(func, start2, transform3) {
      start2 = nativeMax(start2 === void 0 ? func.length - 1 : start2, 0);
      return function() {
        var args = arguments, index3 = -1, length = nativeMax(args.length - start2, 0), array = Array(length);
        while (++index3 < length) {
          array[index3] = args[start2 + index3];
        }
        index3 = -1;
        var otherArgs = Array(start2 + 1);
        while (++index3 < start2) {
          otherArgs[index3] = args[index3];
        }
        otherArgs[start2] = transform3(array);
        return apply(func, this, otherArgs);
      };
    }
    function safeGet(object, key) {
      if (key === "constructor" && typeof object[key] === "function") {
        return;
      }
      if (key == "__proto__") {
        return;
      }
      return object[key];
    }
    var setToString = shortOut(baseSetToString);
    function shortOut(func) {
      var count = 0, lastCalled = 0;
      return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(void 0, arguments);
      };
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    var isArguments = baseIsArguments(/* @__PURE__ */ function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    var isBuffer = nativeIsBuffer || stubFalse;
    function isFunction(value) {
      if (!isObject2(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject2(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }
    var mergeWith2 = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });
    function constant(value) {
      return function() {
        return value;
      };
    }
    function identity(value) {
      return value;
    }
    function stubFalse() {
      return false;
    }
    module.exports = mergeWith2;
  }
});

// node_modules/warning/warning.js
var require_warning = __commonJS({
  "node_modules/warning/warning.js"(exports, module) {
    "use strict";
    var __DEV__ = true;
    var warning2 = function() {
    };
    if (__DEV__) {
      printWarning = function printWarning2(format, args) {
        var len = arguments.length;
        args = new Array(len > 1 ? len - 1 : 0);
        for (var key = 1; key < len; key++) {
          args[key - 1] = arguments[key];
        }
        var argIndex = 0;
        var message = "Warning: " + format.replace(/%s/g, function() {
          return args[argIndex++];
        });
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
      warning2 = function(condition, format, args) {
        var len = arguments.length;
        args = new Array(len > 2 ? len - 2 : 0);
        for (var key = 2; key < len; key++) {
          args[key - 2] = arguments[key];
        }
        if (format === void 0) {
          throw new Error(
            "`warning(condition, format, ...args)` requires a warning message argument"
          );
        }
        if (!condition) {
          printWarning.apply(null, [format].concat(args));
        }
      };
    }
    var printWarning;
    module.exports = warning2;
  }
});

// node_modules/stream-chat-react/dist/components/Attachment/Attachment.js
var import_react88 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Attachment/utils.js
var SUPPORTED_VIDEO_FORMATS = [
  "video/mp4",
  "video/ogg",
  "video/webm",
  "video/quicktime"
];
var isLocalAttachment = (attachment) => {
  var _a;
  return !!((_a = attachment.localMetadata) == null ? void 0 : _a.id);
};
var isScrapedContent = (attachment) => attachment.og_scrape_url || attachment.title_link;
var isUploadedImage = (attachment) => attachment.type === "image" && !isScrapedContent(attachment);
var isLocalImageAttachment = (attachment) => isUploadedImage(attachment) && isLocalAttachment(attachment);
var isGalleryAttachmentType = (output2) => Array.isArray(output2.images);
var isAudioAttachment = (attachment) => attachment.type === "audio";
var isLocalAudioAttachment = (attachment) => isAudioAttachment(attachment) && isLocalAttachment(attachment);
var isVoiceRecordingAttachment = (attachment) => attachment.type === "voiceRecording";
var isLocalVoiceRecordingAttachment = (attachment) => isVoiceRecordingAttachment(attachment) && isLocalAttachment(attachment);
var isFileAttachment = (attachment) => attachment.type === "file" || !!(attachment.mime_type && SUPPORTED_VIDEO_FORMATS.indexOf(attachment.mime_type) === -1 && attachment.type !== "video");
var isLocalFileAttachment = (attachment) => isFileAttachment(attachment) && isLocalAttachment(attachment);
var isMediaAttachment = (attachment) => attachment.mime_type && SUPPORTED_VIDEO_FORMATS.indexOf(attachment.mime_type) !== -1 || attachment.type === "video";
var isLocalMediaAttachment = (attachment) => isMediaAttachment(attachment) && isLocalAttachment(attachment);
var isSvgAttachment = (attachment) => {
  const filename = attachment.fallback || "";
  return filename.toLowerCase().endsWith(".svg");
};
var divMod = (num, divisor) => [
  Math.floor(num / divisor),
  num % divisor
];
var displayDuration = (totalSeconds) => {
  if (!totalSeconds || totalSeconds < 0)
    return "00:00";
  const [hours, hoursLeftover] = divMod(totalSeconds, 3600);
  const [minutes, seconds] = divMod(hoursLeftover, 60);
  const roundedSeconds = Math.ceil(seconds);
  const prependHrsZero = hours.toString().length === 1 ? "0" : "";
  const prependMinZero = minutes.toString().length === 1 ? "0" : "";
  const prependSecZero = roundedSeconds.toString().length === 1 ? "0" : "";
  const minSec = `${prependMinZero}${minutes}:${prependSecZero}${roundedSeconds}`;
  return hours ? `${prependHrsZero}${hours}:` + minSec : minSec;
};

// node_modules/stream-chat-react/dist/components/Attachment/AttachmentContainer.js
var import_react87 = __toESM(require_react());
var import_react_player2 = __toESM(require_lib());

// node_modules/linkifyjs/dist/linkify.mjs
var encodedTlds = "aaa1rp3bb0ott3vie4c1le2ogado5udhabi7c0ademy5centure6ountant0s9o1tor4d0s1ult4e0g1ro2tna4f0l1rica5g0akhan5ency5i0g1rbus3force5tel5kdn3l0ibaba4pay4lfinanz6state5y2sace3tom5m0azon4ericanexpress7family11x2fam3ica3sterdam8nalytics7droid5quan4z2o0l2partments8p0le4q0uarelle8r0ab1mco4chi3my2pa2t0e3s0da2ia2sociates9t0hleta5torney7u0ction5di0ble3o3spost5thor3o0s4w0s2x0a2z0ure5ba0by2idu3namex4d1k2r0celona5laycard4s5efoot5gains6seball5ketball8uhaus5yern5b0c1t1va3cg1n2d1e0ats2uty4er2rlin4st0buy5t2f1g1h0arti5i0ble3d1ke2ng0o3o1z2j1lack0friday9ockbuster8g1omberg7ue3m0s1w2n0pparibas9o0ats3ehringer8fa2m1nd2o0k0ing5sch2tik2on4t1utique6x2r0adesco6idgestone9oadway5ker3ther5ussels7s1t1uild0ers6siness6y1zz3v1w1y1z0h3ca0b1fe2l0l1vinklein9m0era3p2non3petown5ital0one8r0avan4ds2e0er0s4s2sa1e1h1ino4t0ering5holic7ba1n1re3c1d1enter4o1rn3f0a1d2g1h0anel2nel4rity4se2t2eap3intai5ristmas6ome4urch5i0priani6rcle4sco3tadel4i0c2y3k1l0aims4eaning6ick2nic1que6othing5ud3ub0med6m1n1o0ach3des3ffee4llege4ogne5m0mbank4unity6pany2re3uter5sec4ndos3struction8ulting7tact3ractors9oking4l1p2rsica5untry4pon0s4rses6pa2r0edit0card4union9icket5own3s1uise0s6u0isinella9v1w1x1y0mru3ou3z2dad1nce3ta1e1ing3sun4y2clk3ds2e0al0er2s3gree4livery5l1oitte5ta3mocrat6ntal2ist5si0gn4v2hl2iamonds6et2gital5rect0ory7scount3ver5h2y2j1k1m1np2o0cs1tor4g1mains5t1wnload7rive4tv2ubai3nlop4pont4rban5vag2r2z2earth3t2c0o2deka3u0cation8e1g1mail3erck5nergy4gineer0ing9terprises10pson4quipment8r0icsson6ni3s0q1tate5t1u0rovision8s2vents5xchange6pert3osed4ress5traspace10fage2il1rwinds6th3mily4n0s2rm0ers5shion4t3edex3edback6rrari3ero6i0delity5o2lm2nal1nce1ial7re0stone6mdale6sh0ing5t0ness6j1k1lickr3ghts4r2orist4wers5y2m1o0o0d1tball6rd1ex2sale4um3undation8x2r0ee1senius7l1ogans4ntier7tr2ujitsu5n0d2rniture7tbol5yi3ga0l0lery3o1up4me0s3p1rden4y2b0iz3d0n2e0a1nt0ing5orge5f1g0ee3h1i0ft0s3ves2ing5l0ass3e1obal2o4m0ail3bh2o1x2n1odaddy5ld0point6f2o0dyear5g0le4p1t1v2p1q1r0ainger5phics5tis4een3ipe3ocery4up4s1t1u0cci3ge2ide2tars5ru3w1y2hair2mburg5ngout5us3bo2dfc0bank7ealth0care8lp1sinki6re1mes5iphop4samitsu7tachi5v2k0t2m1n1ockey4ldings5iday5medepot5goods5s0ense7nda3rse3spital5t0ing5t0els3mail5use3w2r1sbc3t1u0ghes5yatt3undai7ibm2cbc2e1u2d1e0ee3fm2kano4l1m0amat4db2mo0bilien9n0c1dustries8finiti5o2g1k1stitute6urance4e4t0ernational10uit4vestments10o1piranga7q1r0ish4s0maili5t0anbul7t0au2v3jaguar4va3cb2e0ep2tzt3welry6io2ll2m0p2nj2o0bs1urg4t1y2p0morgan6rs3uegos4niper7kaufen5ddi3e0rryhotels6properties14fh2g1h1i0a1ds2m1ndle4tchen5wi3m1n1oeln3matsu5sher5p0mg2n2r0d1ed3uokgroup8w1y0oto4z2la0caixa5mborghini8er3nd0rover6xess5salle5t0ino3robe5w0yer5b1c1ds2ease3clerc5frak4gal2o2xus4gbt3i0dl2fe0insurance9style7ghting6ke2lly3mited4o2ncoln4k2ve1ing5k1lc1p2oan0s3cker3us3l1ndon4tte1o3ve3pl0financial11r1s1t0d0a3u0ndbeck6xe1ury5v1y2ma0drid4if1son4keup4n0agement7go3p1rket0ing3s4riott5shalls7ttel5ba2c0kinsey7d1e0d0ia3et2lbourne7me1orial6n0u2rckmsd7g1h1iami3crosoft7l1ni1t2t0subishi9k1l0b1s2m0a2n1o0bi0le4da2e1i1m1nash3ey2ster5rmon3tgage6scow4to0rcycles9v0ie4p1q1r1s0d2t0n1r2u0seum3ic4v1w1x1y1z2na0b1goya4me2vy3ba2c1e0c1t0bank4flix4work5ustar5w0s2xt0direct7us4f0l2g0o2hk2i0co2ke1on3nja3ssan1y5l1o0kia3rton4w0ruz3tv4p1r0a1w2tt2u1yc2z2obi1server7ffice5kinawa6layan0group9lo3m0ega4ne1g1l0ine5oo2pen3racle3nge4g0anic5igins6saka4tsuka4t2vh3pa0ge2nasonic7ris2s1tners4s1y3y2ccw3e0t2f0izer5g1h0armacy6d1ilips5one2to0graphy6s4ysio5ics1tet2ures6d1n0g1k2oneer5zza4k1l0ace2y0station9umbing5s3m1n0c2ohl2ker3litie5rn2st3r0america6xi3ess3ime3o0d0uctions8f1gressive8mo2perties3y5tection8u0dential9s1t1ub2w0c2y2qa1pon3uebec3st5racing4dio4e0ad1lestate6tor2y4cipes5d0stone5umbrella9hab3ise0n3t2liance6n0t0als5pair3ort3ublican8st0aurant8view0s5xroth6ich0ardli6oh3l1o1p2o0cks3deo3gers4om3s0vp3u0gby3hr2n2w0e2yukyu6sa0arland6fe0ty4kura4le1on3msclub4ung5ndvik0coromant12ofi4p1rl2s1ve2xo3b0i1s2c0b1haeffler7midt4olarships8ol3ule3warz5ience5ot3d1e0arch3t2cure1ity6ek2lect4ner3rvices6ven3w1x0y3fr2g1h0angrila6rp3ell3ia1ksha5oes2p0ping5uji3w3i0lk2na1gles5te3j1k0i0n2y0pe4l0ing4m0art3ile4n0cf3o0ccer3ial4ftbank4ware6hu2lar2utions7ng1y2y2pa0ce3ort2t3r0l2s1t0ada2ples4r1tebank4farm7c0group6ockholm6rage3e3ream4udio2y3yle4u0cks3pplies3y2ort5rf1gery5zuki5v1watch4iss4x1y0dney4stems6z2tab1ipei4lk2obao4rget4tamotors6r2too4x0i3c0i2d0k2eam2ch0nology8l1masek5nnis4va3f1g1h0d1eater2re6iaa2ckets5enda4ps2res2ol4j0maxx4x2k0maxx5l1m0all4n1o0day3kyo3ols3p1ray3shiba5tal3urs3wn2yota3s3r0ade1ing4ining5vel0ers0insurance16ust3v2t1ube2i1nes3shu4v0s2w1z2ua1bank3s2g1k1nicom3versity8o2ol2ps2s1y1z2va0cations7na1guard7c1e0gas3ntures6risign5mögensberater2ung14sicherung10t2g1i0ajes4deo3g1king4llas4n1p1rgin4sa1ion4va1o3laanderen9n1odka3lvo3te1ing3o2yage5u2wales2mart4ter4ng0gou5tch0es6eather0channel12bcam3er2site5d0ding5ibo2r3f1hoswho6ien2ki2lliamhill9n0dows4e1ners6me2olterskluwer11odside6rk0s2ld3w2s1tc1f3xbox3erox4ihuan4n2xx2yz3yachts4hoo3maxun5ndex5e1odobashi7ga2kohama6u0tube6t1un3za0ppos4ra3ero3ip2m1one3uerich6w2";
var encodedUtlds = "ελ1υ2бг1ел3дети4ею2католик6ом3мкд2он1сква6онлайн5рг3рус2ф2сайт3рб3укр3қаз3հայ3ישראל5קום3ابوظبي5رامكو5لاردن4بحرين5جزائر5سعودية6عليان5مغرب5مارات5یران5بارت2زار4يتك3ھارت5تونس4سودان3رية5شبكة4عراق2ب2مان4فلسطين6قطر3كاثوليك6وم3مصر2ليسيا5وريتانيا7قع4همراه5پاکستان7ڀارت4कॉम3नेट3भारत0म्3ोत5संगठन5বাংলা5ভারত2ৰত4ਭਾਰਤ4ભારત4ଭାରତ4இந்தியா6லங்கை6சிங்கப்பூர்11భారత్5ಭಾರತ4ഭാരതം5ලංකා4คอม3ไทย3ລາວ3გე2みんな3アマゾン4クラウド4グーグル4コム2ストア3セール3ファッション6ポイント4世界2中信1国1國1文网3亚马逊3企业2佛山2信息2健康2八卦2公司1益2台湾1灣2商城1店1标2嘉里0大酒店5在线2大拿2天主教3娱乐2家電2广东2微博2慈善2我爱你3手机2招聘2政务1府2新加坡2闻2时尚2書籍2机构2淡马锡3游戏2澳門2点看2移动2组织机构4网址1店1站1络2联通2谷歌2购物2通販2集团2電訊盈科4飞利浦3食品2餐厅2香格里拉3港2닷넷1컴2삼성2한국2";
var assign = (target, properties) => {
  for (const key in properties) {
    target[key] = properties[key];
  }
  return target;
};
var numeric = "numeric";
var ascii = "ascii";
var alpha = "alpha";
var asciinumeric = "asciinumeric";
var alphanumeric = "alphanumeric";
var domain = "domain";
var emoji = "emoji";
var scheme = "scheme";
var slashscheme = "slashscheme";
var whitespace = "whitespace";
function registerGroup(name, groups) {
  if (!(name in groups)) {
    groups[name] = [];
  }
  return groups[name];
}
function addToGroups(t2, flags, groups) {
  if (flags[numeric]) {
    flags[asciinumeric] = true;
    flags[alphanumeric] = true;
  }
  if (flags[ascii]) {
    flags[asciinumeric] = true;
    flags[alpha] = true;
  }
  if (flags[asciinumeric]) {
    flags[alphanumeric] = true;
  }
  if (flags[alpha]) {
    flags[alphanumeric] = true;
  }
  if (flags[alphanumeric]) {
    flags[domain] = true;
  }
  if (flags[emoji]) {
    flags[domain] = true;
  }
  for (const k in flags) {
    const group = registerGroup(k, groups);
    if (group.indexOf(t2) < 0) {
      group.push(t2);
    }
  }
}
function flagsForToken(t2, groups) {
  const result = {};
  for (const c in groups) {
    if (groups[c].indexOf(t2) >= 0) {
      result[c] = true;
    }
  }
  return result;
}
function State(token = null) {
  this.j = {};
  this.jr = [];
  this.jd = null;
  this.t = token;
}
State.groups = {};
State.prototype = {
  accepts() {
    return !!this.t;
  },
  /**
   * Follow an existing transition from the given input to the next state.
   * Does not mutate.
   * @param {string} input character or token type to transition on
   * @returns {?State<T>} the next state, if any
   */
  go(input) {
    const state = this;
    const nextState = state.j[input];
    if (nextState) {
      return nextState;
    }
    for (let i = 0; i < state.jr.length; i++) {
      const regex = state.jr[i][0];
      const nextState2 = state.jr[i][1];
      if (nextState2 && regex.test(input)) {
        return nextState2;
      }
    }
    return state.jd;
  },
  /**
   * Whether the state has a transition for the given input. Set the second
   * argument to true to only look for an exact match (and not a default or
   * regular-expression-based transition)
   * @param {string} input
   * @param {boolean} exactOnly
   */
  has(input, exactOnly = false) {
    return exactOnly ? input in this.j : !!this.go(input);
  },
  /**
   * Short for "transition all"; create a transition from the array of items
   * in the given list to the same final resulting state.
   * @param {string | string[]} inputs Group of inputs to transition on
   * @param {Transition<T> | State<T>} [next] Transition options
   * @param {Flags} [flags] Collections flags to add token to
   * @param {Collections<T>} [groups] Master list of token groups
   */
  ta(inputs, next, flags, groups) {
    for (let i = 0; i < inputs.length; i++) {
      this.tt(inputs[i], next, flags, groups);
    }
  },
  /**
   * Short for "take regexp transition"; defines a transition for this state
   * when it encounters a token which matches the given regular expression
   * @param {RegExp} regexp Regular expression transition (populate first)
   * @param {T | State<T>} [next] Transition options
   * @param {Flags} [flags] Collections flags to add token to
   * @param {Collections<T>} [groups] Master list of token groups
   * @returns {State<T>} taken after the given input
   */
  tr(regexp2, next, flags, groups) {
    groups = groups || State.groups;
    let nextState;
    if (next && next.j) {
      nextState = next;
    } else {
      nextState = new State(next);
      if (flags && groups) {
        addToGroups(next, flags, groups);
      }
    }
    this.jr.push([regexp2, nextState]);
    return nextState;
  },
  /**
   * Short for "take transitions", will take as many sequential transitions as
   * the length of the given input and returns the
   * resulting final state.
   * @param {string | string[]} input
   * @param {T | State<T>} [next] Transition options
   * @param {Flags} [flags] Collections flags to add token to
   * @param {Collections<T>} [groups] Master list of token groups
   * @returns {State<T>} taken after the given input
   */
  ts(input, next, flags, groups) {
    let state = this;
    const len = input.length;
    if (!len) {
      return state;
    }
    for (let i = 0; i < len - 1; i++) {
      state = state.tt(input[i]);
    }
    return state.tt(input[len - 1], next, flags, groups);
  },
  /**
   * Short for "take transition", this is a method for building/working with
   * state machines.
   *
   * If a state already exists for the given input, returns it.
   *
   * If a token is specified, that state will emit that token when reached by
   * the linkify engine.
   *
   * If no state exists, it will be initialized with some default transitions
   * that resemble existing default transitions.
   *
   * If a state is given for the second argument, that state will be
   * transitioned to on the given input regardless of what that input
   * previously did.
   *
   * Specify a token group flags to define groups that this token belongs to.
   * The token will be added to corresponding entires in the given groups
   * object.
   *
   * @param {string} input character, token type to transition on
   * @param {T | State<T>} [next] Transition options
   * @param {Flags} [flags] Collections flags to add token to
   * @param {Collections<T>} [groups] Master list of groups
   * @returns {State<T>} taken after the given input
   */
  tt(input, next, flags, groups) {
    groups = groups || State.groups;
    const state = this;
    if (next && next.j) {
      state.j[input] = next;
      return next;
    }
    const t2 = next;
    let nextState, templateState = state.go(input);
    if (templateState) {
      nextState = new State();
      assign(nextState.j, templateState.j);
      nextState.jr.push.apply(nextState.jr, templateState.jr);
      nextState.jd = templateState.jd;
      nextState.t = templateState.t;
    } else {
      nextState = new State();
    }
    if (t2) {
      if (groups) {
        if (nextState.t && typeof nextState.t === "string") {
          const allFlags = assign(flagsForToken(nextState.t, groups), flags);
          addToGroups(t2, allFlags, groups);
        } else if (flags) {
          addToGroups(t2, flags, groups);
        }
      }
      nextState.t = t2;
    }
    state.j[input] = nextState;
    return nextState;
  }
};
var ta = (state, input, next, flags, groups) => state.ta(input, next, flags, groups);
var tr = (state, regexp2, next, flags, groups) => state.tr(regexp2, next, flags, groups);
var ts = (state, input, next, flags, groups) => state.ts(input, next, flags, groups);
var tt = (state, input, next, flags, groups) => state.tt(input, next, flags, groups);
var WORD = "WORD";
var UWORD = "UWORD";
var ASCIINUMERICAL = "ASCIINUMERICAL";
var ALPHANUMERICAL = "ALPHANUMERICAL";
var LOCALHOST = "LOCALHOST";
var TLD = "TLD";
var UTLD = "UTLD";
var SCHEME = "SCHEME";
var SLASH_SCHEME = "SLASH_SCHEME";
var NUM = "NUM";
var WS = "WS";
var NL = "NL";
var OPENBRACE = "OPENBRACE";
var CLOSEBRACE = "CLOSEBRACE";
var OPENBRACKET = "OPENBRACKET";
var CLOSEBRACKET = "CLOSEBRACKET";
var OPENPAREN = "OPENPAREN";
var CLOSEPAREN = "CLOSEPAREN";
var OPENANGLEBRACKET = "OPENANGLEBRACKET";
var CLOSEANGLEBRACKET = "CLOSEANGLEBRACKET";
var FULLWIDTHLEFTPAREN = "FULLWIDTHLEFTPAREN";
var FULLWIDTHRIGHTPAREN = "FULLWIDTHRIGHTPAREN";
var LEFTCORNERBRACKET = "LEFTCORNERBRACKET";
var RIGHTCORNERBRACKET = "RIGHTCORNERBRACKET";
var LEFTWHITECORNERBRACKET = "LEFTWHITECORNERBRACKET";
var RIGHTWHITECORNERBRACKET = "RIGHTWHITECORNERBRACKET";
var FULLWIDTHLESSTHAN = "FULLWIDTHLESSTHAN";
var FULLWIDTHGREATERTHAN = "FULLWIDTHGREATERTHAN";
var AMPERSAND = "AMPERSAND";
var APOSTROPHE = "APOSTROPHE";
var ASTERISK = "ASTERISK";
var AT = "AT";
var BACKSLASH = "BACKSLASH";
var BACKTICK = "BACKTICK";
var CARET = "CARET";
var COLON = "COLON";
var COMMA = "COMMA";
var DOLLAR = "DOLLAR";
var DOT = "DOT";
var EQUALS = "EQUALS";
var EXCLAMATION = "EXCLAMATION";
var HYPHEN = "HYPHEN";
var PERCENT = "PERCENT";
var PIPE = "PIPE";
var PLUS = "PLUS";
var POUND = "POUND";
var QUERY = "QUERY";
var QUOTE = "QUOTE";
var FULLWIDTHMIDDLEDOT = "FULLWIDTHMIDDLEDOT";
var SEMI = "SEMI";
var SLASH = "SLASH";
var TILDE = "TILDE";
var UNDERSCORE = "UNDERSCORE";
var EMOJI$1 = "EMOJI";
var SYM = "SYM";
var tk = Object.freeze({
  __proto__: null,
  ALPHANUMERICAL,
  AMPERSAND,
  APOSTROPHE,
  ASCIINUMERICAL,
  ASTERISK,
  AT,
  BACKSLASH,
  BACKTICK,
  CARET,
  CLOSEANGLEBRACKET,
  CLOSEBRACE,
  CLOSEBRACKET,
  CLOSEPAREN,
  COLON,
  COMMA,
  DOLLAR,
  DOT,
  EMOJI: EMOJI$1,
  EQUALS,
  EXCLAMATION,
  FULLWIDTHGREATERTHAN,
  FULLWIDTHLEFTPAREN,
  FULLWIDTHLESSTHAN,
  FULLWIDTHMIDDLEDOT,
  FULLWIDTHRIGHTPAREN,
  HYPHEN,
  LEFTCORNERBRACKET,
  LEFTWHITECORNERBRACKET,
  LOCALHOST,
  NL,
  NUM,
  OPENANGLEBRACKET,
  OPENBRACE,
  OPENBRACKET,
  OPENPAREN,
  PERCENT,
  PIPE,
  PLUS,
  POUND,
  QUERY,
  QUOTE,
  RIGHTCORNERBRACKET,
  RIGHTWHITECORNERBRACKET,
  SCHEME,
  SEMI,
  SLASH,
  SLASH_SCHEME,
  SYM,
  TILDE,
  TLD,
  UNDERSCORE,
  UTLD,
  UWORD,
  WORD,
  WS
});
var ASCII_LETTER = /[a-z]/;
var LETTER = new RegExp("\\p{L}", "u");
var EMOJI = new RegExp("\\p{Emoji}", "u");
var EMOJI_VARIATION$1 = /\ufe0f/;
var DIGIT = /\d/;
var SPACE = /\s/;
var regexp = Object.freeze({
  __proto__: null,
  ASCII_LETTER,
  DIGIT,
  EMOJI,
  EMOJI_VARIATION: EMOJI_VARIATION$1,
  LETTER,
  SPACE
});
var CR = "\r";
var LF = "\n";
var EMOJI_VARIATION = "️";
var EMOJI_JOINER = "‍";
var OBJECT_REPLACEMENT = "￼";
var tlds = null;
var utlds = null;
function init$2(customSchemes = []) {
  const groups = {};
  State.groups = groups;
  const Start = new State();
  if (tlds == null) {
    tlds = decodeTlds(encodedTlds);
  }
  if (utlds == null) {
    utlds = decodeTlds(encodedUtlds);
  }
  tt(Start, "'", APOSTROPHE);
  tt(Start, "{", OPENBRACE);
  tt(Start, "}", CLOSEBRACE);
  tt(Start, "[", OPENBRACKET);
  tt(Start, "]", CLOSEBRACKET);
  tt(Start, "(", OPENPAREN);
  tt(Start, ")", CLOSEPAREN);
  tt(Start, "<", OPENANGLEBRACKET);
  tt(Start, ">", CLOSEANGLEBRACKET);
  tt(Start, "（", FULLWIDTHLEFTPAREN);
  tt(Start, "）", FULLWIDTHRIGHTPAREN);
  tt(Start, "「", LEFTCORNERBRACKET);
  tt(Start, "」", RIGHTCORNERBRACKET);
  tt(Start, "『", LEFTWHITECORNERBRACKET);
  tt(Start, "』", RIGHTWHITECORNERBRACKET);
  tt(Start, "＜", FULLWIDTHLESSTHAN);
  tt(Start, "＞", FULLWIDTHGREATERTHAN);
  tt(Start, "&", AMPERSAND);
  tt(Start, "*", ASTERISK);
  tt(Start, "@", AT);
  tt(Start, "`", BACKTICK);
  tt(Start, "^", CARET);
  tt(Start, ":", COLON);
  tt(Start, ",", COMMA);
  tt(Start, "$", DOLLAR);
  tt(Start, ".", DOT);
  tt(Start, "=", EQUALS);
  tt(Start, "!", EXCLAMATION);
  tt(Start, "-", HYPHEN);
  tt(Start, "%", PERCENT);
  tt(Start, "|", PIPE);
  tt(Start, "+", PLUS);
  tt(Start, "#", POUND);
  tt(Start, "?", QUERY);
  tt(Start, '"', QUOTE);
  tt(Start, "/", SLASH);
  tt(Start, ";", SEMI);
  tt(Start, "~", TILDE);
  tt(Start, "_", UNDERSCORE);
  tt(Start, "\\", BACKSLASH);
  tt(Start, "・", FULLWIDTHMIDDLEDOT);
  const Num = tr(Start, DIGIT, NUM, {
    [numeric]: true
  });
  tr(Num, DIGIT, Num);
  const Asciinumeric = tr(Num, ASCII_LETTER, ASCIINUMERICAL, {
    [asciinumeric]: true
  });
  const Alphanumeric = tr(Num, LETTER, ALPHANUMERICAL, {
    [alphanumeric]: true
  });
  const Word = tr(Start, ASCII_LETTER, WORD, {
    [ascii]: true
  });
  tr(Word, DIGIT, Asciinumeric);
  tr(Word, ASCII_LETTER, Word);
  tr(Asciinumeric, DIGIT, Asciinumeric);
  tr(Asciinumeric, ASCII_LETTER, Asciinumeric);
  const UWord = tr(Start, LETTER, UWORD, {
    [alpha]: true
  });
  tr(UWord, ASCII_LETTER);
  tr(UWord, DIGIT, Alphanumeric);
  tr(UWord, LETTER, UWord);
  tr(Alphanumeric, DIGIT, Alphanumeric);
  tr(Alphanumeric, ASCII_LETTER);
  tr(Alphanumeric, LETTER, Alphanumeric);
  const Nl2 = tt(Start, LF, NL, {
    [whitespace]: true
  });
  const Cr = tt(Start, CR, WS, {
    [whitespace]: true
  });
  const Ws = tr(Start, SPACE, WS, {
    [whitespace]: true
  });
  tt(Start, OBJECT_REPLACEMENT, Ws);
  tt(Cr, LF, Nl2);
  tt(Cr, OBJECT_REPLACEMENT, Ws);
  tr(Cr, SPACE, Ws);
  tt(Ws, CR);
  tt(Ws, LF);
  tr(Ws, SPACE, Ws);
  tt(Ws, OBJECT_REPLACEMENT, Ws);
  const Emoji2 = tr(Start, EMOJI, EMOJI$1, {
    [emoji]: true
  });
  tt(Emoji2, "#");
  tr(Emoji2, EMOJI, Emoji2);
  tt(Emoji2, EMOJI_VARIATION, Emoji2);
  const EmojiJoiner = tt(Emoji2, EMOJI_JOINER);
  tt(EmojiJoiner, "#");
  tr(EmojiJoiner, EMOJI, Emoji2);
  const wordjr = [[ASCII_LETTER, Word], [DIGIT, Asciinumeric]];
  const uwordjr = [[ASCII_LETTER, null], [LETTER, UWord], [DIGIT, Alphanumeric]];
  for (let i = 0; i < tlds.length; i++) {
    fastts(Start, tlds[i], TLD, WORD, wordjr);
  }
  for (let i = 0; i < utlds.length; i++) {
    fastts(Start, utlds[i], UTLD, UWORD, uwordjr);
  }
  addToGroups(TLD, {
    tld: true,
    ascii: true
  }, groups);
  addToGroups(UTLD, {
    utld: true,
    alpha: true
  }, groups);
  fastts(Start, "file", SCHEME, WORD, wordjr);
  fastts(Start, "mailto", SCHEME, WORD, wordjr);
  fastts(Start, "http", SLASH_SCHEME, WORD, wordjr);
  fastts(Start, "https", SLASH_SCHEME, WORD, wordjr);
  fastts(Start, "ftp", SLASH_SCHEME, WORD, wordjr);
  fastts(Start, "ftps", SLASH_SCHEME, WORD, wordjr);
  addToGroups(SCHEME, {
    scheme: true,
    ascii: true
  }, groups);
  addToGroups(SLASH_SCHEME, {
    slashscheme: true,
    ascii: true
  }, groups);
  customSchemes = customSchemes.sort((a, b) => a[0] > b[0] ? 1 : -1);
  for (let i = 0; i < customSchemes.length; i++) {
    const sch = customSchemes[i][0];
    const optionalSlashSlash = customSchemes[i][1];
    const flags = optionalSlashSlash ? {
      [scheme]: true
    } : {
      [slashscheme]: true
    };
    if (sch.indexOf("-") >= 0) {
      flags[domain] = true;
    } else if (!ASCII_LETTER.test(sch)) {
      flags[numeric] = true;
    } else if (DIGIT.test(sch)) {
      flags[asciinumeric] = true;
    } else {
      flags[ascii] = true;
    }
    ts(Start, sch, sch, flags);
  }
  ts(Start, "localhost", LOCALHOST, {
    ascii: true
  });
  Start.jd = new State(SYM);
  return {
    start: Start,
    tokens: assign({
      groups
    }, tk)
  };
}
function run$1(start2, str) {
  const iterable = stringToArray(str.replace(/[A-Z]/g, (c) => c.toLowerCase()));
  const charCount = iterable.length;
  const tokens = [];
  let cursor = 0;
  let charCursor = 0;
  while (charCursor < charCount) {
    let state = start2;
    let nextState = null;
    let tokenLength = 0;
    let latestAccepting = null;
    let sinceAccepts = -1;
    let charsSinceAccepts = -1;
    while (charCursor < charCount && (nextState = state.go(iterable[charCursor]))) {
      state = nextState;
      if (state.accepts()) {
        sinceAccepts = 0;
        charsSinceAccepts = 0;
        latestAccepting = state;
      } else if (sinceAccepts >= 0) {
        sinceAccepts += iterable[charCursor].length;
        charsSinceAccepts++;
      }
      tokenLength += iterable[charCursor].length;
      cursor += iterable[charCursor].length;
      charCursor++;
    }
    cursor -= sinceAccepts;
    charCursor -= charsSinceAccepts;
    tokenLength -= sinceAccepts;
    tokens.push({
      t: latestAccepting.t,
      // token type/name
      v: str.slice(cursor - tokenLength, cursor),
      // string value
      s: cursor - tokenLength,
      // start index
      e: cursor
      // end index (excluding)
    });
  }
  return tokens;
}
function stringToArray(str) {
  const result = [];
  const len = str.length;
  let index3 = 0;
  while (index3 < len) {
    let first = str.charCodeAt(index3);
    let second;
    let char = first < 55296 || first > 56319 || index3 + 1 === len || (second = str.charCodeAt(index3 + 1)) < 56320 || second > 57343 ? str[index3] : str.slice(index3, index3 + 2);
    result.push(char);
    index3 += char.length;
  }
  return result;
}
function fastts(state, input, t2, defaultt, jr) {
  let next;
  const len = input.length;
  for (let i = 0; i < len - 1; i++) {
    const char = input[i];
    if (state.j[char]) {
      next = state.j[char];
    } else {
      next = new State(defaultt);
      next.jr = jr.slice();
      state.j[char] = next;
    }
    state = next;
  }
  next = new State(t2);
  next.jr = jr.slice();
  state.j[input[len - 1]] = next;
  return next;
}
function decodeTlds(encoded) {
  const words = [];
  const stack = [];
  let i = 0;
  let digits = "0123456789";
  while (i < encoded.length) {
    let popDigitCount = 0;
    while (digits.indexOf(encoded[i + popDigitCount]) >= 0) {
      popDigitCount++;
    }
    if (popDigitCount > 0) {
      words.push(stack.join(""));
      for (let popCount = parseInt(encoded.substring(i, i + popDigitCount), 10); popCount > 0; popCount--) {
        stack.pop();
      }
      i += popDigitCount;
    } else {
      stack.push(encoded[i]);
      i++;
    }
  }
  return words;
}
var defaults = {
  defaultProtocol: "http",
  events: null,
  format: noop,
  formatHref: noop,
  nl2br: false,
  tagName: "a",
  target: null,
  rel: null,
  validate: true,
  truncate: Infinity,
  className: null,
  attributes: null,
  ignoreTags: [],
  render: null
};
function Options(opts, defaultRender = null) {
  let o = assign({}, defaults);
  if (opts) {
    o = assign(o, opts instanceof Options ? opts.o : opts);
  }
  const ignoredTags = o.ignoreTags;
  const uppercaseIgnoredTags = [];
  for (let i = 0; i < ignoredTags.length; i++) {
    uppercaseIgnoredTags.push(ignoredTags[i].toUpperCase());
  }
  this.o = o;
  if (defaultRender) {
    this.defaultRender = defaultRender;
  }
  this.ignoreTags = uppercaseIgnoredTags;
}
Options.prototype = {
  o: defaults,
  /**
   * @type string[]
   */
  ignoreTags: [],
  /**
   * @param {IntermediateRepresentation} ir
   * @returns {any}
   */
  defaultRender(ir) {
    return ir;
  },
  /**
   * Returns true or false based on whether a token should be displayed as a
   * link based on the user options.
   * @param {MultiToken} token
   * @returns {boolean}
   */
  check(token) {
    return this.get("validate", token.toString(), token);
  },
  // Private methods
  /**
   * Resolve an option's value based on the value of the option and the given
   * params. If operator and token are specified and the target option is
   * callable, automatically calls the function with the given argument.
   * @template {keyof Opts} K
   * @param {K} key Name of option to use
   * @param {string} [operator] will be passed to the target option if it's a
   * function. If not specified, RAW function value gets returned
   * @param {MultiToken} [token] The token from linkify.tokenize
   * @returns {Opts[K] | any}
   */
  get(key, operator, token) {
    const isCallable = operator != null;
    let option = this.o[key];
    if (!option) {
      return option;
    }
    if (typeof option === "object") {
      option = token.t in option ? option[token.t] : defaults[key];
      if (typeof option === "function" && isCallable) {
        option = option(operator, token);
      }
    } else if (typeof option === "function" && isCallable) {
      option = option(operator, token.t, token);
    }
    return option;
  },
  /**
   * @template {keyof Opts} L
   * @param {L} key Name of options object to use
   * @param {string} [operator]
   * @param {MultiToken} [token]
   * @returns {Opts[L] | any}
   */
  getObj(key, operator, token) {
    let obj = this.o[key];
    if (typeof obj === "function" && operator != null) {
      obj = obj(operator, token.t, token);
    }
    return obj;
  },
  /**
   * Convert the given token to a rendered element that may be added to the
   * calling-interface's DOM
   * @param {MultiToken} token Token to render to an HTML element
   * @returns {any} Render result; e.g., HTML string, DOM element, React
   *   Component, etc.
   */
  render(token) {
    const ir = token.render(this);
    const renderFn = this.get("render", null, token) || this.defaultRender;
    return renderFn(ir, token.t, token);
  }
};
function noop(val) {
  return val;
}
var options = Object.freeze({
  __proto__: null,
  Options,
  assign,
  defaults
});
function MultiToken(value, tokens) {
  this.t = "token";
  this.v = value;
  this.tk = tokens;
}
MultiToken.prototype = {
  isLink: false,
  /**
   * Return the string this token represents.
   * @return {string}
   */
  toString() {
    return this.v;
  },
  /**
   * What should the value for this token be in the `href` HTML attribute?
   * Returns the `.toString` value by default.
   * @param {string} [scheme]
   * @return {string}
   */
  toHref(scheme2) {
    return this.toString();
  },
  /**
   * @param {Options} options Formatting options
   * @returns {string}
   */
  toFormattedString(options2) {
    const val = this.toString();
    const truncate = options2.get("truncate", val, this);
    const formatted = options2.get("format", val, this);
    return truncate && formatted.length > truncate ? formatted.substring(0, truncate) + "…" : formatted;
  },
  /**
   *
   * @param {Options} options
   * @returns {string}
   */
  toFormattedHref(options2) {
    return options2.get("formatHref", this.toHref(options2.get("defaultProtocol")), this);
  },
  /**
   * The start index of this token in the original input string
   * @returns {number}
   */
  startIndex() {
    return this.tk[0].s;
  },
  /**
   * The end index of this token in the original input string (up to this
   * index but not including it)
   * @returns {number}
   */
  endIndex() {
    return this.tk[this.tk.length - 1].e;
  },
  /**
  	Returns an object  of relevant values for this token, which includes keys
  	* type - Kind of token ('url', 'email', etc.)
  	* value - Original text
  	* href - The value that should be added to the anchor tag's href
  		attribute
  		@method toObject
  	@param {string} [protocol] `'http'` by default
  */
  toObject(protocol = defaults.defaultProtocol) {
    return {
      type: this.t,
      value: this.toString(),
      isLink: this.isLink,
      href: this.toHref(protocol),
      start: this.startIndex(),
      end: this.endIndex()
    };
  },
  /**
   *
   * @param {Options} options Formatting option
   */
  toFormattedObject(options2) {
    return {
      type: this.t,
      value: this.toFormattedString(options2),
      isLink: this.isLink,
      href: this.toFormattedHref(options2),
      start: this.startIndex(),
      end: this.endIndex()
    };
  },
  /**
   * Whether this token should be rendered as a link according to the given options
   * @param {Options} options
   * @returns {boolean}
   */
  validate(options2) {
    return options2.get("validate", this.toString(), this);
  },
  /**
   * Return an object that represents how this link should be rendered.
   * @param {Options} options Formattinng options
   */
  render(options2) {
    const token = this;
    const href = this.toHref(options2.get("defaultProtocol"));
    const formattedHref = options2.get("formatHref", href, this);
    const tagName = options2.get("tagName", href, token);
    const content = this.toFormattedString(options2);
    const attributes = {};
    const className = options2.get("className", href, token);
    const target = options2.get("target", href, token);
    const rel = options2.get("rel", href, token);
    const attrs = options2.getObj("attributes", href, token);
    const eventListeners = options2.getObj("events", href, token);
    attributes.href = formattedHref;
    if (className) {
      attributes.class = className;
    }
    if (target) {
      attributes.target = target;
    }
    if (rel) {
      attributes.rel = rel;
    }
    if (attrs) {
      assign(attributes, attrs);
    }
    return {
      tagName,
      attributes,
      content,
      eventListeners
    };
  }
};
function createTokenClass(type, props) {
  class Token extends MultiToken {
    constructor(value, tokens) {
      super(value, tokens);
      this.t = type;
    }
  }
  for (const p in props) {
    Token.prototype[p] = props[p];
  }
  Token.t = type;
  return Token;
}
var Email = createTokenClass("email", {
  isLink: true,
  toHref() {
    return "mailto:" + this.toString();
  }
});
var Text = createTokenClass("text");
var Nl = createTokenClass("nl");
var Url = createTokenClass("url", {
  isLink: true,
  /**
  	Lowercases relevant parts of the domain and adds the protocol if
  	required. Note that this will not escape unsafe HTML characters in the
  	URL.
  		@param {string} [scheme] default scheme (e.g., 'https')
  	@return {string} the full href
  */
  toHref(scheme2 = defaults.defaultProtocol) {
    return this.hasProtocol() ? this.v : `${scheme2}://${this.v}`;
  },
  /**
   * Check whether this URL token has a protocol
   * @return {boolean}
   */
  hasProtocol() {
    const tokens = this.tk;
    return tokens.length >= 2 && tokens[0].t !== LOCALHOST && tokens[1].t === COLON;
  }
});
var multi = Object.freeze({
  __proto__: null,
  Base: MultiToken,
  Email,
  MultiToken,
  Nl,
  Text,
  Url,
  createTokenClass
});
var makeState = (arg) => new State(arg);
function init$1({
  groups
}) {
  const qsAccepting = groups.domain.concat([AMPERSAND, ASTERISK, AT, BACKSLASH, BACKTICK, CARET, DOLLAR, EQUALS, HYPHEN, NUM, PERCENT, PIPE, PLUS, POUND, SLASH, SYM, TILDE, UNDERSCORE]);
  const qsNonAccepting = [APOSTROPHE, COLON, COMMA, DOT, EXCLAMATION, PERCENT, QUERY, QUOTE, SEMI, OPENANGLEBRACKET, CLOSEANGLEBRACKET, OPENBRACE, CLOSEBRACE, CLOSEBRACKET, OPENBRACKET, OPENPAREN, CLOSEPAREN, FULLWIDTHLEFTPAREN, FULLWIDTHRIGHTPAREN, LEFTCORNERBRACKET, RIGHTCORNERBRACKET, LEFTWHITECORNERBRACKET, RIGHTWHITECORNERBRACKET, FULLWIDTHLESSTHAN, FULLWIDTHGREATERTHAN];
  const localpartAccepting = [AMPERSAND, APOSTROPHE, ASTERISK, BACKSLASH, BACKTICK, CARET, DOLLAR, EQUALS, HYPHEN, OPENBRACE, CLOSEBRACE, PERCENT, PIPE, PLUS, POUND, QUERY, SLASH, SYM, TILDE, UNDERSCORE];
  const Start = makeState();
  const Localpart = tt(Start, TILDE);
  ta(Localpart, localpartAccepting, Localpart);
  ta(Localpart, groups.domain, Localpart);
  const Domain = makeState(), Scheme = makeState(), SlashScheme = makeState();
  ta(Start, groups.domain, Domain);
  ta(Start, groups.scheme, Scheme);
  ta(Start, groups.slashscheme, SlashScheme);
  ta(Domain, localpartAccepting, Localpart);
  ta(Domain, groups.domain, Domain);
  const LocalpartAt = tt(Domain, AT);
  tt(Localpart, AT, LocalpartAt);
  tt(Scheme, AT, LocalpartAt);
  tt(SlashScheme, AT, LocalpartAt);
  const LocalpartDot = tt(Localpart, DOT);
  ta(LocalpartDot, localpartAccepting, Localpart);
  ta(LocalpartDot, groups.domain, Localpart);
  const EmailDomain = makeState();
  ta(LocalpartAt, groups.domain, EmailDomain);
  ta(EmailDomain, groups.domain, EmailDomain);
  const EmailDomainDot = tt(EmailDomain, DOT);
  ta(EmailDomainDot, groups.domain, EmailDomain);
  const Email$1 = makeState(Email);
  ta(EmailDomainDot, groups.tld, Email$1);
  ta(EmailDomainDot, groups.utld, Email$1);
  tt(LocalpartAt, LOCALHOST, Email$1);
  const EmailDomainHyphen = tt(EmailDomain, HYPHEN);
  tt(EmailDomainHyphen, HYPHEN, EmailDomainHyphen);
  ta(EmailDomainHyphen, groups.domain, EmailDomain);
  ta(Email$1, groups.domain, EmailDomain);
  tt(Email$1, DOT, EmailDomainDot);
  tt(Email$1, HYPHEN, EmailDomainHyphen);
  const EmailColon = tt(Email$1, COLON);
  ta(EmailColon, groups.numeric, Email);
  const DomainHyphen = tt(Domain, HYPHEN);
  const DomainDot = tt(Domain, DOT);
  tt(DomainHyphen, HYPHEN, DomainHyphen);
  ta(DomainHyphen, groups.domain, Domain);
  ta(DomainDot, localpartAccepting, Localpart);
  ta(DomainDot, groups.domain, Domain);
  const DomainDotTld = makeState(Url);
  ta(DomainDot, groups.tld, DomainDotTld);
  ta(DomainDot, groups.utld, DomainDotTld);
  ta(DomainDotTld, groups.domain, Domain);
  ta(DomainDotTld, localpartAccepting, Localpart);
  tt(DomainDotTld, DOT, DomainDot);
  tt(DomainDotTld, HYPHEN, DomainHyphen);
  tt(DomainDotTld, AT, LocalpartAt);
  const DomainDotTldColon = tt(DomainDotTld, COLON);
  const DomainDotTldColonPort = makeState(Url);
  ta(DomainDotTldColon, groups.numeric, DomainDotTldColonPort);
  const Url$1 = makeState(Url);
  const UrlNonaccept = makeState();
  ta(Url$1, qsAccepting, Url$1);
  ta(Url$1, qsNonAccepting, UrlNonaccept);
  ta(UrlNonaccept, qsAccepting, Url$1);
  ta(UrlNonaccept, qsNonAccepting, UrlNonaccept);
  tt(DomainDotTld, SLASH, Url$1);
  tt(DomainDotTldColonPort, SLASH, Url$1);
  const SchemeColon = tt(Scheme, COLON);
  const SlashSchemeColon = tt(SlashScheme, COLON);
  const SlashSchemeColonSlash = tt(SlashSchemeColon, SLASH);
  const UriPrefix = tt(SlashSchemeColonSlash, SLASH);
  ta(Scheme, groups.domain, Domain);
  tt(Scheme, DOT, DomainDot);
  tt(Scheme, HYPHEN, DomainHyphen);
  ta(SlashScheme, groups.domain, Domain);
  tt(SlashScheme, DOT, DomainDot);
  tt(SlashScheme, HYPHEN, DomainHyphen);
  ta(SchemeColon, groups.domain, Url$1);
  tt(SchemeColon, SLASH, Url$1);
  tt(SchemeColon, QUERY, Url$1);
  ta(UriPrefix, groups.domain, Url$1);
  ta(UriPrefix, qsAccepting, Url$1);
  tt(UriPrefix, SLASH, Url$1);
  const bracketPairs = [
    [OPENBRACE, CLOSEBRACE],
    // {}
    [OPENBRACKET, CLOSEBRACKET],
    // []
    [OPENPAREN, CLOSEPAREN],
    // ()
    [OPENANGLEBRACKET, CLOSEANGLEBRACKET],
    // <>
    [FULLWIDTHLEFTPAREN, FULLWIDTHRIGHTPAREN],
    // （）
    [LEFTCORNERBRACKET, RIGHTCORNERBRACKET],
    // 「」
    [LEFTWHITECORNERBRACKET, RIGHTWHITECORNERBRACKET],
    // 『』
    [FULLWIDTHLESSTHAN, FULLWIDTHGREATERTHAN]
    // ＜＞
  ];
  for (let i = 0; i < bracketPairs.length; i++) {
    const [OPEN, CLOSE] = bracketPairs[i];
    const UrlOpen = tt(Url$1, OPEN);
    tt(UrlNonaccept, OPEN, UrlOpen);
    tt(UrlOpen, CLOSE, Url$1);
    const UrlOpenQ = makeState(Url);
    ta(UrlOpen, qsAccepting, UrlOpenQ);
    const UrlOpenSyms = makeState();
    ta(UrlOpen, qsNonAccepting);
    ta(UrlOpenQ, qsAccepting, UrlOpenQ);
    ta(UrlOpenQ, qsNonAccepting, UrlOpenSyms);
    ta(UrlOpenSyms, qsAccepting, UrlOpenQ);
    ta(UrlOpenSyms, qsNonAccepting, UrlOpenSyms);
    tt(UrlOpenQ, CLOSE, Url$1);
    tt(UrlOpenSyms, CLOSE, Url$1);
  }
  tt(Start, LOCALHOST, DomainDotTld);
  tt(Start, NL, Nl);
  return {
    start: Start,
    tokens: tk
  };
}
function run(start2, input, tokens) {
  let len = tokens.length;
  let cursor = 0;
  let multis = [];
  let textTokens = [];
  while (cursor < len) {
    let state = start2;
    let secondState = null;
    let nextState = null;
    let multiLength = 0;
    let latestAccepting = null;
    let sinceAccepts = -1;
    while (cursor < len && !(secondState = state.go(tokens[cursor].t))) {
      textTokens.push(tokens[cursor++]);
    }
    while (cursor < len && (nextState = secondState || state.go(tokens[cursor].t))) {
      secondState = null;
      state = nextState;
      if (state.accepts()) {
        sinceAccepts = 0;
        latestAccepting = state;
      } else if (sinceAccepts >= 0) {
        sinceAccepts++;
      }
      cursor++;
      multiLength++;
    }
    if (sinceAccepts < 0) {
      cursor -= multiLength;
      if (cursor < len) {
        textTokens.push(tokens[cursor]);
        cursor++;
      }
    } else {
      if (textTokens.length > 0) {
        multis.push(initMultiToken(Text, input, textTokens));
        textTokens = [];
      }
      cursor -= sinceAccepts;
      multiLength -= sinceAccepts;
      const Multi = latestAccepting.t;
      const subtokens = tokens.slice(cursor - multiLength, cursor);
      multis.push(initMultiToken(Multi, input, subtokens));
    }
  }
  if (textTokens.length > 0) {
    multis.push(initMultiToken(Text, input, textTokens));
  }
  return multis;
}
function initMultiToken(Multi, input, tokens) {
  const startIdx = tokens[0].s;
  const endIdx = tokens[tokens.length - 1].e;
  const value = input.slice(startIdx, endIdx);
  return new Multi(value, tokens);
}
var INIT = {
  scanner: null,
  parser: null,
  tokenQueue: [],
  pluginQueue: [],
  customSchemes: [],
  initialized: false
};
function init() {
  INIT.scanner = init$2(INIT.customSchemes);
  for (let i = 0; i < INIT.tokenQueue.length; i++) {
    INIT.tokenQueue[i][1]({
      scanner: INIT.scanner
    });
  }
  INIT.parser = init$1(INIT.scanner.tokens);
  for (let i = 0; i < INIT.pluginQueue.length; i++) {
    INIT.pluginQueue[i][1]({
      scanner: INIT.scanner,
      parser: INIT.parser
    });
  }
  INIT.initialized = true;
  return INIT;
}
function tokenize(str) {
  if (!INIT.initialized) {
    init();
  }
  return run(INIT.parser.start, str, run$1(INIT.scanner.start, str));
}
tokenize.scan = run$1;
function find(str, type = null, opts = null) {
  if (type && typeof type === "object") {
    if (opts) {
      throw Error(`linkifyjs: Invalid link type ${type}; must be a string`);
    }
    opts = type;
    type = null;
  }
  const options2 = new Options(opts);
  const tokens = tokenize(str);
  const filtered = [];
  for (let i = 0; i < tokens.length; i++) {
    const token = tokens[i];
    if (token.isLink && (!type || token.t === type) && options2.check(token)) {
      filtered.push(token.toFormattedObject(options2));
    }
  }
  return filtered;
}
function test(str, type = null) {
  const tokens = tokenize(str);
  return tokens.length === 1 && tokens[0].isLink && (!type || tokens[0].t === type);
}

// node_modules/stream-chat-react/dist/components/Attachment/AttachmentActions.js
var import_react19 = __toESM(require_react());

// node_modules/stream-chat-react/dist/context/ChannelActionContext.js
var import_react = __toESM(require_react());
var ChannelActionContext = import_react.default.createContext(void 0);
var ChannelActionProvider = ({ children, value }) => import_react.default.createElement(ChannelActionContext.Provider, { value }, children);
var useChannelActionContext = (componentName) => {
  const contextValue = (0, import_react.useContext)(ChannelActionContext);
  if (!contextValue) {
    console.warn(`The useChannelActionContext hook was called outside of the ChannelActionContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the ${componentName} component.`);
    return {};
  }
  return contextValue;
};
var withChannelActionContext = (Component2) => {
  const WithChannelActionContextComponent = (props) => {
    const channelActionContext = useChannelActionContext();
    return import_react.default.createElement(Component2, { ...props, ...channelActionContext });
  };
  WithChannelActionContextComponent.displayName = (Component2.displayName || Component2.name || "Component").replace("Base", "");
  return WithChannelActionContextComponent;
};

// node_modules/stream-chat-react/dist/context/ChannelListContext.js
var import_react2 = __toESM(require_react());
var ChannelListContext = (0, import_react2.createContext)(void 0);
var ChannelListContextProvider = ({ children, value }) => import_react2.default.createElement(ChannelListContext.Provider, { value }, children);
var useChannelListContext = (componentName) => {
  const contextValue = (0, import_react2.useContext)(ChannelListContext);
  if (!contextValue) {
    console.warn(`The useChannelListContext hook was called outside of the ChannelListContext provider. Make sure this hook is called within the ChannelList component. The errored call is located in the ${componentName} component.`);
    return {};
  }
  return contextValue;
};

// node_modules/stream-chat-react/dist/context/ChannelStateContext.js
var import_react3 = __toESM(require_react());
var ChannelStateContext = import_react3.default.createContext(void 0);
var ChannelStateProvider = ({ children, value }) => import_react3.default.createElement(ChannelStateContext.Provider, { value }, children);
var useChannelStateContext = (componentName) => {
  const contextValue = (0, import_react3.useContext)(ChannelStateContext);
  if (!contextValue) {
    console.warn(`The useChannelStateContext hook was called outside of the ChannelStateContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the ${componentName} component.`);
    return {};
  }
  return contextValue;
};
var withChannelStateContext = (Component2) => {
  const WithChannelStateContextComponent = (props) => {
    const channelStateContext = useChannelStateContext();
    return import_react3.default.createElement(Component2, { ...props, ...channelStateContext });
  };
  WithChannelStateContextComponent.displayName = (Component2.displayName || Component2.name || "Component").replace("Base", "");
  return WithChannelStateContextComponent;
};

// node_modules/stream-chat-react/dist/context/ChatContext.js
var import_react4 = __toESM(require_react());

// node_modules/stream-chat-react/dist/context/utils/getDisplayName.js
var getDisplayName = (Component2) => Component2.displayName || Component2.name || "Component";

// node_modules/stream-chat-react/dist/context/ChatContext.js
var ChatContext = import_react4.default.createContext(void 0);
var ChatProvider = ({ children, value }) => import_react4.default.createElement(ChatContext.Provider, { value }, children);
var useChatContext = (componentName) => {
  const contextValue = (0, import_react4.useContext)(ChatContext);
  if (!contextValue) {
    console.warn(`The useChatContext hook was called outside of the ChatContext provider. Make sure this hook is called within a child of the Chat component. The errored call is located in the ${componentName} component.`);
    return {};
  }
  return contextValue;
};
var withChatContext = (Component2) => {
  const WithChatContextComponent = (props) => {
    const chatContext = useChatContext();
    return import_react4.default.createElement(Component2, { ...props, ...chatContext });
  };
  WithChatContextComponent.displayName = `WithChatContext${getDisplayName(Component2)}`;
  return WithChatContextComponent;
};

// node_modules/stream-chat-react/dist/context/ComponentContext.js
var import_react5 = __toESM(require_react());
var ComponentContext = import_react5.default.createContext({});
var ComponentProvider = ({ children, value }) => import_react5.default.createElement(ComponentContext.Provider, { value }, children);
var useComponentContext = (_componentName) => (0, import_react5.useContext)(ComponentContext);
var withComponentContext = (Component2) => {
  const WithComponentContextComponent = (props) => {
    const componentContext = useComponentContext();
    return import_react5.default.createElement(Component2, { ...props, ...componentContext });
  };
  WithComponentContextComponent.displayName = (Component2.displayName || Component2.name || "Component").replace("Base", "");
  return WithComponentContextComponent;
};

// node_modules/stream-chat-react/dist/context/DialogManagerContext.js
var import_react10 = __toESM(require_react());

// node_modules/nanoid/index.browser.js
var nanoid = (size = 21) => crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {
  byte &= 63;
  if (byte < 36) {
    id += byte.toString(36);
  } else if (byte < 62) {
    id += (byte - 26).toString(36).toUpperCase();
  } else if (byte > 62) {
    id += "-";
  } else {
    id += "_";
  }
  return id;
}, "");

// node_modules/stream-chat-react/dist/components/Dialog/DialogManager.js
var DialogManager = class {
  constructor({ id } = {}) {
    this.state = new StateStore({
      dialogsById: {}
    });
    this.id = id ?? nanoid();
  }
  get openDialogCount() {
    return Object.values(this.state.getLatestValue().dialogsById).reduce((count, dialog) => {
      if (dialog.isOpen)
        return count + 1;
      return count;
    }, 0);
  }
  getOrCreate({ id }) {
    let dialog = this.state.getLatestValue().dialogsById[id];
    if (!dialog) {
      dialog = {
        close: () => {
          this.close(id);
        },
        id,
        isOpen: false,
        open: () => {
          this.open({ id });
        },
        removalTimeout: void 0,
        remove: () => {
          this.remove(id);
        },
        toggle: (closeAll = false) => {
          this.toggle({ id }, closeAll);
        }
      };
      this.state.next((current) => ({
        ...current,
        ...{ dialogsById: { ...current.dialogsById, [id]: dialog } }
      }));
    }
    if (dialog.removalTimeout) {
      clearTimeout(dialog.removalTimeout);
      this.state.next((current) => ({
        ...current,
        ...{
          dialogsById: {
            ...current.dialogsById,
            [id]: {
              ...dialog,
              removalTimeout: void 0
            }
          }
        }
      }));
    }
    return dialog;
  }
  open(params, closeRest) {
    const dialog = this.getOrCreate(params);
    if (dialog.isOpen)
      return;
    if (closeRest) {
      this.closeAll();
    }
    this.state.next((current) => ({
      ...current,
      dialogsById: { ...current.dialogsById, [dialog.id]: { ...dialog, isOpen: true } }
    }));
  }
  close(id) {
    const dialog = this.state.getLatestValue().dialogsById[id];
    if (!(dialog == null ? void 0 : dialog.isOpen))
      return;
    this.state.next((current) => ({
      ...current,
      dialogsById: { ...current.dialogsById, [dialog.id]: { ...dialog, isOpen: false } }
    }));
  }
  closeAll() {
    Object.values(this.state.getLatestValue().dialogsById).forEach((dialog) => dialog.close());
  }
  toggle(params, closeAll = false) {
    var _a;
    if ((_a = this.state.getLatestValue().dialogsById[params.id]) == null ? void 0 : _a.isOpen) {
      this.close(params.id);
    } else {
      this.open(params, closeAll);
    }
  }
  remove(id) {
    const state = this.state.getLatestValue();
    const dialog = state.dialogsById[id];
    if (!dialog)
      return;
    if (dialog.removalTimeout) {
      clearTimeout(dialog.removalTimeout);
    }
    this.state.next((current) => {
      const newDialogs = { ...current.dialogsById };
      delete newDialogs[id];
      return {
        ...current,
        dialogsById: newDialogs
      };
    });
  }
  /**
   * Marks the dialog state as unused. If the dialog id is referenced again quickly,
   * the state will not be removed. Otherwise, the state will be removed after
   * a short timeout.
   */
  markForRemoval(id) {
    const dialog = this.state.getLatestValue().dialogsById[id];
    if (!dialog) {
      return;
    }
    this.state.next((current) => ({
      ...current,
      dialogsById: {
        ...current.dialogsById,
        [id]: {
          ...dialog,
          removalTimeout: setTimeout(() => {
            this.remove(id);
          }, 16)
        }
      }
    }));
  }
};

// node_modules/stream-chat-react/dist/components/Dialog/DialogPortal.js
var import_react9 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Dialog/hooks/useDialog.js
var import_react7 = __toESM(require_react());

// node_modules/stream-chat-react/dist/store/hooks/useStateStore.js
var import_react6 = __toESM(require_react());
var import_shim = __toESM(require_shim());
var noop2 = () => {
};
function useStateStore(store, selector7) {
  const wrappedSubscription = (0, import_react6.useCallback)((onStoreChange) => {
    const unsubscribe = store == null ? void 0 : store.subscribeWithSelector(selector7, onStoreChange);
    return unsubscribe ?? noop2;
  }, [store, selector7]);
  const wrappedSnapshot = (0, import_react6.useMemo)(() => {
    let cachedTuple;
    return () => {
      const currentValue = store == null ? void 0 : store.getLatestValue();
      if (!currentValue)
        return void 0;
      if (cachedTuple && cachedTuple[0] === currentValue) {
        return cachedTuple[1];
      }
      const newlySelected = selector7(currentValue);
      if (cachedTuple) {
        let selectededAreEqualToCached = true;
        for (const key in cachedTuple[1]) {
          if (cachedTuple[1][key] === newlySelected[key])
            continue;
          selectededAreEqualToCached = false;
          break;
        }
        if (selectededAreEqualToCached)
          return cachedTuple[1];
      }
      cachedTuple = [currentValue, newlySelected];
      return cachedTuple[1];
    };
  }, [store, selector7]);
  const state = (0, import_shim.useSyncExternalStore)(wrappedSubscription, wrappedSnapshot);
  return state;
}

// node_modules/stream-chat-react/dist/components/Dialog/hooks/useDialog.js
var useDialog = ({ id }) => {
  const { dialogManager } = useDialogManager();
  (0, import_react7.useEffect)(() => () => {
    dialogManager.markForRemoval(id);
  }, [dialogManager, id]);
  return dialogManager.getOrCreate({ id });
};
var useDialogIsOpen = (id) => {
  const { dialogManager } = useDialogManager();
  const dialogIsOpenSelector = (0, import_react7.useCallback)(({ dialogsById }) => {
    var _a;
    return { isOpen: !!((_a = dialogsById[id]) == null ? void 0 : _a.isOpen) };
  }, [id]);
  return useStateStore(dialogManager.state, dialogIsOpenSelector).isOpen;
};
var openedDialogCountSelector = (nextValue) => ({
  openedDialogCount: Object.values(nextValue.dialogsById).reduce((count, dialog) => {
    if (dialog.isOpen)
      return count + 1;
    return count;
  }, 0)
});
var useOpenedDialogCount = () => {
  const { dialogManager } = useDialogManager();
  return useStateStore(dialogManager.state, openedDialogCountSelector).openedDialogCount;
};

// node_modules/stream-chat-react/dist/components/Portal/Portal.js
var import_react8 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());
var Portal = ({ children, getPortalDestination, isOpen }) => {
  const [portalDestination, setPortalDestination] = (0, import_react8.useState)(null);
  (0, import_react8.useLayoutEffect)(() => {
    const destination = getPortalDestination();
    if (!destination || !isOpen)
      return;
    setPortalDestination(destination);
  }, [getPortalDestination, isOpen]);
  if (!portalDestination)
    return null;
  return (0, import_react_dom.createPortal)(children, portalDestination);
};

// node_modules/stream-chat-react/dist/components/Dialog/DialogPortal.js
var DialogPortalDestination = () => {
  const { dialogManager } = useDialogManager();
  const openedDialogCount = useOpenedDialogCount();
  return import_react9.default.createElement("div", { className: "str-chat__dialog-overlay", "data-str-chat__portal-id": dialogManager.id, "data-testid": "str-chat__dialog-overlay", onClick: () => dialogManager.closeAll(), style: {
    "--str-chat__dialog-overlay-height": openedDialogCount > 0 ? "100%" : "0"
  } });
};
var DialogPortalEntry = ({ children, dialogId }) => {
  const { dialogManager } = useDialogManager();
  const dialogIsOpen = useDialogIsOpen(dialogId);
  const getPortalDestination = (0, import_react9.useCallback)(() => document.querySelector(`div[data-str-chat__portal-id="${dialogManager.id}"]`), [dialogManager.id]);
  return import_react9.default.createElement(Portal, { getPortalDestination, isOpen: dialogIsOpen }, children);
};

// node_modules/stream-chat-react/dist/context/DialogManagerContext.js
var DialogManagerProviderContext = import_react10.default.createContext(void 0);
var DialogManagerProvider = ({ children, id }) => {
  const [dialogManager] = (0, import_react10.useState)(() => new DialogManager({ id }));
  return import_react10.default.createElement(
    DialogManagerProviderContext.Provider,
    { value: { dialogManager } },
    children,
    import_react10.default.createElement(DialogPortalDestination, null)
  );
};
var useDialogManager = () => {
  const value = (0, import_react10.useContext)(DialogManagerProviderContext);
  return value;
};

// node_modules/stream-chat-react/dist/context/MessageContext.js
var import_react11 = __toESM(require_react());
var MessageContext = import_react11.default.createContext(void 0);
var MessageProvider = ({ children, value }) => import_react11.default.createElement(MessageContext.Provider, { value }, children);
var useMessageContext = (_componentName) => {
  const contextValue = (0, import_react11.useContext)(MessageContext);
  if (!contextValue) {
    return {};
  }
  return contextValue;
};
var withMessageContext = (Component2) => {
  const WithMessageContextComponent = (props) => {
    const messageContext = useMessageContext();
    return import_react11.default.createElement(Component2, { ...props, ...messageContext });
  };
  WithMessageContextComponent.displayName = (Component2.displayName || Component2.name || "Component").replace("Base", "");
  return WithMessageContextComponent;
};

// node_modules/stream-chat-react/dist/context/MessageBounceContext.js
var import_react12 = __toESM(require_react());
var MessageBounceContext = (0, import_react12.createContext)(void 0);
function useMessageBounceContext(componentName) {
  const contextValue = (0, import_react12.useContext)(MessageBounceContext);
  if (!contextValue) {
    console.warn(`The useMessageBounceContext hook was called outside of the MessageBounceContext provider. The errored call is located in the ${componentName} component.`);
    return {};
  }
  return contextValue;
}
function MessageBounceProvider({ children }) {
  const { handleRetry: doHandleRetry, message, setEditingState } = useMessageContext("MessageBounceProvider");
  if (!isMessageBounced(message)) {
    console.warn(`The MessageBounceProvider was rendered for a message that is not bounced. Have you missed the "isMessageBounced" check?`);
  }
  const { removeMessage } = useChannelActionContext("MessageBounceProvider");
  const handleDelete2 = (0, import_react12.useCallback)(() => {
    removeMessage(message);
  }, [message, removeMessage]);
  const handleEdit = (0, import_react12.useCallback)((e) => {
    setEditingState(e);
  }, [setEditingState]);
  const handleRetry = (0, import_react12.useCallback)(() => {
    doHandleRetry(message);
  }, [doHandleRetry, message]);
  const value = (0, import_react12.useMemo)(() => ({
    handleDelete: handleDelete2,
    handleEdit,
    handleRetry,
    message
  }), [handleDelete2, handleEdit, handleRetry, message]);
  return import_react12.default.createElement(MessageBounceContext.Provider, { value }, children);
}

// node_modules/stream-chat-react/dist/context/MessageInputContext.js
var import_react13 = __toESM(require_react());
var MessageInputContext = (0, import_react13.createContext)(void 0);
var MessageInputContextProvider = ({ children, value }) => import_react13.default.createElement(MessageInputContext.Provider, { value }, children);
var useMessageInputContext = (componentName) => {
  const contextValue = (0, import_react13.useContext)(MessageInputContext);
  if (!contextValue) {
    return {};
  }
  return contextValue;
};

// node_modules/stream-chat-react/dist/context/MessageListContext.js
var import_react14 = __toESM(require_react());
var MessageListContext = (0, import_react14.createContext)(void 0);
var MessageListContextProvider = ({ children, value }) => import_react14.default.createElement(MessageListContext.Provider, { value }, children);
var useMessageListContext = (componentName) => {
  const contextValue = (0, import_react14.useContext)(MessageListContext);
  if (!contextValue) {
    console.warn(`The useMessageListContext hook was called outside of the MessageListContext provider. Make sure this hook is called within the MessageList component. The errored call is located in the ${componentName} component.`);
    return {};
  }
  return contextValue;
};

// node_modules/stream-chat-react/dist/context/PollContext.js
var import_react15 = __toESM(require_react());
var PollContext = import_react15.default.createContext(void 0);
var PollProvider = ({ children, poll }) => poll ? import_react15.default.createElement(PollContext.Provider, { value: { poll } }, children) : null;
var usePollContext = () => {
  const contextValue = (0, import_react15.useContext)(PollContext);
  return contextValue;
};

// node_modules/stream-chat-react/dist/context/TranslationContext.js
var import_react16 = __toESM(require_react());
var import_dayjs2 = __toESM(require_dayjs_min());
var import_calendar = __toESM(require_calendar());
var import_localizedFormat = __toESM(require_localizedFormat());

// node_modules/stream-chat-react/dist/i18n/utils.js
var import_dayjs = __toESM(require_dayjs_min());
var notValidDateWarning = "MessageTimestamp was called without a message, or message has invalid created_at date.";
var noParsingFunctionWarning = "MessageTimestamp was called but there is no datetime parsing function available";
var isNumberOrString = (output2) => typeof output2 === "string" || typeof output2 === "number";
var isDayOrMoment = (output2) => !!(output2 == null ? void 0 : output2.isSame);
var isDate = (output2) => !!(output2 == null ? void 0 : output2.getMonth);
function getDateString({ calendar: calendar3, calendarFormats, format, formatDate, messageCreatedAt, t: t2, tDateTimeParser, timestampTranslationKey }) {
  if (!messageCreatedAt || typeof messageCreatedAt === "string" && !Date.parse(messageCreatedAt)) {
    console.warn(notValidDateWarning);
    return null;
  }
  if (typeof formatDate === "function") {
    return formatDate(new Date(messageCreatedAt));
  }
  if (t2 && timestampTranslationKey) {
    const options2 = {};
    if (typeof calendar3 !== "undefined" && calendar3 !== null)
      options2.calendar = calendar3;
    if (typeof calendarFormats !== "undefined" && calendarFormats !== null)
      options2.calendarFormats = calendarFormats;
    if (typeof format !== "undefined" && format !== null)
      options2.format = format;
    const translatedTimestamp = t2(timestampTranslationKey, {
      ...options2,
      timestamp: new Date(messageCreatedAt)
    });
    const translationKeyFound = timestampTranslationKey !== translatedTimestamp;
    if (translationKeyFound)
      return translatedTimestamp;
  }
  if (!tDateTimeParser) {
    console.warn(noParsingFunctionWarning);
    return null;
  }
  const parsedTime = tDateTimeParser(messageCreatedAt);
  if (isDayOrMoment(parsedTime)) {
    return calendar3 && parsedTime.calendar ? parsedTime.calendar(void 0, calendarFormats || void 0) : parsedTime.format(format || void 0);
  }
  if (isDate(parsedTime)) {
    return parsedTime.toDateString();
  }
  if (isNumberOrString(parsedTime)) {
    return parsedTime;
  }
  return null;
}
var predefinedFormatters = {
  timestampFormatter: (streamI18n) => (value, _23, { calendarFormats, ...options2 }) => {
    let parsedCalendarFormats;
    try {
      if (!options2.calendar) {
        parsedCalendarFormats = {};
      } else if (typeof calendarFormats === "string") {
        parsedCalendarFormats = JSON.parse(calendarFormats);
      } else if (typeof calendarFormats === "object") {
        parsedCalendarFormats = calendarFormats;
      }
    } catch (e) {
      console.error("[TIMESTAMP FORMATTER]", e);
    }
    const result = getDateString({
      ...options2,
      calendarFormats: parsedCalendarFormats,
      messageCreatedAt: value,
      tDateTimeParser: streamI18n.tDateTimeParser
    });
    if (!result || typeof result === "number") {
      return JSON.stringify(value);
    }
    return result;
  }
};
var defaultTranslatorFunction = (key) => key;
var defaultDateTimeParser = (input) => (0, import_dayjs.default)(input);
var isLanguageSupported = (language) => {
  const translations = [
    "de",
    "en",
    "es",
    "fr",
    "hi",
    "it",
    "ja",
    "ko",
    "nl",
    "pt",
    "ru",
    "tr"
  ];
  return translations.some((translation) => language === translation);
};

// node_modules/stream-chat-react/dist/context/TranslationContext.js
import_dayjs2.default.extend(import_calendar.default);
import_dayjs2.default.extend(import_localizedFormat.default);
var TranslationContext = import_react16.default.createContext({
  t: defaultTranslatorFunction,
  tDateTimeParser: defaultDateTimeParser,
  userLanguage: "en"
});
var TranslationProvider = ({ children, value }) => import_react16.default.createElement(TranslationContext.Provider, { value }, children);
var useTranslationContext = (componentName) => {
  const contextValue = (0, import_react16.useContext)(TranslationContext);
  if (!contextValue) {
    console.warn(`The useTranslationContext hook was called outside of the TranslationContext provider. Make sure this hook is called within a child of the Chat component. The errored call is located in the ${componentName} component.`);
    return {};
  }
  return contextValue;
};
var withTranslationContext = (Component2) => {
  const WithTranslationContextComponent = (props) => {
    const translationContext = useTranslationContext();
    return import_react16.default.createElement(Component2, { ...props, ...translationContext });
  };
  WithTranslationContextComponent.displayName = `WithTranslationContext${getDisplayName(Component2)}`;
  return WithTranslationContextComponent;
};

// node_modules/stream-chat-react/dist/context/TypingContext.js
var import_react17 = __toESM(require_react());
var TypingContext = import_react17.default.createContext(void 0);
var TypingProvider = ({ children, value }) => import_react17.default.createElement(TypingContext.Provider, { value }, children);
var useTypingContext = (componentName) => {
  const contextValue = (0, import_react17.useContext)(TypingContext);
  if (!contextValue) {
    console.warn(`The useTypingContext hook was called outside of the TypingContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the ${componentName} component.`);
    return {};
  }
  return contextValue;
};
var withTypingContext = (Component2) => {
  const WithTypingContextComponent = (props) => {
    const typingContext = useTypingContext();
    return import_react17.default.createElement(Component2, { ...props, ...typingContext });
  };
  WithTypingContextComponent.displayName = (Component2.displayName || Component2.name || "Component").replace("Base", "");
  return WithTypingContextComponent;
};

// node_modules/stream-chat-react/dist/context/WithComponents.js
var import_react18 = __toESM(require_react());
function WithComponents({ children, overrides }) {
  const parentOverrides = (0, import_react18.useContext)(ComponentContext);
  const actualOverrides = { ...parentOverrides, ...overrides };
  return import_react18.default.createElement(ComponentContext.Provider, { value: actualOverrides }, children);
}

// node_modules/stream-chat-react/dist/components/Attachment/AttachmentActions.js
var UnMemoizedAttachmentActions = (props) => {
  const { actionHandler, actions, id, text: text3 } = props;
  const { t: t2 } = useTranslationContext("UnMemoizedAttachmentActions");
  const handleActionClick = (event, name, value) => actionHandler == null ? void 0 : actionHandler(name, value, event);
  return import_react19.default.createElement(
    "div",
    { className: "str-chat__message-attachment-actions" },
    import_react19.default.createElement(
      "div",
      { className: "str-chat__message-attachment-actions-form" },
      import_react19.default.createElement("span", null, text3),
      actions.map((action) => import_react19.default.createElement("button", { className: `str-chat__message-attachment-actions-button str-chat__message-attachment-actions-button--${action.style}`, "data-testid": `${action.name}`, "data-value": action.value, key: `${id}-${action.value}`, onClick: (event) => handleActionClick(event, action.name, action.value) }, action.text ? t2(action.text) : null))
    )
  );
};
var AttachmentActions = import_react19.default.memo(UnMemoizedAttachmentActions);

// node_modules/stream-chat-react/dist/components/Attachment/Audio.js
var import_react29 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Attachment/components/DownloadButton.js
var import_react22 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Attachment/icons.js
var import_react20 = __toESM(require_react());
var DownloadIcon = ({ className }) => import_react20.default.createElement(
  "svg",
  { className, "data-testid": "download", fill: "none", height: "24", viewBox: "0 0 24 24", width: "24", xmlns: "http://www.w3.org/2000/svg" },
  import_react20.default.createElement("path", { d: "M19.35 10.04C18.67 6.59 15.64 4 12 4C9.11 4 6.6 5.64 5.35 8.04C2.34 8.36 0 10.91 0 14C0 17.31 2.69 20 6 20H19C21.76 20 24 17.76 24 15C24 12.36 21.95 10.22 19.35 10.04ZM19 18H6C3.79 18 2 16.21 2 14C2 11.95 3.53 10.24 5.56 10.03L6.63 9.92L7.13 8.97C8.08 7.14 9.94 6 12 6C14.62 6 16.88 7.86 17.39 10.43L17.69 11.93L19.22 12.04C20.78 12.14 22 13.45 22 15C22 16.65 20.65 18 19 18ZM13.45 10H10.55V13H8L12 17L16 13H13.45V10Z", fill: "black" })
);
var PlayTriangleIcon = () => import_react20.default.createElement(
  "svg",
  { fill: "none", viewBox: "0 0 12 14", xmlns: "http://www.w3.org/2000/svg" },
  import_react20.default.createElement("path", { d: "M0.5 0V14L11.5 7L0.5 0Z", fill: "#080707" })
);
var PauseIcon = () => import_react20.default.createElement(
  "svg",
  { fill: "none", viewBox: "0 0 12 14", xmlns: "http://www.w3.org/2000/svg" },
  import_react20.default.createElement("path", { d: "M0 14H4V0H0V14ZM8 0V14H12V0H8Z", fill: "#080707" })
);

// node_modules/stream-chat-react/dist/components/SafeAnchor/SafeAnchor.js
var import_react21 = __toESM(require_react());
var import_sanitize_url = __toESM(require_dist());
var UnMemoizedSafeAnchor = (props) => {
  const { children, className, download, href, rel, target } = props;
  const { t: t2 } = useTranslationContext("SafeAnchor");
  if (!href)
    return null;
  const sanitized = (0, import_sanitize_url.sanitizeUrl)(href);
  return import_react21.default.createElement("a", { "aria-label": t2("aria/Attachment"), className, download, href: sanitized, rel, target }, children);
};
var SafeAnchor = import_react21.default.memo(UnMemoizedSafeAnchor);

// node_modules/stream-chat-react/dist/components/Attachment/components/DownloadButton.js
var DownloadButton = ({ assetUrl }) => import_react22.default.createElement(
  SafeAnchor,
  { className: "str-chat__message-attachment-file--item-download", download: true, href: assetUrl, target: "_blank" },
  import_react22.default.createElement(DownloadIcon, { className: "str-chat__message-attachment-download-icon" })
);

// node_modules/stream-chat-react/dist/components/Attachment/components/FileSizeIndicator.js
var import_react23 = __toESM(require_react());

// node_modules/stream-chat-react/dist/constants/limits.js
var DEFAULT_INITIAL_CHANNEL_PAGE_SIZE = 25;
var DEFAULT_NEXT_CHANNEL_PAGE_SIZE = 100;
var DEFAULT_JUMP_TO_PAGE_SIZE = 100;
var DEFAULT_THREAD_PAGE_SIZE = 50;
var DEFAULT_LOAD_PAGE_SCROLL_THRESHOLD = 250;
var DEFAULT_UPLOAD_SIZE_LIMIT_BYTES = 100 * 1024 * 1024;
var DEFAULT_HIGHLIGHT_DURATION = 500;

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/utils.js
var accentsMap = {
  a: "á|à|ã|â|À|Á|Ã|Â",
  c: "ç|Ç",
  e: "é|è|ê|É|È|Ê",
  i: "í|ì|î|Í|Ì|Î",
  n: "ñ|Ñ",
  o: "ó|ò|ô|ő|õ|Ó|Ò|Ô|Õ",
  u: "ú|ù|û|ü|Ú|Ù|Û|Ü"
};
var removeDiacritics = (text3) => {
  if (!text3)
    return "";
  return Object.keys(accentsMap).reduce((acc, current) => acc.replace(new RegExp(accentsMap[current], "g"), current), text3);
};
var calculateLevenshtein = (query, name) => {
  if (query.length === 0)
    return name.length;
  if (name.length === 0)
    return query.length;
  const matrix = [];
  let i;
  for (i = 0; i <= name.length; i++) {
    matrix[i] = [i];
  }
  let j;
  for (j = 0; j <= query.length; j++) {
    matrix[0][j] = j;
  }
  for (i = 1; i <= name.length; i++) {
    for (j = 1; j <= query.length; j++) {
      if (name.charAt(i - 1) === query.charAt(j - 1)) {
        matrix[i][j] = matrix[i - 1][j - 1];
      } else {
        matrix[i][j] = Math.min(
          matrix[i - 1][j - 1] + 1,
          // substitution
          Math.min(
            matrix[i][j - 1] + 1,
            // insertion
            matrix[i - 1][j] + 1
          )
        );
      }
    }
  }
  return matrix[name.length][query.length];
};
var searchLocalUsers = (params) => {
  const { ownUserId, query, text: text3, useMentionsTransliteration, users } = params;
  const matchingUsers = users.filter((user) => {
    if (user.id === ownUserId)
      return false;
    if (!query)
      return true;
    let updatedId = removeDiacritics(user.id).toLowerCase();
    let updatedName = removeDiacritics(user.name).toLowerCase();
    let updatedQuery = removeDiacritics(query).toLowerCase();
    if (useMentionsTransliteration) {
      (async () => {
        const { default: transliterate } = await import("./index.modern-SRK3ED6Z.js");
        updatedName = transliterate(user.name || "").toLowerCase();
        updatedQuery = transliterate(query).toLowerCase();
        updatedId = transliterate(user.id).toLowerCase();
      })();
    }
    const maxDistance = 3;
    const lastDigits = text3.slice(-(maxDistance + 1)).includes("@");
    if (updatedName) {
      const levenshtein2 = calculateLevenshtein(updatedQuery, updatedName);
      if (updatedName.includes(updatedQuery) || levenshtein2 <= maxDistance && lastDigits) {
        return true;
      }
    }
    const levenshtein = calculateLevenshtein(updatedQuery, updatedId);
    return updatedId.includes(updatedQuery) || levenshtein <= maxDistance && lastDigits;
  });
  return matchingUsers;
};
var checkUploadPermissions = async (params) => {
  var _a, _b;
  const { addNotification, file, getAppSettings, t: t2, uploadType } = params;
  let appSettings = null;
  appSettings = await getAppSettings();
  const { allowed_file_extensions, allowed_mime_types, blocked_file_extensions, blocked_mime_types, size_limit } = (uploadType === "image" ? (_a = appSettings == null ? void 0 : appSettings.app) == null ? void 0 : _a.image_upload_config : (_b = appSettings == null ? void 0 : appSettings.app) == null ? void 0 : _b.file_upload_config) || {};
  const sendNotAllowedErrorNotification = () => addNotification(t2(`Upload type: "{{ type }}" is not allowed`, {
    type: file.type || "unknown type"
  }), "error");
  if (allowed_file_extensions == null ? void 0 : allowed_file_extensions.length) {
    const allowed = allowed_file_extensions.some((ext) => file.name.toLowerCase().endsWith(ext.toLowerCase()));
    if (!allowed) {
      sendNotAllowedErrorNotification();
      return false;
    }
  }
  if (blocked_file_extensions == null ? void 0 : blocked_file_extensions.length) {
    const blocked = blocked_file_extensions.some((ext) => file.name.toLowerCase().endsWith(ext.toLowerCase()));
    if (blocked) {
      sendNotAllowedErrorNotification();
      return false;
    }
  }
  if (allowed_mime_types == null ? void 0 : allowed_mime_types.length) {
    const allowed = allowed_mime_types.some((type) => {
      var _a2;
      return type.toLowerCase() === ((_a2 = file.type) == null ? void 0 : _a2.toLowerCase());
    });
    if (!allowed) {
      sendNotAllowedErrorNotification();
      return false;
    }
  }
  if (blocked_mime_types == null ? void 0 : blocked_mime_types.length) {
    const blocked = blocked_mime_types.some((type) => {
      var _a2;
      return type.toLowerCase() === ((_a2 = file.type) == null ? void 0 : _a2.toLowerCase());
    });
    if (blocked) {
      sendNotAllowedErrorNotification();
      return false;
    }
  }
  const sizeLimit = size_limit || DEFAULT_UPLOAD_SIZE_LIMIT_BYTES;
  if (file.size && file.size > sizeLimit) {
    addNotification(t2("File is too large: {{ size }}, maximum upload size is {{ limit }}", {
      limit: prettifyFileSize(sizeLimit),
      size: prettifyFileSize(file.size)
    }), "error");
    return false;
  }
  return true;
};
function prettifyFileSize(bytes, precision = 3) {
  const units = ["B", "kB", "MB", "GB"];
  const exponent = Math.min(Math.floor(Math.log(bytes) / Math.log(1024)), units.length - 1);
  const mantissa = bytes / 1024 ** exponent;
  const formattedMantissa = precision === 0 ? Math.round(mantissa).toString() : mantissa.toPrecision(precision);
  return `${formattedMantissa} ${units[exponent]}`;
}

// node_modules/stream-chat-react/dist/components/Attachment/components/FileSizeIndicator.js
var FileSizeIndicator = ({ fileSize, maximumFractionDigits }) => {
  if (!(fileSize && Number.isFinite(Number(fileSize))))
    return null;
  return import_react23.default.createElement("span", { className: "str-chat__message-attachment-file--item-size", "data-testid": "file-size-indicator" }, prettifyFileSize(fileSize, maximumFractionDigits));
};

// node_modules/stream-chat-react/dist/components/Attachment/components/ProgressBar.js
var import_react24 = __toESM(require_react());
var ProgressBar = ({ className, onClick, progress }) => import_react24.default.createElement(
  "div",
  { className: clsx_default("str-chat__message-attachment-audio-widget--progress-track", className), "data-progress": progress, "data-testid": "audio-progress", onClick, role: "progressbar", style: {
    "--str-chat__message-attachment-audio-widget-progress": progress + "%"
  } },
  import_react24.default.createElement("div", { className: "str-chat__message-attachment-audio-widget--progress-slider", style: { left: `${progress}px` } })
);

// node_modules/stream-chat-react/dist/components/Attachment/components/PlaybackRateButton.js
var import_react25 = __toESM(require_react());
var PlaybackRateButton = ({ children, onClick }) => import_react25.default.createElement("button", { className: "str-chat__message_attachment__playback-rate-button", "data-testid": "playback-rate-button", onClick }, children);

// node_modules/stream-chat-react/dist/components/Attachment/components/PlayButton.js
var import_react26 = __toESM(require_react());
var PlayButton = ({ isPlaying, onClick }) => import_react26.default.createElement("button", { className: "str-chat__message-attachment-audio-widget--play-button", "data-testid": isPlaying ? "pause-audio" : "play-audio", onClick }, isPlaying ? import_react26.default.createElement(PauseIcon, null) : import_react26.default.createElement(PlayTriangleIcon, null));

// node_modules/stream-chat-react/dist/components/Attachment/components/WaveProgressBar.js
var import_lodash = __toESM(require_lodash());
var import_react27 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Attachment/audioSampling.js
var resampleWaveformData = (waveformData, amplitudesCount) => waveformData.length === amplitudesCount ? waveformData : waveformData.length > amplitudesCount ? downSample(waveformData, amplitudesCount) : upSample(waveformData, amplitudesCount);
function downSample(data, targetOutputSize) {
  if (data.length <= targetOutputSize || targetOutputSize === 0) {
    return data;
  }
  if (targetOutputSize === 1)
    return [mean(data)];
  const result = [];
  const bucketSize = (data.length - 2) / (targetOutputSize - 2);
  let lastSelectedPointIndex = 0;
  result.push(data[lastSelectedPointIndex]);
  let maxAreaPoint, maxArea, triangleArea;
  for (let bucketIndex = 1; bucketIndex < targetOutputSize - 1; bucketIndex++) {
    const previousBucketRefPoint = data[lastSelectedPointIndex];
    const nextBucketMean = getNextBucketMean(data, bucketIndex, bucketSize);
    const currentBucketStartIndex = Math.floor((bucketIndex - 1) * bucketSize) + 1;
    const nextBucketStartIndex = Math.floor(bucketIndex * bucketSize) + 1;
    const countUnitsBetweenAtoC = 1 + nextBucketStartIndex - currentBucketStartIndex;
    maxArea = triangleArea = -1;
    for (let currentPointIndex = currentBucketStartIndex; currentPointIndex < nextBucketStartIndex; currentPointIndex++) {
      const countUnitsBetweenAtoB = Math.abs(currentPointIndex - currentBucketStartIndex) + 1;
      const countUnitsBetweenBtoC = countUnitsBetweenAtoC - countUnitsBetweenAtoB;
      const currentPointValue = data[currentPointIndex];
      triangleArea = triangleAreaHeron(triangleBase(Math.abs(previousBucketRefPoint - currentPointValue), countUnitsBetweenAtoB), triangleBase(Math.abs(currentPointValue - nextBucketMean), countUnitsBetweenBtoC), triangleBase(Math.abs(previousBucketRefPoint - nextBucketMean), countUnitsBetweenAtoC));
      if (triangleArea > maxArea) {
        maxArea = triangleArea;
        maxAreaPoint = data[currentPointIndex];
        lastSelectedPointIndex = currentPointIndex;
      }
    }
    if (typeof maxAreaPoint !== "undefined")
      result.push(maxAreaPoint);
  }
  result.push(data[data.length - 1]);
  return result;
}
var triangleAreaHeron = (a, b, c) => {
  const s = (a + b + c) / 2;
  return Math.sqrt(s * (s - a) * (s - b) * (s - c));
};
var triangleBase = (a, b) => Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));
var mean = (values) => values.reduce((acc, value) => acc + value, 0) / values.length;
var getNextBucketMean = (data, currentBucketIndex, bucketSize) => {
  const nextBucketStartIndex = Math.floor(currentBucketIndex * bucketSize) + 1;
  let nextNextBucketStartIndex = Math.floor((currentBucketIndex + 1) * bucketSize) + 1;
  nextNextBucketStartIndex = nextNextBucketStartIndex < data.length ? nextNextBucketStartIndex : data.length;
  return mean(data.slice(nextBucketStartIndex, nextNextBucketStartIndex));
};
var upSample = (values, targetSize) => {
  if (!values.length) {
    console.warn("Cannot extend empty array of amplitudes.");
    return values;
  }
  if (values.length > targetSize) {
    console.warn("Requested to extend the waveformData that is longer than the target list size");
    return values;
  }
  if (targetSize === values.length)
    return values;
  let [bucketSize, remainder] = divMod(targetSize, values.length);
  const result = [];
  for (let i = 0; i < values.length; i++) {
    const extra = remainder && remainder-- ? 1 : 0;
    result.push(...Array(bucketSize + extra).fill(values[i]));
  }
  return result;
};

// node_modules/stream-chat-react/dist/components/Attachment/components/WaveProgressBar.js
var WaveProgressBar = ({ amplitudesCount = 40, progress = 0, relativeAmplitudeBarWidth = 2, relativeAmplitudeGap = 1, seek, waveformData }) => {
  const [progressIndicator, setProgressIndicator] = (0, import_react27.useState)(null);
  const isDragging = (0, import_react27.useRef)(false);
  const [root2, setRoot] = (0, import_react27.useState)(null);
  const [trackAxisX, setTrackAxisX] = (0, import_react27.useState)();
  const lastRootWidth = (0, import_react27.useRef)(void 0);
  const handleDragStart = (e) => {
    e.preventDefault();
    if (!progressIndicator)
      return;
    isDragging.current = true;
    progressIndicator.style.cursor = "grabbing";
  };
  const handleDrag = (e) => {
    if (!isDragging.current)
      return;
    seek({ ...e });
  };
  const handleDragStop = (0, import_react27.useCallback)(() => {
    if (!progressIndicator)
      return;
    isDragging.current = false;
    progressIndicator.style.removeProperty("cursor");
  }, [progressIndicator]);
  const getTrackAxisX = (0, import_react27.useMemo)(() => (0, import_lodash.default)((rootWidth) => {
    if (rootWidth === lastRootWidth.current)
      return;
    lastRootWidth.current = rootWidth;
    const possibleAmpCount = Math.floor(rootWidth / (relativeAmplitudeGap + relativeAmplitudeBarWidth));
    const tooManyAmplitudesToRender = possibleAmpCount < amplitudesCount;
    const barCount = tooManyAmplitudesToRender ? possibleAmpCount : amplitudesCount;
    const amplitudeBarWidthToGapRatio = relativeAmplitudeBarWidth / (relativeAmplitudeBarWidth + relativeAmplitudeGap);
    const barWidth = barCount && rootWidth / barCount * amplitudeBarWidthToGapRatio;
    setTrackAxisX({
      barCount,
      barWidth,
      gap: barWidth * (relativeAmplitudeGap / relativeAmplitudeBarWidth)
    });
  }, 1), [relativeAmplitudeBarWidth, relativeAmplitudeGap, amplitudesCount]);
  const resampledWaveformData = (0, import_react27.useMemo)(() => trackAxisX ? resampleWaveformData(waveformData, trackAxisX.barCount) : [], [trackAxisX, waveformData]);
  (0, import_react27.useEffect)(() => {
    document.addEventListener("pointerup", handleDragStop);
    return () => {
      document.removeEventListener("pointerup", handleDragStop);
    };
  }, [handleDragStop]);
  (0, import_react27.useEffect)(() => {
    if (!root2 || typeof ResizeObserver === "undefined")
      return;
    const observer = new ResizeObserver(([entry]) => {
      getTrackAxisX(entry.contentRect.width);
    });
    observer.observe(root2);
    return () => {
      observer.disconnect();
    };
  }, [getTrackAxisX, root2]);
  (0, import_react27.useLayoutEffect)(() => {
    if (!root2)
      return;
    const { width: rootWidth } = root2.getBoundingClientRect();
    getTrackAxisX(rootWidth);
  }, [getTrackAxisX, root2]);
  if (!waveformData.length || (trackAxisX == null ? void 0 : trackAxisX.barCount) === 0)
    return null;
  return import_react27.default.createElement(
    "div",
    { className: "str-chat__wave-progress-bar__track", "data-testid": "wave-progress-bar-track", onClick: seek, onPointerDown: handleDragStart, onPointerMove: handleDrag, onPointerUp: handleDragStop, ref: setRoot, role: "progressbar", style: {
      "--str-chat__voice-recording-amplitude-bar-gap-width": (trackAxisX == null ? void 0 : trackAxisX.gap) + "px"
    } },
    resampledWaveformData.map((amplitude, i) => import_react27.default.createElement("div", { className: clsx_default("str-chat__wave-progress-bar__amplitude-bar", {
      ["str-chat__wave-progress-bar__amplitude-bar--active"]: progress > i / resampledWaveformData.length * 100
    }), "data-testid": "amplitude-bar", key: `amplitude-${i}`, style: {
      "--str-chat__voice-recording-amplitude-bar-width": (trackAxisX == null ? void 0 : trackAxisX.barWidth) + "px",
      "--str-chat__wave-progress-bar__amplitude-bar-height": amplitude ? amplitude * 100 + "%" : "0%"
    } })),
    import_react27.default.createElement("div", { className: "str-chat__wave-progress-bar__progress-indicator", "data-testid": "wave-progress-bar-progress-indicator", ref: setProgressIndicator, style: { left: `${progress < 0 ? 0 : progress > 100 ? 100 : progress}%` } })
  );
};

// node_modules/stream-chat-react/dist/components/Attachment/hooks/useAudioController.js
var import_lodash2 = __toESM(require_lodash());
var import_react28 = __toESM(require_react());
var isSeekable = (audioElement) => !(audioElement.duration === Infinity || isNaN(audioElement.duration));
var elementIsPlaying = (audioElement) => audioElement && !(audioElement.paused || audioElement.ended);
var logError = (e) => console.error("[AUDIO PLAYER]", e);
var DEFAULT_PLAYBACK_RATES = [1, 1.5, 2];
var useAudioController = ({ durationSeconds, mimeType, playbackRates = DEFAULT_PLAYBACK_RATES } = {}) => {
  const { addNotification } = useChannelActionContext("useAudioController");
  const { t: t2 } = useTranslationContext("useAudioController");
  const [isPlaying, setIsPlaying] = (0, import_react28.useState)(false);
  const [playbackError, setPlaybackError] = (0, import_react28.useState)();
  const [canPlayRecord, setCanPlayRecord] = (0, import_react28.useState)(true);
  const [secondsElapsed, setSecondsElapsed] = (0, import_react28.useState)(0);
  const [playbackRateIndex, setPlaybackRateIndex] = (0, import_react28.useState)(0);
  const playTimeout = (0, import_react28.useRef)(void 0);
  const audioRef = (0, import_react28.useRef)(null);
  const registerError = (0, import_react28.useCallback)((e) => {
    logError(e);
    setPlaybackError(e);
    addNotification(e.message, "error");
  }, [addNotification]);
  const togglePlay = (0, import_react28.useCallback)(async () => {
    if (!audioRef.current)
      return;
    clearTimeout(playTimeout.current);
    playTimeout.current = void 0;
    if (mimeType && !audioRef.current.canPlayType(mimeType)) {
      registerError(new Error(t2("Recording format is not supported and cannot be reproduced")));
      setCanPlayRecord(false);
      return;
    }
    if (elementIsPlaying(audioRef.current)) {
      audioRef.current.pause();
      setIsPlaying(false);
    } else {
      playTimeout.current = setTimeout(() => {
        if (!audioRef.current)
          return;
        try {
          audioRef.current.pause();
          setIsPlaying(false);
        } catch (e) {
          registerError(new Error(t2("Failed to play the recording")));
        }
      }, 2e3);
      try {
        await audioRef.current.play();
        setIsPlaying(true);
      } catch (e) {
        registerError(e);
        setIsPlaying(false);
      } finally {
        clearTimeout(playTimeout.current);
        playTimeout.current = void 0;
      }
    }
  }, [mimeType, registerError, t2]);
  const increasePlaybackRate = () => {
    setPlaybackRateIndex((prev) => {
      if (!audioRef.current)
        return prev;
      const nextIndex = prev === playbackRates.length - 1 ? 0 : prev + 1;
      audioRef.current.playbackRate = playbackRates[nextIndex];
      return nextIndex;
    });
  };
  const seek = (0, import_react28.useMemo)(() => (0, import_lodash2.default)(({ clientX, currentTarget }) => {
    if (!(currentTarget && audioRef.current))
      return;
    if (!isSeekable(audioRef.current)) {
      registerError(new Error(t2("Cannot seek in the recording")));
      return;
    }
    const { width, x } = currentTarget.getBoundingClientRect();
    const ratio = (clientX - x) / width;
    if (ratio > 1 || ratio < 0)
      return;
    const currentTime = ratio * audioRef.current.duration;
    setSecondsElapsed(currentTime);
    audioRef.current.currentTime = currentTime;
  }, 16), [registerError, t2]);
  (0, import_react28.useEffect)(() => {
    if (!audioRef.current)
      return;
    const audioElement = audioRef.current;
    const handleEnded = () => {
      setSecondsElapsed((audioElement == null ? void 0 : audioElement.duration) ?? durationSeconds ?? 0);
      setIsPlaying(false);
    };
    audioElement.addEventListener("ended", handleEnded);
    const handleError = () => {
      addNotification(t2("Error reproducing the recording"), "error");
      setIsPlaying(false);
    };
    audioElement.addEventListener("error", handleError);
    const handleTimeupdate = () => {
      setSecondsElapsed(audioElement == null ? void 0 : audioElement.currentTime);
    };
    audioElement.addEventListener("timeupdate", handleTimeupdate);
    return () => {
      audioElement.pause();
      audioElement.removeEventListener("ended", handleEnded);
      audioElement.removeEventListener("error", handleError);
      audioElement.removeEventListener("timeupdate", handleTimeupdate);
    };
  }, [addNotification, durationSeconds, t2]);
  return {
    audioRef,
    canPlayRecord,
    increasePlaybackRate,
    isPlaying,
    playbackError,
    playbackRate: playbackRates[playbackRateIndex],
    progress: audioRef.current && secondsElapsed ? secondsElapsed / audioRef.current.duration * 100 : 0,
    secondsElapsed,
    seek,
    togglePlay
  };
};

// node_modules/stream-chat-react/dist/components/Attachment/Audio.js
var UnMemoizedAudio = (props) => {
  const { og: { asset_url, file_size, mime_type, title } } = props;
  const { audioRef, isPlaying, progress, seek, togglePlay } = useAudioController({
    mimeType: mime_type
  });
  if (!asset_url)
    return null;
  const dataTestId = "audio-widget";
  const rootClassName2 = "str-chat__message-attachment-audio-widget";
  return import_react29.default.createElement(
    "div",
    { className: rootClassName2, "data-testid": dataTestId },
    import_react29.default.createElement(
      "audio",
      { ref: audioRef },
      import_react29.default.createElement("source", { "data-testid": "audio-source", src: asset_url, type: "audio/mp3" })
    ),
    import_react29.default.createElement(
      "div",
      { className: "str-chat__message-attachment-audio-widget--play-controls" },
      import_react29.default.createElement(PlayButton, { isPlaying, onClick: togglePlay })
    ),
    import_react29.default.createElement(
      "div",
      { className: "str-chat__message-attachment-audio-widget--text" },
      import_react29.default.createElement(
        "div",
        { className: "str-chat__message-attachment-audio-widget--text-first-row" },
        import_react29.default.createElement("div", { className: "str-chat__message-attachment-audio-widget--title" }, title),
        import_react29.default.createElement(DownloadButton, { assetUrl: asset_url })
      ),
      import_react29.default.createElement(
        "div",
        { className: "str-chat__message-attachment-audio-widget--text-second-row" },
        import_react29.default.createElement(FileSizeIndicator, { fileSize: file_size }),
        import_react29.default.createElement(ProgressBar, { onClick: seek, progress })
      )
    )
  );
};
var Audio = import_react29.default.memo(UnMemoizedAudio);

// node_modules/stream-chat-react/dist/components/Attachment/VoiceRecording.js
var import_react37 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/FileIcon/FileIcon.js
var import_react31 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/FileIcon/FileIconSet.js
var import_react30 = __toESM(require_react());
var DEFAULT_SIZE = 40;
var FilePdfIcon = ({ className = "", size = DEFAULT_SIZE, ...props }) => import_react30.default.createElement(
  "svg",
  { className: clsx_default("rfu-file-pdf", className), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg", ...props },
  import_react30.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z", fill: "#F5F5F5" }),
  import_react30.default.createElement("path", { d: "M0 28H34V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V28Z", fill: "#E71A01" }),
  import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#DBDBDB" }),
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M16.39 8.90641C16.215 8.27341 15.787 7.95841 15.426 8.00441C14.99 8.06141 14.526 8.32041 14.34 8.72941C13.854 9.82141 14.768 12.8934 15.028 13.7674L15.073 13.9194C14.015 17.1134 10.394 23.4264 8.62002 23.8534C8.58302 23.4364 8.80602 22.2294 11.146 20.7244C11.266 20.5944 11.406 20.4374 11.471 20.3344C9.49302 21.3004 6.93108 22.8514 8.47102 24.0114C8.55602 24.0774 8.68502 24.1314 8.83402 24.1874C10.014 24.6244 11.666 23.1954 13.327 19.9544C15.157 19.3504 16.633 18.8964 18.722 18.5804C21.005 20.1304 22.538 20.4464 23.578 20.0474C23.866 19.9354 24.32 19.5734 24.45 19.1004C24.515 18.8774 24.608 18.5154 24.432 18.2274C23.842 17.2664 21.452 17.5954 20.032 17.7904C19.779 17.8254 19.557 17.8564 19.381 17.8744C17.552 16.7704 16.289 14.8014 15.778 13.3804C15.857 13.0784 15.936 12.7894 16.012 12.5124C16.397 11.1124 16.701 10.0064 16.392 8.90641H16.39ZM24.45 19.1004C23.605 20.1404 21.628 19.4164 20.05 18.4224C21.507 18.2644 23.01 18.1724 23.661 18.3764C24.488 18.6364 24.459 19.0444 24.451 19.1004H24.45ZM15.601 12.7404C15.296 11.6544 14.868 9.24041 15.555 8.46041C16.701 9.11641 16.266 10.5384 15.825 11.9834C15.748 12.2364 15.671 12.4894 15.601 12.7404ZM13.439 19.5834C15.156 18.9054 16.354 18.4494 18.118 18.1254C16.818 16.9554 16.028 15.6834 15.378 14.3834C14.915 16.0554 13.948 18.5894 13.438 19.5834H13.439Z", fill: "#E71A01", fillRule: "evenodd" }),
  import_react30.default.createElement("path", { d: "M13.1719 33.0127V37.4219H12.1875V32.3018H13.1001L13.1719 33.0127ZM15.5132 34.1099V34.1816C15.5132 34.4505 15.4813 34.7 15.4175 34.9302C15.356 35.1603 15.2648 35.3608 15.144 35.5317C15.0233 35.7004 14.8729 35.8325 14.6929 35.9282C14.5151 36.0216 14.3101 36.0684 14.0776 36.0684C13.8521 36.0684 13.6561 36.0228 13.4897 35.9316C13.3234 35.8405 13.1833 35.7129 13.0693 35.5488C12.9577 35.3825 12.8677 35.1899 12.7993 34.9712C12.731 34.7524 12.6785 34.5177 12.6421 34.2671V34.0791C12.6785 33.8102 12.731 33.5641 12.7993 33.3408C12.8677 33.1152 12.9577 32.9204 13.0693 32.7563C13.1833 32.59 13.3223 32.4613 13.4863 32.3701C13.6527 32.279 13.8475 32.2334 14.0708 32.2334C14.3055 32.2334 14.5117 32.2778 14.6895 32.3667C14.8695 32.4556 15.0199 32.5832 15.1406 32.7495C15.2637 32.9159 15.356 33.1141 15.4175 33.3442C15.4813 33.5744 15.5132 33.8296 15.5132 34.1099ZM14.5254 34.1816V34.1099C14.5254 33.9526 14.5117 33.8079 14.4844 33.6758C14.4593 33.5413 14.4183 33.424 14.3613 33.3237C14.3066 33.2235 14.2337 33.146 14.1426 33.0913C14.0537 33.0343 13.9455 33.0059 13.8179 33.0059C13.6834 33.0059 13.5684 33.0275 13.4727 33.0708C13.3792 33.1141 13.3029 33.1768 13.2437 33.2588C13.1844 33.3408 13.14 33.4388 13.1104 33.5527C13.0807 33.6667 13.0625 33.7954 13.0557 33.939V34.4141C13.0671 34.5827 13.099 34.7342 13.1514 34.8687C13.2038 35.0008 13.2847 35.1056 13.394 35.1831C13.5034 35.2606 13.647 35.2993 13.8247 35.2993C13.9546 35.2993 14.064 35.2708 14.1528 35.2139C14.2417 35.1546 14.3135 35.0737 14.3682 34.9712C14.4251 34.8687 14.465 34.7502 14.4878 34.6157C14.5129 34.4813 14.5254 34.3366 14.5254 34.1816ZM18.3091 35.1934V30.75H19.3003V36H18.4082L18.3091 35.1934ZM15.9712 34.1953V34.1235C15.9712 33.841 16.0031 33.5846 16.0669 33.3545C16.1307 33.1221 16.2241 32.9227 16.3472 32.7563C16.4702 32.59 16.6217 32.4613 16.8018 32.3701C16.9818 32.279 17.1868 32.2334 17.417 32.2334C17.6335 32.2334 17.8226 32.279 17.9844 32.3701C18.1484 32.4613 18.2874 32.5911 18.4014 32.7598C18.5176 32.9261 18.611 33.1232 18.6816 33.3511C18.7523 33.5767 18.8035 33.8239 18.8354 34.0928V34.25C18.8035 34.5075 18.7523 34.7467 18.6816 34.9678C18.611 35.1888 18.5176 35.3825 18.4014 35.5488C18.2874 35.7129 18.1484 35.8405 17.9844 35.9316C17.8203 36.0228 17.6289 36.0684 17.4102 36.0684C17.18 36.0684 16.9749 36.0216 16.7949 35.9282C16.6172 35.8348 16.4668 35.7038 16.3438 35.5352C16.223 35.3665 16.1307 35.1683 16.0669 34.9404C16.0031 34.7126 15.9712 34.4642 15.9712 34.1953ZM16.9556 34.1235V34.1953C16.9556 34.348 16.967 34.4904 16.9897 34.6226C17.0148 34.7547 17.0547 34.8721 17.1094 34.9746C17.1663 35.0749 17.2393 35.1535 17.3281 35.2104C17.4193 35.2651 17.5298 35.2925 17.6597 35.2925C17.8283 35.2925 17.9673 35.2549 18.0767 35.1797C18.186 35.1022 18.2692 34.9963 18.3262 34.8618C18.3854 34.7274 18.4196 34.5724 18.4287 34.397V33.9492C18.4219 33.8057 18.4014 33.6769 18.3672 33.563C18.3353 33.4468 18.2874 33.3477 18.2236 33.2656C18.1621 33.1836 18.0846 33.1198 17.9912 33.0742C17.9001 33.0286 17.7918 33.0059 17.6665 33.0059C17.5389 33.0059 17.4295 33.0355 17.3384 33.0947C17.2472 33.1517 17.1732 33.2303 17.1162 33.3306C17.0615 33.4308 17.0205 33.5493 16.9932 33.686C16.9681 33.8205 16.9556 33.9663 16.9556 34.1235ZM21.3237 36H20.3325V31.9736C20.3325 31.6934 20.3872 31.4575 20.4966 31.2661C20.6082 31.0724 20.7643 30.9266 20.9648 30.8286C21.1676 30.7284 21.408 30.6782 21.686 30.6782C21.7772 30.6782 21.8649 30.6851 21.9492 30.6987C22.0335 30.7101 22.1156 30.7249 22.1953 30.7432L22.1851 31.4849C22.1418 31.4735 22.0962 31.4655 22.0483 31.4609C22.0005 31.4564 21.9447 31.4541 21.8809 31.4541C21.7624 31.4541 21.661 31.4746 21.5767 31.5156C21.4946 31.5544 21.432 31.6125 21.3887 31.6899C21.3454 31.7674 21.3237 31.862 21.3237 31.9736V36ZM22.062 32.3018V32.999H19.7822V32.3018H22.062Z", fill: "white" })
);
var FileWordIcon = ({ className = "", size = DEFAULT_SIZE, ...props }) => import_react30.default.createElement(
  "svg",
  { className: clsx_default("rfu-file-word", className), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg", ...props },
  import_react30.default.createElement("path", { d: "M0 28H34V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V28Z", fill: "#4285F4" }),
  import_react30.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V28H0V3Z", fill: "#F5F5F5" }),
  import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#DBDBDB" }),
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M8 13H23V15H8V13Z", fill: "#4285F4", fillRule: "evenodd" }),
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M8 17H18V19H8V17Z", fill: "#4285F4", fillRule: "evenodd" }),
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M8 21H23V23H8V21Z", fill: "#4285F4", fillRule: "evenodd" })
);
var FileWordIconAlt = ({ className = "", size = DEFAULT_SIZE, ...props }) => import_react30.default.createElement(
  "svg",
  { className: clsx_default("rfu-file-word-alt", className), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg", ...props },
  import_react30.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z", fill: "url(#paint0_linear_11084_64)" }),
  import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#3670D3" }),
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M8 13H23V15H8V13Z", fill: "#C1D8FF", fillRule: "evenodd" }),
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M8 17H18V19H8V17Z", fill: "#C1D8FF", fillRule: "evenodd" }),
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M8 21H23V23H8V21Z", fill: "#C1D8FF", fillRule: "evenodd" }),
  import_react30.default.createElement(
    "defs",
    null,
    import_react30.default.createElement(
      "linearGradient",
      { gradientUnits: "userSpaceOnUse", id: "paint0_linear_11084_64", x1: "0", x2: "0", y1: "0", y2: "40" },
      import_react30.default.createElement("stop", { stopColor: "#79A4F2" }),
      import_react30.default.createElement("stop", { offset: "1", stopColor: "#3375E2" })
    )
  )
);
var FilePowerPointIcon = ({ className = "", size = DEFAULT_SIZE, ...props }) => import_react30.default.createElement(
  "svg",
  { className: clsx_default("rfu-file-powerpoint", className), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg", ...props },
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M17.7168 33.172C18.2348 33.172 18.4238 33.655 18.4238 34.18C18.4238 34.642 18.2978 35.195 17.7168 35.195C17.1708 35.195 16.9888 34.642 16.9888 34.145C16.9888 33.683 17.1708 33.172 17.7168 33.172ZM19.5718 31.002H18.3818V32.7589H18.3678C18.1228 32.43 17.7798 32.262 17.3318 32.262C16.3028 32.262 15.7988 33.158 15.7988 34.103C15.7988 35.125 16.2818 36.1049 17.4228 36.1049C17.8428 36.1049 18.1928 35.923 18.4238 35.58H18.4378V36H19.5718V31.002ZM12.7095 34.1872C12.7095 33.7252 12.8775 33.1722 13.4305 33.1722C13.9835 33.1722 14.1585 33.7252 14.1585 34.1872C14.1585 34.6492 13.9835 35.1952 13.4305 35.1952C12.8775 35.1952 12.7095 34.6492 12.7095 34.1872ZM11.5195 34.1872C11.5195 35.2792 12.3035 36.1052 13.4305 36.1052C14.5575 36.1052 15.3485 35.2792 15.3485 34.1872C15.3485 33.0952 14.5575 32.2622 13.4305 32.2622C12.3035 32.2622 11.5195 33.0952 11.5195 34.1872ZM21.839 32.3671H22.574V33.1371H21.839V34.7891C21.839 35.0761 22.007 35.1391 22.266 35.1391C22.3142 35.1391 22.364 35.1357 22.4147 35.1323C22.4672 35.1287 22.5206 35.1251 22.574 35.1251V36.0001C22.481 36.0031 22.388 36.0099 22.295 36.0168C22.171 36.0259 22.047 36.0351 21.923 36.0351C20.908 36.0351 20.649 35.7411 20.649 34.7541V33.1371H20.047V32.3671H20.649V31.2681H21.839V32.3671Z", fill: "white", fillRule: "evenodd" }),
  import_react30.default.createElement("path", { d: "M0 28H34V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V28Z", fill: "#D65537" }),
  import_react30.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V28H0V3Z", fill: "#F5F5F5" }),
  import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#DBDBDB" }),
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M7 12C7 10.8954 7.89543 10 9 10H19C20.1046 10 21 10.8954 21 12V18C21 19.1046 20.1046 20 19 20H9C7.89543 20 7 19.1046 7 18V12ZM9 12H19V18H9V12ZM25 22C25 23.1046 24.1046 24 23 24H11V22H23V15H25V22Z", fill: "#D65537", fillRule: "evenodd" })
);
var FilePowerPointIconAlt = ({ className = "", size = DEFAULT_SIZE, ...props }) => import_react30.default.createElement(
  "svg",
  { className: clsx_default("rfu-file-powerpoint-alt", className), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg", ...props },
  import_react30.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z", fill: "url(#paint0_linear_11084_76)" }),
  import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#AB381D" }),
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M7 12C7 10.8954 7.89543 10 9 10H19C20.1046 10 21 10.8954 21 12V18C21 19.1046 20.1046 20 19 20H9C7.89543 20 7 19.1046 7 18V12ZM9 12H19V18H9V12ZM25 22C25 23.1046 24.1046 24 23 24H11V22H23V15H25V22Z", fill: "#FFB3A0", fillRule: "evenodd" }),
  import_react30.default.createElement(
    "defs",
    null,
    import_react30.default.createElement(
      "linearGradient",
      { gradientUnits: "userSpaceOnUse", id: "paint0_linear_11084_76", x1: "0", x2: "0", y1: "0", y2: "40" },
      import_react30.default.createElement("stop", { stopColor: "#DC7259" }),
      import_react30.default.createElement("stop", { offset: "1", stopColor: "#D14423" })
    )
  )
);
var FileExcelIcon = ({ className = "", size = DEFAULT_SIZE, ...props }) => import_react30.default.createElement(
  "svg",
  { className: clsx_default("rfu-file-excel", className), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg", ...props },
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M17.7168 33.172C18.2348 33.172 18.4238 33.655 18.4238 34.18C18.4238 34.642 18.2978 35.195 17.7168 35.195C17.1708 35.195 16.9888 34.642 16.9888 34.145C16.9888 33.683 17.1708 33.172 17.7168 33.172ZM19.5718 31.002H18.3818V32.7589H18.3678C18.1228 32.43 17.7798 32.262 17.3318 32.262C16.3028 32.262 15.7988 33.158 15.7988 34.103C15.7988 35.125 16.2818 36.1049 17.4228 36.1049C17.8428 36.1049 18.1928 35.923 18.4238 35.58H18.4378V36H19.5718V31.002ZM12.7095 34.1872C12.7095 33.7252 12.8775 33.1722 13.4305 33.1722C13.9835 33.1722 14.1585 33.7252 14.1585 34.1872C14.1585 34.6492 13.9835 35.1952 13.4305 35.1952C12.8775 35.1952 12.7095 34.6492 12.7095 34.1872ZM11.5195 34.1872C11.5195 35.2792 12.3035 36.1052 13.4305 36.1052C14.5575 36.1052 15.3485 35.2792 15.3485 34.1872C15.3485 33.0952 14.5575 32.2622 13.4305 32.2622C12.3035 32.2622 11.5195 33.0952 11.5195 34.1872ZM21.839 32.3671H22.574V33.1371H21.839V34.7891C21.839 35.0761 22.007 35.1391 22.266 35.1391C22.3142 35.1391 22.364 35.1357 22.4147 35.1323C22.4672 35.1287 22.5206 35.1251 22.574 35.1251V36.0001C22.481 36.0031 22.388 36.0099 22.295 36.0168C22.171 36.0259 22.047 36.0351 21.923 36.0351C20.908 36.0351 20.649 35.7411 20.649 34.7541V33.1371H20.047V32.3671H20.649V31.2681H21.839V32.3671Z", fill: "white", fillRule: "evenodd" }),
  import_react30.default.createElement("path", { d: "M0 28H34V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V28Z", fill: "#0F9D58" }),
  import_react30.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V28H0V3Z", fill: "#F5F5F5" }),
  import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#DBDBDB" }),
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M12 13H7V15H12V13ZM12 17H7V19H12V17ZM7 21H12V23H7V21ZM23 13H14V15H23V13ZM14 17H23V19H14V17ZM23 21H14V23H23V21Z", fill: "#0F9D58", fillRule: "evenodd" })
);
var FileExcelIconAlt = ({ className = "", size = DEFAULT_SIZE, ...props }) => import_react30.default.createElement(
  "svg",
  { className: clsx_default("rfu-file-excel-alt", className), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg", ...props },
  import_react30.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z", fill: "url(#paint0_linear_11084_326)" }),
  import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#0C864B" }),
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M12 13H7V15H12V13ZM12 17H7V19H12V17ZM7 21H12V23H7V21ZM23 13H14V15H23V13ZM14 17H23V19H14V17ZM23 21H14V23H23V21Z", fill: "#A8E7C9", fillRule: "evenodd" }),
  import_react30.default.createElement(
    "defs",
    null,
    import_react30.default.createElement(
      "linearGradient",
      { gradientUnits: "userSpaceOnUse", id: "paint0_linear_11084_326", x1: "0", x2: "0", y1: "0", y2: "40" },
      import_react30.default.createElement("stop", { stopColor: "#64AD8A" }),
      import_react30.default.createElement("stop", { offset: "1", stopColor: "#0C864B" })
    )
  )
);
var FileArchiveIcon = ({ className = "", size = DEFAULT_SIZE, ...props }) => import_react30.default.createElement(
  "svg",
  { className: clsx_default("rfu-file-archive", className), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg", ...props },
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M17.7168 33.172C18.2348 33.172 18.4238 33.655 18.4238 34.18C18.4238 34.642 18.2978 35.195 17.7168 35.195C17.1708 35.195 16.9888 34.642 16.9888 34.145C16.9888 33.683 17.1708 33.172 17.7168 33.172ZM19.5718 31.002H18.3818V32.7589H18.3678C18.1228 32.43 17.7798 32.262 17.3318 32.262C16.3028 32.262 15.7988 33.158 15.7988 34.103C15.7988 35.125 16.2818 36.1049 17.4228 36.1049C17.8428 36.1049 18.1928 35.923 18.4238 35.58H18.4378V36H19.5718V31.002ZM12.7095 34.1872C12.7095 33.7252 12.8775 33.1722 13.4305 33.1722C13.9835 33.1722 14.1585 33.7252 14.1585 34.1872C14.1585 34.6492 13.9835 35.1952 13.4305 35.1952C12.8775 35.1952 12.7095 34.6492 12.7095 34.1872ZM11.5195 34.1872C11.5195 35.2792 12.3035 36.1052 13.4305 36.1052C14.5575 36.1052 15.3485 35.2792 15.3485 34.1872C15.3485 33.0952 14.5575 32.2622 13.4305 32.2622C12.3035 32.2622 11.5195 33.0952 11.5195 34.1872ZM21.839 32.3671H22.574V33.1371H21.839V34.7891C21.839 35.0761 22.007 35.1391 22.266 35.1391C22.3142 35.1391 22.364 35.1357 22.4147 35.1323C22.4672 35.1287 22.5206 35.1251 22.574 35.1251V36.0001C22.481 36.0031 22.388 36.0099 22.295 36.0168C22.171 36.0259 22.047 36.0351 21.923 36.0351C20.908 36.0351 20.649 35.7411 20.649 34.7541V33.1371H20.047V32.3671H20.649V31.2681H21.839V32.3671Z", fill: "white", fillRule: "evenodd" }),
  import_react30.default.createElement("path", { d: "M0 28H34V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V28Z", fill: "#F8B859" }),
  import_react30.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V28H0V3Z", fill: "#F5F5F5" }),
  import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#DBDBDB" }),
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M10 0H8V2H10V4H8V6H10V8H8V10H10V12H8V14H10V12H12V10H10V8H12V6H10V4H12V2H10V0ZM8 17C8 16.4477 8.44771 16 9 16H11C11.5523 16 12 16.4477 12 17V23C12 23.5523 11.5523 24 11 24H9C8.44771 24 8 23.5523 8 23V17ZM9 23V20H11V23H9Z", fill: "#F8B859", fillRule: "evenodd" })
);
var FileArchiveIconAlt = ({ className = "", size = DEFAULT_SIZE, ...props }) => import_react30.default.createElement(
  "svg",
  { className: clsx_default("rfu-file-archive-alt", className), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg", ...props },
  import_react30.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z", fill: "url(#paint0_linear_11086_246)" }),
  import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#B67A24" }),
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M10 0H8V2H10V4H8V6H10V8H8V10H10V12H8V14H10V12H12V10H10V8H12V6H10V4H12V2H10V0ZM8 17C8 16.4477 8.44771 16 9 16H11C11.5523 16 12 16.4477 12 17V23C12 23.5523 11.5523 24 11 24H9C8.44771 24 8 23.5523 8 23V17ZM9 23V20H11V23H9Z", fill: "#FFE9C8", fillRule: "evenodd" }),
  import_react30.default.createElement(
    "defs",
    null,
    import_react30.default.createElement(
      "linearGradient",
      { gradientUnits: "userSpaceOnUse", id: "paint0_linear_11086_246", x1: "0", x2: "0", y1: "0", y2: "40" },
      import_react30.default.createElement("stop", { stopColor: "#FFC775" }),
      import_react30.default.createElement("stop", { offset: "1", stopColor: "#E69E34" })
    )
  )
);
var FileCodeIcon = ({ className = "", size = DEFAULT_SIZE, ...props }) => import_react30.default.createElement(
  "svg",
  { className: clsx_default("rfu-file-code", className), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg", ...props },
  import_react30.default.createElement("path", { d: "M0 28H34V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V28Z", fill: "#00ACA1" }),
  import_react30.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V28H0V3Z", fill: "#F5F5F5" }),
  import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#DBDBDB" }),
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M15 21V18.984L11.5 18L15 17V15L9 17V19L15 21ZM19 15V17.016L22.5 18L19 19V21L25 19V17L19 15Z", fill: "#00ACA1", fillRule: "evenodd" })
);
var FileCodeIconAlt = ({ className = "", size = DEFAULT_SIZE, ...props }) => import_react30.default.createElement(
  "svg",
  { className: clsx_default("rfu-file-code-alt", className), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg", ...props },
  import_react30.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z", fill: "url(#paint0_linear_11086_611)" }),
  import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#00ACA1" }),
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M15 21V18.984L11.5 18L15 17V15L9 17V19L15 21ZM19 15V17.016L22.5 18L19 19V21L25 19V17L19 15Z", fill: "#A3DCD8", fillRule: "evenodd" }),
  import_react30.default.createElement(
    "defs",
    null,
    import_react30.default.createElement(
      "linearGradient",
      { gradientUnits: "userSpaceOnUse", id: "paint0_linear_11086_611", x1: "0", x2: "0", y1: "0", y2: "40" },
      import_react30.default.createElement("stop", { stopColor: "#7FC4BD" }),
      import_react30.default.createElement("stop", { offset: "1", stopColor: "#00ACA1" })
    )
  )
);
var FileAudioIcon = ({ className = "", size = DEFAULT_SIZE, ...props }) => import_react30.default.createElement(
  "svg",
  { className: clsx_default("rfu-file-audio", className), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg", ...props },
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M17.7168 33.172C18.2348 33.172 18.4238 33.655 18.4238 34.18C18.4238 34.642 18.2978 35.195 17.7168 35.195C17.1708 35.195 16.9888 34.642 16.9888 34.145C16.9888 33.683 17.1708 33.172 17.7168 33.172ZM19.5718 31.002H18.3818V32.7589H18.3678C18.1228 32.43 17.7798 32.262 17.3318 32.262C16.3028 32.262 15.7988 33.158 15.7988 34.103C15.7988 35.125 16.2818 36.1049 17.4228 36.1049C17.8428 36.1049 18.1928 35.923 18.4238 35.58H18.4378V36H19.5718V31.002ZM12.7095 34.1872C12.7095 33.7252 12.8775 33.1722 13.4305 33.1722C13.9835 33.1722 14.1585 33.7252 14.1585 34.1872C14.1585 34.6492 13.9835 35.1952 13.4305 35.1952C12.8775 35.1952 12.7095 34.6492 12.7095 34.1872ZM11.5195 34.1872C11.5195 35.2792 12.3035 36.1052 13.4305 36.1052C14.5575 36.1052 15.3485 35.2792 15.3485 34.1872C15.3485 33.0952 14.5575 32.2622 13.4305 32.2622C12.3035 32.2622 11.5195 33.0952 11.5195 34.1872ZM21.839 32.3671H22.574V33.1371H21.839V34.7891C21.839 35.0761 22.007 35.1391 22.266 35.1391C22.3142 35.1391 22.364 35.1357 22.4147 35.1323C22.4672 35.1287 22.5206 35.1251 22.574 35.1251V36.0001C22.481 36.0031 22.388 36.0099 22.295 36.0168C22.171 36.0259 22.047 36.0351 21.923 36.0351C20.908 36.0351 20.649 35.7411 20.649 34.7541V33.1371H20.047V32.3671H20.649V31.2681H21.839V32.3671Z", fill: "white", fillRule: "evenodd" }),
  import_react30.default.createElement("path", { d: "M0 28H34V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V28Z", fill: "#2727B0" }),
  import_react30.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V28H0V3Z", fill: "#F5F5F5" }),
  import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#DBDBDB" }),
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M8.87912 21.941H12.298L16.9521 24.7493C17.0307 24.8138 17.1293 24.849 17.2311 24.849C17.4738 24.8488 17.6705 24.6519 17.6703 24.4092V12.4399C17.6704 12.3381 17.6352 12.2396 17.5707 12.1609C17.4168 11.9732 17.1398 11.9457 16.9521 12.0996L12.298 14.908H8.87912C8.3936 14.908 8 15.3016 8 15.7871V21.0619C8 21.5474 8.3936 21.941 8.87912 21.941ZM12.9258 16.6664L15.9122 15.2224V21.6268L12.9258 20.1829H9.7583V16.6664H12.9258ZM19.8511 16.3517C19.474 16.4092 19.2397 16.6637 19.3283 16.9191L19.3262 16.92C19.5295 17.4995 19.6305 18.098 19.6284 18.6953C19.6305 19.2975 19.5237 19.9014 19.3196 20.4909C19.229 20.7462 19.4682 20.9996 19.8474 21.06C19.9008 21.0683 19.9542 21.072 20.0076 21.072C20.3259 21.072 20.6156 20.9234 20.6922 20.7057C20.9194 20.0451 21.0337 19.37 21.0374 18.6953C21.0349 18.0251 20.9211 17.3575 20.6955 16.7035C20.6053 16.4477 20.229 16.2908 19.8511 16.3517ZM22.1605 14.6028C22.5252 14.5163 22.9259 14.6454 23.055 14.8938C23.6891 16.1157 24 17.4042 24 18.6923C24.0004 19.9895 23.6796 21.2839 23.0521 22.5153C22.9503 22.7123 22.6763 22.8344 22.3828 22.8344C22.3071 22.8344 22.2301 22.8261 22.1543 22.8092C21.7863 22.7251 21.5914 22.4536 21.7185 22.2077C22.2988 21.0761 22.5922 19.8836 22.5931 18.6919C22.5931 17.5056 22.3054 16.3222 21.7276 15.2025C21.6001 14.9563 21.795 14.686 22.1605 14.6028Z", fill: "#2727B0", fillRule: "evenodd" })
);
var FileAudioIconAlt = ({ className = "", size = DEFAULT_SIZE, ...props }) => import_react30.default.createElement(
  "svg",
  { className: clsx_default("rfu-file-audio-alt", className), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg", ...props },
  import_react30.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z", fill: "url(#paint0_linear_11086_420)" }),
  import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#1919A5" }),
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M8.87912 21.941H12.298L16.9521 24.7493C17.0307 24.8138 17.1293 24.849 17.2311 24.849C17.4738 24.8488 17.6705 24.6519 17.6703 24.4092V12.4399C17.6704 12.3381 17.6352 12.2396 17.5707 12.1609C17.4168 11.9732 17.1398 11.9457 16.9521 12.0996L12.298 14.908H8.87912C8.3936 14.908 8 15.3016 8 15.7871V21.0619C8 21.5474 8.3936 21.941 8.87912 21.941ZM12.9258 16.6664L15.9122 15.2224V21.6268L12.9258 20.1829H9.7583V16.6664H12.9258ZM19.8511 16.3517C19.474 16.4092 19.2397 16.6637 19.3283 16.9191L19.3262 16.92C19.5295 17.4995 19.6305 18.098 19.6284 18.6953C19.6305 19.2975 19.5237 19.9014 19.3196 20.4909C19.229 20.7462 19.4682 20.9996 19.8474 21.06C19.9008 21.0683 19.9542 21.072 20.0076 21.072C20.3259 21.072 20.6156 20.9234 20.6922 20.7057C20.9194 20.0451 21.0337 19.37 21.0374 18.6953C21.0349 18.0251 20.9211 17.3575 20.6955 16.7035C20.6053 16.4477 20.229 16.2908 19.8511 16.3517ZM22.1605 14.6028C22.5252 14.5163 22.9259 14.6454 23.055 14.8938C23.6891 16.1157 24 17.4042 24 18.6923C24.0004 19.9895 23.6796 21.2839 23.0521 22.5153C22.9503 22.7123 22.6763 22.8344 22.3828 22.8344C22.3071 22.8344 22.2301 22.8261 22.1543 22.8092C21.7863 22.7251 21.5914 22.4536 21.7185 22.2077C22.2988 21.0761 22.5922 19.8836 22.5931 18.6919C22.5931 17.5056 22.3054 16.3222 21.7276 15.2025C21.6001 14.9563 21.795 14.686 22.1605 14.6028Z", fill: "#AAAAFF", fillRule: "evenodd" }),
  import_react30.default.createElement(
    "defs",
    null,
    import_react30.default.createElement(
      "linearGradient",
      { gradientUnits: "userSpaceOnUse", id: "paint0_linear_11086_420", x1: "0", x2: "0", y1: "0", y2: "40" },
      import_react30.default.createElement("stop", { stopColor: "#4A4AB8" }),
      import_react30.default.createElement("stop", { offset: "1", stopColor: "#2727B0" })
    )
  )
);
var FileVideoIcon = ({ className = "", size = DEFAULT_SIZE, ...props }) => import_react30.default.createElement(
  "svg",
  { className: clsx_default("rfu-file-video", className), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg", ...props },
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M17.7168 33.172C18.2348 33.172 18.4238 33.655 18.4238 34.18C18.4238 34.642 18.2978 35.195 17.7168 35.195C17.1708 35.195 16.9888 34.642 16.9888 34.145C16.9888 33.683 17.1708 33.172 17.7168 33.172ZM19.5718 31.002H18.3818V32.7589H18.3678C18.1228 32.43 17.7798 32.262 17.3318 32.262C16.3028 32.262 15.7988 33.158 15.7988 34.103C15.7988 35.125 16.2818 36.1049 17.4228 36.1049C17.8428 36.1049 18.1928 35.923 18.4238 35.58H18.4378V36H19.5718V31.002ZM12.7095 34.1872C12.7095 33.7252 12.8775 33.1722 13.4305 33.1722C13.9835 33.1722 14.1585 33.7252 14.1585 34.1872C14.1585 34.6492 13.9835 35.1952 13.4305 35.1952C12.8775 35.1952 12.7095 34.6492 12.7095 34.1872ZM11.5195 34.1872C11.5195 35.2792 12.3035 36.1052 13.4305 36.1052C14.5575 36.1052 15.3485 35.2792 15.3485 34.1872C15.3485 33.0952 14.5575 32.2622 13.4305 32.2622C12.3035 32.2622 11.5195 33.0952 11.5195 34.1872ZM21.839 32.3671H22.574V33.1371H21.839V34.7891C21.839 35.0761 22.007 35.1391 22.266 35.1391C22.3142 35.1391 22.364 35.1357 22.4147 35.1323C22.4672 35.1287 22.5206 35.1251 22.574 35.1251V36.0001C22.481 36.0031 22.388 36.0099 22.295 36.0168C22.171 36.0259 22.047 36.0351 21.923 36.0351C20.908 36.0351 20.649 35.7411 20.649 34.7541V33.1371H20.047V32.3671H20.649V31.2681H21.839V32.3671Z", fill: "white", fillRule: "evenodd" }),
  import_react30.default.createElement("path", { d: "M0 28H34V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V28Z", fill: "#9D27B0" }),
  import_react30.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V28H0V3Z", fill: "#F5F5F5" }),
  import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#DBDBDB" }),
  import_react30.default.createElement("path", { d: "M9 17H25V24H9V17ZM27 14C27 12.8954 26.1046 12 25 12H22L24 15H21L19 12H17L19 15H16L14 12H12L14 15H11L9 12C7.9 12 7.01 12.9 7.01 14L7 24C7 25.1 7.9 26 9 26H25C26.1 26 27 25.1 27 24V14Z", fill: "#9D27B0" })
);
var FileVideoIconAlt = ({ className = "", size = DEFAULT_SIZE, ...props }) => import_react30.default.createElement(
  "svg",
  { className: clsx_default("rfu-file-video-alt", className), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg", ...props },
  import_react30.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z", fill: "url(#paint0_linear_18604_164254)" }),
  import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#7A1589" }),
  import_react30.default.createElement("path", { d: "M9 17H25V24H9V17ZM27 14C27 12.8954 26.1046 12 25 12H22L24 15H21L19 12H17L19 15H16L14 12H12L14 15H11L9 12C7.9 12 7.01 12.9 7.01 14L7 24C7 25.1 7.9 26 9 26H25C26.1 26 27 25.1 27 24V14Z", fill: "#F3A8FF" }),
  import_react30.default.createElement(
    "defs",
    null,
    import_react30.default.createElement(
      "linearGradient",
      { gradientUnits: "userSpaceOnUse", id: "paint0_linear_18604_164254", x1: "0", x2: "0", y1: "0", y2: "40" },
      import_react30.default.createElement("stop", { stopColor: "#A94AB8" }),
      import_react30.default.createElement("stop", { offset: "1", stopColor: "#9D27B0" })
    )
  )
);
var FileFallbackIcon = ({ className = "", size = DEFAULT_SIZE, ...props }) => import_react30.default.createElement(
  "svg",
  { className: clsx_default("rfu-file-fallback ", className), fill: "none", height: size, viewBox: "0 0 34 40", width: size, xmlns: "http://www.w3.org/2000/svg", ...props },
  import_react30.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z", fill: "url(#paint0_linear)" }),
  import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#DBDBDB" }),
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M8 13H23V15H8V13Z", fill: "#CFCFCF", fillRule: "evenodd" }),
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M8 17H18V19H8V17Z", fill: "#CFCFCF", fillRule: "evenodd" }),
  import_react30.default.createElement("path", { clipRule: "evenodd", d: "M8 21H23V23H8V21Z", fill: "#CFCFCF", fillRule: "evenodd" }),
  import_react30.default.createElement(
    "defs",
    null,
    import_react30.default.createElement(
      "linearGradient",
      { gradientUnits: "userSpaceOnUse", id: "paint0_linear", x1: "0", x2: "0", y1: "0", y2: "40" },
      import_react30.default.createElement("stop", { stopColor: "white" }),
      import_react30.default.createElement("stop", { offset: "1", stopColor: "#DBDBDB" })
    )
  )
);
var FileImageIcon = ({ className = "", size = DEFAULT_SIZE, ...props }) => import_react30.default.createElement(
  "svg",
  { className: clsx_default("rfu-file-image", className), height: size, viewBox: "0 0 384 512", width: size, xmlns: "http://www.w3.org/2000/svg", ...props },
  import_react30.default.createElement("path", { d: "M369.9 97.9L286 14C277 5 264.8-.1 252.1-.1H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V131.9c0-12.7-5.1-25-14.1-34zM332.1 128H256V51.9l76.1 76.1zM48 464V48h160v104c0 13.3 10.7 24 24 24h104v288H48zm32-48h224V288l-23.5-23.5c-4.7-4.7-12.3-4.7-17 0L176 352l-39.5-39.5c-4.7-4.7-12.3-4.7-17 0L80 352v64zm48-240c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48z", fill: "#414D54" })
);

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/FileIcon/mimeTypes.js
var wordMimeTypes = [
  // Microsoft Word
  // .doc .dot
  "application/msword",
  // .doc .dot
  "application/msword-template",
  // .docx
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
  // .dotx (no test)
  "application/vnd.openxmlformats-officedocument.wordprocessingml.template",
  // .docm
  "application/vnd.ms-word.document.macroEnabled.12",
  // .dotm (no test)
  "application/vnd.ms-word.template.macroEnabled.12",
  // LibreOffice/OpenOffice Writer
  // .odt
  "application/vnd.oasis.opendocument.text",
  // .ott
  "application/vnd.oasis.opendocument.text-template",
  // .fodt
  "application/vnd.oasis.opendocument.text-flat-xml"
  // .uot
  // NOTE: firefox doesn't know mimetype so maybe ignore
];
var excelMimeTypes = [
  // .csv
  "text/csv",
  // TODO: maybe more data files
  // Microsoft Excel
  // .xls .xlt .xla (no test for .xla)
  "application/vnd.ms-excel",
  // .xlsx
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
  // .xltx (no test)
  "application/vnd.openxmlformats-officedocument.spreadsheetml.template",
  // .xlsm
  "application/vnd.ms-excel.sheet.macroEnabled.12",
  // .xltm (no test)
  "application/vnd.ms-excel.template.macroEnabled.12",
  // .xlam (no test)
  "application/vnd.ms-excel.addin.macroEnabled.12",
  // .xlsb (no test)
  "application/vnd.ms-excel.addin.macroEnabled.12",
  // LibreOffice/OpenOffice Calc
  // .ods
  "application/vnd.oasis.opendocument.spreadsheet",
  // .ots
  "application/vnd.oasis.opendocument.spreadsheet-template",
  // .fods
  "application/vnd.oasis.opendocument.spreadsheet-flat-xml"
  // .uos
  // NOTE: firefox doesn't know mimetype so maybe ignore
];
var powerpointMimeTypes = [
  // Microsoft Word
  // .ppt .pot .pps .ppa (no test for .ppa)
  "application/vnd.ms-powerpoint",
  // .pptx
  "application/vnd.openxmlformats-officedocument.presentationml.presentation",
  // .potx (no test)
  "application/vnd.openxmlformats-officedocument.presentationml.template",
  // .ppsx
  "application/vnd.openxmlformats-officedocument.presentationml.slideshow",
  // .ppam
  "application/vnd.ms-powerpoint.addin.macroEnabled.12",
  // .pptm
  "application/vnd.ms-powerpoint.presentation.macroEnabled.12",
  // .potm
  "application/vnd.ms-powerpoint.template.macroEnabled.12",
  // .ppsm
  "application/vnd.ms-powerpoint.slideshow.macroEnabled.12",
  // LibreOffice/OpenOffice Writer
  // .odp
  "application/vnd.oasis.opendocument.presentation",
  // .otp
  "application/vnd.oasis.opendocument.presentation-template",
  // .fodp
  "application/vnd.oasis.opendocument.presentation-flat-xml"
  // .uop
  // NOTE: firefox doesn't know mimetype so maybe ignore
];
var archiveFileTypes = [
  // .zip
  "application/zip",
  // .z7
  "application/x-7z-compressed",
  // .ar
  "application/x-archive",
  // .tar
  "application/x-tar",
  // .tar.gz
  "application/gzip",
  // .tar.Z
  "application/x-compress",
  // .tar.bz2
  "application/x-bzip",
  // .tar.lz
  "application/x-lzip",
  // .tar.lz4
  "application/x-lz4",
  // .tar.lzma
  "application/x-lzma",
  // .tar.lzo (no test)
  "application/x-lzop",
  // .tar.xz
  "application/x-xz",
  // .war
  "application/x-webarchive",
  // .rar
  "application/vnd.rar"
];
var codeFileTypes = [
  // .html .htm
  "text/html",
  // .css
  "text/css",
  // .js
  "application/x-javascript",
  "text/javascript",
  // .json
  "application/json",
  // .py
  "text/x-python",
  // .go
  "text/x-go",
  // .c
  "text/x-csrc",
  // .cpp
  "text/x-c++src",
  // .rb
  "application/x-ruby",
  // .rust
  "text/rust",
  // .java
  "text/x-java",
  // .php
  "application/x-php",
  // .cs
  "text/x-csharp",
  // .scala
  "text/x-scala",
  // .erl
  "text/x-erlang",
  // .sh
  "application/x-shellscript"
];

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/FileIcon/iconMap.js
function generateMimeTypeToIconMap({ FileArchiveIcon: FileArchiveIcon2, FileCodeIcon: FileCodeIcon2, FileExcelIcon: FileExcelIcon2, FilePdfIcon: FilePdfIcon2, FilePowerPointIcon: FilePowerPointIcon2, FileWordIcon: FileWordIcon2 }) {
  const mimeTypeToIconMap = {
    "application/pdf": FilePdfIcon2
  };
  for (const type of wordMimeTypes) {
    mimeTypeToIconMap[type] = FileWordIcon2;
  }
  for (const type of excelMimeTypes) {
    mimeTypeToIconMap[type] = FileExcelIcon2;
  }
  for (const type of powerpointMimeTypes) {
    mimeTypeToIconMap[type] = FilePowerPointIcon2;
  }
  for (const type of archiveFileTypes) {
    mimeTypeToIconMap[type] = FileArchiveIcon2;
  }
  for (const type of codeFileTypes) {
    mimeTypeToIconMap[type] = FileCodeIcon2;
  }
  return mimeTypeToIconMap;
}
function generateGeneralTypeToIconMap({ FileAltIcon, FileAudioIcon: FileAudioIcon2, FileImageIcon: FileImageIcon2, FileVideoIcon: FileVideoIcon2 }) {
  return {
    "audio/": FileAudioIcon2,
    "image/": FileImageIcon2,
    "text/": FileAltIcon,
    "video/": FileVideoIcon2
  };
}
var iconMap = {
  alt: {
    ...generateMimeTypeToIconMap({
      FileArchiveIcon: FileArchiveIconAlt,
      FileCodeIcon: FileCodeIconAlt,
      FileExcelIcon: FileExcelIconAlt,
      FilePdfIcon,
      FilePowerPointIcon: FilePowerPointIconAlt,
      FileWordIcon: FileWordIconAlt
    }),
    ...generateGeneralTypeToIconMap({
      FileAltIcon: FileFallbackIcon,
      FileAudioIcon: FileAudioIconAlt,
      FileImageIcon,
      FileVideoIcon: FileVideoIconAlt
    }),
    fallback: FileFallbackIcon
  },
  standard: {
    ...generateMimeTypeToIconMap({
      FileArchiveIcon,
      FileCodeIcon,
      FileExcelIcon,
      FilePdfIcon,
      FilePowerPointIcon,
      FileWordIcon
    }),
    ...generateGeneralTypeToIconMap({
      FileAltIcon: FileFallbackIcon,
      FileAudioIcon,
      FileImageIcon,
      FileVideoIcon
    }),
    fallback: FileFallbackIcon
  }
};

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/FileIcon/FileIcon.js
function mimeTypeToIcon(type = "standard", mimeType) {
  const theMap = iconMap[type] || iconMap["standard"];
  if (!mimeType)
    return theMap.fallback;
  const icon = theMap[mimeType];
  if (icon)
    return icon;
  if (mimeType.startsWith("audio/"))
    return theMap["audio/"];
  if (mimeType.startsWith("video/"))
    return theMap["video/"];
  if (mimeType.startsWith("image/"))
    return theMap["image/"];
  if (mimeType.startsWith("text/"))
    return theMap["text/"];
  return theMap.fallback;
}
var FileIcon = (props) => {
  const { big = false, mimeType, size = 50, sizeSmall = 20, type = "standard", ...rest } = props;
  const Icon3 = mimeTypeToIcon(type, mimeType);
  return import_react31.default.createElement(Icon3, { ...rest, size: big ? size : sizeSmall });
};

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/ImageDropzone.js
var import_react33 = __toESM(require_react());

// node_modules/react-dropzone/dist/es/index.js
var import_react32 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());

// node_modules/file-selector/dist/es2015/file.js
var COMMON_MIME_TYPES = /* @__PURE__ */ new Map([
  // https://github.com/guzzle/psr7/blob/2d9260799e713f1c475d3c5fdc3d6561ff7441b2/src/MimeType.php
  ["1km", "application/vnd.1000minds.decision-model+xml"],
  ["3dml", "text/vnd.in3d.3dml"],
  ["3ds", "image/x-3ds"],
  ["3g2", "video/3gpp2"],
  ["3gp", "video/3gp"],
  ["3gpp", "video/3gpp"],
  ["3mf", "model/3mf"],
  ["7z", "application/x-7z-compressed"],
  ["7zip", "application/x-7z-compressed"],
  ["123", "application/vnd.lotus-1-2-3"],
  ["aab", "application/x-authorware-bin"],
  ["aac", "audio/x-acc"],
  ["aam", "application/x-authorware-map"],
  ["aas", "application/x-authorware-seg"],
  ["abw", "application/x-abiword"],
  ["ac", "application/vnd.nokia.n-gage.ac+xml"],
  ["ac3", "audio/ac3"],
  ["acc", "application/vnd.americandynamics.acc"],
  ["ace", "application/x-ace-compressed"],
  ["acu", "application/vnd.acucobol"],
  ["acutc", "application/vnd.acucorp"],
  ["adp", "audio/adpcm"],
  ["aep", "application/vnd.audiograph"],
  ["afm", "application/x-font-type1"],
  ["afp", "application/vnd.ibm.modcap"],
  ["ahead", "application/vnd.ahead.space"],
  ["ai", "application/pdf"],
  ["aif", "audio/x-aiff"],
  ["aifc", "audio/x-aiff"],
  ["aiff", "audio/x-aiff"],
  ["air", "application/vnd.adobe.air-application-installer-package+zip"],
  ["ait", "application/vnd.dvb.ait"],
  ["ami", "application/vnd.amiga.ami"],
  ["amr", "audio/amr"],
  ["apk", "application/vnd.android.package-archive"],
  ["apng", "image/apng"],
  ["appcache", "text/cache-manifest"],
  ["application", "application/x-ms-application"],
  ["apr", "application/vnd.lotus-approach"],
  ["arc", "application/x-freearc"],
  ["arj", "application/x-arj"],
  ["asc", "application/pgp-signature"],
  ["asf", "video/x-ms-asf"],
  ["asm", "text/x-asm"],
  ["aso", "application/vnd.accpac.simply.aso"],
  ["asx", "video/x-ms-asf"],
  ["atc", "application/vnd.acucorp"],
  ["atom", "application/atom+xml"],
  ["atomcat", "application/atomcat+xml"],
  ["atomdeleted", "application/atomdeleted+xml"],
  ["atomsvc", "application/atomsvc+xml"],
  ["atx", "application/vnd.antix.game-component"],
  ["au", "audio/x-au"],
  ["avi", "video/x-msvideo"],
  ["avif", "image/avif"],
  ["aw", "application/applixware"],
  ["azf", "application/vnd.airzip.filesecure.azf"],
  ["azs", "application/vnd.airzip.filesecure.azs"],
  ["azv", "image/vnd.airzip.accelerator.azv"],
  ["azw", "application/vnd.amazon.ebook"],
  ["b16", "image/vnd.pco.b16"],
  ["bat", "application/x-msdownload"],
  ["bcpio", "application/x-bcpio"],
  ["bdf", "application/x-font-bdf"],
  ["bdm", "application/vnd.syncml.dm+wbxml"],
  ["bdoc", "application/x-bdoc"],
  ["bed", "application/vnd.realvnc.bed"],
  ["bh2", "application/vnd.fujitsu.oasysprs"],
  ["bin", "application/octet-stream"],
  ["blb", "application/x-blorb"],
  ["blorb", "application/x-blorb"],
  ["bmi", "application/vnd.bmi"],
  ["bmml", "application/vnd.balsamiq.bmml+xml"],
  ["bmp", "image/bmp"],
  ["book", "application/vnd.framemaker"],
  ["box", "application/vnd.previewsystems.box"],
  ["boz", "application/x-bzip2"],
  ["bpk", "application/octet-stream"],
  ["bpmn", "application/octet-stream"],
  ["bsp", "model/vnd.valve.source.compiled-map"],
  ["btif", "image/prs.btif"],
  ["buffer", "application/octet-stream"],
  ["bz", "application/x-bzip"],
  ["bz2", "application/x-bzip2"],
  ["c", "text/x-c"],
  ["c4d", "application/vnd.clonk.c4group"],
  ["c4f", "application/vnd.clonk.c4group"],
  ["c4g", "application/vnd.clonk.c4group"],
  ["c4p", "application/vnd.clonk.c4group"],
  ["c4u", "application/vnd.clonk.c4group"],
  ["c11amc", "application/vnd.cluetrust.cartomobile-config"],
  ["c11amz", "application/vnd.cluetrust.cartomobile-config-pkg"],
  ["cab", "application/vnd.ms-cab-compressed"],
  ["caf", "audio/x-caf"],
  ["cap", "application/vnd.tcpdump.pcap"],
  ["car", "application/vnd.curl.car"],
  ["cat", "application/vnd.ms-pki.seccat"],
  ["cb7", "application/x-cbr"],
  ["cba", "application/x-cbr"],
  ["cbr", "application/x-cbr"],
  ["cbt", "application/x-cbr"],
  ["cbz", "application/x-cbr"],
  ["cc", "text/x-c"],
  ["cco", "application/x-cocoa"],
  ["cct", "application/x-director"],
  ["ccxml", "application/ccxml+xml"],
  ["cdbcmsg", "application/vnd.contact.cmsg"],
  ["cda", "application/x-cdf"],
  ["cdf", "application/x-netcdf"],
  ["cdfx", "application/cdfx+xml"],
  ["cdkey", "application/vnd.mediastation.cdkey"],
  ["cdmia", "application/cdmi-capability"],
  ["cdmic", "application/cdmi-container"],
  ["cdmid", "application/cdmi-domain"],
  ["cdmio", "application/cdmi-object"],
  ["cdmiq", "application/cdmi-queue"],
  ["cdr", "application/cdr"],
  ["cdx", "chemical/x-cdx"],
  ["cdxml", "application/vnd.chemdraw+xml"],
  ["cdy", "application/vnd.cinderella"],
  ["cer", "application/pkix-cert"],
  ["cfs", "application/x-cfs-compressed"],
  ["cgm", "image/cgm"],
  ["chat", "application/x-chat"],
  ["chm", "application/vnd.ms-htmlhelp"],
  ["chrt", "application/vnd.kde.kchart"],
  ["cif", "chemical/x-cif"],
  ["cii", "application/vnd.anser-web-certificate-issue-initiation"],
  ["cil", "application/vnd.ms-artgalry"],
  ["cjs", "application/node"],
  ["cla", "application/vnd.claymore"],
  ["class", "application/octet-stream"],
  ["clkk", "application/vnd.crick.clicker.keyboard"],
  ["clkp", "application/vnd.crick.clicker.palette"],
  ["clkt", "application/vnd.crick.clicker.template"],
  ["clkw", "application/vnd.crick.clicker.wordbank"],
  ["clkx", "application/vnd.crick.clicker"],
  ["clp", "application/x-msclip"],
  ["cmc", "application/vnd.cosmocaller"],
  ["cmdf", "chemical/x-cmdf"],
  ["cml", "chemical/x-cml"],
  ["cmp", "application/vnd.yellowriver-custom-menu"],
  ["cmx", "image/x-cmx"],
  ["cod", "application/vnd.rim.cod"],
  ["coffee", "text/coffeescript"],
  ["com", "application/x-msdownload"],
  ["conf", "text/plain"],
  ["cpio", "application/x-cpio"],
  ["cpp", "text/x-c"],
  ["cpt", "application/mac-compactpro"],
  ["crd", "application/x-mscardfile"],
  ["crl", "application/pkix-crl"],
  ["crt", "application/x-x509-ca-cert"],
  ["crx", "application/x-chrome-extension"],
  ["cryptonote", "application/vnd.rig.cryptonote"],
  ["csh", "application/x-csh"],
  ["csl", "application/vnd.citationstyles.style+xml"],
  ["csml", "chemical/x-csml"],
  ["csp", "application/vnd.commonspace"],
  ["csr", "application/octet-stream"],
  ["css", "text/css"],
  ["cst", "application/x-director"],
  ["csv", "text/csv"],
  ["cu", "application/cu-seeme"],
  ["curl", "text/vnd.curl"],
  ["cww", "application/prs.cww"],
  ["cxt", "application/x-director"],
  ["cxx", "text/x-c"],
  ["dae", "model/vnd.collada+xml"],
  ["daf", "application/vnd.mobius.daf"],
  ["dart", "application/vnd.dart"],
  ["dataless", "application/vnd.fdsn.seed"],
  ["davmount", "application/davmount+xml"],
  ["dbf", "application/vnd.dbf"],
  ["dbk", "application/docbook+xml"],
  ["dcr", "application/x-director"],
  ["dcurl", "text/vnd.curl.dcurl"],
  ["dd2", "application/vnd.oma.dd2+xml"],
  ["ddd", "application/vnd.fujixerox.ddd"],
  ["ddf", "application/vnd.syncml.dmddf+xml"],
  ["dds", "image/vnd.ms-dds"],
  ["deb", "application/x-debian-package"],
  ["def", "text/plain"],
  ["deploy", "application/octet-stream"],
  ["der", "application/x-x509-ca-cert"],
  ["dfac", "application/vnd.dreamfactory"],
  ["dgc", "application/x-dgc-compressed"],
  ["dic", "text/x-c"],
  ["dir", "application/x-director"],
  ["dis", "application/vnd.mobius.dis"],
  ["disposition-notification", "message/disposition-notification"],
  ["dist", "application/octet-stream"],
  ["distz", "application/octet-stream"],
  ["djv", "image/vnd.djvu"],
  ["djvu", "image/vnd.djvu"],
  ["dll", "application/octet-stream"],
  ["dmg", "application/x-apple-diskimage"],
  ["dmn", "application/octet-stream"],
  ["dmp", "application/vnd.tcpdump.pcap"],
  ["dms", "application/octet-stream"],
  ["dna", "application/vnd.dna"],
  ["doc", "application/msword"],
  ["docm", "application/vnd.ms-word.template.macroEnabled.12"],
  ["docx", "application/vnd.openxmlformats-officedocument.wordprocessingml.document"],
  ["dot", "application/msword"],
  ["dotm", "application/vnd.ms-word.template.macroEnabled.12"],
  ["dotx", "application/vnd.openxmlformats-officedocument.wordprocessingml.template"],
  ["dp", "application/vnd.osgi.dp"],
  ["dpg", "application/vnd.dpgraph"],
  ["dra", "audio/vnd.dra"],
  ["drle", "image/dicom-rle"],
  ["dsc", "text/prs.lines.tag"],
  ["dssc", "application/dssc+der"],
  ["dtb", "application/x-dtbook+xml"],
  ["dtd", "application/xml-dtd"],
  ["dts", "audio/vnd.dts"],
  ["dtshd", "audio/vnd.dts.hd"],
  ["dump", "application/octet-stream"],
  ["dvb", "video/vnd.dvb.file"],
  ["dvi", "application/x-dvi"],
  ["dwd", "application/atsc-dwd+xml"],
  ["dwf", "model/vnd.dwf"],
  ["dwg", "image/vnd.dwg"],
  ["dxf", "image/vnd.dxf"],
  ["dxp", "application/vnd.spotfire.dxp"],
  ["dxr", "application/x-director"],
  ["ear", "application/java-archive"],
  ["ecelp4800", "audio/vnd.nuera.ecelp4800"],
  ["ecelp7470", "audio/vnd.nuera.ecelp7470"],
  ["ecelp9600", "audio/vnd.nuera.ecelp9600"],
  ["ecma", "application/ecmascript"],
  ["edm", "application/vnd.novadigm.edm"],
  ["edx", "application/vnd.novadigm.edx"],
  ["efif", "application/vnd.picsel"],
  ["ei6", "application/vnd.pg.osasli"],
  ["elc", "application/octet-stream"],
  ["emf", "image/emf"],
  ["eml", "message/rfc822"],
  ["emma", "application/emma+xml"],
  ["emotionml", "application/emotionml+xml"],
  ["emz", "application/x-msmetafile"],
  ["eol", "audio/vnd.digital-winds"],
  ["eot", "application/vnd.ms-fontobject"],
  ["eps", "application/postscript"],
  ["epub", "application/epub+zip"],
  ["es", "application/ecmascript"],
  ["es3", "application/vnd.eszigno3+xml"],
  ["esa", "application/vnd.osgi.subsystem"],
  ["esf", "application/vnd.epson.esf"],
  ["et3", "application/vnd.eszigno3+xml"],
  ["etx", "text/x-setext"],
  ["eva", "application/x-eva"],
  ["evy", "application/x-envoy"],
  ["exe", "application/octet-stream"],
  ["exi", "application/exi"],
  ["exp", "application/express"],
  ["exr", "image/aces"],
  ["ext", "application/vnd.novadigm.ext"],
  ["ez", "application/andrew-inset"],
  ["ez2", "application/vnd.ezpix-album"],
  ["ez3", "application/vnd.ezpix-package"],
  ["f", "text/x-fortran"],
  ["f4v", "video/mp4"],
  ["f77", "text/x-fortran"],
  ["f90", "text/x-fortran"],
  ["fbs", "image/vnd.fastbidsheet"],
  ["fcdt", "application/vnd.adobe.formscentral.fcdt"],
  ["fcs", "application/vnd.isac.fcs"],
  ["fdf", "application/vnd.fdf"],
  ["fdt", "application/fdt+xml"],
  ["fe_launch", "application/vnd.denovo.fcselayout-link"],
  ["fg5", "application/vnd.fujitsu.oasysgp"],
  ["fgd", "application/x-director"],
  ["fh", "image/x-freehand"],
  ["fh4", "image/x-freehand"],
  ["fh5", "image/x-freehand"],
  ["fh7", "image/x-freehand"],
  ["fhc", "image/x-freehand"],
  ["fig", "application/x-xfig"],
  ["fits", "image/fits"],
  ["flac", "audio/x-flac"],
  ["fli", "video/x-fli"],
  ["flo", "application/vnd.micrografx.flo"],
  ["flv", "video/x-flv"],
  ["flw", "application/vnd.kde.kivio"],
  ["flx", "text/vnd.fmi.flexstor"],
  ["fly", "text/vnd.fly"],
  ["fm", "application/vnd.framemaker"],
  ["fnc", "application/vnd.frogans.fnc"],
  ["fo", "application/vnd.software602.filler.form+xml"],
  ["for", "text/x-fortran"],
  ["fpx", "image/vnd.fpx"],
  ["frame", "application/vnd.framemaker"],
  ["fsc", "application/vnd.fsc.weblaunch"],
  ["fst", "image/vnd.fst"],
  ["ftc", "application/vnd.fluxtime.clip"],
  ["fti", "application/vnd.anser-web-funds-transfer-initiation"],
  ["fvt", "video/vnd.fvt"],
  ["fxp", "application/vnd.adobe.fxp"],
  ["fxpl", "application/vnd.adobe.fxp"],
  ["fzs", "application/vnd.fuzzysheet"],
  ["g2w", "application/vnd.geoplan"],
  ["g3", "image/g3fax"],
  ["g3w", "application/vnd.geospace"],
  ["gac", "application/vnd.groove-account"],
  ["gam", "application/x-tads"],
  ["gbr", "application/rpki-ghostbusters"],
  ["gca", "application/x-gca-compressed"],
  ["gdl", "model/vnd.gdl"],
  ["gdoc", "application/vnd.google-apps.document"],
  ["geo", "application/vnd.dynageo"],
  ["geojson", "application/geo+json"],
  ["gex", "application/vnd.geometry-explorer"],
  ["ggb", "application/vnd.geogebra.file"],
  ["ggt", "application/vnd.geogebra.tool"],
  ["ghf", "application/vnd.groove-help"],
  ["gif", "image/gif"],
  ["gim", "application/vnd.groove-identity-message"],
  ["glb", "model/gltf-binary"],
  ["gltf", "model/gltf+json"],
  ["gml", "application/gml+xml"],
  ["gmx", "application/vnd.gmx"],
  ["gnumeric", "application/x-gnumeric"],
  ["gpg", "application/gpg-keys"],
  ["gph", "application/vnd.flographit"],
  ["gpx", "application/gpx+xml"],
  ["gqf", "application/vnd.grafeq"],
  ["gqs", "application/vnd.grafeq"],
  ["gram", "application/srgs"],
  ["gramps", "application/x-gramps-xml"],
  ["gre", "application/vnd.geometry-explorer"],
  ["grv", "application/vnd.groove-injector"],
  ["grxml", "application/srgs+xml"],
  ["gsf", "application/x-font-ghostscript"],
  ["gsheet", "application/vnd.google-apps.spreadsheet"],
  ["gslides", "application/vnd.google-apps.presentation"],
  ["gtar", "application/x-gtar"],
  ["gtm", "application/vnd.groove-tool-message"],
  ["gtw", "model/vnd.gtw"],
  ["gv", "text/vnd.graphviz"],
  ["gxf", "application/gxf"],
  ["gxt", "application/vnd.geonext"],
  ["gz", "application/gzip"],
  ["gzip", "application/gzip"],
  ["h", "text/x-c"],
  ["h261", "video/h261"],
  ["h263", "video/h263"],
  ["h264", "video/h264"],
  ["hal", "application/vnd.hal+xml"],
  ["hbci", "application/vnd.hbci"],
  ["hbs", "text/x-handlebars-template"],
  ["hdd", "application/x-virtualbox-hdd"],
  ["hdf", "application/x-hdf"],
  ["heic", "image/heic"],
  ["heics", "image/heic-sequence"],
  ["heif", "image/heif"],
  ["heifs", "image/heif-sequence"],
  ["hej2", "image/hej2k"],
  ["held", "application/atsc-held+xml"],
  ["hh", "text/x-c"],
  ["hjson", "application/hjson"],
  ["hlp", "application/winhlp"],
  ["hpgl", "application/vnd.hp-hpgl"],
  ["hpid", "application/vnd.hp-hpid"],
  ["hps", "application/vnd.hp-hps"],
  ["hqx", "application/mac-binhex40"],
  ["hsj2", "image/hsj2"],
  ["htc", "text/x-component"],
  ["htke", "application/vnd.kenameaapp"],
  ["htm", "text/html"],
  ["html", "text/html"],
  ["hvd", "application/vnd.yamaha.hv-dic"],
  ["hvp", "application/vnd.yamaha.hv-voice"],
  ["hvs", "application/vnd.yamaha.hv-script"],
  ["i2g", "application/vnd.intergeo"],
  ["icc", "application/vnd.iccprofile"],
  ["ice", "x-conference/x-cooltalk"],
  ["icm", "application/vnd.iccprofile"],
  ["ico", "image/x-icon"],
  ["ics", "text/calendar"],
  ["ief", "image/ief"],
  ["ifb", "text/calendar"],
  ["ifm", "application/vnd.shana.informed.formdata"],
  ["iges", "model/iges"],
  ["igl", "application/vnd.igloader"],
  ["igm", "application/vnd.insors.igm"],
  ["igs", "model/iges"],
  ["igx", "application/vnd.micrografx.igx"],
  ["iif", "application/vnd.shana.informed.interchange"],
  ["img", "application/octet-stream"],
  ["imp", "application/vnd.accpac.simply.imp"],
  ["ims", "application/vnd.ms-ims"],
  ["in", "text/plain"],
  ["ini", "text/plain"],
  ["ink", "application/inkml+xml"],
  ["inkml", "application/inkml+xml"],
  ["install", "application/x-install-instructions"],
  ["iota", "application/vnd.astraea-software.iota"],
  ["ipfix", "application/ipfix"],
  ["ipk", "application/vnd.shana.informed.package"],
  ["irm", "application/vnd.ibm.rights-management"],
  ["irp", "application/vnd.irepository.package+xml"],
  ["iso", "application/x-iso9660-image"],
  ["itp", "application/vnd.shana.informed.formtemplate"],
  ["its", "application/its+xml"],
  ["ivp", "application/vnd.immervision-ivp"],
  ["ivu", "application/vnd.immervision-ivu"],
  ["jad", "text/vnd.sun.j2me.app-descriptor"],
  ["jade", "text/jade"],
  ["jam", "application/vnd.jam"],
  ["jar", "application/java-archive"],
  ["jardiff", "application/x-java-archive-diff"],
  ["java", "text/x-java-source"],
  ["jhc", "image/jphc"],
  ["jisp", "application/vnd.jisp"],
  ["jls", "image/jls"],
  ["jlt", "application/vnd.hp-jlyt"],
  ["jng", "image/x-jng"],
  ["jnlp", "application/x-java-jnlp-file"],
  ["joda", "application/vnd.joost.joda-archive"],
  ["jp2", "image/jp2"],
  ["jpe", "image/jpeg"],
  ["jpeg", "image/jpeg"],
  ["jpf", "image/jpx"],
  ["jpg", "image/jpeg"],
  ["jpg2", "image/jp2"],
  ["jpgm", "video/jpm"],
  ["jpgv", "video/jpeg"],
  ["jph", "image/jph"],
  ["jpm", "video/jpm"],
  ["jpx", "image/jpx"],
  ["js", "application/javascript"],
  ["json", "application/json"],
  ["json5", "application/json5"],
  ["jsonld", "application/ld+json"],
  // https://jsonlines.org/
  ["jsonl", "application/jsonl"],
  ["jsonml", "application/jsonml+json"],
  ["jsx", "text/jsx"],
  ["jxr", "image/jxr"],
  ["jxra", "image/jxra"],
  ["jxrs", "image/jxrs"],
  ["jxs", "image/jxs"],
  ["jxsc", "image/jxsc"],
  ["jxsi", "image/jxsi"],
  ["jxss", "image/jxss"],
  ["kar", "audio/midi"],
  ["karbon", "application/vnd.kde.karbon"],
  ["kdb", "application/octet-stream"],
  ["kdbx", "application/x-keepass2"],
  ["key", "application/x-iwork-keynote-sffkey"],
  ["kfo", "application/vnd.kde.kformula"],
  ["kia", "application/vnd.kidspiration"],
  ["kml", "application/vnd.google-earth.kml+xml"],
  ["kmz", "application/vnd.google-earth.kmz"],
  ["kne", "application/vnd.kinar"],
  ["knp", "application/vnd.kinar"],
  ["kon", "application/vnd.kde.kontour"],
  ["kpr", "application/vnd.kde.kpresenter"],
  ["kpt", "application/vnd.kde.kpresenter"],
  ["kpxx", "application/vnd.ds-keypoint"],
  ["ksp", "application/vnd.kde.kspread"],
  ["ktr", "application/vnd.kahootz"],
  ["ktx", "image/ktx"],
  ["ktx2", "image/ktx2"],
  ["ktz", "application/vnd.kahootz"],
  ["kwd", "application/vnd.kde.kword"],
  ["kwt", "application/vnd.kde.kword"],
  ["lasxml", "application/vnd.las.las+xml"],
  ["latex", "application/x-latex"],
  ["lbd", "application/vnd.llamagraphics.life-balance.desktop"],
  ["lbe", "application/vnd.llamagraphics.life-balance.exchange+xml"],
  ["les", "application/vnd.hhe.lesson-player"],
  ["less", "text/less"],
  ["lgr", "application/lgr+xml"],
  ["lha", "application/octet-stream"],
  ["link66", "application/vnd.route66.link66+xml"],
  ["list", "text/plain"],
  ["list3820", "application/vnd.ibm.modcap"],
  ["listafp", "application/vnd.ibm.modcap"],
  ["litcoffee", "text/coffeescript"],
  ["lnk", "application/x-ms-shortcut"],
  ["log", "text/plain"],
  ["lostxml", "application/lost+xml"],
  ["lrf", "application/octet-stream"],
  ["lrm", "application/vnd.ms-lrm"],
  ["ltf", "application/vnd.frogans.ltf"],
  ["lua", "text/x-lua"],
  ["luac", "application/x-lua-bytecode"],
  ["lvp", "audio/vnd.lucent.voice"],
  ["lwp", "application/vnd.lotus-wordpro"],
  ["lzh", "application/octet-stream"],
  ["m1v", "video/mpeg"],
  ["m2a", "audio/mpeg"],
  ["m2v", "video/mpeg"],
  ["m3a", "audio/mpeg"],
  ["m3u", "text/plain"],
  ["m3u8", "application/vnd.apple.mpegurl"],
  ["m4a", "audio/x-m4a"],
  ["m4p", "application/mp4"],
  ["m4s", "video/iso.segment"],
  ["m4u", "application/vnd.mpegurl"],
  ["m4v", "video/x-m4v"],
  ["m13", "application/x-msmediaview"],
  ["m14", "application/x-msmediaview"],
  ["m21", "application/mp21"],
  ["ma", "application/mathematica"],
  ["mads", "application/mads+xml"],
  ["maei", "application/mmt-aei+xml"],
  ["mag", "application/vnd.ecowin.chart"],
  ["maker", "application/vnd.framemaker"],
  ["man", "text/troff"],
  ["manifest", "text/cache-manifest"],
  ["map", "application/json"],
  ["mar", "application/octet-stream"],
  ["markdown", "text/markdown"],
  ["mathml", "application/mathml+xml"],
  ["mb", "application/mathematica"],
  ["mbk", "application/vnd.mobius.mbk"],
  ["mbox", "application/mbox"],
  ["mc1", "application/vnd.medcalcdata"],
  ["mcd", "application/vnd.mcd"],
  ["mcurl", "text/vnd.curl.mcurl"],
  ["md", "text/markdown"],
  ["mdb", "application/x-msaccess"],
  ["mdi", "image/vnd.ms-modi"],
  ["mdx", "text/mdx"],
  ["me", "text/troff"],
  ["mesh", "model/mesh"],
  ["meta4", "application/metalink4+xml"],
  ["metalink", "application/metalink+xml"],
  ["mets", "application/mets+xml"],
  ["mfm", "application/vnd.mfmp"],
  ["mft", "application/rpki-manifest"],
  ["mgp", "application/vnd.osgeo.mapguide.package"],
  ["mgz", "application/vnd.proteus.magazine"],
  ["mid", "audio/midi"],
  ["midi", "audio/midi"],
  ["mie", "application/x-mie"],
  ["mif", "application/vnd.mif"],
  ["mime", "message/rfc822"],
  ["mj2", "video/mj2"],
  ["mjp2", "video/mj2"],
  ["mjs", "application/javascript"],
  ["mk3d", "video/x-matroska"],
  ["mka", "audio/x-matroska"],
  ["mkd", "text/x-markdown"],
  ["mks", "video/x-matroska"],
  ["mkv", "video/x-matroska"],
  ["mlp", "application/vnd.dolby.mlp"],
  ["mmd", "application/vnd.chipnuts.karaoke-mmd"],
  ["mmf", "application/vnd.smaf"],
  ["mml", "text/mathml"],
  ["mmr", "image/vnd.fujixerox.edmics-mmr"],
  ["mng", "video/x-mng"],
  ["mny", "application/x-msmoney"],
  ["mobi", "application/x-mobipocket-ebook"],
  ["mods", "application/mods+xml"],
  ["mov", "video/quicktime"],
  ["movie", "video/x-sgi-movie"],
  ["mp2", "audio/mpeg"],
  ["mp2a", "audio/mpeg"],
  ["mp3", "audio/mpeg"],
  ["mp4", "video/mp4"],
  ["mp4a", "audio/mp4"],
  ["mp4s", "application/mp4"],
  ["mp4v", "video/mp4"],
  ["mp21", "application/mp21"],
  ["mpc", "application/vnd.mophun.certificate"],
  ["mpd", "application/dash+xml"],
  ["mpe", "video/mpeg"],
  ["mpeg", "video/mpeg"],
  ["mpg", "video/mpeg"],
  ["mpg4", "video/mp4"],
  ["mpga", "audio/mpeg"],
  ["mpkg", "application/vnd.apple.installer+xml"],
  ["mpm", "application/vnd.blueice.multipass"],
  ["mpn", "application/vnd.mophun.application"],
  ["mpp", "application/vnd.ms-project"],
  ["mpt", "application/vnd.ms-project"],
  ["mpy", "application/vnd.ibm.minipay"],
  ["mqy", "application/vnd.mobius.mqy"],
  ["mrc", "application/marc"],
  ["mrcx", "application/marcxml+xml"],
  ["ms", "text/troff"],
  ["mscml", "application/mediaservercontrol+xml"],
  ["mseed", "application/vnd.fdsn.mseed"],
  ["mseq", "application/vnd.mseq"],
  ["msf", "application/vnd.epson.msf"],
  ["msg", "application/vnd.ms-outlook"],
  ["msh", "model/mesh"],
  ["msi", "application/x-msdownload"],
  ["msl", "application/vnd.mobius.msl"],
  ["msm", "application/octet-stream"],
  ["msp", "application/octet-stream"],
  ["msty", "application/vnd.muvee.style"],
  ["mtl", "model/mtl"],
  ["mts", "model/vnd.mts"],
  ["mus", "application/vnd.musician"],
  ["musd", "application/mmt-usd+xml"],
  ["musicxml", "application/vnd.recordare.musicxml+xml"],
  ["mvb", "application/x-msmediaview"],
  ["mvt", "application/vnd.mapbox-vector-tile"],
  ["mwf", "application/vnd.mfer"],
  ["mxf", "application/mxf"],
  ["mxl", "application/vnd.recordare.musicxml"],
  ["mxmf", "audio/mobile-xmf"],
  ["mxml", "application/xv+xml"],
  ["mxs", "application/vnd.triscape.mxs"],
  ["mxu", "video/vnd.mpegurl"],
  ["n-gage", "application/vnd.nokia.n-gage.symbian.install"],
  ["n3", "text/n3"],
  ["nb", "application/mathematica"],
  ["nbp", "application/vnd.wolfram.player"],
  ["nc", "application/x-netcdf"],
  ["ncx", "application/x-dtbncx+xml"],
  ["nfo", "text/x-nfo"],
  ["ngdat", "application/vnd.nokia.n-gage.data"],
  ["nitf", "application/vnd.nitf"],
  ["nlu", "application/vnd.neurolanguage.nlu"],
  ["nml", "application/vnd.enliven"],
  ["nnd", "application/vnd.noblenet-directory"],
  ["nns", "application/vnd.noblenet-sealer"],
  ["nnw", "application/vnd.noblenet-web"],
  ["npx", "image/vnd.net-fpx"],
  ["nq", "application/n-quads"],
  ["nsc", "application/x-conference"],
  ["nsf", "application/vnd.lotus-notes"],
  ["nt", "application/n-triples"],
  ["ntf", "application/vnd.nitf"],
  ["numbers", "application/x-iwork-numbers-sffnumbers"],
  ["nzb", "application/x-nzb"],
  ["oa2", "application/vnd.fujitsu.oasys2"],
  ["oa3", "application/vnd.fujitsu.oasys3"],
  ["oas", "application/vnd.fujitsu.oasys"],
  ["obd", "application/x-msbinder"],
  ["obgx", "application/vnd.openblox.game+xml"],
  ["obj", "model/obj"],
  ["oda", "application/oda"],
  ["odb", "application/vnd.oasis.opendocument.database"],
  ["odc", "application/vnd.oasis.opendocument.chart"],
  ["odf", "application/vnd.oasis.opendocument.formula"],
  ["odft", "application/vnd.oasis.opendocument.formula-template"],
  ["odg", "application/vnd.oasis.opendocument.graphics"],
  ["odi", "application/vnd.oasis.opendocument.image"],
  ["odm", "application/vnd.oasis.opendocument.text-master"],
  ["odp", "application/vnd.oasis.opendocument.presentation"],
  ["ods", "application/vnd.oasis.opendocument.spreadsheet"],
  ["odt", "application/vnd.oasis.opendocument.text"],
  ["oga", "audio/ogg"],
  ["ogex", "model/vnd.opengex"],
  ["ogg", "audio/ogg"],
  ["ogv", "video/ogg"],
  ["ogx", "application/ogg"],
  ["omdoc", "application/omdoc+xml"],
  ["onepkg", "application/onenote"],
  ["onetmp", "application/onenote"],
  ["onetoc", "application/onenote"],
  ["onetoc2", "application/onenote"],
  ["opf", "application/oebps-package+xml"],
  ["opml", "text/x-opml"],
  ["oprc", "application/vnd.palm"],
  ["opus", "audio/ogg"],
  ["org", "text/x-org"],
  ["osf", "application/vnd.yamaha.openscoreformat"],
  ["osfpvg", "application/vnd.yamaha.openscoreformat.osfpvg+xml"],
  ["osm", "application/vnd.openstreetmap.data+xml"],
  ["otc", "application/vnd.oasis.opendocument.chart-template"],
  ["otf", "font/otf"],
  ["otg", "application/vnd.oasis.opendocument.graphics-template"],
  ["oth", "application/vnd.oasis.opendocument.text-web"],
  ["oti", "application/vnd.oasis.opendocument.image-template"],
  ["otp", "application/vnd.oasis.opendocument.presentation-template"],
  ["ots", "application/vnd.oasis.opendocument.spreadsheet-template"],
  ["ott", "application/vnd.oasis.opendocument.text-template"],
  ["ova", "application/x-virtualbox-ova"],
  ["ovf", "application/x-virtualbox-ovf"],
  ["owl", "application/rdf+xml"],
  ["oxps", "application/oxps"],
  ["oxt", "application/vnd.openofficeorg.extension"],
  ["p", "text/x-pascal"],
  ["p7a", "application/x-pkcs7-signature"],
  ["p7b", "application/x-pkcs7-certificates"],
  ["p7c", "application/pkcs7-mime"],
  ["p7m", "application/pkcs7-mime"],
  ["p7r", "application/x-pkcs7-certreqresp"],
  ["p7s", "application/pkcs7-signature"],
  ["p8", "application/pkcs8"],
  ["p10", "application/x-pkcs10"],
  ["p12", "application/x-pkcs12"],
  ["pac", "application/x-ns-proxy-autoconfig"],
  ["pages", "application/x-iwork-pages-sffpages"],
  ["pas", "text/x-pascal"],
  ["paw", "application/vnd.pawaafile"],
  ["pbd", "application/vnd.powerbuilder6"],
  ["pbm", "image/x-portable-bitmap"],
  ["pcap", "application/vnd.tcpdump.pcap"],
  ["pcf", "application/x-font-pcf"],
  ["pcl", "application/vnd.hp-pcl"],
  ["pclxl", "application/vnd.hp-pclxl"],
  ["pct", "image/x-pict"],
  ["pcurl", "application/vnd.curl.pcurl"],
  ["pcx", "image/x-pcx"],
  ["pdb", "application/x-pilot"],
  ["pde", "text/x-processing"],
  ["pdf", "application/pdf"],
  ["pem", "application/x-x509-user-cert"],
  ["pfa", "application/x-font-type1"],
  ["pfb", "application/x-font-type1"],
  ["pfm", "application/x-font-type1"],
  ["pfr", "application/font-tdpfr"],
  ["pfx", "application/x-pkcs12"],
  ["pgm", "image/x-portable-graymap"],
  ["pgn", "application/x-chess-pgn"],
  ["pgp", "application/pgp"],
  ["php", "application/x-httpd-php"],
  ["php3", "application/x-httpd-php"],
  ["php4", "application/x-httpd-php"],
  ["phps", "application/x-httpd-php-source"],
  ["phtml", "application/x-httpd-php"],
  ["pic", "image/x-pict"],
  ["pkg", "application/octet-stream"],
  ["pki", "application/pkixcmp"],
  ["pkipath", "application/pkix-pkipath"],
  ["pkpass", "application/vnd.apple.pkpass"],
  ["pl", "application/x-perl"],
  ["plb", "application/vnd.3gpp.pic-bw-large"],
  ["plc", "application/vnd.mobius.plc"],
  ["plf", "application/vnd.pocketlearn"],
  ["pls", "application/pls+xml"],
  ["pm", "application/x-perl"],
  ["pml", "application/vnd.ctc-posml"],
  ["png", "image/png"],
  ["pnm", "image/x-portable-anymap"],
  ["portpkg", "application/vnd.macports.portpkg"],
  ["pot", "application/vnd.ms-powerpoint"],
  ["potm", "application/vnd.ms-powerpoint.presentation.macroEnabled.12"],
  ["potx", "application/vnd.openxmlformats-officedocument.presentationml.template"],
  ["ppa", "application/vnd.ms-powerpoint"],
  ["ppam", "application/vnd.ms-powerpoint.addin.macroEnabled.12"],
  ["ppd", "application/vnd.cups-ppd"],
  ["ppm", "image/x-portable-pixmap"],
  ["pps", "application/vnd.ms-powerpoint"],
  ["ppsm", "application/vnd.ms-powerpoint.slideshow.macroEnabled.12"],
  ["ppsx", "application/vnd.openxmlformats-officedocument.presentationml.slideshow"],
  ["ppt", "application/powerpoint"],
  ["pptm", "application/vnd.ms-powerpoint.presentation.macroEnabled.12"],
  ["pptx", "application/vnd.openxmlformats-officedocument.presentationml.presentation"],
  ["pqa", "application/vnd.palm"],
  ["prc", "application/x-pilot"],
  ["pre", "application/vnd.lotus-freelance"],
  ["prf", "application/pics-rules"],
  ["provx", "application/provenance+xml"],
  ["ps", "application/postscript"],
  ["psb", "application/vnd.3gpp.pic-bw-small"],
  ["psd", "application/x-photoshop"],
  ["psf", "application/x-font-linux-psf"],
  ["pskcxml", "application/pskc+xml"],
  ["pti", "image/prs.pti"],
  ["ptid", "application/vnd.pvi.ptid1"],
  ["pub", "application/x-mspublisher"],
  ["pvb", "application/vnd.3gpp.pic-bw-var"],
  ["pwn", "application/vnd.3m.post-it-notes"],
  ["pya", "audio/vnd.ms-playready.media.pya"],
  ["pyv", "video/vnd.ms-playready.media.pyv"],
  ["qam", "application/vnd.epson.quickanime"],
  ["qbo", "application/vnd.intu.qbo"],
  ["qfx", "application/vnd.intu.qfx"],
  ["qps", "application/vnd.publishare-delta-tree"],
  ["qt", "video/quicktime"],
  ["qwd", "application/vnd.quark.quarkxpress"],
  ["qwt", "application/vnd.quark.quarkxpress"],
  ["qxb", "application/vnd.quark.quarkxpress"],
  ["qxd", "application/vnd.quark.quarkxpress"],
  ["qxl", "application/vnd.quark.quarkxpress"],
  ["qxt", "application/vnd.quark.quarkxpress"],
  ["ra", "audio/x-realaudio"],
  ["ram", "audio/x-pn-realaudio"],
  ["raml", "application/raml+yaml"],
  ["rapd", "application/route-apd+xml"],
  ["rar", "application/x-rar"],
  ["ras", "image/x-cmu-raster"],
  ["rcprofile", "application/vnd.ipunplugged.rcprofile"],
  ["rdf", "application/rdf+xml"],
  ["rdz", "application/vnd.data-vision.rdz"],
  ["relo", "application/p2p-overlay+xml"],
  ["rep", "application/vnd.businessobjects"],
  ["res", "application/x-dtbresource+xml"],
  ["rgb", "image/x-rgb"],
  ["rif", "application/reginfo+xml"],
  ["rip", "audio/vnd.rip"],
  ["ris", "application/x-research-info-systems"],
  ["rl", "application/resource-lists+xml"],
  ["rlc", "image/vnd.fujixerox.edmics-rlc"],
  ["rld", "application/resource-lists-diff+xml"],
  ["rm", "audio/x-pn-realaudio"],
  ["rmi", "audio/midi"],
  ["rmp", "audio/x-pn-realaudio-plugin"],
  ["rms", "application/vnd.jcp.javame.midlet-rms"],
  ["rmvb", "application/vnd.rn-realmedia-vbr"],
  ["rnc", "application/relax-ng-compact-syntax"],
  ["rng", "application/xml"],
  ["roa", "application/rpki-roa"],
  ["roff", "text/troff"],
  ["rp9", "application/vnd.cloanto.rp9"],
  ["rpm", "audio/x-pn-realaudio-plugin"],
  ["rpss", "application/vnd.nokia.radio-presets"],
  ["rpst", "application/vnd.nokia.radio-preset"],
  ["rq", "application/sparql-query"],
  ["rs", "application/rls-services+xml"],
  ["rsa", "application/x-pkcs7"],
  ["rsat", "application/atsc-rsat+xml"],
  ["rsd", "application/rsd+xml"],
  ["rsheet", "application/urc-ressheet+xml"],
  ["rss", "application/rss+xml"],
  ["rtf", "text/rtf"],
  ["rtx", "text/richtext"],
  ["run", "application/x-makeself"],
  ["rusd", "application/route-usd+xml"],
  ["rv", "video/vnd.rn-realvideo"],
  ["s", "text/x-asm"],
  ["s3m", "audio/s3m"],
  ["saf", "application/vnd.yamaha.smaf-audio"],
  ["sass", "text/x-sass"],
  ["sbml", "application/sbml+xml"],
  ["sc", "application/vnd.ibm.secure-container"],
  ["scd", "application/x-msschedule"],
  ["scm", "application/vnd.lotus-screencam"],
  ["scq", "application/scvp-cv-request"],
  ["scs", "application/scvp-cv-response"],
  ["scss", "text/x-scss"],
  ["scurl", "text/vnd.curl.scurl"],
  ["sda", "application/vnd.stardivision.draw"],
  ["sdc", "application/vnd.stardivision.calc"],
  ["sdd", "application/vnd.stardivision.impress"],
  ["sdkd", "application/vnd.solent.sdkm+xml"],
  ["sdkm", "application/vnd.solent.sdkm+xml"],
  ["sdp", "application/sdp"],
  ["sdw", "application/vnd.stardivision.writer"],
  ["sea", "application/octet-stream"],
  ["see", "application/vnd.seemail"],
  ["seed", "application/vnd.fdsn.seed"],
  ["sema", "application/vnd.sema"],
  ["semd", "application/vnd.semd"],
  ["semf", "application/vnd.semf"],
  ["senmlx", "application/senml+xml"],
  ["sensmlx", "application/sensml+xml"],
  ["ser", "application/java-serialized-object"],
  ["setpay", "application/set-payment-initiation"],
  ["setreg", "application/set-registration-initiation"],
  ["sfd-hdstx", "application/vnd.hydrostatix.sof-data"],
  ["sfs", "application/vnd.spotfire.sfs"],
  ["sfv", "text/x-sfv"],
  ["sgi", "image/sgi"],
  ["sgl", "application/vnd.stardivision.writer-global"],
  ["sgm", "text/sgml"],
  ["sgml", "text/sgml"],
  ["sh", "application/x-sh"],
  ["shar", "application/x-shar"],
  ["shex", "text/shex"],
  ["shf", "application/shf+xml"],
  ["shtml", "text/html"],
  ["sid", "image/x-mrsid-image"],
  ["sieve", "application/sieve"],
  ["sig", "application/pgp-signature"],
  ["sil", "audio/silk"],
  ["silo", "model/mesh"],
  ["sis", "application/vnd.symbian.install"],
  ["sisx", "application/vnd.symbian.install"],
  ["sit", "application/x-stuffit"],
  ["sitx", "application/x-stuffitx"],
  ["siv", "application/sieve"],
  ["skd", "application/vnd.koan"],
  ["skm", "application/vnd.koan"],
  ["skp", "application/vnd.koan"],
  ["skt", "application/vnd.koan"],
  ["sldm", "application/vnd.ms-powerpoint.slide.macroenabled.12"],
  ["sldx", "application/vnd.openxmlformats-officedocument.presentationml.slide"],
  ["slim", "text/slim"],
  ["slm", "text/slim"],
  ["sls", "application/route-s-tsid+xml"],
  ["slt", "application/vnd.epson.salt"],
  ["sm", "application/vnd.stepmania.stepchart"],
  ["smf", "application/vnd.stardivision.math"],
  ["smi", "application/smil"],
  ["smil", "application/smil"],
  ["smv", "video/x-smv"],
  ["smzip", "application/vnd.stepmania.package"],
  ["snd", "audio/basic"],
  ["snf", "application/x-font-snf"],
  ["so", "application/octet-stream"],
  ["spc", "application/x-pkcs7-certificates"],
  ["spdx", "text/spdx"],
  ["spf", "application/vnd.yamaha.smaf-phrase"],
  ["spl", "application/x-futuresplash"],
  ["spot", "text/vnd.in3d.spot"],
  ["spp", "application/scvp-vp-response"],
  ["spq", "application/scvp-vp-request"],
  ["spx", "audio/ogg"],
  ["sql", "application/x-sql"],
  ["src", "application/x-wais-source"],
  ["srt", "application/x-subrip"],
  ["sru", "application/sru+xml"],
  ["srx", "application/sparql-results+xml"],
  ["ssdl", "application/ssdl+xml"],
  ["sse", "application/vnd.kodak-descriptor"],
  ["ssf", "application/vnd.epson.ssf"],
  ["ssml", "application/ssml+xml"],
  ["sst", "application/octet-stream"],
  ["st", "application/vnd.sailingtracker.track"],
  ["stc", "application/vnd.sun.xml.calc.template"],
  ["std", "application/vnd.sun.xml.draw.template"],
  ["stf", "application/vnd.wt.stf"],
  ["sti", "application/vnd.sun.xml.impress.template"],
  ["stk", "application/hyperstudio"],
  ["stl", "model/stl"],
  ["stpx", "model/step+xml"],
  ["stpxz", "model/step-xml+zip"],
  ["stpz", "model/step+zip"],
  ["str", "application/vnd.pg.format"],
  ["stw", "application/vnd.sun.xml.writer.template"],
  ["styl", "text/stylus"],
  ["stylus", "text/stylus"],
  ["sub", "text/vnd.dvb.subtitle"],
  ["sus", "application/vnd.sus-calendar"],
  ["susp", "application/vnd.sus-calendar"],
  ["sv4cpio", "application/x-sv4cpio"],
  ["sv4crc", "application/x-sv4crc"],
  ["svc", "application/vnd.dvb.service"],
  ["svd", "application/vnd.svd"],
  ["svg", "image/svg+xml"],
  ["svgz", "image/svg+xml"],
  ["swa", "application/x-director"],
  ["swf", "application/x-shockwave-flash"],
  ["swi", "application/vnd.aristanetworks.swi"],
  ["swidtag", "application/swid+xml"],
  ["sxc", "application/vnd.sun.xml.calc"],
  ["sxd", "application/vnd.sun.xml.draw"],
  ["sxg", "application/vnd.sun.xml.writer.global"],
  ["sxi", "application/vnd.sun.xml.impress"],
  ["sxm", "application/vnd.sun.xml.math"],
  ["sxw", "application/vnd.sun.xml.writer"],
  ["t", "text/troff"],
  ["t3", "application/x-t3vm-image"],
  ["t38", "image/t38"],
  ["taglet", "application/vnd.mynfc"],
  ["tao", "application/vnd.tao.intent-module-archive"],
  ["tap", "image/vnd.tencent.tap"],
  ["tar", "application/x-tar"],
  ["tcap", "application/vnd.3gpp2.tcap"],
  ["tcl", "application/x-tcl"],
  ["td", "application/urc-targetdesc+xml"],
  ["teacher", "application/vnd.smart.teacher"],
  ["tei", "application/tei+xml"],
  ["teicorpus", "application/tei+xml"],
  ["tex", "application/x-tex"],
  ["texi", "application/x-texinfo"],
  ["texinfo", "application/x-texinfo"],
  ["text", "text/plain"],
  ["tfi", "application/thraud+xml"],
  ["tfm", "application/x-tex-tfm"],
  ["tfx", "image/tiff-fx"],
  ["tga", "image/x-tga"],
  ["tgz", "application/x-tar"],
  ["thmx", "application/vnd.ms-officetheme"],
  ["tif", "image/tiff"],
  ["tiff", "image/tiff"],
  ["tk", "application/x-tcl"],
  ["tmo", "application/vnd.tmobile-livetv"],
  ["toml", "application/toml"],
  ["torrent", "application/x-bittorrent"],
  ["tpl", "application/vnd.groove-tool-template"],
  ["tpt", "application/vnd.trid.tpt"],
  ["tr", "text/troff"],
  ["tra", "application/vnd.trueapp"],
  ["trig", "application/trig"],
  ["trm", "application/x-msterminal"],
  ["ts", "video/mp2t"],
  ["tsd", "application/timestamped-data"],
  ["tsv", "text/tab-separated-values"],
  ["ttc", "font/collection"],
  ["ttf", "font/ttf"],
  ["ttl", "text/turtle"],
  ["ttml", "application/ttml+xml"],
  ["twd", "application/vnd.simtech-mindmapper"],
  ["twds", "application/vnd.simtech-mindmapper"],
  ["txd", "application/vnd.genomatix.tuxedo"],
  ["txf", "application/vnd.mobius.txf"],
  ["txt", "text/plain"],
  ["u8dsn", "message/global-delivery-status"],
  ["u8hdr", "message/global-headers"],
  ["u8mdn", "message/global-disposition-notification"],
  ["u8msg", "message/global"],
  ["u32", "application/x-authorware-bin"],
  ["ubj", "application/ubjson"],
  ["udeb", "application/x-debian-package"],
  ["ufd", "application/vnd.ufdl"],
  ["ufdl", "application/vnd.ufdl"],
  ["ulx", "application/x-glulx"],
  ["umj", "application/vnd.umajin"],
  ["unityweb", "application/vnd.unity"],
  ["uoml", "application/vnd.uoml+xml"],
  ["uri", "text/uri-list"],
  ["uris", "text/uri-list"],
  ["urls", "text/uri-list"],
  ["usdz", "model/vnd.usdz+zip"],
  ["ustar", "application/x-ustar"],
  ["utz", "application/vnd.uiq.theme"],
  ["uu", "text/x-uuencode"],
  ["uva", "audio/vnd.dece.audio"],
  ["uvd", "application/vnd.dece.data"],
  ["uvf", "application/vnd.dece.data"],
  ["uvg", "image/vnd.dece.graphic"],
  ["uvh", "video/vnd.dece.hd"],
  ["uvi", "image/vnd.dece.graphic"],
  ["uvm", "video/vnd.dece.mobile"],
  ["uvp", "video/vnd.dece.pd"],
  ["uvs", "video/vnd.dece.sd"],
  ["uvt", "application/vnd.dece.ttml+xml"],
  ["uvu", "video/vnd.uvvu.mp4"],
  ["uvv", "video/vnd.dece.video"],
  ["uvva", "audio/vnd.dece.audio"],
  ["uvvd", "application/vnd.dece.data"],
  ["uvvf", "application/vnd.dece.data"],
  ["uvvg", "image/vnd.dece.graphic"],
  ["uvvh", "video/vnd.dece.hd"],
  ["uvvi", "image/vnd.dece.graphic"],
  ["uvvm", "video/vnd.dece.mobile"],
  ["uvvp", "video/vnd.dece.pd"],
  ["uvvs", "video/vnd.dece.sd"],
  ["uvvt", "application/vnd.dece.ttml+xml"],
  ["uvvu", "video/vnd.uvvu.mp4"],
  ["uvvv", "video/vnd.dece.video"],
  ["uvvx", "application/vnd.dece.unspecified"],
  ["uvvz", "application/vnd.dece.zip"],
  ["uvx", "application/vnd.dece.unspecified"],
  ["uvz", "application/vnd.dece.zip"],
  ["vbox", "application/x-virtualbox-vbox"],
  ["vbox-extpack", "application/x-virtualbox-vbox-extpack"],
  ["vcard", "text/vcard"],
  ["vcd", "application/x-cdlink"],
  ["vcf", "text/x-vcard"],
  ["vcg", "application/vnd.groove-vcard"],
  ["vcs", "text/x-vcalendar"],
  ["vcx", "application/vnd.vcx"],
  ["vdi", "application/x-virtualbox-vdi"],
  ["vds", "model/vnd.sap.vds"],
  ["vhd", "application/x-virtualbox-vhd"],
  ["vis", "application/vnd.visionary"],
  ["viv", "video/vnd.vivo"],
  ["vlc", "application/videolan"],
  ["vmdk", "application/x-virtualbox-vmdk"],
  ["vob", "video/x-ms-vob"],
  ["vor", "application/vnd.stardivision.writer"],
  ["vox", "application/x-authorware-bin"],
  ["vrml", "model/vrml"],
  ["vsd", "application/vnd.visio"],
  ["vsf", "application/vnd.vsf"],
  ["vss", "application/vnd.visio"],
  ["vst", "application/vnd.visio"],
  ["vsw", "application/vnd.visio"],
  ["vtf", "image/vnd.valve.source.texture"],
  ["vtt", "text/vtt"],
  ["vtu", "model/vnd.vtu"],
  ["vxml", "application/voicexml+xml"],
  ["w3d", "application/x-director"],
  ["wad", "application/x-doom"],
  ["wadl", "application/vnd.sun.wadl+xml"],
  ["war", "application/java-archive"],
  ["wasm", "application/wasm"],
  ["wav", "audio/x-wav"],
  ["wax", "audio/x-ms-wax"],
  ["wbmp", "image/vnd.wap.wbmp"],
  ["wbs", "application/vnd.criticaltools.wbs+xml"],
  ["wbxml", "application/wbxml"],
  ["wcm", "application/vnd.ms-works"],
  ["wdb", "application/vnd.ms-works"],
  ["wdp", "image/vnd.ms-photo"],
  ["weba", "audio/webm"],
  ["webapp", "application/x-web-app-manifest+json"],
  ["webm", "video/webm"],
  ["webmanifest", "application/manifest+json"],
  ["webp", "image/webp"],
  ["wg", "application/vnd.pmi.widget"],
  ["wgt", "application/widget"],
  ["wks", "application/vnd.ms-works"],
  ["wm", "video/x-ms-wm"],
  ["wma", "audio/x-ms-wma"],
  ["wmd", "application/x-ms-wmd"],
  ["wmf", "image/wmf"],
  ["wml", "text/vnd.wap.wml"],
  ["wmlc", "application/wmlc"],
  ["wmls", "text/vnd.wap.wmlscript"],
  ["wmlsc", "application/vnd.wap.wmlscriptc"],
  ["wmv", "video/x-ms-wmv"],
  ["wmx", "video/x-ms-wmx"],
  ["wmz", "application/x-msmetafile"],
  ["woff", "font/woff"],
  ["woff2", "font/woff2"],
  ["word", "application/msword"],
  ["wpd", "application/vnd.wordperfect"],
  ["wpl", "application/vnd.ms-wpl"],
  ["wps", "application/vnd.ms-works"],
  ["wqd", "application/vnd.wqd"],
  ["wri", "application/x-mswrite"],
  ["wrl", "model/vrml"],
  ["wsc", "message/vnd.wfa.wsc"],
  ["wsdl", "application/wsdl+xml"],
  ["wspolicy", "application/wspolicy+xml"],
  ["wtb", "application/vnd.webturbo"],
  ["wvx", "video/x-ms-wvx"],
  ["x3d", "model/x3d+xml"],
  ["x3db", "model/x3d+fastinfoset"],
  ["x3dbz", "model/x3d+binary"],
  ["x3dv", "model/x3d-vrml"],
  ["x3dvz", "model/x3d+vrml"],
  ["x3dz", "model/x3d+xml"],
  ["x32", "application/x-authorware-bin"],
  ["x_b", "model/vnd.parasolid.transmit.binary"],
  ["x_t", "model/vnd.parasolid.transmit.text"],
  ["xaml", "application/xaml+xml"],
  ["xap", "application/x-silverlight-app"],
  ["xar", "application/vnd.xara"],
  ["xav", "application/xcap-att+xml"],
  ["xbap", "application/x-ms-xbap"],
  ["xbd", "application/vnd.fujixerox.docuworks.binder"],
  ["xbm", "image/x-xbitmap"],
  ["xca", "application/xcap-caps+xml"],
  ["xcs", "application/calendar+xml"],
  ["xdf", "application/xcap-diff+xml"],
  ["xdm", "application/vnd.syncml.dm+xml"],
  ["xdp", "application/vnd.adobe.xdp+xml"],
  ["xdssc", "application/dssc+xml"],
  ["xdw", "application/vnd.fujixerox.docuworks"],
  ["xel", "application/xcap-el+xml"],
  ["xenc", "application/xenc+xml"],
  ["xer", "application/patch-ops-error+xml"],
  ["xfdf", "application/vnd.adobe.xfdf"],
  ["xfdl", "application/vnd.xfdl"],
  ["xht", "application/xhtml+xml"],
  ["xhtml", "application/xhtml+xml"],
  ["xhvml", "application/xv+xml"],
  ["xif", "image/vnd.xiff"],
  ["xl", "application/excel"],
  ["xla", "application/vnd.ms-excel"],
  ["xlam", "application/vnd.ms-excel.addin.macroEnabled.12"],
  ["xlc", "application/vnd.ms-excel"],
  ["xlf", "application/xliff+xml"],
  ["xlm", "application/vnd.ms-excel"],
  ["xls", "application/vnd.ms-excel"],
  ["xlsb", "application/vnd.ms-excel.sheet.binary.macroEnabled.12"],
  ["xlsm", "application/vnd.ms-excel.sheet.macroEnabled.12"],
  ["xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"],
  ["xlt", "application/vnd.ms-excel"],
  ["xltm", "application/vnd.ms-excel.template.macroEnabled.12"],
  ["xltx", "application/vnd.openxmlformats-officedocument.spreadsheetml.template"],
  ["xlw", "application/vnd.ms-excel"],
  ["xm", "audio/xm"],
  ["xml", "application/xml"],
  ["xns", "application/xcap-ns+xml"],
  ["xo", "application/vnd.olpc-sugar"],
  ["xop", "application/xop+xml"],
  ["xpi", "application/x-xpinstall"],
  ["xpl", "application/xproc+xml"],
  ["xpm", "image/x-xpixmap"],
  ["xpr", "application/vnd.is-xpr"],
  ["xps", "application/vnd.ms-xpsdocument"],
  ["xpw", "application/vnd.intercon.formnet"],
  ["xpx", "application/vnd.intercon.formnet"],
  ["xsd", "application/xml"],
  ["xsl", "application/xml"],
  ["xslt", "application/xslt+xml"],
  ["xsm", "application/vnd.syncml+xml"],
  ["xspf", "application/xspf+xml"],
  ["xul", "application/vnd.mozilla.xul+xml"],
  ["xvm", "application/xv+xml"],
  ["xvml", "application/xv+xml"],
  ["xwd", "image/x-xwindowdump"],
  ["xyz", "chemical/x-xyz"],
  ["xz", "application/x-xz"],
  ["yaml", "text/yaml"],
  ["yang", "application/yang"],
  ["yin", "application/yin+xml"],
  ["yml", "text/yaml"],
  ["ymp", "text/x-suse-ymp"],
  ["z", "application/x-compress"],
  ["z1", "application/x-zmachine"],
  ["z2", "application/x-zmachine"],
  ["z3", "application/x-zmachine"],
  ["z4", "application/x-zmachine"],
  ["z5", "application/x-zmachine"],
  ["z6", "application/x-zmachine"],
  ["z7", "application/x-zmachine"],
  ["z8", "application/x-zmachine"],
  ["zaz", "application/vnd.zzazz.deck+xml"],
  ["zip", "application/zip"],
  ["zir", "application/vnd.zul"],
  ["zirz", "application/vnd.zul"],
  ["zmm", "application/vnd.handheld-entertainment+xml"],
  ["zsh", "text/x-scriptzsh"]
]);
function toFileWithPath(file, path2, h) {
  const f = withMimeType(file);
  const { webkitRelativePath } = file;
  const p = typeof path2 === "string" ? path2 : typeof webkitRelativePath === "string" && webkitRelativePath.length > 0 ? webkitRelativePath : `./${file.name}`;
  if (typeof f.path !== "string") {
    setObjProp(f, "path", p);
  }
  if (h !== void 0) {
    Object.defineProperty(f, "handle", {
      value: h,
      writable: false,
      configurable: false,
      enumerable: true
    });
  }
  setObjProp(f, "relativePath", p);
  return f;
}
function withMimeType(file) {
  const { name } = file;
  const hasExtension = name && name.lastIndexOf(".") !== -1;
  if (hasExtension && !file.type) {
    const ext = name.split(".").pop().toLowerCase();
    const type = COMMON_MIME_TYPES.get(ext);
    if (type) {
      Object.defineProperty(file, "type", {
        value: type,
        writable: false,
        configurable: false,
        enumerable: true
      });
    }
  }
  return file;
}
function setObjProp(f, key, value) {
  Object.defineProperty(f, key, {
    value,
    writable: false,
    configurable: false,
    enumerable: true
  });
}

// node_modules/file-selector/dist/es2015/file-selector.js
var FILES_TO_IGNORE = [
  // Thumbnail cache files for macOS and Windows
  ".DS_Store",
  // macOs
  "Thumbs.db"
  // Windows
];
function fromEvent(evt) {
  return __awaiter(this, void 0, void 0, function* () {
    if (isObject(evt) && isDataTransfer(evt.dataTransfer)) {
      return getDataTransferFiles(evt.dataTransfer, evt.type);
    } else if (isChangeEvt(evt)) {
      return getInputFiles(evt);
    } else if (Array.isArray(evt) && evt.every((item) => "getFile" in item && typeof item.getFile === "function")) {
      return getFsHandleFiles(evt);
    }
    return [];
  });
}
function isDataTransfer(value) {
  return isObject(value);
}
function isChangeEvt(value) {
  return isObject(value) && isObject(value.target);
}
function isObject(v) {
  return typeof v === "object" && v !== null;
}
function getInputFiles(evt) {
  return fromList(evt.target.files).map((file) => toFileWithPath(file));
}
function getFsHandleFiles(handles) {
  return __awaiter(this, void 0, void 0, function* () {
    const files = yield Promise.all(handles.map((h) => h.getFile()));
    return files.map((file) => toFileWithPath(file));
  });
}
function getDataTransferFiles(dt, type) {
  return __awaiter(this, void 0, void 0, function* () {
    if (dt.items) {
      const items = fromList(dt.items).filter((item) => item.kind === "file");
      if (type !== "drop") {
        return items;
      }
      const files = yield Promise.all(items.map(toFilePromises));
      return noIgnoredFiles(flatten(files));
    }
    return noIgnoredFiles(fromList(dt.files).map((file) => toFileWithPath(file)));
  });
}
function noIgnoredFiles(files) {
  return files.filter((file) => FILES_TO_IGNORE.indexOf(file.name) === -1);
}
function fromList(items) {
  if (items === null) {
    return [];
  }
  const files = [];
  for (let i = 0; i < items.length; i++) {
    const file = items[i];
    files.push(file);
  }
  return files;
}
function toFilePromises(item) {
  if (typeof item.webkitGetAsEntry !== "function") {
    return fromDataTransferItem(item);
  }
  const entry = item.webkitGetAsEntry();
  if (entry && entry.isDirectory) {
    return fromDirEntry(entry);
  }
  return fromDataTransferItem(item, entry);
}
function flatten(items) {
  return items.reduce((acc, files) => [
    ...acc,
    ...Array.isArray(files) ? flatten(files) : [files]
  ], []);
}
function fromDataTransferItem(item, entry) {
  return __awaiter(this, void 0, void 0, function* () {
    var _a;
    if (globalThis.isSecureContext && typeof item.getAsFileSystemHandle === "function") {
      const h = yield item.getAsFileSystemHandle();
      if (h === null) {
        throw new Error(`${item} is not a File`);
      }
      if (h !== void 0) {
        const file2 = yield h.getFile();
        file2.handle = h;
        return toFileWithPath(file2);
      }
    }
    const file = item.getAsFile();
    if (!file) {
      throw new Error(`${item} is not a File`);
    }
    const fwp = toFileWithPath(file, (_a = entry === null || entry === void 0 ? void 0 : entry.fullPath) !== null && _a !== void 0 ? _a : void 0);
    return fwp;
  });
}
function fromEntry(entry) {
  return __awaiter(this, void 0, void 0, function* () {
    return entry.isDirectory ? fromDirEntry(entry) : fromFileEntry(entry);
  });
}
function fromDirEntry(entry) {
  const reader = entry.createReader();
  return new Promise((resolve, reject) => {
    const entries = [];
    function readEntries() {
      reader.readEntries((batch) => __awaiter(this, void 0, void 0, function* () {
        if (!batch.length) {
          try {
            const files = yield Promise.all(entries);
            resolve(files);
          } catch (err) {
            reject(err);
          }
        } else {
          const items = Promise.all(batch.map(fromEntry));
          entries.push(items);
          readEntries();
        }
      }), (err) => {
        reject(err);
      });
    }
    readEntries();
  });
}
function fromFileEntry(entry) {
  return __awaiter(this, void 0, void 0, function* () {
    return new Promise((resolve, reject) => {
      entry.file((file) => {
        const fwp = toFileWithPath(file, entry.fullPath);
        resolve(fwp);
      }, (err) => {
        reject(err);
      });
    });
  });
}

// node_modules/react-dropzone/dist/es/utils/index.js
var import_attr_accept = __toESM(require_es(), 1);
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray2(arr) || _unsupportedIterableToArray2(arr) || _nonIterableSpread();
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArray2(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function ownKeys(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty2(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty2(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles2(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray2(arr, i) || _nonIterableRest2();
}
function _nonIterableRest2() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray2(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles2(arr) {
  if (Array.isArray(arr)) return arr;
}
var accepts = typeof import_attr_accept.default === "function" ? import_attr_accept.default : import_attr_accept.default.default;
var FILE_INVALID_TYPE = "file-invalid-type";
var FILE_TOO_LARGE = "file-too-large";
var FILE_TOO_SMALL = "file-too-small";
var TOO_MANY_FILES = "too-many-files";
var getInvalidTypeRejectionErr = function getInvalidTypeRejectionErr2() {
  var accept = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
  var acceptArr = accept.split(",");
  var msg = acceptArr.length > 1 ? "one of ".concat(acceptArr.join(", ")) : acceptArr[0];
  return {
    code: FILE_INVALID_TYPE,
    message: "File type must be ".concat(msg)
  };
};
var getTooLargeRejectionErr = function getTooLargeRejectionErr2(maxSize) {
  return {
    code: FILE_TOO_LARGE,
    message: "File is larger than ".concat(maxSize, " ").concat(maxSize === 1 ? "byte" : "bytes")
  };
};
var getTooSmallRejectionErr = function getTooSmallRejectionErr2(minSize) {
  return {
    code: FILE_TOO_SMALL,
    message: "File is smaller than ".concat(minSize, " ").concat(minSize === 1 ? "byte" : "bytes")
  };
};
var TOO_MANY_FILES_REJECTION = {
  code: TOO_MANY_FILES,
  message: "Too many files"
};
function fileAccepted(file, accept) {
  var isAcceptable = file.type === "application/x-moz-file" || accepts(file, accept);
  return [isAcceptable, isAcceptable ? null : getInvalidTypeRejectionErr(accept)];
}
function fileMatchSize(file, minSize, maxSize) {
  if (isDefined(file.size)) {
    if (isDefined(minSize) && isDefined(maxSize)) {
      if (file.size > maxSize) return [false, getTooLargeRejectionErr(maxSize)];
      if (file.size < minSize) return [false, getTooSmallRejectionErr(minSize)];
    } else if (isDefined(minSize) && file.size < minSize) return [false, getTooSmallRejectionErr(minSize)];
    else if (isDefined(maxSize) && file.size > maxSize) return [false, getTooLargeRejectionErr(maxSize)];
  }
  return [true, null];
}
function isDefined(value) {
  return value !== void 0 && value !== null;
}
function allFilesAccepted(_ref) {
  var files = _ref.files, accept = _ref.accept, minSize = _ref.minSize, maxSize = _ref.maxSize, multiple = _ref.multiple, maxFiles = _ref.maxFiles, validator = _ref.validator;
  if (!multiple && files.length > 1 || multiple && maxFiles >= 1 && files.length > maxFiles) {
    return false;
  }
  return files.every(function(file) {
    var _fileAccepted = fileAccepted(file, accept), _fileAccepted2 = _slicedToArray(_fileAccepted, 1), accepted = _fileAccepted2[0];
    var _fileMatchSize = fileMatchSize(file, minSize, maxSize), _fileMatchSize2 = _slicedToArray(_fileMatchSize, 1), sizeMatch = _fileMatchSize2[0];
    var customErrors = validator ? validator(file) : null;
    return accepted && sizeMatch && !customErrors;
  });
}
function isPropagationStopped(event) {
  if (typeof event.isPropagationStopped === "function") {
    return event.isPropagationStopped();
  } else if (typeof event.cancelBubble !== "undefined") {
    return event.cancelBubble;
  }
  return false;
}
function isEvtWithFiles(event) {
  if (!event.dataTransfer) {
    return !!event.target && !!event.target.files;
  }
  return Array.prototype.some.call(event.dataTransfer.types, function(type) {
    return type === "Files" || type === "application/x-moz-file";
  });
}
function onDocumentDragOver(event) {
  event.preventDefault();
}
function isIe(userAgent) {
  return userAgent.indexOf("MSIE") !== -1 || userAgent.indexOf("Trident/") !== -1;
}
function isEdge(userAgent) {
  return userAgent.indexOf("Edge/") !== -1;
}
function isIeOrEdge() {
  var userAgent = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : window.navigator.userAgent;
  return isIe(userAgent) || isEdge(userAgent);
}
function composeEventHandlers() {
  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
    fns[_key] = arguments[_key];
  }
  return function(event) {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }
    return fns.some(function(fn2) {
      if (!isPropagationStopped(event) && fn2) {
        fn2.apply(void 0, [event].concat(args));
      }
      return isPropagationStopped(event);
    });
  };
}
function canUseFileSystemAccessAPI() {
  return "showOpenFilePicker" in window;
}
function pickerOptionsFromAccept(accept) {
  if (isDefined(accept)) {
    var acceptForPicker = Object.entries(accept).filter(function(_ref2) {
      var _ref3 = _slicedToArray(_ref2, 2), mimeType = _ref3[0], ext = _ref3[1];
      var ok2 = true;
      if (!isMIMEType(mimeType)) {
        console.warn('Skipped "'.concat(mimeType, '" because it is not a valid MIME type. Check https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types for a list of valid MIME types.'));
        ok2 = false;
      }
      if (!Array.isArray(ext) || !ext.every(isExt)) {
        console.warn('Skipped "'.concat(mimeType, '" because an invalid file extension was provided.'));
        ok2 = false;
      }
      return ok2;
    }).reduce(function(agg, _ref4) {
      var _ref5 = _slicedToArray(_ref4, 2), mimeType = _ref5[0], ext = _ref5[1];
      return _objectSpread(_objectSpread({}, agg), {}, _defineProperty2({}, mimeType, ext));
    }, {});
    return [{
      // description is required due to https://crbug.com/1264708
      description: "Files",
      accept: acceptForPicker
    }];
  }
  return accept;
}
function acceptPropAsAcceptAttr(accept) {
  if (isDefined(accept)) {
    return Object.entries(accept).reduce(function(a, _ref6) {
      var _ref7 = _slicedToArray(_ref6, 2), mimeType = _ref7[0], ext = _ref7[1];
      return [].concat(_toConsumableArray(a), [mimeType], _toConsumableArray(ext));
    }, []).filter(function(v) {
      return isMIMEType(v) || isExt(v);
    }).join(",");
  }
  return void 0;
}
function isAbort(v) {
  return v instanceof DOMException && (v.name === "AbortError" || v.code === v.ABORT_ERR);
}
function isSecurityError(v) {
  return v instanceof DOMException && (v.name === "SecurityError" || v.code === v.SECURITY_ERR);
}
function isMIMEType(v) {
  return v === "audio/*" || v === "video/*" || v === "image/*" || v === "text/*" || v === "application/*" || /\w+\/[-+.\w]+/g.test(v);
}
function isExt(v) {
  return /^.*\.[\w]+$/.test(v);
}

// node_modules/react-dropzone/dist/es/index.js
var _excluded = ["children"];
var _excluded2 = ["open"];
var _excluded3 = ["refKey", "role", "onKeyDown", "onFocus", "onBlur", "onClick", "onDragEnter", "onDragOver", "onDragLeave", "onDrop"];
var _excluded4 = ["refKey", "onChange", "onClick"];
function _toConsumableArray2(arr) {
  return _arrayWithoutHoles2(arr) || _iterableToArray3(arr) || _unsupportedIterableToArray3(arr) || _nonIterableSpread2();
}
function _nonIterableSpread2() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArray3(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _arrayWithoutHoles2(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray2(arr);
}
function _slicedToArray2(arr, i) {
  return _arrayWithHoles3(arr) || _iterableToArrayLimit2(arr, i) || _unsupportedIterableToArray3(arr, i) || _nonIterableRest3();
}
function _nonIterableRest3() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray3(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray2(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray2(o, minLen);
}
function _arrayLikeToArray2(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit2(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles3(arr) {
  if (Array.isArray(arr)) return arr;
}
function ownKeys2(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
      _defineProperty3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty3(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose2(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var Dropzone = (0, import_react32.forwardRef)(function(_ref, ref) {
  var children = _ref.children, params = _objectWithoutProperties(_ref, _excluded);
  var _useDropzone = useDropzone(params), open = _useDropzone.open, props = _objectWithoutProperties(_useDropzone, _excluded2);
  (0, import_react32.useImperativeHandle)(ref, function() {
    return {
      open
    };
  }, [open]);
  return import_react32.default.createElement(import_react32.Fragment, null, children(_objectSpread2(_objectSpread2({}, props), {}, {
    open
  })));
});
Dropzone.displayName = "Dropzone";
var defaultProps = {
  disabled: false,
  getFilesFromEvent: fromEvent,
  maxSize: Infinity,
  minSize: 0,
  multiple: true,
  maxFiles: 0,
  preventDropOnDocument: true,
  noClick: false,
  noKeyboard: false,
  noDrag: false,
  noDragEventsBubbling: false,
  validator: null,
  useFsAccessApi: false,
  autoFocus: false
};
Dropzone.defaultProps = defaultProps;
Dropzone.propTypes = {
  /**
   * Render function that exposes the dropzone state and prop getter fns
   *
   * @param {object} params
   * @param {Function} params.getRootProps Returns the props you should apply to the root drop container you render
   * @param {Function} params.getInputProps Returns the props you should apply to hidden file input you render
   * @param {Function} params.open Open the native file selection dialog
   * @param {boolean} params.isFocused Dropzone area is in focus
   * @param {boolean} params.isFileDialogActive File dialog is opened
   * @param {boolean} params.isDragActive Active drag is in progress
   * @param {boolean} params.isDragAccept Dragged files are accepted
   * @param {boolean} params.isDragReject Some dragged files are rejected
   * @param {File[]} params.acceptedFiles Accepted files
   * @param {FileRejection[]} params.fileRejections Rejected files and why they were rejected
   */
  children: import_prop_types.default.func,
  /**
   * Set accepted file types.
   * Checkout https://developer.mozilla.org/en-US/docs/Web/API/window/showOpenFilePicker types option for more information.
   * Keep in mind that mime type determination is not reliable across platforms. CSV files,
   * for example, are reported as text/plain under macOS but as application/vnd.ms-excel under
   * Windows. In some cases there might not be a mime type set at all (https://github.com/react-dropzone/react-dropzone/issues/276).
   */
  accept: import_prop_types.default.objectOf(import_prop_types.default.arrayOf(import_prop_types.default.string)),
  /**
   * Allow drag 'n' drop (or selection from the file dialog) of multiple files
   */
  multiple: import_prop_types.default.bool,
  /**
   * If false, allow dropped items to take over the current browser window
   */
  preventDropOnDocument: import_prop_types.default.bool,
  /**
   * If true, disables click to open the native file selection dialog
   */
  noClick: import_prop_types.default.bool,
  /**
   * If true, disables SPACE/ENTER to open the native file selection dialog.
   * Note that it also stops tracking the focus state.
   */
  noKeyboard: import_prop_types.default.bool,
  /**
   * If true, disables drag 'n' drop
   */
  noDrag: import_prop_types.default.bool,
  /**
   * If true, stops drag event propagation to parents
   */
  noDragEventsBubbling: import_prop_types.default.bool,
  /**
   * Minimum file size (in bytes)
   */
  minSize: import_prop_types.default.number,
  /**
   * Maximum file size (in bytes)
   */
  maxSize: import_prop_types.default.number,
  /**
   * Maximum accepted number of files
   * The default value is 0 which means there is no limitation to how many files are accepted.
   */
  maxFiles: import_prop_types.default.number,
  /**
   * Enable/disable the dropzone
   */
  disabled: import_prop_types.default.bool,
  /**
   * Use this to provide a custom file aggregator
   *
   * @param {(DragEvent|Event|Array<FileSystemFileHandle>)} event A drag event or input change event (if files were selected via the file dialog)
   */
  getFilesFromEvent: import_prop_types.default.func,
  /**
   * Cb for when closing the file dialog with no selection
   */
  onFileDialogCancel: import_prop_types.default.func,
  /**
   * Cb for when opening the file dialog
   */
  onFileDialogOpen: import_prop_types.default.func,
  /**
   * Set to true to use the https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API
   * to open the file picker instead of using an `<input type="file">` click event.
   */
  useFsAccessApi: import_prop_types.default.bool,
  /**
   * Set to true to focus the root element on render
   */
  autoFocus: import_prop_types.default.bool,
  /**
   * Cb for when the `dragenter` event occurs.
   *
   * @param {DragEvent} event
   */
  onDragEnter: import_prop_types.default.func,
  /**
   * Cb for when the `dragleave` event occurs
   *
   * @param {DragEvent} event
   */
  onDragLeave: import_prop_types.default.func,
  /**
   * Cb for when the `dragover` event occurs
   *
   * @param {DragEvent} event
   */
  onDragOver: import_prop_types.default.func,
  /**
   * Cb for when the `drop` event occurs.
   * Note that this callback is invoked after the `getFilesFromEvent` callback is done.
   *
   * Files are accepted or rejected based on the `accept`, `multiple`, `minSize` and `maxSize` props.
   * `accept` must be a valid [MIME type](http://www.iana.org/assignments/media-types/media-types.xhtml) according to [input element specification](https://www.w3.org/wiki/HTML/Elements/input/file) or a valid file extension.
   * If `multiple` is set to false and additional files are dropped,
   * all files besides the first will be rejected.
   * Any file which does not have a size in the [`minSize`, `maxSize`] range, will be rejected as well.
   *
   * Note that the `onDrop` callback will always be invoked regardless if the dropped files were accepted or rejected.
   * If you'd like to react to a specific scenario, use the `onDropAccepted`/`onDropRejected` props.
   *
   * `onDrop` will provide you with an array of [File](https://developer.mozilla.org/en-US/docs/Web/API/File) objects which you can then process and send to a server.
   * For example, with [SuperAgent](https://github.com/visionmedia/superagent) as a http/ajax library:
   *
   * ```js
   * function onDrop(acceptedFiles) {
   *   const req = request.post('/upload')
   *   acceptedFiles.forEach(file => {
   *     req.attach(file.name, file)
   *   })
   *   req.end(callback)
   * }
   * ```
   *
   * @param {File[]} acceptedFiles
   * @param {FileRejection[]} fileRejections
   * @param {(DragEvent|Event)} event A drag event or input change event (if files were selected via the file dialog)
   */
  onDrop: import_prop_types.default.func,
  /**
   * Cb for when the `drop` event occurs.
   * Note that if no files are accepted, this callback is not invoked.
   *
   * @param {File[]} files
   * @param {(DragEvent|Event)} event
   */
  onDropAccepted: import_prop_types.default.func,
  /**
   * Cb for when the `drop` event occurs.
   * Note that if no files are rejected, this callback is not invoked.
   *
   * @param {FileRejection[]} fileRejections
   * @param {(DragEvent|Event)} event
   */
  onDropRejected: import_prop_types.default.func,
  /**
   * Cb for when there's some error from any of the promises.
   *
   * @param {Error} error
   */
  onError: import_prop_types.default.func,
  /**
   * Custom validation function. It must return null if there's no errors.
   * @param {File} file
   * @returns {FileError|FileError[]|null}
   */
  validator: import_prop_types.default.func
};
var initialState = {
  isFocused: false,
  isFileDialogActive: false,
  isDragActive: false,
  isDragAccept: false,
  isDragReject: false,
  acceptedFiles: [],
  fileRejections: []
};
function useDropzone() {
  var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  var _defaultProps$props = _objectSpread2(_objectSpread2({}, defaultProps), props), accept = _defaultProps$props.accept, disabled = _defaultProps$props.disabled, getFilesFromEvent = _defaultProps$props.getFilesFromEvent, maxSize = _defaultProps$props.maxSize, minSize = _defaultProps$props.minSize, multiple = _defaultProps$props.multiple, maxFiles = _defaultProps$props.maxFiles, onDragEnter = _defaultProps$props.onDragEnter, onDragLeave = _defaultProps$props.onDragLeave, onDragOver = _defaultProps$props.onDragOver, onDrop = _defaultProps$props.onDrop, onDropAccepted = _defaultProps$props.onDropAccepted, onDropRejected = _defaultProps$props.onDropRejected, onFileDialogCancel = _defaultProps$props.onFileDialogCancel, onFileDialogOpen = _defaultProps$props.onFileDialogOpen, useFsAccessApi = _defaultProps$props.useFsAccessApi, autoFocus = _defaultProps$props.autoFocus, preventDropOnDocument = _defaultProps$props.preventDropOnDocument, noClick = _defaultProps$props.noClick, noKeyboard = _defaultProps$props.noKeyboard, noDrag = _defaultProps$props.noDrag, noDragEventsBubbling = _defaultProps$props.noDragEventsBubbling, onError2 = _defaultProps$props.onError, validator = _defaultProps$props.validator;
  var acceptAttr = (0, import_react32.useMemo)(function() {
    return acceptPropAsAcceptAttr(accept);
  }, [accept]);
  var pickerTypes = (0, import_react32.useMemo)(function() {
    return pickerOptionsFromAccept(accept);
  }, [accept]);
  var onFileDialogOpenCb = (0, import_react32.useMemo)(function() {
    return typeof onFileDialogOpen === "function" ? onFileDialogOpen : noop3;
  }, [onFileDialogOpen]);
  var onFileDialogCancelCb = (0, import_react32.useMemo)(function() {
    return typeof onFileDialogCancel === "function" ? onFileDialogCancel : noop3;
  }, [onFileDialogCancel]);
  var rootRef = (0, import_react32.useRef)(null);
  var inputRef = (0, import_react32.useRef)(null);
  var _useReducer = (0, import_react32.useReducer)(reducer, initialState), _useReducer2 = _slicedToArray2(_useReducer, 2), state = _useReducer2[0], dispatch = _useReducer2[1];
  var isFocused = state.isFocused, isFileDialogActive = state.isFileDialogActive;
  var fsAccessApiWorksRef = (0, import_react32.useRef)(typeof window !== "undefined" && window.isSecureContext && useFsAccessApi && canUseFileSystemAccessAPI());
  var onWindowFocus = function onWindowFocus2() {
    if (!fsAccessApiWorksRef.current && isFileDialogActive) {
      setTimeout(function() {
        if (inputRef.current) {
          var files = inputRef.current.files;
          if (!files.length) {
            dispatch({
              type: "closeDialog"
            });
            onFileDialogCancelCb();
          }
        }
      }, 300);
    }
  };
  (0, import_react32.useEffect)(function() {
    window.addEventListener("focus", onWindowFocus, false);
    return function() {
      window.removeEventListener("focus", onWindowFocus, false);
    };
  }, [inputRef, isFileDialogActive, onFileDialogCancelCb, fsAccessApiWorksRef]);
  var dragTargetsRef = (0, import_react32.useRef)([]);
  var onDocumentDrop = function onDocumentDrop2(event) {
    if (rootRef.current && rootRef.current.contains(event.target)) {
      return;
    }
    event.preventDefault();
    dragTargetsRef.current = [];
  };
  (0, import_react32.useEffect)(function() {
    if (preventDropOnDocument) {
      document.addEventListener("dragover", onDocumentDragOver, false);
      document.addEventListener("drop", onDocumentDrop, false);
    }
    return function() {
      if (preventDropOnDocument) {
        document.removeEventListener("dragover", onDocumentDragOver);
        document.removeEventListener("drop", onDocumentDrop);
      }
    };
  }, [rootRef, preventDropOnDocument]);
  (0, import_react32.useEffect)(function() {
    if (!disabled && autoFocus && rootRef.current) {
      rootRef.current.focus();
    }
    return function() {
    };
  }, [rootRef, autoFocus, disabled]);
  var onErrCb = (0, import_react32.useCallback)(function(e) {
    if (onError2) {
      onError2(e);
    } else {
      console.error(e);
    }
  }, [onError2]);
  var onDragEnterCb = (0, import_react32.useCallback)(function(event) {
    event.preventDefault();
    event.persist();
    stopPropagation(event);
    dragTargetsRef.current = [].concat(_toConsumableArray2(dragTargetsRef.current), [event.target]);
    if (isEvtWithFiles(event)) {
      Promise.resolve(getFilesFromEvent(event)).then(function(files) {
        if (isPropagationStopped(event) && !noDragEventsBubbling) {
          return;
        }
        var fileCount = files.length;
        var isDragAccept = fileCount > 0 && allFilesAccepted({
          files,
          accept: acceptAttr,
          minSize,
          maxSize,
          multiple,
          maxFiles,
          validator
        });
        var isDragReject = fileCount > 0 && !isDragAccept;
        dispatch({
          isDragAccept,
          isDragReject,
          isDragActive: true,
          type: "setDraggedFiles"
        });
        if (onDragEnter) {
          onDragEnter(event);
        }
      }).catch(function(e) {
        return onErrCb(e);
      });
    }
  }, [getFilesFromEvent, onDragEnter, onErrCb, noDragEventsBubbling, acceptAttr, minSize, maxSize, multiple, maxFiles, validator]);
  var onDragOverCb = (0, import_react32.useCallback)(function(event) {
    event.preventDefault();
    event.persist();
    stopPropagation(event);
    var hasFiles = isEvtWithFiles(event);
    if (hasFiles && event.dataTransfer) {
      try {
        event.dataTransfer.dropEffect = "copy";
      } catch (_unused) {
      }
    }
    if (hasFiles && onDragOver) {
      onDragOver(event);
    }
    return false;
  }, [onDragOver, noDragEventsBubbling]);
  var onDragLeaveCb = (0, import_react32.useCallback)(function(event) {
    event.preventDefault();
    event.persist();
    stopPropagation(event);
    var targets = dragTargetsRef.current.filter(function(target) {
      return rootRef.current && rootRef.current.contains(target);
    });
    var targetIdx = targets.indexOf(event.target);
    if (targetIdx !== -1) {
      targets.splice(targetIdx, 1);
    }
    dragTargetsRef.current = targets;
    if (targets.length > 0) {
      return;
    }
    dispatch({
      type: "setDraggedFiles",
      isDragActive: false,
      isDragAccept: false,
      isDragReject: false
    });
    if (isEvtWithFiles(event) && onDragLeave) {
      onDragLeave(event);
    }
  }, [rootRef, onDragLeave, noDragEventsBubbling]);
  var setFiles = (0, import_react32.useCallback)(function(files, event) {
    var acceptedFiles = [];
    var fileRejections = [];
    files.forEach(function(file) {
      var _fileAccepted = fileAccepted(file, acceptAttr), _fileAccepted2 = _slicedToArray2(_fileAccepted, 2), accepted = _fileAccepted2[0], acceptError = _fileAccepted2[1];
      var _fileMatchSize = fileMatchSize(file, minSize, maxSize), _fileMatchSize2 = _slicedToArray2(_fileMatchSize, 2), sizeMatch = _fileMatchSize2[0], sizeError = _fileMatchSize2[1];
      var customErrors = validator ? validator(file) : null;
      if (accepted && sizeMatch && !customErrors) {
        acceptedFiles.push(file);
      } else {
        var errors = [acceptError, sizeError];
        if (customErrors) {
          errors = errors.concat(customErrors);
        }
        fileRejections.push({
          file,
          errors: errors.filter(function(e) {
            return e;
          })
        });
      }
    });
    if (!multiple && acceptedFiles.length > 1 || multiple && maxFiles >= 1 && acceptedFiles.length > maxFiles) {
      acceptedFiles.forEach(function(file) {
        fileRejections.push({
          file,
          errors: [TOO_MANY_FILES_REJECTION]
        });
      });
      acceptedFiles.splice(0);
    }
    dispatch({
      acceptedFiles,
      fileRejections,
      isDragReject: fileRejections.length > 0,
      type: "setFiles"
    });
    if (onDrop) {
      onDrop(acceptedFiles, fileRejections, event);
    }
    if (fileRejections.length > 0 && onDropRejected) {
      onDropRejected(fileRejections, event);
    }
    if (acceptedFiles.length > 0 && onDropAccepted) {
      onDropAccepted(acceptedFiles, event);
    }
  }, [dispatch, multiple, acceptAttr, minSize, maxSize, maxFiles, onDrop, onDropAccepted, onDropRejected, validator]);
  var onDropCb = (0, import_react32.useCallback)(function(event) {
    event.preventDefault();
    event.persist();
    stopPropagation(event);
    dragTargetsRef.current = [];
    if (isEvtWithFiles(event)) {
      Promise.resolve(getFilesFromEvent(event)).then(function(files) {
        if (isPropagationStopped(event) && !noDragEventsBubbling) {
          return;
        }
        setFiles(files, event);
      }).catch(function(e) {
        return onErrCb(e);
      });
    }
    dispatch({
      type: "reset"
    });
  }, [getFilesFromEvent, setFiles, onErrCb, noDragEventsBubbling]);
  var openFileDialog = (0, import_react32.useCallback)(function() {
    if (fsAccessApiWorksRef.current) {
      dispatch({
        type: "openDialog"
      });
      onFileDialogOpenCb();
      var opts = {
        multiple,
        types: pickerTypes
      };
      window.showOpenFilePicker(opts).then(function(handles) {
        return getFilesFromEvent(handles);
      }).then(function(files) {
        setFiles(files, null);
        dispatch({
          type: "closeDialog"
        });
      }).catch(function(e) {
        if (isAbort(e)) {
          onFileDialogCancelCb(e);
          dispatch({
            type: "closeDialog"
          });
        } else if (isSecurityError(e)) {
          fsAccessApiWorksRef.current = false;
          if (inputRef.current) {
            inputRef.current.value = null;
            inputRef.current.click();
          } else {
            onErrCb(new Error("Cannot open the file picker because the https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API is not supported and no <input> was provided."));
          }
        } else {
          onErrCb(e);
        }
      });
      return;
    }
    if (inputRef.current) {
      dispatch({
        type: "openDialog"
      });
      onFileDialogOpenCb();
      inputRef.current.value = null;
      inputRef.current.click();
    }
  }, [dispatch, onFileDialogOpenCb, onFileDialogCancelCb, useFsAccessApi, setFiles, onErrCb, pickerTypes, multiple]);
  var onKeyDownCb = (0, import_react32.useCallback)(function(event) {
    if (!rootRef.current || !rootRef.current.isEqualNode(event.target)) {
      return;
    }
    if (event.key === " " || event.key === "Enter" || event.keyCode === 32 || event.keyCode === 13) {
      event.preventDefault();
      openFileDialog();
    }
  }, [rootRef, openFileDialog]);
  var onFocusCb = (0, import_react32.useCallback)(function() {
    dispatch({
      type: "focus"
    });
  }, []);
  var onBlurCb = (0, import_react32.useCallback)(function() {
    dispatch({
      type: "blur"
    });
  }, []);
  var onClickCb = (0, import_react32.useCallback)(function() {
    if (noClick) {
      return;
    }
    if (isIeOrEdge()) {
      setTimeout(openFileDialog, 0);
    } else {
      openFileDialog();
    }
  }, [noClick, openFileDialog]);
  var composeHandler = function composeHandler2(fn2) {
    return disabled ? null : fn2;
  };
  var composeKeyboardHandler = function composeKeyboardHandler2(fn2) {
    return noKeyboard ? null : composeHandler(fn2);
  };
  var composeDragHandler = function composeDragHandler2(fn2) {
    return noDrag ? null : composeHandler(fn2);
  };
  var stopPropagation = function stopPropagation2(event) {
    if (noDragEventsBubbling) {
      event.stopPropagation();
    }
  };
  var getRootProps = (0, import_react32.useMemo)(function() {
    return function() {
      var _ref2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref2$refKey = _ref2.refKey, refKey = _ref2$refKey === void 0 ? "ref" : _ref2$refKey, role = _ref2.role, onKeyDown = _ref2.onKeyDown, onFocus = _ref2.onFocus, onBlur = _ref2.onBlur, onClick = _ref2.onClick, onDragEnter2 = _ref2.onDragEnter, onDragOver2 = _ref2.onDragOver, onDragLeave2 = _ref2.onDragLeave, onDrop2 = _ref2.onDrop, rest = _objectWithoutProperties(_ref2, _excluded3);
      return _objectSpread2(_objectSpread2(_defineProperty3({
        onKeyDown: composeKeyboardHandler(composeEventHandlers(onKeyDown, onKeyDownCb)),
        onFocus: composeKeyboardHandler(composeEventHandlers(onFocus, onFocusCb)),
        onBlur: composeKeyboardHandler(composeEventHandlers(onBlur, onBlurCb)),
        onClick: composeHandler(composeEventHandlers(onClick, onClickCb)),
        onDragEnter: composeDragHandler(composeEventHandlers(onDragEnter2, onDragEnterCb)),
        onDragOver: composeDragHandler(composeEventHandlers(onDragOver2, onDragOverCb)),
        onDragLeave: composeDragHandler(composeEventHandlers(onDragLeave2, onDragLeaveCb)),
        onDrop: composeDragHandler(composeEventHandlers(onDrop2, onDropCb)),
        role: typeof role === "string" && role !== "" ? role : "presentation"
      }, refKey, rootRef), !disabled && !noKeyboard ? {
        tabIndex: 0
      } : {}), rest);
    };
  }, [rootRef, onKeyDownCb, onFocusCb, onBlurCb, onClickCb, onDragEnterCb, onDragOverCb, onDragLeaveCb, onDropCb, noKeyboard, noDrag, disabled]);
  var onInputElementClick = (0, import_react32.useCallback)(function(event) {
    event.stopPropagation();
  }, []);
  var getInputProps = (0, import_react32.useMemo)(function() {
    return function() {
      var _ref3 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref3$refKey = _ref3.refKey, refKey = _ref3$refKey === void 0 ? "ref" : _ref3$refKey, onChange = _ref3.onChange, onClick = _ref3.onClick, rest = _objectWithoutProperties(_ref3, _excluded4);
      var inputProps = _defineProperty3({
        accept: acceptAttr,
        multiple,
        type: "file",
        style: {
          border: 0,
          clip: "rect(0, 0, 0, 0)",
          clipPath: "inset(50%)",
          height: "1px",
          margin: "0 -1px -1px 0",
          overflow: "hidden",
          padding: 0,
          position: "absolute",
          width: "1px",
          whiteSpace: "nowrap"
        },
        onChange: composeHandler(composeEventHandlers(onChange, onDropCb)),
        onClick: composeHandler(composeEventHandlers(onClick, onInputElementClick)),
        tabIndex: -1
      }, refKey, inputRef);
      return _objectSpread2(_objectSpread2({}, inputProps), rest);
    };
  }, [inputRef, accept, multiple, onDropCb, disabled]);
  return _objectSpread2(_objectSpread2({}, state), {}, {
    isFocused: isFocused && !disabled,
    getRootProps,
    getInputProps,
    rootRef,
    inputRef,
    open: composeHandler(openFileDialog)
  });
}
function reducer(state, action) {
  switch (action.type) {
    case "focus":
      return _objectSpread2(_objectSpread2({}, state), {}, {
        isFocused: true
      });
    case "blur":
      return _objectSpread2(_objectSpread2({}, state), {}, {
        isFocused: false
      });
    case "openDialog":
      return _objectSpread2(_objectSpread2({}, initialState), {}, {
        isFileDialogActive: true
      });
    case "closeDialog":
      return _objectSpread2(_objectSpread2({}, state), {}, {
        isFileDialogActive: false
      });
    case "setDraggedFiles":
      return _objectSpread2(_objectSpread2({}, state), {}, {
        isDragActive: action.isDragActive,
        isDragAccept: action.isDragAccept,
        isDragReject: action.isDragReject
      });
    case "setFiles":
      return _objectSpread2(_objectSpread2({}, state), {}, {
        acceptedFiles: action.acceptedFiles,
        fileRejections: action.fileRejections,
        isDragReject: action.isDragReject
      });
    case "reset":
      return _objectSpread2({}, initialState);
    default:
      return state;
  }
}
function noop3() {
}

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/ImageDropzone.js
var ImageDropzone = ({ accept: acceptedFiles = [], children, disabled, handleFiles, maxNumberOfFiles, multiple }) => {
  const { t: t2 } = useTranslationContext("ImageDropzone");
  const handleDrop = (0, import_react33.useCallback)((accepted) => {
    if (!handleFiles) {
      return;
    }
    if (accepted && accepted.length) {
      handleFiles(accepted);
    }
  }, [handleFiles]);
  const accept = (0, import_react33.useMemo)(() => (typeof acceptedFiles === "string" ? acceptedFiles.split(",") : acceptedFiles).reduce((mediaTypeMap, mediaType) => {
    mediaTypeMap[mediaType] ?? (mediaTypeMap[mediaType] = []);
    return mediaTypeMap;
  }, {}), [acceptedFiles]);
  const { getRootProps, isDragAccept, isDragReject } = useDropzone({
    accept,
    disabled,
    maxFiles: maxNumberOfFiles,
    multiple,
    noClick: true,
    onDrop: handleDrop
  });
  return import_react33.default.createElement(
    "div",
    { ...getRootProps({
      className: clsx_default("rfu-dropzone", {
        "rfu-dropzone--accept": isDragAccept,
        "rfu-dropzone--reject": isDragReject
      }),
      style: { position: "relative" }
    }), tabIndex: -1 },
    import_react33.default.createElement(
      "div",
      { className: "rfu-dropzone__notifier" },
      import_react33.default.createElement(
        "div",
        { className: "rfu-dropzone__inner" },
        import_react33.default.createElement(
          "svg",
          { height: "41", viewBox: "0 0 41 41", width: "41", xmlns: "http://www.w3.org/2000/svg" },
          import_react33.default.createElement("path", { d: "M40.517 28.002V3.997c0-2.197-1.808-3.992-4.005-3.992H12.507a4.004 4.004 0 0 0-3.992 3.993v24.004a4.004 4.004 0 0 0 3.992 3.993h24.005c2.197 0 4.005-1.795 4.005-3.993zm-22.002-7.997l4.062 5.42 5.937-7.423 7.998 10H12.507l6.008-7.997zM.517 8.003V36c0 2.198 1.795 4.005 3.993 4.005h27.997V36H4.51V8.002H.517z", fill: "#000", fillRule: "nonzero" })
        ),
        import_react33.default.createElement("p", null, t2("Drag your files here to add to your post"))
      )
    ),
    children
  );
};

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/LoadingIndicator.js
var import_react34 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/UploadButton.js
var import_react36 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/utils.js
var import_react35 = __toESM(require_react());
var useHandleFileChangeWrapper = (resetOnChange = false, handler) => (0, import_react35.useCallback)(({ currentTarget }) => {
  const { files } = currentTarget;
  if (!files)
    return;
  try {
    handler == null ? void 0 : handler(Array.from(files));
  } catch (error2) {
    console.error(error2);
  }
  if (resetOnChange)
    currentTarget.value = "";
}, [handler, resetOnChange]);
async function dataTransferItemsToFiles(items) {
  if (!items || !items.length) {
    return [];
  }
  const fileLikes = getFileLikes(items);
  if (fileLikes.length) {
    return fileLikes;
  }
  const blobPromises = [];
  for (const item of items) {
    if (item.type === "text/html") {
      blobPromises.push(new Promise((accept) => {
        item.getAsString(async (s) => {
          const imagePromises = extractImageSources(s).map((src) => getImageSource(fileLikes, src));
          await Promise.all(imagePromises);
          accept();
        });
      }));
    }
  }
  await Promise.all(blobPromises);
  return fileLikes;
}
function getFileLikes(items) {
  const fileLikes = [];
  for (const item of items) {
    if (item.kind === "file") {
      const file = item.getAsFile();
      if (file) {
        fileLikes.push(file);
      }
    }
  }
  return fileLikes;
}
async function getImageSource(fileLikes, src) {
  let res;
  try {
    res = await fetch(src);
  } catch (e) {
    return;
  }
  const contentType = res.headers.get("Content-type") || "application/octet-stream";
  const buf = await res.arrayBuffer();
  const blob = new Blob([buf], { type: contentType });
  fileLikes.push(blob);
}
var extractImageSources = (s) => {
  const imageTags = new DOMParser().parseFromString(s, "text/html").getElementsByTagName("img");
  return Array.from(imageTags, (tag) => tag.src).filter((tag) => tag);
};
var isBlobButNotFile = (obj) => obj instanceof Blob && !(obj instanceof File);
var createFileFromBlobs = ({ blobsArray, fileName, mimeType }) => {
  const concatenatedBlob = new Blob(blobsArray, { type: mimeType });
  return new File([concatenatedBlob], fileName, { type: concatenatedBlob.type });
};
var getExtensionFromMimeType = (mimeType) => {
  const match = mimeType.match(/\/([^/;]+)/);
  return match && match[1];
};
var getRecordedMediaTypeFromMimeType = (mimeType) => {
  const match = mimeType.match(/^(audio|video)\/.*$/);
  return match && match[1];
};
var readFileAsArrayBuffer = (file) => new Promise((resolve, reject) => {
  const fileReader = new FileReader();
  fileReader.onload = () => {
    resolve(fileReader.result);
  };
  fileReader.onerror = () => {
    reject(fileReader.error);
  };
  fileReader.readAsArrayBuffer(file);
});
var generateFileName = (mimeType) => `file_${(/* @__PURE__ */ new Date()).toISOString()}.${getExtensionFromMimeType(mimeType)}`;

// node_modules/stream-chat-react/dist/components/ReactFileUtilities/UploadButton.js
var UploadButton = (0, import_react36.forwardRef)(function UploadButton2({ onFileChange, resetOnChange = true, ...rest }, ref) {
  const handleInputChange = useHandleFileChangeWrapper(resetOnChange, onFileChange);
  return import_react36.default.createElement("input", { onChange: handleInputChange, ref, type: "file", ...rest });
});
var FileInput = UploadButton;
var UploadFileInput = (0, import_react36.forwardRef)(function UploadFileInput2({ className, onFileChange: onFileChangeCustom, ...props }, ref) {
  const { t: t2 } = useTranslationContext("UploadFileInput");
  const { acceptedFiles = [], multipleUploads } = useChannelStateContext("UploadFileInput");
  const { isUploadEnabled, maxFilesLeft, uploadNewFiles } = useMessageInputContext("UploadFileInput");
  const id = (0, import_react36.useMemo)(() => nanoid(), []);
  const onFileChange = (0, import_react36.useCallback)((files) => {
    uploadNewFiles(files);
    onFileChangeCustom == null ? void 0 : onFileChangeCustom(files);
  }, [onFileChangeCustom, uploadNewFiles]);
  return import_react36.default.createElement(FileInput, { accept: acceptedFiles == null ? void 0 : acceptedFiles.join(","), "aria-label": t2("aria/File upload"), "data-testid": "file-input", disabled: !isUploadEnabled || maxFilesLeft === 0, id, multiple: multipleUploads, ...props, className: clsx_default("str-chat__file-input", className), onFileChange, ref });
});

// node_modules/stream-chat-react/dist/components/Attachment/VoiceRecording.js
var rootClassName = "str-chat__message-attachment__voice-recording-widget";
var VoiceRecordingPlayer = ({ attachment, playbackRates }) => {
  const { t: t2 } = useTranslationContext("VoiceRecordingPlayer");
  const { asset_url, duration = 0, mime_type, title = t2("Voice message"), waveform_data } = attachment;
  const { audioRef, increasePlaybackRate, isPlaying, playbackRate, progress, secondsElapsed, seek, togglePlay } = useAudioController({
    durationSeconds: duration ?? 0,
    mimeType: mime_type,
    playbackRates
  });
  if (!asset_url)
    return null;
  const displayedDuration = secondsElapsed || duration;
  return import_react37.default.createElement(
    "div",
    { className: rootClassName, "data-testid": "voice-recording-widget" },
    import_react37.default.createElement(
      "audio",
      { ref: audioRef },
      import_react37.default.createElement("source", { "data-testid": "audio-source", src: asset_url, type: mime_type })
    ),
    import_react37.default.createElement(PlayButton, { isPlaying, onClick: togglePlay }),
    import_react37.default.createElement(
      "div",
      { className: "str-chat__message-attachment__voice-recording-widget__metadata" },
      import_react37.default.createElement("div", { className: "str-chat__message-attachment__voice-recording-widget__title", "data-testid": "voice-recording-title", title }, title),
      import_react37.default.createElement(
        "div",
        { className: "str-chat__message-attachment__voice-recording-widget__audio-state" },
        import_react37.default.createElement("div", { className: "str-chat__message-attachment__voice-recording-widget__timer" }, attachment.duration ? displayDuration(displayedDuration) : import_react37.default.createElement(FileSizeIndicator, { fileSize: attachment.file_size, maximumFractionDigits: 0 })),
        import_react37.default.createElement(WaveProgressBar, { progress, seek, waveformData: waveform_data || [] })
      )
    ),
    import_react37.default.createElement("div", { className: "str-chat__message-attachment__voice-recording-widget__right-section" }, isPlaying ? import_react37.default.createElement(
      PlaybackRateButton,
      { disabled: !audioRef.current, onClick: increasePlaybackRate },
      playbackRate.toFixed(1),
      "x"
    ) : import_react37.default.createElement(FileIcon, { big: true, mimeType: mime_type, size: 40 }))
  );
};
var QuotedVoiceRecording = ({ attachment }) => {
  const { t: t2 } = useTranslationContext();
  const title = attachment.title || t2("Voice message");
  return import_react37.default.createElement(
    "div",
    { className: rootClassName, "data-testid": "quoted-voice-recording-widget" },
    import_react37.default.createElement(
      "div",
      { className: "str-chat__message-attachment__voice-recording-widget__metadata" },
      title && import_react37.default.createElement("div", { className: "str-chat__message-attachment__voice-recording-widget__title", "data-testid": "voice-recording-title", title }, title),
      import_react37.default.createElement(
        "div",
        { className: "str-chat__message-attachment__voice-recording-widget__audio-state" },
        import_react37.default.createElement("div", { className: "str-chat__message-attachment__voice-recording-widget__timer" }, attachment.duration ? displayDuration(attachment.duration) : import_react37.default.createElement(FileSizeIndicator, { fileSize: attachment.file_size, maximumFractionDigits: 0 }))
      )
    ),
    import_react37.default.createElement(FileIcon, { big: true, mimeType: attachment.mime_type, size: 34 })
  );
};
var VoiceRecording = ({ attachment, isQuoted }) => isQuoted ? import_react37.default.createElement(QuotedVoiceRecording, { attachment }) : import_react37.default.createElement(VoiceRecordingPlayer, { attachment });

// node_modules/stream-chat-react/dist/components/Gallery/BaseImage.js
var import_react38 = __toESM(require_react());
var BaseImage = (0, import_react38.forwardRef)(function BaseImage2({ ...props }, ref) {
  const { className: propsClassName, onError: propsOnError } = props;
  const [error2, setError] = (0, import_react38.useState)(false);
  (0, import_react38.useEffect)(() => () => {
    setError(false);
  }, [props.src]);
  return import_react38.default.createElement(
    import_react38.default.Fragment,
    null,
    import_react38.default.createElement("img", { "data-testid": "str-chat__base-image", ...props, className: clsx_default(propsClassName, "str-chat__base-image", {
      "str-chat__base-image--load-failed": error2
    }), onError: (e) => {
      setError(true);
      propsOnError == null ? void 0 : propsOnError(e);
    }, ref }),
    error2 && import_react38.default.createElement(DownloadButton, { assetUrl: props.src })
  );
});

// node_modules/stream-chat-react/dist/components/Gallery/Gallery.js
var import_react82 = __toESM(require_react());
var import_sanitize_url2 = __toESM(require_dist());

// node_modules/stream-chat-react/dist/components/Modal/Modal.js
var import_react80 = __toESM(require_react());

// node_modules/@react-aria/utils/dist/useLayoutEffect.mjs
var import_react39 = __toESM(require_react(), 1);
var $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c = typeof document !== "undefined" ? (0, import_react39.default).useLayoutEffect : () => {
};

// node_modules/@react-aria/utils/dist/useEffectEvent.mjs
var import_react40 = __toESM(require_react(), 1);
function $8ae05eaa5c114e9c$export$7f54fc3180508a52(fn2) {
  const ref = (0, import_react40.useRef)(null);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    ref.current = fn2;
  }, [
    fn2
  ]);
  return (0, import_react40.useCallback)((...args) => {
    const f = ref.current;
    return f === null || f === void 0 ? void 0 : f(...args);
  }, []);
}

// node_modules/@react-aria/utils/dist/useValueEffect.mjs
var import_react41 = __toESM(require_react(), 1);

// node_modules/@react-aria/utils/dist/useId.mjs
var import_react43 = __toESM(require_react(), 1);

// node_modules/@react-aria/ssr/dist/SSRProvider.mjs
var import_react42 = __toESM(require_react(), 1);
var $b5e257d569688ac6$var$defaultContext = {
  prefix: String(Math.round(Math.random() * 1e10)),
  current: 0
};
var $b5e257d569688ac6$var$SSRContext = (0, import_react42.default).createContext($b5e257d569688ac6$var$defaultContext);
var $b5e257d569688ac6$var$IsSSRContext = (0, import_react42.default).createContext(false);
var $b5e257d569688ac6$var$canUseDOM = Boolean(typeof window !== "undefined" && window.document && window.document.createElement);
var $b5e257d569688ac6$var$componentIds = /* @__PURE__ */ new WeakMap();
function $b5e257d569688ac6$var$useCounter(isDisabled = false) {
  let ctx = (0, import_react42.useContext)($b5e257d569688ac6$var$SSRContext);
  let ref = (0, import_react42.useRef)(null);
  if (ref.current === null && !isDisabled) {
    var _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner, _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    let currentOwner = (_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = (0, import_react42.default).__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) === null || _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED === void 0 ? void 0 : (_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner = _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner) === null || _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner === void 0 ? void 0 : _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner.current;
    if (currentOwner) {
      let prevComponentValue = $b5e257d569688ac6$var$componentIds.get(currentOwner);
      if (prevComponentValue == null)
        $b5e257d569688ac6$var$componentIds.set(currentOwner, {
          id: ctx.current,
          state: currentOwner.memoizedState
        });
      else if (currentOwner.memoizedState !== prevComponentValue.state) {
        ctx.current = prevComponentValue.id;
        $b5e257d569688ac6$var$componentIds.delete(currentOwner);
      }
    }
    ref.current = ++ctx.current;
  }
  return ref.current;
}
function $b5e257d569688ac6$var$useLegacySSRSafeId(defaultId) {
  let ctx = (0, import_react42.useContext)($b5e257d569688ac6$var$SSRContext);
  if (ctx === $b5e257d569688ac6$var$defaultContext && !$b5e257d569688ac6$var$canUseDOM && true) console.warn("When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.");
  let counter = $b5e257d569688ac6$var$useCounter(!!defaultId);
  let prefix = ctx === $b5e257d569688ac6$var$defaultContext && false ? "react-aria" : `react-aria${ctx.prefix}`;
  return defaultId || `${prefix}-${counter}`;
}
function $b5e257d569688ac6$var$useModernSSRSafeId(defaultId) {
  let id = (0, import_react42.default).useId();
  let [didSSR] = (0, import_react42.useState)($b5e257d569688ac6$export$535bd6ca7f90a273());
  let prefix = didSSR || false ? "react-aria" : `react-aria${$b5e257d569688ac6$var$defaultContext.prefix}`;
  return defaultId || `${prefix}-${id}`;
}
var $b5e257d569688ac6$export$619500959fc48b26 = typeof (0, import_react42.default)["useId"] === "function" ? $b5e257d569688ac6$var$useModernSSRSafeId : $b5e257d569688ac6$var$useLegacySSRSafeId;
function $b5e257d569688ac6$var$getSnapshot() {
  return false;
}
function $b5e257d569688ac6$var$getServerSnapshot() {
  return true;
}
function $b5e257d569688ac6$var$subscribe(onStoreChange) {
  return () => {
  };
}
function $b5e257d569688ac6$export$535bd6ca7f90a273() {
  if (typeof (0, import_react42.default)["useSyncExternalStore"] === "function") return (0, import_react42.default)["useSyncExternalStore"]($b5e257d569688ac6$var$subscribe, $b5e257d569688ac6$var$getSnapshot, $b5e257d569688ac6$var$getServerSnapshot);
  return (0, import_react42.useContext)($b5e257d569688ac6$var$IsSSRContext);
}

// node_modules/@react-aria/utils/dist/useId.mjs
var $bdb11010cef70236$var$canUseDOM = Boolean(typeof window !== "undefined" && window.document && window.document.createElement);
var $bdb11010cef70236$export$d41a04c74483c6ef = /* @__PURE__ */ new Map();
var $bdb11010cef70236$var$registry;
if (typeof FinalizationRegistry !== "undefined") $bdb11010cef70236$var$registry = new FinalizationRegistry((heldValue) => {
  $bdb11010cef70236$export$d41a04c74483c6ef.delete(heldValue);
});
function $bdb11010cef70236$export$cd8c9cb68f842629(idA, idB) {
  if (idA === idB) return idA;
  let setIdsA = $bdb11010cef70236$export$d41a04c74483c6ef.get(idA);
  if (setIdsA) {
    setIdsA.forEach((ref) => ref.current = idB);
    return idB;
  }
  let setIdsB = $bdb11010cef70236$export$d41a04c74483c6ef.get(idB);
  if (setIdsB) {
    setIdsB.forEach((ref) => ref.current = idA);
    return idA;
  }
  return idB;
}

// node_modules/@react-aria/utils/dist/chain.mjs
function $ff5963eb1fccf552$export$e08e3b67e392101e(...callbacks) {
  return (...args) => {
    for (let callback of callbacks) if (typeof callback === "function") callback(...args);
  };
}

// node_modules/@react-aria/utils/dist/domHelpers.mjs
var $431fbd86ca7dc216$export$b204af158042fbac = (el) => {
  var _el_ownerDocument;
  return (_el_ownerDocument = el === null || el === void 0 ? void 0 : el.ownerDocument) !== null && _el_ownerDocument !== void 0 ? _el_ownerDocument : document;
};
var $431fbd86ca7dc216$export$f21a1ffae260145a = (el) => {
  if (el && "window" in el && el.window === el) return el;
  const doc = $431fbd86ca7dc216$export$b204af158042fbac(el);
  return doc.defaultView || window;
};
function $431fbd86ca7dc216$var$isNode(value) {
  return value !== null && typeof value === "object" && "nodeType" in value && typeof value.nodeType === "number";
}
function $431fbd86ca7dc216$export$af51f0f06c0f328a(node) {
  return $431fbd86ca7dc216$var$isNode(node) && node.nodeType === Node.DOCUMENT_FRAGMENT_NODE && "host" in node;
}

// node_modules/@react-stately/flags/dist/import.mjs
var $f4e2df6bd15f8569$var$_shadowDOM = false;
function $f4e2df6bd15f8569$export$98658e8c59125e6a() {
  return $f4e2df6bd15f8569$var$_shadowDOM;
}

// node_modules/@react-aria/utils/dist/DOMFunctions.mjs
function $d4ee10de306f2510$export$4282f70798064fe0(node, otherNode) {
  if (!(0, $f4e2df6bd15f8569$export$98658e8c59125e6a)()) return otherNode && node ? node.contains(otherNode) : false;
  if (!node || !otherNode) return false;
  let currentNode = otherNode;
  while (currentNode !== null) {
    if (currentNode === node) return true;
    if (currentNode.tagName === "SLOT" && currentNode.assignedSlot)
      currentNode = currentNode.assignedSlot.parentNode;
    else if ((0, $431fbd86ca7dc216$export$af51f0f06c0f328a)(currentNode))
      currentNode = currentNode.host;
    else currentNode = currentNode.parentNode;
  }
  return false;
}
var $d4ee10de306f2510$export$cd4e5573fbe2b576 = (doc = document) => {
  var _activeElement_shadowRoot;
  if (!(0, $f4e2df6bd15f8569$export$98658e8c59125e6a)()) return doc.activeElement;
  let activeElement = doc.activeElement;
  while (activeElement && "shadowRoot" in activeElement && ((_activeElement_shadowRoot = activeElement.shadowRoot) === null || _activeElement_shadowRoot === void 0 ? void 0 : _activeElement_shadowRoot.activeElement)) activeElement = activeElement.shadowRoot.activeElement;
  return activeElement;
};
function $d4ee10de306f2510$export$e58f029f0fbfdb29(event) {
  if ((0, $f4e2df6bd15f8569$export$98658e8c59125e6a)() && event.target.shadowRoot) {
    if (event.composedPath) return event.composedPath()[0];
  }
  return event.target;
}

// node_modules/@react-aria/utils/dist/ShadowTreeWalker.mjs
var $dfc540311bf7f109$export$63eb3ababa9c55c4 = class {
  get currentNode() {
    return this._currentNode;
  }
  set currentNode(node) {
    if (!(0, $d4ee10de306f2510$export$4282f70798064fe0)(this.root, node)) throw new Error("Cannot set currentNode to a node that is not contained by the root node.");
    const walkers = [];
    let curNode = node;
    let currentWalkerCurrentNode = node;
    this._currentNode = node;
    while (curNode && curNode !== this.root) if (curNode.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
      const shadowRoot = curNode;
      const walker2 = this._doc.createTreeWalker(shadowRoot, this.whatToShow, {
        acceptNode: this._acceptNode
      });
      walkers.push(walker2);
      walker2.currentNode = currentWalkerCurrentNode;
      this._currentSetFor.add(walker2);
      curNode = currentWalkerCurrentNode = shadowRoot.host;
    } else curNode = curNode.parentNode;
    const walker = this._doc.createTreeWalker(this.root, this.whatToShow, {
      acceptNode: this._acceptNode
    });
    walkers.push(walker);
    walker.currentNode = currentWalkerCurrentNode;
    this._currentSetFor.add(walker);
    this._walkerStack = walkers;
  }
  get doc() {
    return this._doc;
  }
  firstChild() {
    let currentNode = this.currentNode;
    let newNode = this.nextNode();
    if (!(0, $d4ee10de306f2510$export$4282f70798064fe0)(currentNode, newNode)) {
      this.currentNode = currentNode;
      return null;
    }
    if (newNode) this.currentNode = newNode;
    return newNode;
  }
  lastChild() {
    let walker = this._walkerStack[0];
    let newNode = walker.lastChild();
    if (newNode) this.currentNode = newNode;
    return newNode;
  }
  nextNode() {
    const nextNode = this._walkerStack[0].nextNode();
    if (nextNode) {
      const shadowRoot = nextNode.shadowRoot;
      if (shadowRoot) {
        var _this_filter;
        let nodeResult;
        if (typeof this.filter === "function") nodeResult = this.filter(nextNode);
        else if ((_this_filter = this.filter) === null || _this_filter === void 0 ? void 0 : _this_filter.acceptNode) nodeResult = this.filter.acceptNode(nextNode);
        if (nodeResult === NodeFilter.FILTER_ACCEPT) {
          this.currentNode = nextNode;
          return nextNode;
        }
        let newNode = this.nextNode();
        if (newNode) this.currentNode = newNode;
        return newNode;
      }
      if (nextNode) this.currentNode = nextNode;
      return nextNode;
    } else {
      if (this._walkerStack.length > 1) {
        this._walkerStack.shift();
        let newNode = this.nextNode();
        if (newNode) this.currentNode = newNode;
        return newNode;
      } else return null;
    }
  }
  previousNode() {
    const currentWalker = this._walkerStack[0];
    if (currentWalker.currentNode === currentWalker.root) {
      if (this._currentSetFor.has(currentWalker)) {
        this._currentSetFor.delete(currentWalker);
        if (this._walkerStack.length > 1) {
          this._walkerStack.shift();
          let newNode = this.previousNode();
          if (newNode) this.currentNode = newNode;
          return newNode;
        } else return null;
      }
      return null;
    }
    const previousNode = currentWalker.previousNode();
    if (previousNode) {
      const shadowRoot = previousNode.shadowRoot;
      if (shadowRoot) {
        var _this_filter;
        let nodeResult;
        if (typeof this.filter === "function") nodeResult = this.filter(previousNode);
        else if ((_this_filter = this.filter) === null || _this_filter === void 0 ? void 0 : _this_filter.acceptNode) nodeResult = this.filter.acceptNode(previousNode);
        if (nodeResult === NodeFilter.FILTER_ACCEPT) {
          if (previousNode) this.currentNode = previousNode;
          return previousNode;
        }
        let newNode = this.lastChild();
        if (newNode) this.currentNode = newNode;
        return newNode;
      }
      if (previousNode) this.currentNode = previousNode;
      return previousNode;
    } else {
      if (this._walkerStack.length > 1) {
        this._walkerStack.shift();
        let newNode = this.previousNode();
        if (newNode) this.currentNode = newNode;
        return newNode;
      } else return null;
    }
  }
  /**
   * @deprecated
   */
  nextSibling() {
    return null;
  }
  /**
   * @deprecated
   */
  previousSibling() {
    return null;
  }
  /**
   * @deprecated
   */
  parentNode() {
    return null;
  }
  constructor(doc, root2, whatToShow, filter) {
    this._walkerStack = [];
    this._currentSetFor = /* @__PURE__ */ new Set();
    this._acceptNode = (node) => {
      if (node.nodeType === Node.ELEMENT_NODE) {
        const shadowRoot2 = node.shadowRoot;
        if (shadowRoot2) {
          const walker = this._doc.createTreeWalker(shadowRoot2, this.whatToShow, {
            acceptNode: this._acceptNode
          });
          this._walkerStack.unshift(walker);
          return NodeFilter.FILTER_ACCEPT;
        } else {
          var _this_filter;
          if (typeof this.filter === "function") return this.filter(node);
          else if ((_this_filter = this.filter) === null || _this_filter === void 0 ? void 0 : _this_filter.acceptNode) return this.filter.acceptNode(node);
          else if (this.filter === null) return NodeFilter.FILTER_ACCEPT;
        }
      }
      return NodeFilter.FILTER_SKIP;
    };
    this._doc = doc;
    this.root = root2;
    this.filter = filter !== null && filter !== void 0 ? filter : null;
    this.whatToShow = whatToShow !== null && whatToShow !== void 0 ? whatToShow : NodeFilter.SHOW_ALL;
    this._currentNode = root2;
    this._walkerStack.unshift(doc.createTreeWalker(root2, whatToShow, this._acceptNode));
    const shadowRoot = root2.shadowRoot;
    if (shadowRoot) {
      const walker = this._doc.createTreeWalker(shadowRoot, this.whatToShow, {
        acceptNode: this._acceptNode
      });
      this._walkerStack.unshift(walker);
    }
  }
};
function $dfc540311bf7f109$export$4d0f8be8b12a7ef6(doc, root2, whatToShow, filter) {
  if ((0, $f4e2df6bd15f8569$export$98658e8c59125e6a)()) return new $dfc540311bf7f109$export$63eb3ababa9c55c4(doc, root2, whatToShow, filter);
  return doc.createTreeWalker(root2, whatToShow, filter);
}

// node_modules/@react-aria/utils/dist/mergeProps.mjs
function $3ef42575df84b30b$export$9d1611c77c2fe928(...args) {
  let result = {
    ...args[0]
  };
  for (let i = 1; i < args.length; i++) {
    let props = args[i];
    for (let key in props) {
      let a = result[key];
      let b = props[key];
      if (typeof a === "function" && typeof b === "function" && // This is a lot faster than a regex.
      key[0] === "o" && key[1] === "n" && key.charCodeAt(2) >= /* 'A' */
      65 && key.charCodeAt(2) <= /* 'Z' */
      90) result[key] = (0, $ff5963eb1fccf552$export$e08e3b67e392101e)(a, b);
      else if ((key === "className" || key === "UNSAFE_className") && typeof a === "string" && typeof b === "string") result[key] = (0, clsx_default)(a, b);
      else if (key === "id" && a && b) result.id = (0, $bdb11010cef70236$export$cd8c9cb68f842629)(a, b);
      else result[key] = b !== void 0 ? b : a;
    }
  }
  return result;
}

// node_modules/@react-aria/utils/dist/mergeRefs.mjs
function $5dc95899b306f630$export$c9058316764c140e(...refs) {
  if (refs.length === 1 && refs[0]) return refs[0];
  return (value) => {
    let hasCleanup = false;
    const cleanups = refs.map((ref) => {
      const cleanup = $5dc95899b306f630$var$setRef(ref, value);
      hasCleanup || (hasCleanup = typeof cleanup == "function");
      return cleanup;
    });
    if (hasCleanup) return () => {
      cleanups.forEach((cleanup, i) => {
        if (typeof cleanup === "function") cleanup();
        else $5dc95899b306f630$var$setRef(refs[i], null);
      });
    };
  };
}
function $5dc95899b306f630$var$setRef(ref, value) {
  if (typeof ref === "function") return ref(value);
  else if (ref != null) ref.current = value;
}

// node_modules/@react-aria/utils/dist/focusWithoutScrolling.mjs
function $7215afc6de606d6b$export$de79e2c695e052f3(element2) {
  if ($7215afc6de606d6b$var$supportsPreventScroll()) element2.focus({
    preventScroll: true
  });
  else {
    let scrollableElements = $7215afc6de606d6b$var$getScrollableElements(element2);
    element2.focus();
    $7215afc6de606d6b$var$restoreScrollPosition(scrollableElements);
  }
}
var $7215afc6de606d6b$var$supportsPreventScrollCached = null;
function $7215afc6de606d6b$var$supportsPreventScroll() {
  if ($7215afc6de606d6b$var$supportsPreventScrollCached == null) {
    $7215afc6de606d6b$var$supportsPreventScrollCached = false;
    try {
      let focusElem = document.createElement("div");
      focusElem.focus({
        get preventScroll() {
          $7215afc6de606d6b$var$supportsPreventScrollCached = true;
          return true;
        }
      });
    } catch {
    }
  }
  return $7215afc6de606d6b$var$supportsPreventScrollCached;
}
function $7215afc6de606d6b$var$getScrollableElements(element2) {
  let parent = element2.parentNode;
  let scrollableElements = [];
  let rootScrollingElement = document.scrollingElement || document.documentElement;
  while (parent instanceof HTMLElement && parent !== rootScrollingElement) {
    if (parent.offsetHeight < parent.scrollHeight || parent.offsetWidth < parent.scrollWidth) scrollableElements.push({
      element: parent,
      scrollTop: parent.scrollTop,
      scrollLeft: parent.scrollLeft
    });
    parent = parent.parentNode;
  }
  if (rootScrollingElement instanceof HTMLElement) scrollableElements.push({
    element: rootScrollingElement,
    scrollTop: rootScrollingElement.scrollTop,
    scrollLeft: rootScrollingElement.scrollLeft
  });
  return scrollableElements;
}
function $7215afc6de606d6b$var$restoreScrollPosition(scrollableElements) {
  for (let { element: element2, scrollTop, scrollLeft } of scrollableElements) {
    element2.scrollTop = scrollTop;
    element2.scrollLeft = scrollLeft;
  }
}

// node_modules/@react-aria/utils/dist/platform.mjs
function $c87311424ea30a05$var$testUserAgent(re) {
  var _window_navigator_userAgentData;
  if (typeof window === "undefined" || window.navigator == null) return false;
  return ((_window_navigator_userAgentData = window.navigator["userAgentData"]) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.brands.some((brand) => re.test(brand.brand))) || re.test(window.navigator.userAgent);
}
function $c87311424ea30a05$var$testPlatform(re) {
  var _window_navigator_userAgentData;
  return typeof window !== "undefined" && window.navigator != null ? re.test(((_window_navigator_userAgentData = window.navigator["userAgentData"]) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.platform) || window.navigator.platform) : false;
}
function $c87311424ea30a05$var$cached(fn2) {
  if (false) return fn2;
  let res = null;
  return () => {
    if (res == null) res = fn2();
    return res;
  };
}
var $c87311424ea30a05$export$9ac100e40613ea10 = $c87311424ea30a05$var$cached(function() {
  return $c87311424ea30a05$var$testPlatform(/^Mac/i);
});
var $c87311424ea30a05$export$186c6964ca17d99 = $c87311424ea30a05$var$cached(function() {
  return $c87311424ea30a05$var$testPlatform(/^iPhone/i);
});
var $c87311424ea30a05$export$7bef049ce92e4224 = $c87311424ea30a05$var$cached(function() {
  return $c87311424ea30a05$var$testPlatform(/^iPad/i) || // iPadOS 13 lies and says it's a Mac, but we can distinguish by detecting touch support.
  $c87311424ea30a05$export$9ac100e40613ea10() && navigator.maxTouchPoints > 1;
});
var $c87311424ea30a05$export$fedb369cb70207f1 = $c87311424ea30a05$var$cached(function() {
  return $c87311424ea30a05$export$186c6964ca17d99() || $c87311424ea30a05$export$7bef049ce92e4224();
});
var $c87311424ea30a05$export$e1865c3bedcd822b = $c87311424ea30a05$var$cached(function() {
  return $c87311424ea30a05$export$9ac100e40613ea10() || $c87311424ea30a05$export$fedb369cb70207f1();
});
var $c87311424ea30a05$export$78551043582a6a98 = $c87311424ea30a05$var$cached(function() {
  return $c87311424ea30a05$var$testUserAgent(/AppleWebKit/i) && !$c87311424ea30a05$export$6446a186d09e379e();
});
var $c87311424ea30a05$export$6446a186d09e379e = $c87311424ea30a05$var$cached(function() {
  return $c87311424ea30a05$var$testUserAgent(/Chrome/i);
});
var $c87311424ea30a05$export$a11b0059900ceec8 = $c87311424ea30a05$var$cached(function() {
  return $c87311424ea30a05$var$testUserAgent(/Android/i);
});
var $c87311424ea30a05$export$b7d78993b74f766d = $c87311424ea30a05$var$cached(function() {
  return $c87311424ea30a05$var$testUserAgent(/Firefox/i);
});

// node_modules/@react-aria/utils/dist/openLink.mjs
var import_react44 = __toESM(require_react(), 1);
var $ea8dcbcb9ea1b556$var$RouterContext = (0, import_react44.createContext)({
  isNative: true,
  open: $ea8dcbcb9ea1b556$var$openSyntheticLink,
  useHref: (href) => href
});
function $ea8dcbcb9ea1b556$export$95185d699e05d4d7(target, modifiers, setOpening = true) {
  var _window_event_type, _window_event;
  let { metaKey, ctrlKey, altKey, shiftKey } = modifiers;
  if ((0, $c87311424ea30a05$export$b7d78993b74f766d)() && ((_window_event = window.event) === null || _window_event === void 0 ? void 0 : (_window_event_type = _window_event.type) === null || _window_event_type === void 0 ? void 0 : _window_event_type.startsWith("key")) && target.target === "_blank") {
    if ((0, $c87311424ea30a05$export$9ac100e40613ea10)()) metaKey = true;
    else ctrlKey = true;
  }
  let event = (0, $c87311424ea30a05$export$78551043582a6a98)() && (0, $c87311424ea30a05$export$9ac100e40613ea10)() && !(0, $c87311424ea30a05$export$7bef049ce92e4224)() && true ? new KeyboardEvent("keydown", {
    keyIdentifier: "Enter",
    metaKey,
    ctrlKey,
    altKey,
    shiftKey
  }) : new MouseEvent("click", {
    metaKey,
    ctrlKey,
    altKey,
    shiftKey,
    bubbles: true,
    cancelable: true
  });
  $ea8dcbcb9ea1b556$export$95185d699e05d4d7.isOpening = setOpening;
  (0, $7215afc6de606d6b$export$de79e2c695e052f3)(target);
  target.dispatchEvent(event);
  $ea8dcbcb9ea1b556$export$95185d699e05d4d7.isOpening = false;
}
$ea8dcbcb9ea1b556$export$95185d699e05d4d7.isOpening = false;
function $ea8dcbcb9ea1b556$var$getSyntheticLink(target, open) {
  if (target instanceof HTMLAnchorElement) open(target);
  else if (target.hasAttribute("data-href")) {
    let link2 = document.createElement("a");
    link2.href = target.getAttribute("data-href");
    if (target.hasAttribute("data-target")) link2.target = target.getAttribute("data-target");
    if (target.hasAttribute("data-rel")) link2.rel = target.getAttribute("data-rel");
    if (target.hasAttribute("data-download")) link2.download = target.getAttribute("data-download");
    if (target.hasAttribute("data-ping")) link2.ping = target.getAttribute("data-ping");
    if (target.hasAttribute("data-referrer-policy")) link2.referrerPolicy = target.getAttribute("data-referrer-policy");
    target.appendChild(link2);
    open(link2);
    target.removeChild(link2);
  }
}
function $ea8dcbcb9ea1b556$var$openSyntheticLink(target, modifiers) {
  $ea8dcbcb9ea1b556$var$getSyntheticLink(target, (link2) => $ea8dcbcb9ea1b556$export$95185d699e05d4d7(link2, modifiers));
}

// node_modules/@react-aria/utils/dist/runAfterTransition.mjs
var $bbed8b41f857bcc0$var$transitionsByElement = /* @__PURE__ */ new Map();
var $bbed8b41f857bcc0$var$transitionCallbacks = /* @__PURE__ */ new Set();
function $bbed8b41f857bcc0$var$setupGlobalEvents() {
  if (typeof window === "undefined") return;
  function isTransitionEvent(event) {
    return "propertyName" in event;
  }
  let onTransitionStart = (e) => {
    if (!isTransitionEvent(e) || !e.target) return;
    let transitions = $bbed8b41f857bcc0$var$transitionsByElement.get(e.target);
    if (!transitions) {
      transitions = /* @__PURE__ */ new Set();
      $bbed8b41f857bcc0$var$transitionsByElement.set(e.target, transitions);
      e.target.addEventListener("transitioncancel", onTransitionEnd, {
        once: true
      });
    }
    transitions.add(e.propertyName);
  };
  let onTransitionEnd = (e) => {
    if (!isTransitionEvent(e) || !e.target) return;
    let properties = $bbed8b41f857bcc0$var$transitionsByElement.get(e.target);
    if (!properties) return;
    properties.delete(e.propertyName);
    if (properties.size === 0) {
      e.target.removeEventListener("transitioncancel", onTransitionEnd);
      $bbed8b41f857bcc0$var$transitionsByElement.delete(e.target);
    }
    if ($bbed8b41f857bcc0$var$transitionsByElement.size === 0) {
      for (let cb of $bbed8b41f857bcc0$var$transitionCallbacks) cb();
      $bbed8b41f857bcc0$var$transitionCallbacks.clear();
    }
  };
  document.body.addEventListener("transitionrun", onTransitionStart);
  document.body.addEventListener("transitionend", onTransitionEnd);
}
if (typeof document !== "undefined") {
  if (document.readyState !== "loading") $bbed8b41f857bcc0$var$setupGlobalEvents();
  else document.addEventListener("DOMContentLoaded", $bbed8b41f857bcc0$var$setupGlobalEvents);
}
function $bbed8b41f857bcc0$var$cleanupDetachedElements() {
  for (const [eventTarget] of $bbed8b41f857bcc0$var$transitionsByElement)
    if ("isConnected" in eventTarget && !eventTarget.isConnected) $bbed8b41f857bcc0$var$transitionsByElement.delete(eventTarget);
}
function $bbed8b41f857bcc0$export$24490316f764c430(fn2) {
  requestAnimationFrame(() => {
    $bbed8b41f857bcc0$var$cleanupDetachedElements();
    if ($bbed8b41f857bcc0$var$transitionsByElement.size === 0) fn2();
    else $bbed8b41f857bcc0$var$transitionCallbacks.add(fn2);
  });
}

// node_modules/@react-aria/utils/dist/useDrag1D.mjs
var import_react45 = __toESM(require_react(), 1);

// node_modules/@react-aria/utils/dist/useGlobalListeners.mjs
var import_react46 = __toESM(require_react(), 1);
function $03deb23ff14920c4$export$4eaf04e54aa8eed6() {
  let globalListeners = (0, import_react46.useRef)(/* @__PURE__ */ new Map());
  let addGlobalListener = (0, import_react46.useCallback)((eventTarget, type, listener, options2) => {
    let fn2 = (options2 === null || options2 === void 0 ? void 0 : options2.once) ? (...args) => {
      globalListeners.current.delete(listener);
      listener(...args);
    } : listener;
    globalListeners.current.set(listener, {
      type,
      eventTarget,
      fn: fn2,
      options: options2
    });
    eventTarget.addEventListener(type, fn2, options2);
  }, []);
  let removeGlobalListener = (0, import_react46.useCallback)((eventTarget, type, listener, options2) => {
    var _globalListeners_current_get;
    let fn2 = ((_globalListeners_current_get = globalListeners.current.get(listener)) === null || _globalListeners_current_get === void 0 ? void 0 : _globalListeners_current_get.fn) || listener;
    eventTarget.removeEventListener(type, fn2, options2);
    globalListeners.current.delete(listener);
  }, []);
  let removeAllGlobalListeners = (0, import_react46.useCallback)(() => {
    globalListeners.current.forEach((value, key) => {
      removeGlobalListener(value.eventTarget, value.type, key, value.options);
    });
  }, [
    removeGlobalListener
  ]);
  (0, import_react46.useEffect)(() => {
    return removeAllGlobalListeners;
  }, [
    removeAllGlobalListeners
  ]);
  return {
    addGlobalListener,
    removeGlobalListener,
    removeAllGlobalListeners
  };
}

// node_modules/@react-aria/utils/dist/useObjectRef.mjs
var import_react47 = __toESM(require_react(), 1);
function $df56164dff5785e2$export$4338b53315abf666(ref) {
  const objRef = (0, import_react47.useRef)(null);
  const cleanupRef = (0, import_react47.useRef)(void 0);
  const refEffect = (0, import_react47.useCallback)((instance2) => {
    if (typeof ref === "function") {
      const refCallback = ref;
      const refCleanup = refCallback(instance2);
      return () => {
        if (typeof refCleanup === "function") refCleanup();
        else refCallback(null);
      };
    } else if (ref) {
      ref.current = instance2;
      return () => {
        ref.current = null;
      };
    }
  }, [
    ref
  ]);
  return (0, import_react47.useMemo)(() => ({
    get current() {
      return objRef.current;
    },
    set current(value) {
      objRef.current = value;
      if (cleanupRef.current) {
        cleanupRef.current();
        cleanupRef.current = void 0;
      }
      if (value != null) cleanupRef.current = refEffect(value);
    }
  }), [
    refEffect
  ]);
}

// node_modules/@react-aria/utils/dist/useUpdateEffect.mjs
var import_react48 = __toESM(require_react(), 1);

// node_modules/@react-aria/utils/dist/useUpdateLayoutEffect.mjs
var import_react49 = __toESM(require_react(), 1);

// node_modules/@react-aria/utils/dist/useResizeObserver.mjs
var import_react50 = __toESM(require_react(), 1);

// node_modules/@react-aria/utils/dist/useSyncRef.mjs
function $e7801be82b4b2a53$export$4debdb1a3f0fa79e(context, ref) {
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if (context && context.ref && ref) {
      context.ref.current = ref.current;
      return () => {
        if (context.ref) context.ref.current = null;
      };
    }
  });
}

// node_modules/@react-aria/utils/dist/useViewportSize.mjs
var import_react51 = __toESM(require_react(), 1);
var $5df64b3807dc15ee$var$visualViewport = typeof document !== "undefined" && window.visualViewport;

// node_modules/@react-aria/utils/dist/useDescription.mjs
var import_react52 = __toESM(require_react(), 1);

// node_modules/@react-aria/utils/dist/useEvent.mjs
var import_react53 = __toESM(require_react(), 1);

// node_modules/@react-aria/utils/dist/isVirtualEvent.mjs
function $6a7db85432448f7f$export$60278871457622de(event) {
  if (event.mozInputSource === 0 && event.isTrusted) return true;
  if ((0, $c87311424ea30a05$export$a11b0059900ceec8)() && event.pointerType) return event.type === "click" && event.buttons === 1;
  return event.detail === 0 && !event.pointerType;
}
function $6a7db85432448f7f$export$29bf1b5f2c56cf63(event) {
  return !(0, $c87311424ea30a05$export$a11b0059900ceec8)() && event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === "mouse";
}

// node_modules/@react-aria/utils/dist/useDeepMemo.mjs
var import_react54 = __toESM(require_react(), 1);

// node_modules/@react-aria/utils/dist/useFormReset.mjs
var import_react55 = __toESM(require_react(), 1);

// node_modules/@react-aria/utils/dist/useLoadMore.mjs
var import_react56 = __toESM(require_react(), 1);

// node_modules/@react-aria/utils/dist/useLoadMoreSentinel.mjs
var import_react57 = __toESM(require_react(), 1);

// node_modules/@react-aria/utils/dist/inertValue.mjs
var import_react58 = __toESM(require_react(), 1);

// node_modules/@react-aria/utils/dist/animation.mjs
var import_react_dom2 = __toESM(require_react_dom(), 1);
var import_react59 = __toESM(require_react(), 1);

// node_modules/@react-aria/utils/dist/isFocusable.mjs
var $b4b717babfbb907b$var$focusableElements = [
  "input:not([disabled]):not([type=hidden])",
  "select:not([disabled])",
  "textarea:not([disabled])",
  "button:not([disabled])",
  "a[href]",
  "area[href]",
  "summary",
  "iframe",
  "object",
  "embed",
  "audio[controls]",
  "video[controls]",
  '[contenteditable]:not([contenteditable^="false"])'
];
var $b4b717babfbb907b$var$FOCUSABLE_ELEMENT_SELECTOR = $b4b717babfbb907b$var$focusableElements.join(":not([hidden]),") + ",[tabindex]:not([disabled]):not([hidden])";
$b4b717babfbb907b$var$focusableElements.push('[tabindex]:not([tabindex="-1"]):not([disabled])');
var $b4b717babfbb907b$var$TABBABLE_ELEMENT_SELECTOR = $b4b717babfbb907b$var$focusableElements.join(':not([hidden]):not([tabindex="-1"]),');
function $b4b717babfbb907b$export$4c063cf1350e6fed(element2) {
  return element2.matches($b4b717babfbb907b$var$FOCUSABLE_ELEMENT_SELECTOR);
}
function $b4b717babfbb907b$export$bebd5a1431fec25d(element2) {
  return element2.matches($b4b717babfbb907b$var$TABBABLE_ELEMENT_SELECTOR);
}

// node_modules/@react-stately/utils/dist/useControlledState.mjs
var import_react60 = __toESM(require_react(), 1);

// node_modules/@react-aria/focus/dist/isElementVisible.mjs
function $645f2e67b85a24c9$var$isStyleVisible(element2) {
  const windowObject = (0, $431fbd86ca7dc216$export$f21a1ffae260145a)(element2);
  if (!(element2 instanceof windowObject.HTMLElement) && !(element2 instanceof windowObject.SVGElement)) return false;
  let { display, visibility } = element2.style;
  let isVisible = display !== "none" && visibility !== "hidden" && visibility !== "collapse";
  if (isVisible) {
    const { getComputedStyle: getComputedStyle3 } = element2.ownerDocument.defaultView;
    let { display: computedDisplay, visibility: computedVisibility } = getComputedStyle3(element2);
    isVisible = computedDisplay !== "none" && computedVisibility !== "hidden" && computedVisibility !== "collapse";
  }
  return isVisible;
}
function $645f2e67b85a24c9$var$isAttributeVisible(element2, childElement) {
  return !element2.hasAttribute("hidden") && // Ignore HiddenSelect when tree walking.
  !element2.hasAttribute("data-react-aria-prevent-focus") && (element2.nodeName === "DETAILS" && childElement && childElement.nodeName !== "SUMMARY" ? element2.hasAttribute("open") : true);
}
function $645f2e67b85a24c9$export$e989c0fffaa6b27a(element2, childElement) {
  return element2.nodeName !== "#comment" && $645f2e67b85a24c9$var$isStyleVisible(element2) && $645f2e67b85a24c9$var$isAttributeVisible(element2, childElement) && (!element2.parentElement || $645f2e67b85a24c9$export$e989c0fffaa6b27a(element2.parentElement, element2));
}

// node_modules/@react-aria/interactions/dist/utils.mjs
var import_react61 = __toESM(require_react(), 1);
function $8a9cb279dc87e130$export$525bc4921d56d4a(nativeEvent) {
  let event = nativeEvent;
  event.nativeEvent = nativeEvent;
  event.isDefaultPrevented = () => event.defaultPrevented;
  event.isPropagationStopped = () => event.cancelBubble;
  event.persist = () => {
  };
  return event;
}
function $8a9cb279dc87e130$export$c2b7abe5d61ec696(event, target) {
  Object.defineProperty(event, "target", {
    value: target
  });
  Object.defineProperty(event, "currentTarget", {
    value: target
  });
}
function $8a9cb279dc87e130$export$715c682d09d639cc(onBlur) {
  let stateRef = (0, import_react61.useRef)({
    isFocused: false,
    observer: null
  });
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    const state = stateRef.current;
    return () => {
      if (state.observer) {
        state.observer.disconnect();
        state.observer = null;
      }
    };
  }, []);
  let dispatchBlur = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((e) => {
    onBlur === null || onBlur === void 0 ? void 0 : onBlur(e);
  });
  return (0, import_react61.useCallback)((e) => {
    if (e.target instanceof HTMLButtonElement || e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement || e.target instanceof HTMLSelectElement) {
      stateRef.current.isFocused = true;
      let target = e.target;
      let onBlurHandler = (e2) => {
        stateRef.current.isFocused = false;
        if (target.disabled) {
          let event = $8a9cb279dc87e130$export$525bc4921d56d4a(e2);
          dispatchBlur(event);
        }
        if (stateRef.current.observer) {
          stateRef.current.observer.disconnect();
          stateRef.current.observer = null;
        }
      };
      target.addEventListener("focusout", onBlurHandler, {
        once: true
      });
      stateRef.current.observer = new MutationObserver(() => {
        if (stateRef.current.isFocused && target.disabled) {
          var _stateRef_current_observer;
          (_stateRef_current_observer = stateRef.current.observer) === null || _stateRef_current_observer === void 0 ? void 0 : _stateRef_current_observer.disconnect();
          let relatedTargetEl = target === document.activeElement ? null : document.activeElement;
          target.dispatchEvent(new FocusEvent("blur", {
            relatedTarget: relatedTargetEl
          }));
          target.dispatchEvent(new FocusEvent("focusout", {
            bubbles: true,
            relatedTarget: relatedTargetEl
          }));
        }
      });
      stateRef.current.observer.observe(target, {
        attributes: true,
        attributeFilter: [
          "disabled"
        ]
      });
    }
  }, [
    dispatchBlur
  ]);
}
var $8a9cb279dc87e130$export$fda7da73ab5d4c48 = false;
function $8a9cb279dc87e130$export$cabe61c495ee3649(target) {
  while (target && !(0, $b4b717babfbb907b$export$4c063cf1350e6fed)(target)) target = target.parentElement;
  let window2 = (0, $431fbd86ca7dc216$export$f21a1ffae260145a)(target);
  let activeElement = window2.document.activeElement;
  if (!activeElement || activeElement === target) return;
  $8a9cb279dc87e130$export$fda7da73ab5d4c48 = true;
  let isRefocusing = false;
  let onBlur = (e) => {
    if (e.target === activeElement || isRefocusing) e.stopImmediatePropagation();
  };
  let onFocusOut = (e) => {
    if (e.target === activeElement || isRefocusing) {
      e.stopImmediatePropagation();
      if (!target && !isRefocusing) {
        isRefocusing = true;
        (0, $7215afc6de606d6b$export$de79e2c695e052f3)(activeElement);
        cleanup();
      }
    }
  };
  let onFocus = (e) => {
    if (e.target === target || isRefocusing) e.stopImmediatePropagation();
  };
  let onFocusIn = (e) => {
    if (e.target === target || isRefocusing) {
      e.stopImmediatePropagation();
      if (!isRefocusing) {
        isRefocusing = true;
        (0, $7215afc6de606d6b$export$de79e2c695e052f3)(activeElement);
        cleanup();
      }
    }
  };
  window2.addEventListener("blur", onBlur, true);
  window2.addEventListener("focusout", onFocusOut, true);
  window2.addEventListener("focusin", onFocusIn, true);
  window2.addEventListener("focus", onFocus, true);
  let cleanup = () => {
    cancelAnimationFrame(raf);
    window2.removeEventListener("blur", onBlur, true);
    window2.removeEventListener("focusout", onFocusOut, true);
    window2.removeEventListener("focusin", onFocusIn, true);
    window2.removeEventListener("focus", onFocus, true);
    $8a9cb279dc87e130$export$fda7da73ab5d4c48 = false;
    isRefocusing = false;
  };
  let raf = requestAnimationFrame(cleanup);
  return cleanup;
}

// node_modules/@react-aria/interactions/dist/textSelection.mjs
var $14c0b72509d70225$var$state = "default";
var $14c0b72509d70225$var$savedUserSelect = "";
var $14c0b72509d70225$var$modifiedElementMap = /* @__PURE__ */ new WeakMap();
function $14c0b72509d70225$export$16a4697467175487(target) {
  if ((0, $c87311424ea30a05$export$fedb369cb70207f1)()) {
    if ($14c0b72509d70225$var$state === "default") {
      const documentObject = (0, $431fbd86ca7dc216$export$b204af158042fbac)(target);
      $14c0b72509d70225$var$savedUserSelect = documentObject.documentElement.style.webkitUserSelect;
      documentObject.documentElement.style.webkitUserSelect = "none";
    }
    $14c0b72509d70225$var$state = "disabled";
  } else if (target instanceof HTMLElement || target instanceof SVGElement) {
    let property = "userSelect" in target.style ? "userSelect" : "webkitUserSelect";
    $14c0b72509d70225$var$modifiedElementMap.set(target, target.style[property]);
    target.style[property] = "none";
  }
}
function $14c0b72509d70225$export$b0d6fa1ab32e3295(target) {
  if ((0, $c87311424ea30a05$export$fedb369cb70207f1)()) {
    if ($14c0b72509d70225$var$state !== "disabled") return;
    $14c0b72509d70225$var$state = "restoring";
    setTimeout(() => {
      (0, $bbed8b41f857bcc0$export$24490316f764c430)(() => {
        if ($14c0b72509d70225$var$state === "restoring") {
          const documentObject = (0, $431fbd86ca7dc216$export$b204af158042fbac)(target);
          if (documentObject.documentElement.style.webkitUserSelect === "none") documentObject.documentElement.style.webkitUserSelect = $14c0b72509d70225$var$savedUserSelect || "";
          $14c0b72509d70225$var$savedUserSelect = "";
          $14c0b72509d70225$var$state = "default";
        }
      });
    }, 300);
  } else if (target instanceof HTMLElement || target instanceof SVGElement) {
    if (target && $14c0b72509d70225$var$modifiedElementMap.has(target)) {
      let targetOldUserSelect = $14c0b72509d70225$var$modifiedElementMap.get(target);
      let property = "userSelect" in target.style ? "userSelect" : "webkitUserSelect";
      if (target.style[property] === "none") target.style[property] = targetOldUserSelect;
      if (target.getAttribute("style") === "") target.removeAttribute("style");
      $14c0b72509d70225$var$modifiedElementMap.delete(target);
    }
  }
}

// node_modules/@react-aria/interactions/dist/context.mjs
var import_react62 = __toESM(require_react(), 1);
var $ae1eeba8b9eafd08$export$5165eccb35aaadb5 = (0, import_react62.default).createContext({
  register: () => {
  }
});
$ae1eeba8b9eafd08$export$5165eccb35aaadb5.displayName = "PressResponderContext";

// node_modules/@swc/helpers/esm/_class_apply_descriptor_get.js
function _class_apply_descriptor_get(receiver, descriptor) {
  if (descriptor.get) return descriptor.get.call(receiver);
  return descriptor.value;
}

// node_modules/@swc/helpers/esm/_class_extract_field_descriptor.js
function _class_extract_field_descriptor(receiver, privateMap, action) {
  if (!privateMap.has(receiver)) throw new TypeError("attempted to " + action + " private field on non-instance");
  return privateMap.get(receiver);
}

// node_modules/@swc/helpers/esm/_class_private_field_get.js
function _class_private_field_get(receiver, privateMap) {
  var descriptor = _class_extract_field_descriptor(receiver, privateMap, "get");
  return _class_apply_descriptor_get(receiver, descriptor);
}

// node_modules/@swc/helpers/esm/_check_private_redeclaration.js
function _check_private_redeclaration(obj, privateCollection) {
  if (privateCollection.has(obj)) {
    throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
}

// node_modules/@swc/helpers/esm/_class_private_field_init.js
function _class_private_field_init(obj, privateMap, value) {
  _check_private_redeclaration(obj, privateMap);
  privateMap.set(obj, value);
}

// node_modules/@swc/helpers/esm/_class_apply_descriptor_set.js
function _class_apply_descriptor_set(receiver, descriptor, value) {
  if (descriptor.set) descriptor.set.call(receiver, value);
  else {
    if (!descriptor.writable) {
      throw new TypeError("attempted to set read only private field");
    }
    descriptor.value = value;
  }
}

// node_modules/@swc/helpers/esm/_class_private_field_set.js
function _class_private_field_set(receiver, privateMap, value) {
  var descriptor = _class_extract_field_descriptor(receiver, privateMap, "set");
  _class_apply_descriptor_set(receiver, descriptor, value);
  return value;
}

// node_modules/@react-aria/interactions/dist/usePress.mjs
var import_react_dom3 = __toESM(require_react_dom(), 1);
var import_react63 = __toESM(require_react(), 1);
function $f6c31cce2adf654f$var$usePressResponderContext(props) {
  let context = (0, import_react63.useContext)((0, $ae1eeba8b9eafd08$export$5165eccb35aaadb5));
  if (context) {
    let { register, ...contextProps } = context;
    props = (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(contextProps, props);
    register();
  }
  (0, $e7801be82b4b2a53$export$4debdb1a3f0fa79e)(context, props.ref);
  return props;
}
var $f6c31cce2adf654f$var$_shouldStopPropagation = /* @__PURE__ */ new WeakMap();
var $f6c31cce2adf654f$var$PressEvent = class {
  continuePropagation() {
    (0, _class_private_field_set)(this, $f6c31cce2adf654f$var$_shouldStopPropagation, false);
  }
  get shouldStopPropagation() {
    return (0, _class_private_field_get)(this, $f6c31cce2adf654f$var$_shouldStopPropagation);
  }
  constructor(type, pointerType, originalEvent, state) {
    (0, _class_private_field_init)(this, $f6c31cce2adf654f$var$_shouldStopPropagation, {
      writable: true,
      value: void 0
    });
    (0, _class_private_field_set)(this, $f6c31cce2adf654f$var$_shouldStopPropagation, true);
    var _state_target;
    let currentTarget = (_state_target = state === null || state === void 0 ? void 0 : state.target) !== null && _state_target !== void 0 ? _state_target : originalEvent.currentTarget;
    const rect = currentTarget === null || currentTarget === void 0 ? void 0 : currentTarget.getBoundingClientRect();
    let x, y = 0;
    let clientX, clientY = null;
    if (originalEvent.clientX != null && originalEvent.clientY != null) {
      clientX = originalEvent.clientX;
      clientY = originalEvent.clientY;
    }
    if (rect) {
      if (clientX != null && clientY != null) {
        x = clientX - rect.left;
        y = clientY - rect.top;
      } else {
        x = rect.width / 2;
        y = rect.height / 2;
      }
    }
    this.type = type;
    this.pointerType = pointerType;
    this.target = originalEvent.currentTarget;
    this.shiftKey = originalEvent.shiftKey;
    this.metaKey = originalEvent.metaKey;
    this.ctrlKey = originalEvent.ctrlKey;
    this.altKey = originalEvent.altKey;
    this.x = x;
    this.y = y;
  }
};
var $f6c31cce2adf654f$var$LINK_CLICKED = Symbol("linkClicked");
var $f6c31cce2adf654f$var$STYLE_ID = "react-aria-pressable-style";
var $f6c31cce2adf654f$var$PRESSABLE_ATTRIBUTE = "data-react-aria-pressable";
function $f6c31cce2adf654f$export$45712eceda6fad21(props) {
  let { onPress, onPressChange, onPressStart, onPressEnd, onPressUp, onClick, isDisabled, isPressed: isPressedProp, preventFocusOnPress, shouldCancelOnPointerExit, allowTextSelectionOnPress, ref: domRef, ...domProps } = $f6c31cce2adf654f$var$usePressResponderContext(props);
  let [isPressed, setPressed] = (0, import_react63.useState)(false);
  let ref = (0, import_react63.useRef)({
    isPressed: false,
    ignoreEmulatedMouseEvents: false,
    didFirePressStart: false,
    isTriggeringEvent: false,
    activePointerId: null,
    target: null,
    isOverTarget: false,
    pointerType: null,
    disposables: []
  });
  let { addGlobalListener, removeAllGlobalListeners } = (0, $03deb23ff14920c4$export$4eaf04e54aa8eed6)();
  let triggerPressStart = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((originalEvent, pointerType) => {
    let state = ref.current;
    if (isDisabled || state.didFirePressStart) return false;
    let shouldStopPropagation = true;
    state.isTriggeringEvent = true;
    if (onPressStart) {
      let event = new $f6c31cce2adf654f$var$PressEvent("pressstart", pointerType, originalEvent);
      onPressStart(event);
      shouldStopPropagation = event.shouldStopPropagation;
    }
    if (onPressChange) onPressChange(true);
    state.isTriggeringEvent = false;
    state.didFirePressStart = true;
    setPressed(true);
    return shouldStopPropagation;
  });
  let triggerPressEnd = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((originalEvent, pointerType, wasPressed = true) => {
    let state = ref.current;
    if (!state.didFirePressStart) return false;
    state.didFirePressStart = false;
    state.isTriggeringEvent = true;
    let shouldStopPropagation = true;
    if (onPressEnd) {
      let event = new $f6c31cce2adf654f$var$PressEvent("pressend", pointerType, originalEvent);
      onPressEnd(event);
      shouldStopPropagation = event.shouldStopPropagation;
    }
    if (onPressChange) onPressChange(false);
    setPressed(false);
    if (onPress && wasPressed && !isDisabled) {
      let event = new $f6c31cce2adf654f$var$PressEvent("press", pointerType, originalEvent);
      onPress(event);
      shouldStopPropagation && (shouldStopPropagation = event.shouldStopPropagation);
    }
    state.isTriggeringEvent = false;
    return shouldStopPropagation;
  });
  let triggerPressUp = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((originalEvent, pointerType) => {
    let state = ref.current;
    if (isDisabled) return false;
    if (onPressUp) {
      state.isTriggeringEvent = true;
      let event = new $f6c31cce2adf654f$var$PressEvent("pressup", pointerType, originalEvent);
      onPressUp(event);
      state.isTriggeringEvent = false;
      return event.shouldStopPropagation;
    }
    return true;
  });
  let cancel = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((e) => {
    let state = ref.current;
    if (state.isPressed && state.target) {
      if (state.didFirePressStart && state.pointerType != null) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
      state.isPressed = false;
      state.isOverTarget = false;
      state.activePointerId = null;
      state.pointerType = null;
      removeAllGlobalListeners();
      if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);
      for (let dispose of state.disposables) dispose();
      state.disposables = [];
    }
  });
  let cancelOnPointerExit = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((e) => {
    if (shouldCancelOnPointerExit) cancel(e);
  });
  let triggerClick = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((e) => {
    onClick === null || onClick === void 0 ? void 0 : onClick(e);
  });
  let triggerSyntheticClick = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((e, target) => {
    if (onClick) {
      let event = new MouseEvent("click", e);
      (0, $8a9cb279dc87e130$export$c2b7abe5d61ec696)(event, target);
      onClick((0, $8a9cb279dc87e130$export$525bc4921d56d4a)(event));
    }
  });
  let pressProps = (0, import_react63.useMemo)(() => {
    let state = ref.current;
    let pressProps2 = {
      onKeyDown(e) {
        if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && (0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent))) {
          var _state_metaKeyEvents;
          if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard((0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent), e.key)) e.preventDefault();
          let shouldStopPropagation = true;
          if (!state.isPressed && !e.repeat) {
            state.target = e.currentTarget;
            state.isPressed = true;
            state.pointerType = "keyboard";
            shouldStopPropagation = triggerPressStart(e, "keyboard");
            let originalTarget = e.currentTarget;
            let pressUp = (e2) => {
              if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e2, originalTarget) && !e2.repeat && (0, $d4ee10de306f2510$export$4282f70798064fe0)(originalTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e2)) && state.target) triggerPressUp($f6c31cce2adf654f$var$createEvent(state.target, e2), "keyboard");
            };
            addGlobalListener((0, $431fbd86ca7dc216$export$b204af158042fbac)(e.currentTarget), "keyup", (0, $ff5963eb1fccf552$export$e08e3b67e392101e)(pressUp, onKeyUp), true);
          }
          if (shouldStopPropagation) e.stopPropagation();
          if (e.metaKey && (0, $c87311424ea30a05$export$9ac100e40613ea10)()) (_state_metaKeyEvents = state.metaKeyEvents) === null || _state_metaKeyEvents === void 0 ? void 0 : _state_metaKeyEvents.set(e.key, e.nativeEvent);
        } else if (e.key === "Meta") state.metaKeyEvents = /* @__PURE__ */ new Map();
      },
      onClick(e) {
        if (e && !(0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent))) return;
        if (e && e.button === 0 && !state.isTriggeringEvent && !(0, $ea8dcbcb9ea1b556$export$95185d699e05d4d7).isOpening) {
          let shouldStopPropagation = true;
          if (isDisabled) e.preventDefault();
          if (!state.ignoreEmulatedMouseEvents && !state.isPressed && (state.pointerType === "virtual" || (0, $6a7db85432448f7f$export$60278871457622de)(e.nativeEvent))) {
            let stopPressStart = triggerPressStart(e, "virtual");
            let stopPressUp = triggerPressUp(e, "virtual");
            let stopPressEnd = triggerPressEnd(e, "virtual");
            triggerClick(e);
            shouldStopPropagation = stopPressStart && stopPressUp && stopPressEnd;
          } else if (state.isPressed && state.pointerType !== "keyboard") {
            let pointerType = state.pointerType || e.nativeEvent.pointerType || "virtual";
            let stopPressUp = triggerPressUp($f6c31cce2adf654f$var$createEvent(e.currentTarget, e), pointerType);
            let stopPressEnd = triggerPressEnd($f6c31cce2adf654f$var$createEvent(e.currentTarget, e), pointerType, true);
            shouldStopPropagation = stopPressUp && stopPressEnd;
            state.isOverTarget = false;
            triggerClick(e);
            cancel(e);
          }
          state.ignoreEmulatedMouseEvents = false;
          if (shouldStopPropagation) e.stopPropagation();
        }
      }
    };
    let onKeyUp = (e) => {
      var _state_metaKeyEvents;
      if (state.isPressed && state.target && $f6c31cce2adf654f$var$isValidKeyboardEvent(e, state.target)) {
        var _state_metaKeyEvents1;
        if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard((0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e), e.key)) e.preventDefault();
        let target = (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e);
        let wasPressed = (0, $d4ee10de306f2510$export$4282f70798064fe0)(state.target, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e));
        triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), "keyboard", wasPressed);
        if (wasPressed) triggerSyntheticClick(e, state.target);
        removeAllGlobalListeners();
        if (e.key !== "Enter" && $f6c31cce2adf654f$var$isHTMLAnchorLink(state.target) && (0, $d4ee10de306f2510$export$4282f70798064fe0)(state.target, target) && !e[$f6c31cce2adf654f$var$LINK_CLICKED]) {
          e[$f6c31cce2adf654f$var$LINK_CLICKED] = true;
          (0, $ea8dcbcb9ea1b556$export$95185d699e05d4d7)(state.target, e, false);
        }
        state.isPressed = false;
        (_state_metaKeyEvents1 = state.metaKeyEvents) === null || _state_metaKeyEvents1 === void 0 ? void 0 : _state_metaKeyEvents1.delete(e.key);
      } else if (e.key === "Meta" && ((_state_metaKeyEvents = state.metaKeyEvents) === null || _state_metaKeyEvents === void 0 ? void 0 : _state_metaKeyEvents.size)) {
        var _state_target;
        let events = state.metaKeyEvents;
        state.metaKeyEvents = void 0;
        for (let event of events.values()) (_state_target = state.target) === null || _state_target === void 0 ? void 0 : _state_target.dispatchEvent(new KeyboardEvent("keyup", event));
      }
    };
    if (typeof PointerEvent !== "undefined") {
      pressProps2.onPointerDown = (e) => {
        if (e.button !== 0 || !(0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent))) return;
        if ((0, $6a7db85432448f7f$export$29bf1b5f2c56cf63)(e.nativeEvent)) {
          state.pointerType = "virtual";
          return;
        }
        state.pointerType = e.pointerType;
        let shouldStopPropagation = true;
        if (!state.isPressed) {
          state.isPressed = true;
          state.isOverTarget = true;
          state.activePointerId = e.pointerId;
          state.target = e.currentTarget;
          if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$16a4697467175487)(state.target);
          shouldStopPropagation = triggerPressStart(e, state.pointerType);
          let target = (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent);
          if ("releasePointerCapture" in target) target.releasePointerCapture(e.pointerId);
          addGlobalListener((0, $431fbd86ca7dc216$export$b204af158042fbac)(e.currentTarget), "pointerup", onPointerUp, false);
          addGlobalListener((0, $431fbd86ca7dc216$export$b204af158042fbac)(e.currentTarget), "pointercancel", onPointerCancel, false);
        }
        if (shouldStopPropagation) e.stopPropagation();
      };
      pressProps2.onMouseDown = (e) => {
        if (!(0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent))) return;
        if (e.button === 0) {
          if (preventFocusOnPress) {
            let dispose = (0, $8a9cb279dc87e130$export$cabe61c495ee3649)(e.target);
            if (dispose) state.disposables.push(dispose);
          }
          e.stopPropagation();
        }
      };
      pressProps2.onPointerUp = (e) => {
        if (!(0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent)) || state.pointerType === "virtual") return;
        if (e.button === 0 && !state.isPressed) triggerPressUp(e, state.pointerType || e.pointerType);
      };
      pressProps2.onPointerEnter = (e) => {
        if (e.pointerId === state.activePointerId && state.target && !state.isOverTarget && state.pointerType != null) {
          state.isOverTarget = true;
          triggerPressStart($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);
        }
      };
      pressProps2.onPointerLeave = (e) => {
        if (e.pointerId === state.activePointerId && state.target && state.isOverTarget && state.pointerType != null) {
          state.isOverTarget = false;
          triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
          cancelOnPointerExit(e);
        }
      };
      let onPointerUp = (e) => {
        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0 && state.target) {
          if ((0, $d4ee10de306f2510$export$4282f70798064fe0)(state.target, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e)) && state.pointerType != null) {
            let clicked = false;
            let timeout = setTimeout(() => {
              if (state.isPressed && state.target instanceof HTMLElement) {
                if (clicked) cancel(e);
                else {
                  (0, $7215afc6de606d6b$export$de79e2c695e052f3)(state.target);
                  state.target.click();
                }
              }
            }, 80);
            addGlobalListener(e.currentTarget, "click", () => clicked = true, true);
            state.disposables.push(() => clearTimeout(timeout));
          } else cancel(e);
          state.isOverTarget = false;
        }
      };
      let onPointerCancel = (e) => {
        cancel(e);
      };
      pressProps2.onDragStart = (e) => {
        if (!(0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent))) return;
        cancel(e);
      };
    } else if (false) {
      pressProps2.onMouseDown = (e) => {
        if (e.button !== 0 || !(0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent))) return;
        if (state.ignoreEmulatedMouseEvents) {
          e.stopPropagation();
          return;
        }
        state.isPressed = true;
        state.isOverTarget = true;
        state.target = e.currentTarget;
        state.pointerType = (0, $6a7db85432448f7f$export$60278871457622de)(e.nativeEvent) ? "virtual" : "mouse";
        let shouldStopPropagation = (0, import_react_dom3.flushSync)(() => triggerPressStart(e, state.pointerType));
        if (shouldStopPropagation) e.stopPropagation();
        if (preventFocusOnPress) {
          let dispose = (0, $8a9cb279dc87e130$export$cabe61c495ee3649)(e.target);
          if (dispose) state.disposables.push(dispose);
        }
        addGlobalListener((0, $431fbd86ca7dc216$export$b204af158042fbac)(e.currentTarget), "mouseup", onMouseUp, false);
      };
      pressProps2.onMouseEnter = (e) => {
        if (!(0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent))) return;
        let shouldStopPropagation = true;
        if (state.isPressed && !state.ignoreEmulatedMouseEvents && state.pointerType != null) {
          state.isOverTarget = true;
          shouldStopPropagation = triggerPressStart(e, state.pointerType);
        }
        if (shouldStopPropagation) e.stopPropagation();
      };
      pressProps2.onMouseLeave = (e) => {
        if (!(0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent))) return;
        let shouldStopPropagation = true;
        if (state.isPressed && !state.ignoreEmulatedMouseEvents && state.pointerType != null) {
          state.isOverTarget = false;
          shouldStopPropagation = triggerPressEnd(e, state.pointerType, false);
          cancelOnPointerExit(e);
        }
        if (shouldStopPropagation) e.stopPropagation();
      };
      pressProps2.onMouseUp = (e) => {
        if (!(0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent))) return;
        if (!state.ignoreEmulatedMouseEvents && e.button === 0 && !state.isPressed) triggerPressUp(e, state.pointerType || "mouse");
      };
      let onMouseUp = (e) => {
        if (e.button !== 0) return;
        if (state.ignoreEmulatedMouseEvents) {
          state.ignoreEmulatedMouseEvents = false;
          return;
        }
        if (state.target && state.target.contains(e.target) && state.pointerType != null) ;
        else cancel(e);
        state.isOverTarget = false;
      };
      pressProps2.onTouchStart = (e) => {
        if (!(0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent))) return;
        let touch = $f6c31cce2adf654f$var$getTouchFromEvent(e.nativeEvent);
        if (!touch) return;
        state.activePointerId = touch.identifier;
        state.ignoreEmulatedMouseEvents = true;
        state.isOverTarget = true;
        state.isPressed = true;
        state.target = e.currentTarget;
        state.pointerType = "touch";
        if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$16a4697467175487)(state.target);
        let shouldStopPropagation = triggerPressStart($f6c31cce2adf654f$var$createTouchEvent(state.target, e), state.pointerType);
        if (shouldStopPropagation) e.stopPropagation();
        addGlobalListener((0, $431fbd86ca7dc216$export$f21a1ffae260145a)(e.currentTarget), "scroll", onScroll, true);
      };
      pressProps2.onTouchMove = (e) => {
        if (!(0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent))) return;
        if (!state.isPressed) {
          e.stopPropagation();
          return;
        }
        let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);
        let shouldStopPropagation = true;
        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {
          if (!state.isOverTarget && state.pointerType != null) {
            state.isOverTarget = true;
            shouldStopPropagation = triggerPressStart($f6c31cce2adf654f$var$createTouchEvent(state.target, e), state.pointerType);
          }
        } else if (state.isOverTarget && state.pointerType != null) {
          state.isOverTarget = false;
          shouldStopPropagation = triggerPressEnd($f6c31cce2adf654f$var$createTouchEvent(state.target, e), state.pointerType, false);
          cancelOnPointerExit($f6c31cce2adf654f$var$createTouchEvent(state.target, e));
        }
        if (shouldStopPropagation) e.stopPropagation();
      };
      pressProps2.onTouchEnd = (e) => {
        if (!(0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent))) return;
        if (!state.isPressed) {
          e.stopPropagation();
          return;
        }
        let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);
        let shouldStopPropagation = true;
        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget) && state.pointerType != null) {
          triggerPressUp($f6c31cce2adf654f$var$createTouchEvent(state.target, e), state.pointerType);
          shouldStopPropagation = triggerPressEnd($f6c31cce2adf654f$var$createTouchEvent(state.target, e), state.pointerType);
          triggerSyntheticClick(e.nativeEvent, state.target);
        } else if (state.isOverTarget && state.pointerType != null) shouldStopPropagation = triggerPressEnd($f6c31cce2adf654f$var$createTouchEvent(state.target, e), state.pointerType, false);
        if (shouldStopPropagation) e.stopPropagation();
        state.isPressed = false;
        state.activePointerId = null;
        state.isOverTarget = false;
        state.ignoreEmulatedMouseEvents = true;
        if (state.target && !allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);
        removeAllGlobalListeners();
      };
      pressProps2.onTouchCancel = (e) => {
        if (!(0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent))) return;
        e.stopPropagation();
        if (state.isPressed) cancel($f6c31cce2adf654f$var$createTouchEvent(state.target, e));
      };
      let onScroll = (e) => {
        if (state.isPressed && (0, $d4ee10de306f2510$export$4282f70798064fe0)((0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e), state.target)) cancel({
          currentTarget: state.target,
          shiftKey: false,
          ctrlKey: false,
          metaKey: false,
          altKey: false
        });
      };
      pressProps2.onDragStart = (e) => {
        if (!(0, $d4ee10de306f2510$export$4282f70798064fe0)(e.currentTarget, (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent))) return;
        cancel(e);
      };
    }
    return pressProps2;
  }, [
    addGlobalListener,
    isDisabled,
    preventFocusOnPress,
    removeAllGlobalListeners,
    allowTextSelectionOnPress,
    cancel,
    cancelOnPointerExit,
    triggerPressEnd,
    triggerPressStart,
    triggerPressUp,
    triggerClick,
    triggerSyntheticClick
  ]);
  (0, import_react63.useEffect)(() => {
    if (!domRef || false) return;
    const ownerDocument = (0, $431fbd86ca7dc216$export$b204af158042fbac)(domRef.current);
    if (!ownerDocument || !ownerDocument.head || ownerDocument.getElementById($f6c31cce2adf654f$var$STYLE_ID)) return;
    const style = ownerDocument.createElement("style");
    style.id = $f6c31cce2adf654f$var$STYLE_ID;
    style.textContent = `
@layer {
  [${$f6c31cce2adf654f$var$PRESSABLE_ATTRIBUTE}] {
    touch-action: pan-x pan-y pinch-zoom;
  }
}
    `.trim();
    ownerDocument.head.prepend(style);
  }, [
    domRef
  ]);
  (0, import_react63.useEffect)(() => {
    let state = ref.current;
    return () => {
      var _state_target;
      if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)((_state_target = state.target) !== null && _state_target !== void 0 ? _state_target : void 0);
      for (let dispose of state.disposables) dispose();
      state.disposables = [];
    };
  }, [
    allowTextSelectionOnPress
  ]);
  return {
    isPressed: isPressedProp || isPressed,
    pressProps: (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, pressProps, {
      [$f6c31cce2adf654f$var$PRESSABLE_ATTRIBUTE]: true
    })
  };
}
function $f6c31cce2adf654f$var$isHTMLAnchorLink(target) {
  return target.tagName === "A" && target.hasAttribute("href");
}
function $f6c31cce2adf654f$var$isValidKeyboardEvent(event, currentTarget) {
  const { key, code: code3 } = event;
  const element2 = currentTarget;
  const role = element2.getAttribute("role");
  return (key === "Enter" || key === " " || key === "Spacebar" || code3 === "Space") && !(element2 instanceof (0, $431fbd86ca7dc216$export$f21a1ffae260145a)(element2).HTMLInputElement && !$f6c31cce2adf654f$var$isValidInputKey(element2, key) || element2 instanceof (0, $431fbd86ca7dc216$export$f21a1ffae260145a)(element2).HTMLTextAreaElement || element2.isContentEditable) && // Links should only trigger with Enter key
  !((role === "link" || !role && $f6c31cce2adf654f$var$isHTMLAnchorLink(element2)) && key !== "Enter");
}
function $f6c31cce2adf654f$var$createEvent(target, e) {
  let clientX = e.clientX;
  let clientY = e.clientY;
  return {
    currentTarget: target,
    shiftKey: e.shiftKey,
    ctrlKey: e.ctrlKey,
    metaKey: e.metaKey,
    altKey: e.altKey,
    clientX,
    clientY
  };
}
function $f6c31cce2adf654f$var$shouldPreventDefaultUp(target) {
  if (target instanceof HTMLInputElement) return false;
  if (target instanceof HTMLButtonElement) return target.type !== "submit" && target.type !== "reset";
  if ($f6c31cce2adf654f$var$isHTMLAnchorLink(target)) return false;
  return true;
}
function $f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(target, key) {
  if (target instanceof HTMLInputElement) return !$f6c31cce2adf654f$var$isValidInputKey(target, key);
  return $f6c31cce2adf654f$var$shouldPreventDefaultUp(target);
}
var $f6c31cce2adf654f$var$nonTextInputTypes = /* @__PURE__ */ new Set([
  "checkbox",
  "radio",
  "range",
  "color",
  "file",
  "image",
  "button",
  "submit",
  "reset"
]);
function $f6c31cce2adf654f$var$isValidInputKey(target, key) {
  return target.type === "checkbox" || target.type === "radio" ? key === " " : $f6c31cce2adf654f$var$nonTextInputTypes.has(target.type);
}

// node_modules/@react-aria/interactions/dist/useFocusVisible.mjs
var import_react64 = __toESM(require_react(), 1);
var $507fabe10e71c6fb$var$currentModality = null;
var $507fabe10e71c6fb$var$changeHandlers = /* @__PURE__ */ new Set();
var $507fabe10e71c6fb$export$d90243b58daecda7 = /* @__PURE__ */ new Map();
var $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
var $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;
function $507fabe10e71c6fb$var$triggerChangeHandlers(modality, e) {
  for (let handler of $507fabe10e71c6fb$var$changeHandlers) handler(modality, e);
}
function $507fabe10e71c6fb$var$isValidKey(e) {
  return !(e.metaKey || !(0, $c87311424ea30a05$export$9ac100e40613ea10)() && e.altKey || e.ctrlKey || e.key === "Control" || e.key === "Shift" || e.key === "Meta");
}
function $507fabe10e71c6fb$var$handleKeyboardEvent(e) {
  $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
  if ($507fabe10e71c6fb$var$isValidKey(e)) {
    $507fabe10e71c6fb$var$currentModality = "keyboard";
    $507fabe10e71c6fb$var$triggerChangeHandlers("keyboard", e);
  }
}
function $507fabe10e71c6fb$var$handlePointerEvent(e) {
  $507fabe10e71c6fb$var$currentModality = "pointer";
  if (e.type === "mousedown" || e.type === "pointerdown") {
    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    $507fabe10e71c6fb$var$triggerChangeHandlers("pointer", e);
  }
}
function $507fabe10e71c6fb$var$handleClickEvent(e) {
  if ((0, $6a7db85432448f7f$export$60278871457622de)(e)) {
    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    $507fabe10e71c6fb$var$currentModality = "virtual";
  }
}
function $507fabe10e71c6fb$var$handleFocusEvent(e) {
  if (e.target === window || e.target === document || (0, $8a9cb279dc87e130$export$fda7da73ab5d4c48) || !e.isTrusted) return;
  if (!$507fabe10e71c6fb$var$hasEventBeforeFocus && !$507fabe10e71c6fb$var$hasBlurredWindowRecently) {
    $507fabe10e71c6fb$var$currentModality = "virtual";
    $507fabe10e71c6fb$var$triggerChangeHandlers("virtual", e);
  }
  $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
  $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;
}
function $507fabe10e71c6fb$var$handleWindowBlur() {
  if (0, $8a9cb279dc87e130$export$fda7da73ab5d4c48) return;
  $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
  $507fabe10e71c6fb$var$hasBlurredWindowRecently = true;
}
function $507fabe10e71c6fb$var$setupGlobalFocusEvents(element2) {
  if (typeof window === "undefined" || typeof document === "undefined" || $507fabe10e71c6fb$export$d90243b58daecda7.get((0, $431fbd86ca7dc216$export$f21a1ffae260145a)(element2))) return;
  const windowObject = (0, $431fbd86ca7dc216$export$f21a1ffae260145a)(element2);
  const documentObject = (0, $431fbd86ca7dc216$export$b204af158042fbac)(element2);
  let focus = windowObject.HTMLElement.prototype.focus;
  windowObject.HTMLElement.prototype.focus = function() {
    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    focus.apply(this, arguments);
  };
  documentObject.addEventListener("keydown", $507fabe10e71c6fb$var$handleKeyboardEvent, true);
  documentObject.addEventListener("keyup", $507fabe10e71c6fb$var$handleKeyboardEvent, true);
  documentObject.addEventListener("click", $507fabe10e71c6fb$var$handleClickEvent, true);
  windowObject.addEventListener("focus", $507fabe10e71c6fb$var$handleFocusEvent, true);
  windowObject.addEventListener("blur", $507fabe10e71c6fb$var$handleWindowBlur, false);
  if (typeof PointerEvent !== "undefined") {
    documentObject.addEventListener("pointerdown", $507fabe10e71c6fb$var$handlePointerEvent, true);
    documentObject.addEventListener("pointermove", $507fabe10e71c6fb$var$handlePointerEvent, true);
    documentObject.addEventListener("pointerup", $507fabe10e71c6fb$var$handlePointerEvent, true);
  } else if (false) {
    documentObject.addEventListener("mousedown", $507fabe10e71c6fb$var$handlePointerEvent, true);
    documentObject.addEventListener("mousemove", $507fabe10e71c6fb$var$handlePointerEvent, true);
    documentObject.addEventListener("mouseup", $507fabe10e71c6fb$var$handlePointerEvent, true);
  }
  windowObject.addEventListener("beforeunload", () => {
    $507fabe10e71c6fb$var$tearDownWindowFocusTracking(element2);
  }, {
    once: true
  });
  $507fabe10e71c6fb$export$d90243b58daecda7.set(windowObject, {
    focus
  });
}
var $507fabe10e71c6fb$var$tearDownWindowFocusTracking = (element2, loadListener) => {
  const windowObject = (0, $431fbd86ca7dc216$export$f21a1ffae260145a)(element2);
  const documentObject = (0, $431fbd86ca7dc216$export$b204af158042fbac)(element2);
  if (loadListener) documentObject.removeEventListener("DOMContentLoaded", loadListener);
  if (!$507fabe10e71c6fb$export$d90243b58daecda7.has(windowObject)) return;
  windowObject.HTMLElement.prototype.focus = $507fabe10e71c6fb$export$d90243b58daecda7.get(windowObject).focus;
  documentObject.removeEventListener("keydown", $507fabe10e71c6fb$var$handleKeyboardEvent, true);
  documentObject.removeEventListener("keyup", $507fabe10e71c6fb$var$handleKeyboardEvent, true);
  documentObject.removeEventListener("click", $507fabe10e71c6fb$var$handleClickEvent, true);
  windowObject.removeEventListener("focus", $507fabe10e71c6fb$var$handleFocusEvent, true);
  windowObject.removeEventListener("blur", $507fabe10e71c6fb$var$handleWindowBlur, false);
  if (typeof PointerEvent !== "undefined") {
    documentObject.removeEventListener("pointerdown", $507fabe10e71c6fb$var$handlePointerEvent, true);
    documentObject.removeEventListener("pointermove", $507fabe10e71c6fb$var$handlePointerEvent, true);
    documentObject.removeEventListener("pointerup", $507fabe10e71c6fb$var$handlePointerEvent, true);
  } else if (false) {
    documentObject.removeEventListener("mousedown", $507fabe10e71c6fb$var$handlePointerEvent, true);
    documentObject.removeEventListener("mousemove", $507fabe10e71c6fb$var$handlePointerEvent, true);
    documentObject.removeEventListener("mouseup", $507fabe10e71c6fb$var$handlePointerEvent, true);
  }
  $507fabe10e71c6fb$export$d90243b58daecda7.delete(windowObject);
};
function $507fabe10e71c6fb$export$2f1888112f558a7d(element2) {
  const documentObject = (0, $431fbd86ca7dc216$export$b204af158042fbac)(element2);
  let loadListener;
  if (documentObject.readyState !== "loading") $507fabe10e71c6fb$var$setupGlobalFocusEvents(element2);
  else {
    loadListener = () => {
      $507fabe10e71c6fb$var$setupGlobalFocusEvents(element2);
    };
    documentObject.addEventListener("DOMContentLoaded", loadListener);
  }
  return () => $507fabe10e71c6fb$var$tearDownWindowFocusTracking(element2, loadListener);
}
if (typeof document !== "undefined") $507fabe10e71c6fb$export$2f1888112f558a7d();
function $507fabe10e71c6fb$export$630ff653c5ada6a9() {
  return $507fabe10e71c6fb$var$currentModality;
}

// node_modules/@react-aria/interactions/dist/focusSafely.mjs
function $3ad3f6e1647bc98d$export$80f3e147d781571c(element2) {
  const ownerDocument = (0, $431fbd86ca7dc216$export$b204af158042fbac)(element2);
  const activeElement = (0, $d4ee10de306f2510$export$cd4e5573fbe2b576)(ownerDocument);
  if ((0, $507fabe10e71c6fb$export$630ff653c5ada6a9)() === "virtual") {
    let lastFocusedElement = activeElement;
    (0, $bbed8b41f857bcc0$export$24490316f764c430)(() => {
      if ((0, $d4ee10de306f2510$export$cd4e5573fbe2b576)(ownerDocument) === lastFocusedElement && element2.isConnected) (0, $7215afc6de606d6b$export$de79e2c695e052f3)(element2);
    });
  } else (0, $7215afc6de606d6b$export$de79e2c695e052f3)(element2);
}

// node_modules/@react-aria/interactions/dist/useFocus.mjs
var import_react65 = __toESM(require_react(), 1);
function $a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props) {
  let { isDisabled, onFocus: onFocusProp, onBlur: onBlurProp, onFocusChange } = props;
  const onBlur = (0, import_react65.useCallback)((e) => {
    if (e.target === e.currentTarget) {
      if (onBlurProp) onBlurProp(e);
      if (onFocusChange) onFocusChange(false);
      return true;
    }
  }, [
    onBlurProp,
    onFocusChange
  ]);
  const onSyntheticFocus = (0, $8a9cb279dc87e130$export$715c682d09d639cc)(onBlur);
  const onFocus = (0, import_react65.useCallback)((e) => {
    const ownerDocument = (0, $431fbd86ca7dc216$export$b204af158042fbac)(e.target);
    const activeElement = ownerDocument ? (0, $d4ee10de306f2510$export$cd4e5573fbe2b576)(ownerDocument) : (0, $d4ee10de306f2510$export$cd4e5573fbe2b576)();
    if (e.target === e.currentTarget && activeElement === (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e.nativeEvent)) {
      if (onFocusProp) onFocusProp(e);
      if (onFocusChange) onFocusChange(true);
      onSyntheticFocus(e);
    }
  }, [
    onFocusChange,
    onFocusProp,
    onSyntheticFocus
  ]);
  return {
    focusProps: {
      onFocus: !isDisabled && (onFocusProp || onFocusChange || onBlurProp) ? onFocus : void 0,
      onBlur: !isDisabled && (onBlurProp || onFocusChange) ? onBlur : void 0
    }
  };
}

// node_modules/@react-aria/interactions/dist/createEventHandler.mjs
function $93925083ecbb358c$export$48d1ea6320830260(handler) {
  if (!handler) return void 0;
  let shouldStopPropagation = true;
  return (e) => {
    let event = {
      ...e,
      preventDefault() {
        e.preventDefault();
      },
      isDefaultPrevented() {
        return e.isDefaultPrevented();
      },
      stopPropagation() {
        if (shouldStopPropagation && true) console.error("stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.");
        else shouldStopPropagation = true;
      },
      continuePropagation() {
        shouldStopPropagation = false;
      },
      isPropagationStopped() {
        return shouldStopPropagation;
      }
    };
    handler(event);
    if (shouldStopPropagation) e.stopPropagation();
  };
}

// node_modules/@react-aria/interactions/dist/useKeyboard.mjs
function $46d819fcbaf35654$export$8f71654801c2f7cd(props) {
  return {
    keyboardProps: props.isDisabled ? {} : {
      onKeyDown: (0, $93925083ecbb358c$export$48d1ea6320830260)(props.onKeyDown),
      onKeyUp: (0, $93925083ecbb358c$export$48d1ea6320830260)(props.onKeyUp)
    }
  };
}

// node_modules/@react-aria/interactions/dist/useFocusable.mjs
var import_react66 = __toESM(require_react(), 1);
var $f645667febf57a63$export$f9762fab77588ecb = (0, import_react66.default).createContext(null);
function $f645667febf57a63$var$useFocusableContext(ref) {
  let context = (0, import_react66.useContext)($f645667febf57a63$export$f9762fab77588ecb) || {};
  (0, $e7801be82b4b2a53$export$4debdb1a3f0fa79e)(context, ref);
  let { ref: _23, ...otherProps } = context;
  return otherProps;
}
var $f645667febf57a63$export$13f3202a3e5ddd5 = (0, import_react66.default).forwardRef(function FocusableProvider(props, ref) {
  let { children, ...otherProps } = props;
  let objRef = (0, $df56164dff5785e2$export$4338b53315abf666)(ref);
  let context = {
    ...otherProps,
    ref: objRef
  };
  return (0, import_react66.default).createElement($f645667febf57a63$export$f9762fab77588ecb.Provider, {
    value: context
  }, children);
});
function $f645667febf57a63$export$4c014de7c8940b4c(props, domRef) {
  let { focusProps } = (0, $a1ea59d68270f0dd$export$f8168d8dd8fd66e6)(props);
  let { keyboardProps } = (0, $46d819fcbaf35654$export$8f71654801c2f7cd)(props);
  let interactions = (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(focusProps, keyboardProps);
  let domProps = $f645667febf57a63$var$useFocusableContext(domRef);
  let interactionProps = props.isDisabled ? {} : domProps;
  let autoFocusRef = (0, import_react66.useRef)(props.autoFocus);
  (0, import_react66.useEffect)(() => {
    if (autoFocusRef.current && domRef.current) (0, $3ad3f6e1647bc98d$export$80f3e147d781571c)(domRef.current);
    autoFocusRef.current = false;
  }, [
    domRef
  ]);
  let tabIndex = props.excludeFromTabOrder ? -1 : 0;
  if (props.isDisabled) tabIndex = void 0;
  return {
    focusableProps: (0, $3ef42575df84b30b$export$9d1611c77c2fe928)({
      ...interactions,
      tabIndex
    }, interactionProps)
  };
}
var $f645667febf57a63$export$35a3bebf7ef2d934 = (0, import_react66.forwardRef)(({ children, ...props }, ref) => {
  ref = (0, $df56164dff5785e2$export$4338b53315abf666)(ref);
  let { focusableProps } = $f645667febf57a63$export$4c014de7c8940b4c(props, ref);
  let child = (0, import_react66.default).Children.only(children);
  (0, import_react66.useEffect)(() => {
    if (false) return;
    let el = ref.current;
    if (!el || !(el instanceof (0, $431fbd86ca7dc216$export$f21a1ffae260145a)(el).Element)) {
      console.error("<Focusable> child must forward its ref to a DOM element.");
      return;
    }
    if (!props.isDisabled && !(0, $b4b717babfbb907b$export$4c063cf1350e6fed)(el)) {
      console.warn("<Focusable> child must be focusable. Please ensure the tabIndex prop is passed through.");
      return;
    }
    if (el.localName !== "button" && el.localName !== "input" && el.localName !== "select" && el.localName !== "textarea" && el.localName !== "a" && el.localName !== "area" && el.localName !== "summary" && el.localName !== "img" && el.localName !== "svg") {
      let role = el.getAttribute("role");
      if (!role) console.warn("<Focusable> child must have an interactive ARIA role.");
      else if (
        // https://w3c.github.io/aria/#widget_roles
        role !== "application" && role !== "button" && role !== "checkbox" && role !== "combobox" && role !== "gridcell" && role !== "link" && role !== "menuitem" && role !== "menuitemcheckbox" && role !== "menuitemradio" && role !== "option" && role !== "radio" && role !== "searchbox" && role !== "separator" && role !== "slider" && role !== "spinbutton" && role !== "switch" && role !== "tab" && role !== "tabpanel" && role !== "textbox" && role !== "treeitem" && // aria-describedby is also announced on these roles
        role !== "img" && role !== "meter" && role !== "progressbar"
      ) console.warn(`<Focusable> child must have an interactive ARIA role. Got "${role}".`);
    }
  }, [
    ref,
    props.isDisabled
  ]);
  let childRef = parseInt((0, import_react66.default).version, 10) < 19 ? child.ref : child.props.ref;
  return (0, import_react66.default).cloneElement(child, {
    ...(0, $3ef42575df84b30b$export$9d1611c77c2fe928)(focusableProps, child.props),
    // @ts-ignore
    ref: (0, $5dc95899b306f630$export$c9058316764c140e)(childRef, ref)
  });
});

// node_modules/@react-aria/interactions/dist/Pressable.mjs
var import_react67 = __toESM(require_react(), 1);
var $3b117e43dc0ca95d$export$27c701ed9e449e99 = (0, import_react67.default).forwardRef(({ children, ...props }, ref) => {
  ref = (0, $df56164dff5785e2$export$4338b53315abf666)(ref);
  let { pressProps } = (0, $f6c31cce2adf654f$export$45712eceda6fad21)({
    ...props,
    ref
  });
  let { focusableProps } = (0, $f645667febf57a63$export$4c014de7c8940b4c)(props, ref);
  let child = (0, import_react67.default).Children.only(children);
  (0, import_react67.useEffect)(() => {
    if (false) return;
    let el = ref.current;
    if (!el || !(el instanceof (0, $431fbd86ca7dc216$export$f21a1ffae260145a)(el).Element)) {
      console.error("<Pressable> child must forward its ref to a DOM element.");
      return;
    }
    if (!props.isDisabled && !(0, $b4b717babfbb907b$export$4c063cf1350e6fed)(el)) {
      console.warn("<Pressable> child must be focusable. Please ensure the tabIndex prop is passed through.");
      return;
    }
    if (el.localName !== "button" && el.localName !== "input" && el.localName !== "select" && el.localName !== "textarea" && el.localName !== "a" && el.localName !== "area" && el.localName !== "summary") {
      let role = el.getAttribute("role");
      if (!role) console.warn("<Pressable> child must have an interactive ARIA role.");
      else if (
        // https://w3c.github.io/aria/#widget_roles
        role !== "application" && role !== "button" && role !== "checkbox" && role !== "combobox" && role !== "gridcell" && role !== "link" && role !== "menuitem" && role !== "menuitemcheckbox" && role !== "menuitemradio" && role !== "option" && role !== "radio" && role !== "searchbox" && role !== "separator" && role !== "slider" && role !== "spinbutton" && role !== "switch" && role !== "tab" && role !== "textbox" && role !== "treeitem"
      ) console.warn(`<Pressable> child must have an interactive ARIA role. Got "${role}".`);
    }
  }, [
    ref,
    props.isDisabled
  ]);
  let childRef = parseInt((0, import_react67.default).version, 10) < 19 ? child.ref : child.props.ref;
  return (0, import_react67.default).cloneElement(child, {
    ...(0, $3ef42575df84b30b$export$9d1611c77c2fe928)(pressProps, focusableProps, child.props),
    // @ts-ignore
    ref: (0, $5dc95899b306f630$export$c9058316764c140e)(childRef, ref)
  });
});

// node_modules/@react-aria/interactions/dist/PressResponder.mjs
var import_react68 = __toESM(require_react(), 1);
var $f1ab8c75478c6f73$export$3351871ee4b288b8 = (0, import_react68.default).forwardRef(({ children, ...props }, ref) => {
  let isRegistered = (0, import_react68.useRef)(false);
  let prevContext = (0, import_react68.useContext)((0, $ae1eeba8b9eafd08$export$5165eccb35aaadb5));
  ref = (0, $df56164dff5785e2$export$4338b53315abf666)(ref || (prevContext === null || prevContext === void 0 ? void 0 : prevContext.ref));
  let context = (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(prevContext || {}, {
    ...props,
    ref,
    register() {
      isRegistered.current = true;
      if (prevContext) prevContext.register();
    }
  });
  (0, $e7801be82b4b2a53$export$4debdb1a3f0fa79e)(prevContext, ref);
  (0, import_react68.useEffect)(() => {
    if (!isRegistered.current) {
      if (true) console.warn("A PressResponder was rendered without a pressable child. Either call the usePress hook, or wrap your DOM node with <Pressable> component.");
      isRegistered.current = true;
    }
  }, []);
  return (0, import_react68.default).createElement((0, $ae1eeba8b9eafd08$export$5165eccb35aaadb5).Provider, {
    value: context
  }, children);
});

// node_modules/@react-aria/interactions/dist/useFocusWithin.mjs
var import_react69 = __toESM(require_react(), 1);

// node_modules/@react-aria/interactions/dist/useHover.mjs
var import_react70 = __toESM(require_react(), 1);

// node_modules/@react-aria/interactions/dist/useInteractOutside.mjs
var import_react71 = __toESM(require_react(), 1);

// node_modules/@react-aria/interactions/dist/useMove.mjs
var import_react72 = __toESM(require_react(), 1);

// node_modules/@react-aria/interactions/dist/useScrollWheel.mjs
var import_react73 = __toESM(require_react(), 1);

// node_modules/@react-aria/interactions/dist/useLongPress.mjs
var import_react74 = __toESM(require_react(), 1);

// node_modules/@react-aria/focus/dist/FocusScope.mjs
var import_react75 = __toESM(require_react(), 1);
var $9bf71ea28793e738$var$FocusContext = (0, import_react75.default).createContext(null);
var $9bf71ea28793e738$var$RESTORE_FOCUS_EVENT = "react-aria-focus-scope-restore";
var $9bf71ea28793e738$var$activeScope = null;
function $9bf71ea28793e738$export$20e40289641fbbb6(props) {
  let { children, contain, restoreFocus, autoFocus } = props;
  let startRef = (0, import_react75.useRef)(null);
  let endRef = (0, import_react75.useRef)(null);
  let scopeRef = (0, import_react75.useRef)([]);
  let { parentNode } = (0, import_react75.useContext)($9bf71ea28793e738$var$FocusContext) || {};
  let node = (0, import_react75.useMemo)(() => new $9bf71ea28793e738$var$TreeNode({
    scopeRef
  }), [
    scopeRef
  ]);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    let parent = parentNode || $9bf71ea28793e738$export$d06fae2ee68b101e.root;
    if ($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parent.scopeRef) && $9bf71ea28793e738$var$activeScope && !$9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, parent.scopeRef)) {
      let activeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);
      if (activeNode) parent = activeNode;
    }
    parent.addChild(node);
    $9bf71ea28793e738$export$d06fae2ee68b101e.addNode(node);
  }, [
    node,
    parentNode
  ]);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    let node2 = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);
    if (node2) node2.contain = !!contain;
  }, [
    contain
  ]);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    var _startRef_current;
    let node2 = (_startRef_current = startRef.current) === null || _startRef_current === void 0 ? void 0 : _startRef_current.nextSibling;
    let nodes = [];
    let stopPropagation = (e) => e.stopPropagation();
    while (node2 && node2 !== endRef.current) {
      nodes.push(node2);
      node2.addEventListener($9bf71ea28793e738$var$RESTORE_FOCUS_EVENT, stopPropagation);
      node2 = node2.nextSibling;
    }
    scopeRef.current = nodes;
    return () => {
      for (let node3 of nodes) node3.removeEventListener($9bf71ea28793e738$var$RESTORE_FOCUS_EVENT, stopPropagation);
    };
  }, [
    children
  ]);
  $9bf71ea28793e738$var$useActiveScopeTracker(scopeRef, restoreFocus, contain);
  $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain);
  $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain);
  $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus);
  (0, import_react75.useEffect)(() => {
    const activeElement = (0, $d4ee10de306f2510$export$cd4e5573fbe2b576)((0, $431fbd86ca7dc216$export$b204af158042fbac)(scopeRef.current ? scopeRef.current[0] : void 0));
    let scope = null;
    if ($9bf71ea28793e738$var$isElementInScope(activeElement, scopeRef.current)) {
      for (let node2 of $9bf71ea28793e738$export$d06fae2ee68b101e.traverse()) if (node2.scopeRef && $9bf71ea28793e738$var$isElementInScope(activeElement, node2.scopeRef.current)) scope = node2;
      if (scope === $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef)) $9bf71ea28793e738$var$activeScope = scope.scopeRef;
    }
  }, [
    scopeRef
  ]);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    return () => {
      var _focusScopeTree_getTreeNode_parent, _focusScopeTree_getTreeNode;
      var _focusScopeTree_getTreeNode_parent_scopeRef;
      let parentScope = (_focusScopeTree_getTreeNode_parent_scopeRef = (_focusScopeTree_getTreeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef)) === null || _focusScopeTree_getTreeNode === void 0 ? void 0 : (_focusScopeTree_getTreeNode_parent = _focusScopeTree_getTreeNode.parent) === null || _focusScopeTree_getTreeNode_parent === void 0 ? void 0 : _focusScopeTree_getTreeNode_parent.scopeRef) !== null && _focusScopeTree_getTreeNode_parent_scopeRef !== void 0 ? _focusScopeTree_getTreeNode_parent_scopeRef : null;
      if ((scopeRef === $9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope(scopeRef, $9bf71ea28793e738$var$activeScope)) && (!parentScope || $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parentScope))) $9bf71ea28793e738$var$activeScope = parentScope;
      $9bf71ea28793e738$export$d06fae2ee68b101e.removeTreeNode(scopeRef);
    };
  }, [
    scopeRef
  ]);
  let focusManager = (0, import_react75.useMemo)(() => $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef), []);
  let value = (0, import_react75.useMemo)(() => ({
    focusManager,
    parentNode: node
  }), [
    node,
    focusManager
  ]);
  return (0, import_react75.default).createElement($9bf71ea28793e738$var$FocusContext.Provider, {
    value
  }, (0, import_react75.default).createElement("span", {
    "data-focus-scope-start": true,
    hidden: true,
    ref: startRef
  }), children, (0, import_react75.default).createElement("span", {
    "data-focus-scope-end": true,
    hidden: true,
    ref: endRef
  }));
}
function $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef) {
  return {
    focusNext(opts = {}) {
      let scope = scopeRef.current;
      let { from, tabbable, wrap, accept } = opts;
      var _scope_;
      let node = from || (0, $d4ee10de306f2510$export$cd4e5573fbe2b576)((0, $431fbd86ca7dc216$export$b204af158042fbac)((_scope_ = scope[0]) !== null && _scope_ !== void 0 ? _scope_ : void 0));
      let sentinel = scope[0].previousElementSibling;
      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
        tabbable,
        accept
      }, scope);
      walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;
      let nextNode = walker.nextNode();
      if (!nextNode && wrap) {
        walker.currentNode = sentinel;
        nextNode = walker.nextNode();
      }
      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);
      return nextNode;
    },
    focusPrevious(opts = {}) {
      let scope = scopeRef.current;
      let { from, tabbable, wrap, accept } = opts;
      var _scope_;
      let node = from || (0, $d4ee10de306f2510$export$cd4e5573fbe2b576)((0, $431fbd86ca7dc216$export$b204af158042fbac)((_scope_ = scope[0]) !== null && _scope_ !== void 0 ? _scope_ : void 0));
      let sentinel = scope[scope.length - 1].nextElementSibling;
      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
        tabbable,
        accept
      }, scope);
      walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;
      let previousNode = walker.previousNode();
      if (!previousNode && wrap) {
        walker.currentNode = sentinel;
        previousNode = walker.previousNode();
      }
      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);
      return previousNode;
    },
    focusFirst(opts = {}) {
      let scope = scopeRef.current;
      let { tabbable, accept } = opts;
      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
        tabbable,
        accept
      }, scope);
      walker.currentNode = scope[0].previousElementSibling;
      let nextNode = walker.nextNode();
      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);
      return nextNode;
    },
    focusLast(opts = {}) {
      let scope = scopeRef.current;
      let { tabbable, accept } = opts;
      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
        tabbable,
        accept
      }, scope);
      walker.currentNode = scope[scope.length - 1].nextElementSibling;
      let previousNode = walker.previousNode();
      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);
      return previousNode;
    }
  };
}
function $9bf71ea28793e738$var$getScopeRoot(scope) {
  return scope[0].parentElement;
}
function $9bf71ea28793e738$var$shouldContainFocus(scopeRef) {
  let scope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);
  while (scope && scope.scopeRef !== scopeRef) {
    if (scope.contain) return false;
    scope = scope.parent;
  }
  return true;
}
function $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain) {
  let focusedNode = (0, import_react75.useRef)(void 0);
  let raf = (0, import_react75.useRef)(void 0);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    let scope = scopeRef.current;
    if (!contain) {
      if (raf.current) {
        cancelAnimationFrame(raf.current);
        raf.current = void 0;
      }
      return;
    }
    const ownerDocument = (0, $431fbd86ca7dc216$export$b204af158042fbac)(scope ? scope[0] : void 0);
    let onKeyDown = (e) => {
      if (e.key !== "Tab" || e.altKey || e.ctrlKey || e.metaKey || !$9bf71ea28793e738$var$shouldContainFocus(scopeRef) || e.isComposing) return;
      let focusedElement = (0, $d4ee10de306f2510$export$cd4e5573fbe2b576)(ownerDocument);
      let scope2 = scopeRef.current;
      if (!scope2 || !$9bf71ea28793e738$var$isElementInScope(focusedElement, scope2)) return;
      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope2);
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
        tabbable: true
      }, scope2);
      if (!focusedElement) return;
      walker.currentNode = focusedElement;
      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
      if (!nextElement) {
        walker.currentNode = e.shiftKey ? scope2[scope2.length - 1].nextElementSibling : scope2[0].previousElementSibling;
        nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
      }
      e.preventDefault();
      if (nextElement) $9bf71ea28793e738$var$focusElement(nextElement, true);
    };
    let onFocus = (e) => {
      if ((!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) && $9bf71ea28793e738$var$isElementInScope((0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e), scopeRef.current)) {
        $9bf71ea28793e738$var$activeScope = scopeRef;
        focusedNode.current = (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e);
      } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !$9bf71ea28793e738$var$isElementInChildScope((0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e), scopeRef)) {
        if (focusedNode.current) focusedNode.current.focus();
        else if ($9bf71ea28793e738$var$activeScope && $9bf71ea28793e738$var$activeScope.current) $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);
      } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef)) focusedNode.current = (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e);
    };
    let onBlur = (e) => {
      if (raf.current) cancelAnimationFrame(raf.current);
      raf.current = requestAnimationFrame(() => {
        let modality = (0, $507fabe10e71c6fb$export$630ff653c5ada6a9)();
        let shouldSkipFocusRestore = (modality === "virtual" || modality === null) && (0, $c87311424ea30a05$export$a11b0059900ceec8)() && (0, $c87311424ea30a05$export$6446a186d09e379e)();
        let activeElement = (0, $d4ee10de306f2510$export$cd4e5573fbe2b576)(ownerDocument);
        if (!shouldSkipFocusRestore && activeElement && $9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !$9bf71ea28793e738$var$isElementInChildScope(activeElement, scopeRef)) {
          $9bf71ea28793e738$var$activeScope = scopeRef;
          let target = (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e);
          if (target && target.isConnected) {
            var _focusedNode_current;
            focusedNode.current = target;
            (_focusedNode_current = focusedNode.current) === null || _focusedNode_current === void 0 ? void 0 : _focusedNode_current.focus();
          } else if ($9bf71ea28793e738$var$activeScope.current) $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);
        }
      });
    };
    ownerDocument.addEventListener("keydown", onKeyDown, false);
    ownerDocument.addEventListener("focusin", onFocus, false);
    scope === null || scope === void 0 ? void 0 : scope.forEach((element2) => element2.addEventListener("focusin", onFocus, false));
    scope === null || scope === void 0 ? void 0 : scope.forEach((element2) => element2.addEventListener("focusout", onBlur, false));
    return () => {
      ownerDocument.removeEventListener("keydown", onKeyDown, false);
      ownerDocument.removeEventListener("focusin", onFocus, false);
      scope === null || scope === void 0 ? void 0 : scope.forEach((element2) => element2.removeEventListener("focusin", onFocus, false));
      scope === null || scope === void 0 ? void 0 : scope.forEach((element2) => element2.removeEventListener("focusout", onBlur, false));
    };
  }, [
    scopeRef,
    contain
  ]);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    return () => {
      if (raf.current) cancelAnimationFrame(raf.current);
    };
  }, [
    raf
  ]);
}
function $9bf71ea28793e738$var$isElementInAnyScope(element2) {
  return $9bf71ea28793e738$var$isElementInChildScope(element2);
}
function $9bf71ea28793e738$var$isElementInScope(element2, scope) {
  if (!element2) return false;
  if (!scope) return false;
  return scope.some((node) => node.contains(element2));
}
function $9bf71ea28793e738$var$isElementInChildScope(element2, scope = null) {
  if (element2 instanceof Element && element2.closest("[data-react-aria-top-layer]")) return true;
  for (let { scopeRef: s } of $9bf71ea28793e738$export$d06fae2ee68b101e.traverse($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope))) {
    if (s && $9bf71ea28793e738$var$isElementInScope(element2, s.current)) return true;
  }
  return false;
}
function $9bf71ea28793e738$var$isAncestorScope(ancestor, scope) {
  var _focusScopeTree_getTreeNode;
  let parent = (_focusScopeTree_getTreeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope)) === null || _focusScopeTree_getTreeNode === void 0 ? void 0 : _focusScopeTree_getTreeNode.parent;
  while (parent) {
    if (parent.scopeRef === ancestor) return true;
    parent = parent.parent;
  }
  return false;
}
function $9bf71ea28793e738$var$focusElement(element2, scroll = false) {
  if (element2 != null && !scroll) try {
    (0, $3ad3f6e1647bc98d$export$80f3e147d781571c)(element2);
  } catch {
  }
  else if (element2 != null) try {
    element2.focus();
  } catch {
  }
}
function $9bf71ea28793e738$var$getFirstInScope(scope, tabbable = true) {
  let sentinel = scope[0].previousElementSibling;
  let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
  let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
    tabbable
  }, scope);
  walker.currentNode = sentinel;
  let nextNode = walker.nextNode();
  if (tabbable && !nextNode) {
    scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
    walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
      tabbable: false
    }, scope);
    walker.currentNode = sentinel;
    nextNode = walker.nextNode();
  }
  return nextNode;
}
function $9bf71ea28793e738$var$focusFirstInScope(scope, tabbable = true) {
  $9bf71ea28793e738$var$focusElement($9bf71ea28793e738$var$getFirstInScope(scope, tabbable));
}
function $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus) {
  const autoFocusRef = (0, import_react75.default).useRef(autoFocus);
  (0, import_react75.useEffect)(() => {
    if (autoFocusRef.current) {
      $9bf71ea28793e738$var$activeScope = scopeRef;
      const ownerDocument = (0, $431fbd86ca7dc216$export$b204af158042fbac)(scopeRef.current ? scopeRef.current[0] : void 0);
      if (!$9bf71ea28793e738$var$isElementInScope((0, $d4ee10de306f2510$export$cd4e5573fbe2b576)(ownerDocument), $9bf71ea28793e738$var$activeScope.current) && scopeRef.current) $9bf71ea28793e738$var$focusFirstInScope(scopeRef.current);
    }
    autoFocusRef.current = false;
  }, [
    scopeRef
  ]);
}
function $9bf71ea28793e738$var$useActiveScopeTracker(scopeRef, restore, contain) {
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    if (restore || contain) return;
    let scope = scopeRef.current;
    const ownerDocument = (0, $431fbd86ca7dc216$export$b204af158042fbac)(scope ? scope[0] : void 0);
    let onFocus = (e) => {
      let target = (0, $d4ee10de306f2510$export$e58f029f0fbfdb29)(e);
      if ($9bf71ea28793e738$var$isElementInScope(target, scopeRef.current)) $9bf71ea28793e738$var$activeScope = scopeRef;
      else if (!$9bf71ea28793e738$var$isElementInAnyScope(target)) $9bf71ea28793e738$var$activeScope = null;
    };
    ownerDocument.addEventListener("focusin", onFocus, false);
    scope === null || scope === void 0 ? void 0 : scope.forEach((element2) => element2.addEventListener("focusin", onFocus, false));
    return () => {
      ownerDocument.removeEventListener("focusin", onFocus, false);
      scope === null || scope === void 0 ? void 0 : scope.forEach((element2) => element2.removeEventListener("focusin", onFocus, false));
    };
  }, [
    scopeRef,
    restore,
    contain
  ]);
}
function $9bf71ea28793e738$var$shouldRestoreFocus(scopeRef) {
  let scope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);
  while (scope && scope.scopeRef !== scopeRef) {
    if (scope.nodeToRestore) return false;
    scope = scope.parent;
  }
  return (scope === null || scope === void 0 ? void 0 : scope.scopeRef) === scopeRef;
}
function $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain) {
  const nodeToRestoreRef = (0, import_react75.useRef)(typeof document !== "undefined" ? (0, $d4ee10de306f2510$export$cd4e5573fbe2b576)((0, $431fbd86ca7dc216$export$b204af158042fbac)(scopeRef.current ? scopeRef.current[0] : void 0)) : null);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    let scope = scopeRef.current;
    const ownerDocument = (0, $431fbd86ca7dc216$export$b204af158042fbac)(scope ? scope[0] : void 0);
    if (!restoreFocus || contain) return;
    let onFocus = () => {
      if ((!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) && $9bf71ea28793e738$var$isElementInScope((0, $d4ee10de306f2510$export$cd4e5573fbe2b576)(ownerDocument), scopeRef.current)) $9bf71ea28793e738$var$activeScope = scopeRef;
    };
    ownerDocument.addEventListener("focusin", onFocus, false);
    scope === null || scope === void 0 ? void 0 : scope.forEach((element2) => element2.addEventListener("focusin", onFocus, false));
    return () => {
      ownerDocument.removeEventListener("focusin", onFocus, false);
      scope === null || scope === void 0 ? void 0 : scope.forEach((element2) => element2.removeEventListener("focusin", onFocus, false));
    };
  }, [
    scopeRef,
    contain
  ]);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    const ownerDocument = (0, $431fbd86ca7dc216$export$b204af158042fbac)(scopeRef.current ? scopeRef.current[0] : void 0);
    if (!restoreFocus) return;
    let onKeyDown = (e) => {
      if (e.key !== "Tab" || e.altKey || e.ctrlKey || e.metaKey || !$9bf71ea28793e738$var$shouldContainFocus(scopeRef) || e.isComposing) return;
      let focusedElement = ownerDocument.activeElement;
      if (!$9bf71ea28793e738$var$isElementInChildScope(focusedElement, scopeRef) || !$9bf71ea28793e738$var$shouldRestoreFocus(scopeRef)) return;
      let treeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);
      if (!treeNode) return;
      let nodeToRestore = treeNode.nodeToRestore;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(ownerDocument.body, {
        tabbable: true
      });
      walker.currentNode = focusedElement;
      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
      if (!nodeToRestore || !nodeToRestore.isConnected || nodeToRestore === ownerDocument.body) {
        nodeToRestore = void 0;
        treeNode.nodeToRestore = void 0;
      }
      if ((!nextElement || !$9bf71ea28793e738$var$isElementInChildScope(nextElement, scopeRef)) && nodeToRestore) {
        walker.currentNode = nodeToRestore;
        do
          nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
        while ($9bf71ea28793e738$var$isElementInChildScope(nextElement, scopeRef));
        e.preventDefault();
        e.stopPropagation();
        if (nextElement) $9bf71ea28793e738$var$focusElement(nextElement, true);
        else if (!$9bf71ea28793e738$var$isElementInAnyScope(nodeToRestore)) focusedElement.blur();
        else $9bf71ea28793e738$var$focusElement(nodeToRestore, true);
      }
    };
    if (!contain) ownerDocument.addEventListener("keydown", onKeyDown, true);
    return () => {
      if (!contain) ownerDocument.removeEventListener("keydown", onKeyDown, true);
    };
  }, [
    scopeRef,
    restoreFocus,
    contain
  ]);
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    const ownerDocument = (0, $431fbd86ca7dc216$export$b204af158042fbac)(scopeRef.current ? scopeRef.current[0] : void 0);
    if (!restoreFocus) return;
    let treeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);
    if (!treeNode) return;
    var _nodeToRestoreRef_current;
    treeNode.nodeToRestore = (_nodeToRestoreRef_current = nodeToRestoreRef.current) !== null && _nodeToRestoreRef_current !== void 0 ? _nodeToRestoreRef_current : void 0;
    return () => {
      let treeNode2 = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);
      if (!treeNode2) return;
      let nodeToRestore = treeNode2.nodeToRestore;
      let activeElement = (0, $d4ee10de306f2510$export$cd4e5573fbe2b576)(ownerDocument);
      if (restoreFocus && nodeToRestore && (activeElement && $9bf71ea28793e738$var$isElementInChildScope(activeElement, scopeRef) || activeElement === ownerDocument.body && $9bf71ea28793e738$var$shouldRestoreFocus(scopeRef))) {
        let clonedTree = $9bf71ea28793e738$export$d06fae2ee68b101e.clone();
        requestAnimationFrame(() => {
          if (ownerDocument.activeElement === ownerDocument.body) {
            let treeNode3 = clonedTree.getTreeNode(scopeRef);
            while (treeNode3) {
              if (treeNode3.nodeToRestore && treeNode3.nodeToRestore.isConnected) {
                $9bf71ea28793e738$var$restoreFocusToElement(treeNode3.nodeToRestore);
                return;
              }
              treeNode3 = treeNode3.parent;
            }
            treeNode3 = clonedTree.getTreeNode(scopeRef);
            while (treeNode3) {
              if (treeNode3.scopeRef && treeNode3.scopeRef.current && $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(treeNode3.scopeRef)) {
                let node = $9bf71ea28793e738$var$getFirstInScope(treeNode3.scopeRef.current, true);
                $9bf71ea28793e738$var$restoreFocusToElement(node);
                return;
              }
              treeNode3 = treeNode3.parent;
            }
          }
        });
      }
    };
  }, [
    scopeRef,
    restoreFocus
  ]);
}
function $9bf71ea28793e738$var$restoreFocusToElement(node) {
  if (node.dispatchEvent(new CustomEvent($9bf71ea28793e738$var$RESTORE_FOCUS_EVENT, {
    bubbles: true,
    cancelable: true
  }))) $9bf71ea28793e738$var$focusElement(node);
}
function $9bf71ea28793e738$export$2d6ec8fc375ceafa(root2, opts, scope) {
  let filter = (opts === null || opts === void 0 ? void 0 : opts.tabbable) ? (0, $b4b717babfbb907b$export$bebd5a1431fec25d) : (0, $b4b717babfbb907b$export$4c063cf1350e6fed);
  let rootElement = (root2 === null || root2 === void 0 ? void 0 : root2.nodeType) === Node.ELEMENT_NODE ? root2 : null;
  let doc = (0, $431fbd86ca7dc216$export$b204af158042fbac)(rootElement);
  let walker = (0, $dfc540311bf7f109$export$4d0f8be8b12a7ef6)(doc, root2 || doc, NodeFilter.SHOW_ELEMENT, {
    acceptNode(node) {
      var _opts_from;
      if (opts === null || opts === void 0 ? void 0 : (_opts_from = opts.from) === null || _opts_from === void 0 ? void 0 : _opts_from.contains(node)) return NodeFilter.FILTER_REJECT;
      if (filter(node) && (0, $645f2e67b85a24c9$export$e989c0fffaa6b27a)(node) && (!scope || $9bf71ea28793e738$var$isElementInScope(node, scope)) && (!(opts === null || opts === void 0 ? void 0 : opts.accept) || opts.accept(node))) return NodeFilter.FILTER_ACCEPT;
      return NodeFilter.FILTER_SKIP;
    }
  });
  if (opts === null || opts === void 0 ? void 0 : opts.from) walker.currentNode = opts.from;
  return walker;
}
var $9bf71ea28793e738$var$Tree = class _$9bf71ea28793e738$var$Tree {
  get size() {
    return this.fastMap.size;
  }
  getTreeNode(data) {
    return this.fastMap.get(data);
  }
  addTreeNode(scopeRef, parent, nodeToRestore) {
    let parentNode = this.fastMap.get(parent !== null && parent !== void 0 ? parent : null);
    if (!parentNode) return;
    let node = new $9bf71ea28793e738$var$TreeNode({
      scopeRef
    });
    parentNode.addChild(node);
    node.parent = parentNode;
    this.fastMap.set(scopeRef, node);
    if (nodeToRestore) node.nodeToRestore = nodeToRestore;
  }
  addNode(node) {
    this.fastMap.set(node.scopeRef, node);
  }
  removeTreeNode(scopeRef) {
    if (scopeRef === null) return;
    let node = this.fastMap.get(scopeRef);
    if (!node) return;
    let parentNode = node.parent;
    for (let current of this.traverse()) if (current !== node && node.nodeToRestore && current.nodeToRestore && node.scopeRef && node.scopeRef.current && $9bf71ea28793e738$var$isElementInScope(current.nodeToRestore, node.scopeRef.current)) current.nodeToRestore = node.nodeToRestore;
    let children = node.children;
    if (parentNode) {
      parentNode.removeChild(node);
      if (children.size > 0) children.forEach((child) => parentNode && parentNode.addChild(child));
    }
    this.fastMap.delete(node.scopeRef);
  }
  // Pre Order Depth First
  *traverse(node = this.root) {
    if (node.scopeRef != null) yield node;
    if (node.children.size > 0) for (let child of node.children) yield* this.traverse(child);
  }
  clone() {
    var _node_parent;
    let newTree = new _$9bf71ea28793e738$var$Tree();
    var _node_parent_scopeRef;
    for (let node of this.traverse()) newTree.addTreeNode(node.scopeRef, (_node_parent_scopeRef = (_node_parent = node.parent) === null || _node_parent === void 0 ? void 0 : _node_parent.scopeRef) !== null && _node_parent_scopeRef !== void 0 ? _node_parent_scopeRef : null, node.nodeToRestore);
    return newTree;
  }
  constructor() {
    this.fastMap = /* @__PURE__ */ new Map();
    this.root = new $9bf71ea28793e738$var$TreeNode({
      scopeRef: null
    });
    this.fastMap.set(null, this.root);
  }
};
var $9bf71ea28793e738$var$TreeNode = class {
  addChild(node) {
    this.children.add(node);
    node.parent = this;
  }
  removeChild(node) {
    this.children.delete(node);
    node.parent = void 0;
  }
  constructor(props) {
    this.children = /* @__PURE__ */ new Set();
    this.contain = false;
    this.scopeRef = props.scopeRef;
  }
};
var $9bf71ea28793e738$export$d06fae2ee68b101e = new $9bf71ea28793e738$var$Tree();

// node_modules/@react-aria/focus/dist/useFocusRing.mjs
var import_react76 = __toESM(require_react(), 1);

// node_modules/@react-aria/focus/dist/FocusRing.mjs
var import_react77 = __toESM(require_react(), 1);

// node_modules/@react-aria/focus/dist/useHasTabbableChild.mjs
var import_react78 = __toESM(require_react(), 1);

// node_modules/stream-chat-react/dist/components/Modal/icons.js
var import_react79 = __toESM(require_react());
var CloseIconRound = () => import_react79.default.createElement(
  "svg",
  { "data-testid": "close-icon-round", fill: "none", height: "28", viewBox: "0 0 28 28", width: "28", xmlns: "http://www.w3.org/2000/svg" },
  import_react79.default.createElement("rect", { fill: "#72767E", height: "28", rx: "14", width: "28" }),
  import_react79.default.createElement("circle", { cx: "14", cy: "14", fill: "#72767E", r: "12" }),
  import_react79.default.createElement("path", { clipRule: "evenodd", d: "M28 14C28 21.732 21.732 28 14 28C6.26801 28 0 21.732 0 14C0 6.26801 6.26801 0 14 0C21.732 0 28 6.26801 28 14ZM26 14C26 20.6274 20.6274 26 14 26C7.37258 26 2 20.6274 2 14C2 7.37258 7.37258 2 14 2C20.6274 2 26 7.37258 26 14ZM19.59 7L21 8.41L15.41 14L21 19.59L19.59 21L14 15.41L8.41 21L7 19.59L12.59 14L7 8.41L8.41 7L14 12.59L19.59 7Z", fill: "white", fillRule: "evenodd" })
);

// node_modules/stream-chat-react/dist/components/Modal/Modal.js
var Modal = ({ children, className, onClose, open }) => {
  const { t: t2 } = useTranslationContext("Modal");
  const innerRef = (0, import_react80.useRef)(null);
  const closeRef = (0, import_react80.useRef)(null);
  const handleClick = (event) => {
    const target = event.target;
    if (!innerRef.current || !closeRef.current)
      return;
    if (!innerRef.current.contains(target) || closeRef.current.contains(target))
      onClose == null ? void 0 : onClose(event);
  };
  (0, import_react80.useEffect)(() => {
    if (!open)
      return;
    const handleKeyDown = (event) => {
      if (event.key === "Escape")
        onClose == null ? void 0 : onClose(event);
    };
    document.addEventListener("keydown", handleKeyDown);
    return () => document.removeEventListener("keydown", handleKeyDown);
  }, [onClose, open]);
  if (!open)
    return null;
  return import_react80.default.createElement(
    "div",
    { className: clsx_default("str-chat__modal str-chat__modal--open", className), onClick: handleClick },
    import_react80.default.createElement(
      $9bf71ea28793e738$export$20e40289641fbbb6,
      { autoFocus: true, contain: true },
      import_react80.default.createElement(
        "button",
        { className: "str-chat__modal__close-button", ref: closeRef, title: t2("Close") },
        import_react80.default.createElement(CloseIconRound, null)
      ),
      import_react80.default.createElement("div", { className: "str-chat__modal__inner str-chat-react__modal__inner", ref: innerRef }, children)
    )
  );
};

// node_modules/stream-chat-react/dist/components/Gallery/ModalGallery.js
var import_react81 = __toESM(require_react());
var import_react_image_gallery = __toESM(require_image_gallery());
var onError = (e) => {
  e.target.alt = "";
};
var renderItem = ({ original, originalAlt }) => import_react81.default.createElement(BaseImage, { alt: originalAlt, className: "image-gallery-image", onError, src: original });
var ModalGallery = (props) => {
  const { images, index: index3 } = props;
  const { t: t2 } = useTranslationContext("ModalGallery");
  const formattedArray = (0, import_react81.useMemo)(() => images.map((image2) => {
    const imageSrc = image2.image_url || image2.thumb_url || "";
    return {
      original: imageSrc,
      originalAlt: t2("User uploaded content"),
      source: imageSrc
    };
  }), [images, t2]);
  return (
    // @ts-expect-error ignore the TS error as react-image-gallery was on @types/react@18 while stream-chat-react being upgraded to React 19 (https://github.com/xiaolin/react-image-gallery/issues/809)
    import_react81.default.createElement(import_react_image_gallery.default, { items: formattedArray, renderItem, showIndex: true, showPlayButton: false, showThumbnails: false, startIndex: index3 })
  );
};

// node_modules/stream-chat-react/dist/components/Gallery/Gallery.js
var UnMemoizedGallery = (props) => {
  const { images, innerRefs } = props;
  const [index3, setIndex] = (0, import_react82.useState)(0);
  const [modalOpen, setModalOpen] = (0, import_react82.useState)(false);
  const { BaseImage: BaseImage3 = BaseImage, ModalGallery: ModalGallery2 = ModalGallery } = useComponentContext("Gallery");
  const { t: t2 } = useTranslationContext("Gallery");
  const imageFallbackTitle = t2("User uploaded content");
  const countImagesDisplayedInPreview = 4;
  const lastImageIndexInPreview = countImagesDisplayedInPreview - 1;
  const toggleModal = (selectedIndex) => {
    if (modalOpen) {
      setModalOpen(false);
    } else {
      setIndex(selectedIndex);
      setModalOpen(true);
    }
  };
  const renderImages = images.slice(0, countImagesDisplayedInPreview).map((image2, i) => i === lastImageIndexInPreview && images.length > countImagesDisplayedInPreview ? import_react82.default.createElement(
    "button",
    { className: "str-chat__gallery-placeholder", "data-testid": "gallery-image-last", key: `gallery-image-${i}`, onClick: () => toggleModal(i), style: {
      backgroundImage: `url(${images[lastImageIndexInPreview].previewUrl || images[lastImageIndexInPreview].image_url || images[lastImageIndexInPreview].thumb_url})`,
      ...image2.style
    }, ...(innerRefs == null ? void 0 : innerRefs.current) && {
      ref: (r) => {
        innerRefs.current[i] = r;
      }
    } },
    import_react82.default.createElement("p", null, t2("{{ imageCount }} more", {
      imageCount: images.length - countImagesDisplayedInPreview
    }))
  ) : import_react82.default.createElement(
    "button",
    { className: "str-chat__gallery-image", "data-testid": "gallery-image", key: `gallery-image-${i}`, onClick: () => toggleModal(i) },
    import_react82.default.createElement(BaseImage3, { alt: (image2 == null ? void 0 : image2.fallback) || imageFallbackTitle, src: (0, import_sanitize_url2.sanitizeUrl)(image2.previewUrl || image2.image_url || image2.thumb_url), style: image2.style, title: (image2 == null ? void 0 : image2.fallback) || imageFallbackTitle, ...(innerRefs == null ? void 0 : innerRefs.current) && {
      ref: (r) => {
        innerRefs.current[i] = r;
      }
    } })
  ));
  const className = clsx_default("str-chat__gallery", {
    "str-chat__gallery--square": images.length > lastImageIndexInPreview,
    "str-chat__gallery-two-rows": images.length > 2
  });
  return import_react82.default.createElement(
    "div",
    { className },
    renderImages,
    import_react82.default.createElement(
      Modal,
      { className: "str-chat__gallery-modal", onClose: () => setModalOpen((modalOpen2) => !modalOpen2), open: modalOpen },
      import_react82.default.createElement(ModalGallery2, { images, index: index3 })
    )
  );
};
var Gallery = import_react82.default.memo(UnMemoizedGallery);

// node_modules/stream-chat-react/dist/components/Gallery/Image.js
var import_react83 = __toESM(require_react());
var import_sanitize_url3 = __toESM(require_dist());
var ImageComponent = (props) => {
  const { dimensions = {}, fallback, image_url, innerRef, previewUrl, style, thumb_url } = props;
  const [modalIsOpen, setModalIsOpen] = (0, import_react83.useState)(false);
  const { BaseImage: BaseImage3 = BaseImage, ModalGallery: ModalGallery2 = ModalGallery } = useComponentContext("ImageComponent");
  const imageSrc = (0, import_sanitize_url3.sanitizeUrl)(previewUrl || image_url || thumb_url);
  const toggleModal = () => setModalIsOpen((modalIsOpen2) => !modalIsOpen2);
  return import_react83.default.createElement(
    import_react83.default.Fragment,
    null,
    import_react83.default.createElement(BaseImage3, { alt: fallback, className: "str-chat__message-attachment--img", "data-testid": "image-test", onClick: toggleModal, src: imageSrc, style, tabIndex: 0, title: fallback, ...dimensions, ...innerRef && { ref: innerRef } }),
    import_react83.default.createElement(
      Modal,
      { className: "str-chat__image-modal", onClose: toggleModal, open: modalIsOpen },
      import_react83.default.createElement(ModalGallery2, { images: [props], index: 0 })
    )
  );
};

// node_modules/stream-chat-react/dist/components/Attachment/Card.js
var import_react84 = __toESM(require_react());
var import_react_player = __toESM(require_lib());
var getHostFromURL = (url) => {
  if (url !== void 0 && url !== null) {
    const [trimmedUrl] = url.replace(/^(?:https?:\/\/)?(?:www\.)?/i, "").split("/");
    return trimmedUrl;
  }
  return null;
};
var UnableToRenderCard = ({ type }) => {
  const { t: t2 } = useTranslationContext("Card");
  return import_react84.default.createElement(
    "div",
    { className: clsx_default("str-chat__message-attachment-card", {
      [`str-chat__message-attachment-card--${type}`]: type
    }) },
    import_react84.default.createElement(
      "div",
      { className: "str-chat__message-attachment-card--content" },
      import_react84.default.createElement("div", { className: "str-chat__message-attachment-card--text" }, t2("this content could not be displayed"))
    )
  );
};
var SourceLink = ({ author_name, url }) => import_react84.default.createElement(
  "div",
  { className: "str-chat__message-attachment-card--source-link", "data-testid": "card-source-link" },
  import_react84.default.createElement(SafeAnchor, { className: "str-chat__message-attachment-card--url", href: url, rel: "noopener noreferrer", target: "_blank" }, author_name || getHostFromURL(url))
);
var CardHeader = (props) => {
  const { asset_url, dimensions, image: image2, image_url, thumb_url, title, type } = props;
  let visual = null;
  if (asset_url && type === "video") {
    visual = import_react84.default.createElement(import_react_player.default, { className: "react-player", controls: true, height: "100%", url: asset_url, width: "100%" });
  } else if (image2) {
    visual = import_react84.default.createElement(ImageComponent, { dimensions, fallback: title || image2, image_url, thumb_url });
  }
  return visual ? import_react84.default.createElement("div", { className: "str-chat__message-attachment-card--header str-chat__message-attachment-card-react--header", "data-testid": "card-header" }, visual) : null;
};
var CardContent = (props) => {
  const { author_name, og_scrape_url, text: text3, title, title_link, type } = props;
  const url = title_link || og_scrape_url;
  return import_react84.default.createElement("div", { className: "str-chat__message-attachment-card--content" }, type === "audio" ? import_react84.default.createElement(CardAudio, { og: props }) : import_react84.default.createElement(
    "div",
    { className: "str-chat__message-attachment-card--flex" },
    url && import_react84.default.createElement(SourceLink, { author_name, url }),
    title && import_react84.default.createElement("div", { className: "str-chat__message-attachment-card--title" }, title),
    text3 && import_react84.default.createElement("div", { className: "str-chat__message-attachment-card--text" }, text3)
  ));
};
var CardAudio = ({ og: { asset_url, author_name, mime_type, og_scrape_url, text: text3, title, title_link } }) => {
  const { audioRef, isPlaying, progress, seek, togglePlay } = useAudioController({
    mimeType: mime_type
  });
  const url = title_link || og_scrape_url;
  const dataTestId = "card-audio-widget";
  const rootClassName2 = "str-chat__message-attachment-card-audio-widget";
  return import_react84.default.createElement(
    "div",
    { className: rootClassName2, "data-testid": dataTestId },
    asset_url && import_react84.default.createElement(
      import_react84.default.Fragment,
      null,
      import_react84.default.createElement(
        "audio",
        { ref: audioRef },
        import_react84.default.createElement("source", { "data-testid": "audio-source", src: asset_url, type: "audio/mp3" })
      ),
      import_react84.default.createElement(
        "div",
        { className: "str-chat__message-attachment-card-audio-widget--first-row" },
        import_react84.default.createElement(
          "div",
          { className: "str-chat__message-attachment-audio-widget--play-controls" },
          import_react84.default.createElement(PlayButton, { isPlaying, onClick: togglePlay })
        ),
        import_react84.default.createElement(ProgressBar, { onClick: seek, progress })
      )
    ),
    import_react84.default.createElement(
      "div",
      { className: "str-chat__message-attachment-audio-widget--second-row" },
      url && import_react84.default.createElement(SourceLink, { author_name, url }),
      title && import_react84.default.createElement("div", { className: "str-chat__message-attachment-audio-widget--title" }, title),
      text3 && import_react84.default.createElement("div", { className: "str-chat__message-attachment-audio-widget--description" }, text3)
    )
  );
};
var UnMemoizedCard = (props) => {
  const { asset_url, giphy, image_url, thumb_url, title, title_link, type } = props;
  const { giphyVersion: giphyVersionName } = useChannelStateContext("CardHeader");
  let image2 = thumb_url || image_url;
  const dimensions = {};
  if (type === "giphy" && typeof giphy !== "undefined") {
    const giphyVersion = giphy[giphyVersionName];
    image2 = giphyVersion.url;
    dimensions.height = giphyVersion.height;
    dimensions.width = giphyVersion.width;
  }
  if (!title && !title_link && !asset_url && !image2) {
    return import_react84.default.createElement(UnableToRenderCard, null);
  }
  return import_react84.default.createElement(
    "div",
    { className: `str-chat__message-attachment-card str-chat__message-attachment-card--${type}` },
    import_react84.default.createElement(CardHeader, { ...props, dimensions, image: image2 }),
    import_react84.default.createElement(CardContent, { ...props })
  );
};
var Card = import_react84.default.memo(UnMemoizedCard);

// node_modules/stream-chat-react/dist/components/Attachment/FileAttachment.js
var import_react85 = __toESM(require_react());
var UnMemoizedFileAttachment = ({ attachment }) => import_react85.default.createElement(
  "div",
  { className: "str-chat__message-attachment-file--item", "data-testid": "attachment-file" },
  import_react85.default.createElement(FileIcon, { className: "str-chat__file-icon", mimeType: attachment.mime_type }),
  import_react85.default.createElement(
    "div",
    { className: "str-chat__message-attachment-file--item-text" },
    import_react85.default.createElement(
      "div",
      { className: "str-chat__message-attachment-file--item-first-row" },
      import_react85.default.createElement("div", { className: "str-chat__message-attachment-file--item-name", "data-testid": "file-title" }, attachment.title),
      import_react85.default.createElement(DownloadButton, { assetUrl: attachment.asset_url })
    ),
    import_react85.default.createElement(FileSizeIndicator, { fileSize: attachment.file_size })
  )
);
var FileAttachment = import_react85.default.memo(UnMemoizedFileAttachment);

// node_modules/stream-chat-react/dist/components/Attachment/UnsupportedAttachment.js
var import_react86 = __toESM(require_react());
var UnsupportedAttachment = ({ attachment }) => {
  const { t: t2 } = useTranslationContext("UnsupportedAttachment");
  return import_react86.default.createElement(
    "div",
    { className: "str-chat__message-attachment-unsupported", "data-testid": "attachment-unsupported" },
    import_react86.default.createElement(FileIcon, { className: "str-chat__file-icon" }),
    import_react86.default.createElement(
      "div",
      { className: "str-chat__message-attachment-unsupported__metadata" },
      import_react86.default.createElement("div", { className: "str-chat__message-attachment-unsupported__title", "data-testid": "unsupported-attachment-title" }, attachment.title || t2("Unsupported attachment"))
    )
  );
};

// node_modules/stream-chat-react/dist/components/Attachment/AttachmentContainer.js
var AttachmentWithinContainer = ({ attachment, children, componentType }) => {
  var _a;
  const isGAT = isGalleryAttachmentType(attachment);
  let extra = "";
  if (!isGAT) {
    extra = componentType === "card" && !(attachment == null ? void 0 : attachment.image_url) && !(attachment == null ? void 0 : attachment.thumb_url) ? "no-image" : ((_a = attachment == null ? void 0 : attachment.actions) == null ? void 0 : _a.length) ? "actions" : "";
  }
  const classNames = clsx_default("str-chat__message-attachment str-chat__message-attachment-dynamic-size", {
    [`str-chat__message-attachment--${componentType}`]: componentType,
    [`str-chat__message-attachment--${attachment == null ? void 0 : attachment.type}`]: attachment == null ? void 0 : attachment.type,
    [`str-chat__message-attachment--${componentType}--${extra}`]: componentType && extra,
    "str-chat__message-attachment--svg-image": isSvgAttachment(attachment),
    "str-chat__message-attachment-with-actions": extra === "actions"
  });
  return import_react87.default.createElement("div", { className: classNames }, children);
};
var AttachmentActionsContainer = ({ actionHandler, attachment, AttachmentActions: AttachmentActions2 = AttachmentActions }) => {
  var _a;
  if (!((_a = attachment.actions) == null ? void 0 : _a.length))
    return null;
  return import_react87.default.createElement(AttachmentActions2, { ...attachment, actionHandler, actions: attachment.actions, id: attachment.id || "", text: attachment.text || "" });
};
function getCssDimensionsVariables(url) {
  const cssVars = {
    "--original-height": 1e6,
    "--original-width": 1e6
  };
  if (test(url, "url")) {
    const urlParams = new URL(url).searchParams;
    const oh = Number(urlParams.get("oh"));
    const ow = Number(urlParams.get("ow"));
    const originalHeight = oh > 1 ? oh : 1e6;
    const originalWidth = ow > 1 ? ow : 1e6;
    cssVars["--original-width"] = originalWidth;
    cssVars["--original-height"] = originalHeight;
  }
  return cssVars;
}
var GalleryContainer = ({ attachment, Gallery: Gallery2 = Gallery }) => {
  const imageElements = (0, import_react87.useRef)([]);
  const { imageAttachmentSizeHandler } = useChannelStateContext();
  const [attachmentConfigurations, setAttachmentConfigurations] = (0, import_react87.useState)([]);
  (0, import_react87.useLayoutEffect)(() => {
    if (imageElements.current && imageElements.current.every((element2) => !!element2) && imageAttachmentSizeHandler) {
      const newConfigurations = [];
      imageElements.current.forEach((element2, i) => {
        const config = imageAttachmentSizeHandler(attachment.images[i], element2);
        newConfigurations.push(config);
      });
      setAttachmentConfigurations(newConfigurations);
    }
  }, [imageElements, imageAttachmentSizeHandler, attachment]);
  const images = attachment.images.map((image2, i) => {
    var _a, _b, _c;
    return {
      ...image2,
      previewUrl: ((_a = attachmentConfigurations[i]) == null ? void 0 : _a.url) || "about:blank",
      style: getCssDimensionsVariables(((_b = attachment.images[i]) == null ? void 0 : _b.image_url) || ((_c = attachment.images[i]) == null ? void 0 : _c.thumb_url) || "")
    };
  });
  return import_react87.default.createElement(
    AttachmentWithinContainer,
    { attachment, componentType: "gallery" },
    import_react87.default.createElement(Gallery2, { images: images || [], innerRefs: imageElements, key: "gallery" })
  );
};
var ImageContainer = (props) => {
  const { attachment, Image: Image2 = ImageComponent } = props;
  const componentType = "image";
  const imageElement = (0, import_react87.useRef)(null);
  const { imageAttachmentSizeHandler } = useChannelStateContext();
  const [attachmentConfiguration, setAttachmentConfiguration] = (0, import_react87.useState)(void 0);
  (0, import_react87.useLayoutEffect)(() => {
    if (imageElement.current && imageAttachmentSizeHandler) {
      const config = imageAttachmentSizeHandler(attachment, imageElement.current);
      setAttachmentConfiguration(config);
    }
  }, [imageElement, imageAttachmentSizeHandler, attachment]);
  const imageConfig = {
    ...attachment,
    previewUrl: (attachmentConfiguration == null ? void 0 : attachmentConfiguration.url) || "about:blank",
    style: getCssDimensionsVariables(attachment.image_url || attachment.thumb_url || "")
  };
  if (attachment.actions && attachment.actions.length) {
    return import_react87.default.createElement(
      AttachmentWithinContainer,
      { attachment, componentType },
      import_react87.default.createElement(
        "div",
        { className: "str-chat__attachment" },
        import_react87.default.createElement(Image2, { ...imageConfig, innerRef: imageElement }),
        import_react87.default.createElement(AttachmentActionsContainer, { ...props })
      )
    );
  }
  return import_react87.default.createElement(
    AttachmentWithinContainer,
    { attachment, componentType },
    import_react87.default.createElement(Image2, { ...imageConfig, innerRef: imageElement })
  );
};
var CardContainer = (props) => {
  const { attachment, Card: Card2 = Card } = props;
  const componentType = "card";
  if (attachment.actions && attachment.actions.length) {
    return import_react87.default.createElement(
      AttachmentWithinContainer,
      { attachment, componentType },
      import_react87.default.createElement(
        "div",
        { className: "str-chat__attachment" },
        import_react87.default.createElement(Card2, { ...attachment }),
        import_react87.default.createElement(AttachmentActionsContainer, { ...props })
      )
    );
  }
  return import_react87.default.createElement(
    AttachmentWithinContainer,
    { attachment, componentType },
    import_react87.default.createElement(Card2, { ...attachment })
  );
};
var FileContainer = ({ attachment, File: File2 = FileAttachment }) => {
  if (!attachment.asset_url)
    return null;
  return import_react87.default.createElement(
    AttachmentWithinContainer,
    { attachment, componentType: "file" },
    import_react87.default.createElement(File2, { attachment })
  );
};
var AudioContainer = ({ attachment, Audio: Audio2 = Audio }) => import_react87.default.createElement(
  AttachmentWithinContainer,
  { attachment, componentType: "audio" },
  import_react87.default.createElement(
    "div",
    { className: "str-chat__attachment" },
    import_react87.default.createElement(Audio2, { og: attachment })
  )
);
var VoiceRecordingContainer = ({ attachment, isQuoted, VoiceRecording: VoiceRecording2 = VoiceRecording }) => import_react87.default.createElement(
  AttachmentWithinContainer,
  { attachment, componentType: "voiceRecording" },
  import_react87.default.createElement(
    "div",
    { className: "str-chat__attachment" },
    import_react87.default.createElement(VoiceRecording2, { attachment, isQuoted })
  )
);
var MediaContainer = (props) => {
  var _a;
  const { attachment, Media = import_react_player2.default } = props;
  const componentType = "media";
  const { shouldGenerateVideoThumbnail, videoAttachmentSizeHandler } = useChannelStateContext();
  const videoElement = (0, import_react87.useRef)(null);
  const [attachmentConfiguration, setAttachmentConfiguration] = (0, import_react87.useState)();
  (0, import_react87.useLayoutEffect)(() => {
    if (videoElement.current && videoAttachmentSizeHandler) {
      const config = videoAttachmentSizeHandler(attachment, videoElement.current, shouldGenerateVideoThumbnail);
      setAttachmentConfiguration(config);
    }
  }, [videoElement, videoAttachmentSizeHandler, attachment]);
  const content = import_react87.default.createElement(
    "div",
    { className: "str-chat__player-wrapper", "data-testid": "video-wrapper", ref: videoElement, style: getCssDimensionsVariables(attachment.thumb_url || "") },
    import_react87.default.createElement(Media, { className: "react-player", config: { file: { attributes: { poster: attachmentConfiguration == null ? void 0 : attachmentConfiguration.thumbUrl } } }, controls: true, height: "100%", url: attachmentConfiguration == null ? void 0 : attachmentConfiguration.url, width: "100%" })
  );
  return ((_a = attachment.actions) == null ? void 0 : _a.length) ? import_react87.default.createElement(
    AttachmentWithinContainer,
    { attachment, componentType },
    import_react87.default.createElement(
      "div",
      { className: "str-chat__attachment" },
      content,
      import_react87.default.createElement(AttachmentActionsContainer, { ...props })
    )
  ) : import_react87.default.createElement(AttachmentWithinContainer, { attachment, componentType }, content);
};
var UnsupportedAttachmentContainer = ({ attachment, UnsupportedAttachment: UnsupportedAttachment2 = UnsupportedAttachment }) => import_react87.default.createElement(
  import_react87.default.Fragment,
  null,
  import_react87.default.createElement(UnsupportedAttachment2, { attachment })
);

// node_modules/stream-chat-react/dist/components/Attachment/Attachment.js
var CONTAINER_MAP = {
  audio: AudioContainer,
  card: CardContainer,
  file: FileContainer,
  media: MediaContainer,
  unsupported: UnsupportedAttachmentContainer,
  voiceRecording: VoiceRecordingContainer
};
var ATTACHMENT_GROUPS_ORDER = [
  "card",
  "gallery",
  "image",
  "media",
  "audio",
  "voiceRecording",
  "file",
  "unsupported"
];
var Attachment = (props) => {
  const { attachments } = props;
  const groupedAttachments = (0, import_react88.useMemo)(
    () => renderGroupedAttachments(props),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [attachments]
  );
  return import_react88.default.createElement("div", { className: "str-chat__attachment-list" }, ATTACHMENT_GROUPS_ORDER.reduce((acc, groupName) => [...acc, ...groupedAttachments[groupName]], []));
};
var renderGroupedAttachments = ({ attachments, ...rest }) => {
  const uploadedImages = attachments.filter((attachment) => isUploadedImage(attachment));
  const containers = attachments.filter((attachment) => !isUploadedImage(attachment)).reduce((typeMap, attachment) => {
    const attachmentType = getAttachmentType(attachment);
    const Container = CONTAINER_MAP[attachmentType];
    typeMap[attachmentType].push(import_react88.default.createElement(Container, { key: `${attachmentType}-${typeMap[attachmentType].length}`, ...rest, attachment }));
    return typeMap;
  }, {
    audio: [],
    card: [],
    file: [],
    media: [],
    unsupported: [],
    // not used in reduce
    // eslint-disable-next-line sort-keys
    image: [],
    // eslint-disable-next-line sort-keys
    gallery: [],
    voiceRecording: []
  });
  if (uploadedImages.length > 1) {
    containers["gallery"] = [
      import_react88.default.createElement(GalleryContainer, { key: "gallery-container", ...rest, attachment: {
        images: uploadedImages,
        type: "gallery"
      } })
    ];
  } else if (uploadedImages.length === 1) {
    containers["image"] = [
      import_react88.default.createElement(ImageContainer, { key: "image-container", ...rest, attachment: uploadedImages[0] })
    ];
  }
  return containers;
};
var getAttachmentType = (attachment) => {
  if (isScrapedContent(attachment)) {
    return "card";
  } else if (isMediaAttachment(attachment)) {
    return "media";
  } else if (isAudioAttachment(attachment)) {
    return "audio";
  } else if (isVoiceRecordingAttachment(attachment)) {
    return "voiceRecording";
  } else if (isFileAttachment(attachment)) {
    return "file";
  }
  return "unsupported";
};

// node_modules/stream-chat-react/dist/components/AutoCompleteTextarea/Item.js
var import_react89 = __toESM(require_react());
var Item = import_react89.default.forwardRef(function Item2(props, innerRef) {
  const { className, component: Component2, item, onClickHandler, onSelectHandler, selected, style } = props;
  const handleSelect = (0, import_react89.useCallback)(() => onSelectHandler(item), [item, onSelectHandler]);
  const handleClick = (0, import_react89.useCallback)((event) => onClickHandler(event, item), [item, onClickHandler]);
  return import_react89.default.createElement(
    "li",
    { className: clsx_default(className, { "str-chat__suggestion-item--selected": selected }), style },
    import_react89.default.createElement(
      "a",
      { href: "", onClick: handleClick, onFocus: handleSelect, onMouseEnter: handleSelect, ref: innerRef },
      import_react89.default.createElement(Component2, { entity: item, selected })
    )
  );
});

// node_modules/stream-chat-react/dist/components/AutoCompleteTextarea/List.js
var import_react96 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Message/renderText/regex.js
function escapeRegExp(text3) {
  return text3.replace(/[-[\]{}()*+?.,/\\^$|#]/g, "\\$&");
}
var detectHttp = /(http(s?):\/\/)?(www\.)?/;
var messageCodeBlocks = (message) => {
  const codeRegex = /```[a-z]*\n[\s\S]*?\n```|`[a-z]*[\s\S]*?`/gm;
  const matches = message.match(codeRegex);
  return matches || [];
};
var matchMarkdownLinks = (message) => {
  const regexMdLinks = /\[([^[]+)\](\(.*\))/gm;
  const matches = message.match(regexMdLinks);
  const singleMatch = /\[([^[]+)\]\((.*)\)/;
  const links = matches ? matches.map((match) => {
    const i = singleMatch.exec(match);
    return i && [i[1], i[2]];
  }) : [];
  return links.flat();
};

// node_modules/hast-util-is-element/lib/index.js
var convertElement = (
  // Note: overloads in JSDoc can’t yet use different `@template`s.
  /**
   * @type {(
   *   (<Condition extends TestFunction>(test: Condition) => (element: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & Predicate<Condition, Element>) &
   *   (<Condition extends string>(test: Condition) => (element: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & {tagName: Condition}) &
   *   ((test?: null | undefined) => (element?: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element) &
   *   ((test?: Test) => Check)
   * )}
   */
  /**
   * @param {Test | null | undefined} [test]
   * @returns {Check}
   */
  function(test2) {
    if (test2 === null || test2 === void 0) {
      return element;
    }
    if (typeof test2 === "string") {
      return tagNameFactory(test2);
    }
    if (typeof test2 === "object") {
      return anyFactory(test2);
    }
    if (typeof test2 === "function") {
      return castFactory(test2);
    }
    throw new Error("Expected function, string, or array as `test`");
  }
);
function anyFactory(tests) {
  const checks = [];
  let index3 = -1;
  while (++index3 < tests.length) {
    checks[index3] = convertElement(tests[index3]);
  }
  return castFactory(any);
  function any(...parameters) {
    let index4 = -1;
    while (++index4 < checks.length) {
      if (checks[index4].apply(this, parameters)) return true;
    }
    return false;
  }
}
function tagNameFactory(check) {
  return castFactory(tagName);
  function tagName(element2) {
    return element2.tagName === check;
  }
}
function castFactory(testFunction) {
  return check;
  function check(value, index3, parent) {
    return Boolean(
      looksLikeAnElement(value) && testFunction.call(
        this,
        value,
        typeof index3 === "number" ? index3 : void 0,
        parent || void 0
      )
    );
  }
}
function element(element2) {
  return Boolean(
    element2 && typeof element2 === "object" && "type" in element2 && element2.type === "element" && "tagName" in element2 && typeof element2.tagName === "string"
  );
}
function looksLikeAnElement(value) {
  return value !== null && typeof value === "object" && "type" in value && "tagName" in value;
}

// node_modules/hast-util-find-and-replace/node_modules/escape-string-regexp/index.js
function escapeStringRegexp(string) {
  if (typeof string !== "string") {
    throw new TypeError("Expected a string");
  }
  return string.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
}

// node_modules/hast-util-find-and-replace/lib/index.js
var emptyOptions = {};
var defaultIgnore = ["math", "script", "style", "svg", "title"];
function findAndReplace(tree, list2, options2) {
  const settings = options2 || emptyOptions;
  const ignored = convertElement(settings.ignore || defaultIgnore);
  const pairs = toPairs(list2);
  let pairIndex = -1;
  while (++pairIndex < pairs.length) {
    visitParents(tree, "text", visitor3);
  }
  function visitor3(node, parents) {
    let index3 = -1;
    let grandparent;
    while (++index3 < parents.length) {
      const parent = parents[index3];
      const siblings = grandparent ? grandparent.children : void 0;
      if (ignored(
        parent,
        siblings ? siblings.indexOf(parent) : void 0,
        grandparent
      )) {
        return;
      }
      grandparent = parent;
    }
    if (grandparent) {
      return handler(node, parents);
    }
  }
  function handler(node, parents) {
    const parent = parents[parents.length - 1];
    const find2 = pairs[pairIndex][0];
    const replace2 = pairs[pairIndex][1];
    let start2 = 0;
    const siblings = parent.children;
    const index3 = siblings.indexOf(node);
    let change = false;
    let nodes = [];
    find2.lastIndex = 0;
    let match = find2.exec(node.value);
    while (match) {
      const position = match.index;
      const matchObject = {
        index: match.index,
        input: match.input,
        stack: [...parents, node]
      };
      let value = replace2(...match, matchObject);
      if (typeof value === "string") {
        value = value.length > 0 ? { type: "text", value } : void 0;
      }
      if (value === false) {
        find2.lastIndex = position + 1;
      } else {
        if (start2 !== position) {
          nodes.push({ type: "text", value: node.value.slice(start2, position) });
        }
        if (Array.isArray(value)) {
          nodes.push(...value);
        } else if (value) {
          nodes.push(value);
        }
        start2 = position + match[0].length;
        change = true;
      }
      if (!find2.global) {
        break;
      }
      match = find2.exec(node.value);
    }
    if (change) {
      if (start2 < node.value.length) {
        nodes.push({ type: "text", value: node.value.slice(start2) });
      }
      parent.children.splice(index3, 1, ...nodes);
    } else {
      nodes = [node];
    }
    return index3 + nodes.length;
  }
}
function toPairs(tupleOrList) {
  const result = [];
  if (!Array.isArray(tupleOrList)) {
    throw new TypeError("Expected find and replace tuple or list of tuples");
  }
  const list2 = !tupleOrList[0] || Array.isArray(tupleOrList[0]) ? tupleOrList : [tupleOrList];
  let index3 = -1;
  while (++index3 < list2.length) {
    const tuple = list2[index3];
    result.push([toExpression(tuple[0]), toFunction(tuple[1])]);
  }
  return result;
}
function toExpression(find2) {
  return typeof find2 === "string" ? new RegExp(escapeStringRegexp(find2), "g") : find2;
}
function toFunction(replace2) {
  return typeof replace2 === "function" ? replace2 : function() {
    return replace2;
  };
}

// node_modules/unist-builder/lib/index.js
function u(type, props, value) {
  const node = { type: String(type) };
  if ((value === void 0 || value === null) && (typeof props === "string" || Array.isArray(props))) {
    value = props;
  } else {
    Object.assign(node, props);
  }
  if (Array.isArray(value)) {
    node.children = value;
  } else if (value !== void 0 && value !== null) {
    node.value = String(value);
  }
  return node;
}

// node_modules/stream-chat-react/dist/components/Message/renderText/rehypePlugins/emojiMarkdownPlugin.js
var import_emoji_regex = __toESM(require_emoji_regex());
var emojiMarkdownPlugin = () => {
  const replace2 = (match) => u("element", { properties: {}, tagName: "emoji" }, [u("text", match)]);
  const transform3 = (node) => findAndReplace(node, [(0, import_emoji_regex.default)(), replace2]);
  return transform3;
};

// node_modules/stream-chat-react/dist/components/Message/renderText/rehypePlugins/mentionsMarkdownPlugin.js
var mentionsMarkdownPlugin = (mentioned_users) => () => {
  const mentioned_usernames = mentioned_users.map((user) => user.name || user.id).filter(Boolean).map(escapeRegExp);
  const mentionedUsersRegex = new RegExp(mentioned_usernames.map((username) => `@${username}`).join("|"), "g");
  const replace2 = (match) => {
    const usernameOrId = match.replace("@", "");
    const user = mentioned_users.find(({ id, name }) => name === usernameOrId || id === usernameOrId);
    return u("element", { mentionedUser: user, properties: {}, tagName: "mention" }, [
      u("text", match)
    ]);
  };
  const transform3 = (tree) => {
    if (!mentioned_usernames.length)
      return;
    visit(tree, (node, index3, parent) => {
      var _a;
      if (typeof index3 === "undefined")
        return;
      if (!parent)
        return;
      const nextChild = parent.children.at(index3 + 1);
      const nextChildHref = (_a = nextChild == null ? void 0 : nextChild.properties) == null ? void 0 : _a.href;
      if (node.type === "text" && // text value has to have @ sign at the end of the string
      // and no other characters except whitespace can precede it
      // valid cases:   "text @", "@", " @"
      // invalid cases: "text@", "@text",
      /.?\s?@$|^@$/.test(node.value) && (nextChildHref == null ? void 0 : nextChildHref.startsWith("mailto:"))) {
        const newTextValue = node.value.replace(/@$/, "");
        const username = nextChildHref.replace("mailto:", "");
        parent.children[index3] = u("text", newTextValue);
        parent.children[index3 + 1] = u("text", `@${username}`);
      }
    });
    findAndReplace(tree, [mentionedUsersRegex, replace2]);
  };
  return transform3;
};

// node_modules/stream-chat-react/dist/components/Message/renderText/remarkPlugins/htmlToTextPlugin.js
var visitor = (node) => {
  if (node.type !== "html")
    return;
  node.type = "text";
};
var transform = (tree) => {
  visit(tree, visitor);
};
var htmlToTextPlugin = () => transform;

// node_modules/stream-chat-react/dist/components/Message/renderText/remarkPlugins/keepLineBreaksPlugin.js
var visitor2 = (node, index3, parent) => {
  if (!(index3 && parent && node.position))
    return;
  const prevSibling = parent.children.at(index3 - 1);
  if (!(prevSibling == null ? void 0 : prevSibling.position))
    return;
  if (node.position.start.line === prevSibling.position.start.line)
    return;
  const ownStartLine = node.position.start.line;
  const prevEndLine = prevSibling.position.end.line;
  const countTruncatedLineBreaks = ownStartLine - prevEndLine - 1;
  if (countTruncatedLineBreaks < 1)
    return;
  const lineBreaks = Array.from({ length: countTruncatedLineBreaks }, () => u("break", { tagName: "br" }));
  parent.children = [
    ...parent.children.slice(0, index3),
    ...lineBreaks,
    ...parent.children.slice(index3)
  ];
  return;
};
var transform2 = (tree) => {
  visit(tree, visitor2);
};
var keepLineBreaksPlugin = () => transform2;

// node_modules/stream-chat-react/dist/components/Message/renderText/renderText.js
var import_react95 = __toESM(require_react());

// node_modules/stream-chat-react/node_modules/react-markdown/lib/index.js
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_react90 = __toESM(require_react(), 1);
var changelog = "https://github.com/remarkjs/react-markdown/blob/main/changelog.md";
var emptyPlugins = [];
var emptyRemarkRehypeOptions = { allowDangerousHtml: true };
var safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i;
var deprecations = [
  { from: "astPlugins", id: "remove-buggy-html-in-markdown-parser" },
  { from: "allowDangerousHtml", id: "remove-buggy-html-in-markdown-parser" },
  {
    from: "allowNode",
    id: "replace-allownode-allowedtypes-and-disallowedtypes",
    to: "allowElement"
  },
  {
    from: "allowedTypes",
    id: "replace-allownode-allowedtypes-and-disallowedtypes",
    to: "allowedElements"
  },
  {
    from: "disallowedTypes",
    id: "replace-allownode-allowedtypes-and-disallowedtypes",
    to: "disallowedElements"
  },
  { from: "escapeHtml", id: "remove-buggy-html-in-markdown-parser" },
  { from: "includeElementIndex", id: "#remove-includeelementindex" },
  {
    from: "includeNodeIndex",
    id: "change-includenodeindex-to-includeelementindex"
  },
  { from: "linkTarget", id: "remove-linktarget" },
  { from: "plugins", id: "change-plugins-to-remarkplugins", to: "remarkPlugins" },
  { from: "rawSourcePos", id: "#remove-rawsourcepos" },
  { from: "renderers", id: "change-renderers-to-components", to: "components" },
  { from: "source", id: "change-source-to-children", to: "children" },
  { from: "sourcePos", id: "#remove-sourcepos" },
  { from: "transformImageUri", id: "#add-urltransform", to: "urlTransform" },
  { from: "transformLinkUri", id: "#add-urltransform", to: "urlTransform" }
];
function Markdown(options2) {
  const processor = createProcessor(options2);
  const file = createFile(options2);
  return post(processor.runSync(processor.parse(file), file), options2);
}
function createProcessor(options2) {
  const rehypePlugins = options2.rehypePlugins || emptyPlugins;
  const remarkPlugins = options2.remarkPlugins || emptyPlugins;
  const remarkRehypeOptions = options2.remarkRehypeOptions ? { ...options2.remarkRehypeOptions, ...emptyRemarkRehypeOptions } : emptyRemarkRehypeOptions;
  const processor = unified().use(remarkParse).use(remarkPlugins).use(remarkRehype, remarkRehypeOptions).use(rehypePlugins);
  return processor;
}
function createFile(options2) {
  const children = options2.children || "";
  const file = new VFile();
  if (typeof children === "string") {
    file.value = children;
  } else {
    unreachable(
      "Unexpected value `" + children + "` for `children` prop, expected `string`"
    );
  }
  return file;
}
function post(tree, options2) {
  const allowedElements = options2.allowedElements;
  const allowElement = options2.allowElement;
  const components = options2.components;
  const disallowedElements = options2.disallowedElements;
  const skipHtml = options2.skipHtml;
  const unwrapDisallowed = options2.unwrapDisallowed;
  const urlTransform2 = options2.urlTransform || defaultUrlTransform;
  for (const deprecation of deprecations) {
    if (Object.hasOwn(options2, deprecation.from)) {
      unreachable(
        "Unexpected `" + deprecation.from + "` prop, " + (deprecation.to ? "use `" + deprecation.to + "` instead" : "remove it") + " (see <" + changelog + "#" + deprecation.id + "> for more info)"
      );
    }
  }
  if (allowedElements && disallowedElements) {
    unreachable(
      "Unexpected combined `allowedElements` and `disallowedElements`, expected one or the other"
    );
  }
  if (options2.className) {
    tree = {
      type: "element",
      tagName: "div",
      properties: { className: options2.className },
      // Assume no doctypes.
      children: (
        /** @type {Array<ElementContent>} */
        tree.type === "root" ? tree.children : [tree]
      )
    };
  }
  visit(tree, transform3);
  return toJsxRuntime(tree, {
    Fragment: import_jsx_runtime.Fragment,
    // @ts-expect-error
    // React components are allowed to return numbers,
    // but not according to the types in hast-util-to-jsx-runtime
    components,
    ignoreInvalidStyle: true,
    jsx: import_jsx_runtime.jsx,
    jsxs: import_jsx_runtime.jsxs,
    passKeys: true,
    passNode: true
  });
  function transform3(node, index3, parent) {
    if (node.type === "raw" && parent && typeof index3 === "number") {
      if (skipHtml) {
        parent.children.splice(index3, 1);
      } else {
        parent.children[index3] = { type: "text", value: node.value };
      }
      return index3;
    }
    if (node.type === "element") {
      let key;
      for (key in urlAttributes) {
        if (Object.hasOwn(urlAttributes, key) && Object.hasOwn(node.properties, key)) {
          const value = node.properties[key];
          const test2 = urlAttributes[key];
          if (test2 === null || test2.includes(node.tagName)) {
            node.properties[key] = urlTransform2(String(value || ""), key, node);
          }
        }
      }
    }
    if (node.type === "element") {
      let remove = allowedElements ? !allowedElements.includes(node.tagName) : disallowedElements ? disallowedElements.includes(node.tagName) : false;
      if (!remove && allowElement && typeof index3 === "number") {
        remove = !allowElement(node, index3, parent);
      }
      if (remove && parent && typeof index3 === "number") {
        if (unwrapDisallowed && node.children) {
          parent.children.splice(index3, 1, ...node.children);
        } else {
          parent.children.splice(index3, 1);
        }
        return index3;
      }
    }
  }
}
function defaultUrlTransform(value) {
  const colon = value.indexOf(":");
  const questionMark = value.indexOf("?");
  const numberSign = value.indexOf("#");
  const slash = value.indexOf("/");
  if (
    // If there is no protocol, it’s relative.
    colon === -1 || // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.
    slash !== -1 && colon > slash || questionMark !== -1 && colon > questionMark || numberSign !== -1 && colon > numberSign || // It is a protocol, it should be allowed.
    safeProtocol.test(value.slice(0, colon))
  ) {
    return value;
  }
  return "";
}

// node_modules/stream-chat-react/dist/components/Message/renderText/renderText.js
var import_lodash3 = __toESM(require_lodash2());

// node_modules/ccount/index.js
function ccount(value, character) {
  const source = String(value);
  if (typeof character !== "string") {
    throw new TypeError("Expected character");
  }
  let count = 0;
  let index3 = source.indexOf(character);
  while (index3 !== -1) {
    count++;
    index3 = source.indexOf(character, index3 + character.length);
  }
  return count;
}

// node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js
function escapeStringRegexp2(string) {
  if (typeof string !== "string") {
    throw new TypeError("Expected a string");
  }
  return string.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
}

// node_modules/mdast-util-find-and-replace/lib/index.js
function findAndReplace2(tree, list2, options2) {
  const settings = options2 || {};
  const ignored = convert(settings.ignore || []);
  const pairs = toPairs2(list2);
  let pairIndex = -1;
  while (++pairIndex < pairs.length) {
    visitParents(tree, "text", visitor3);
  }
  function visitor3(node, parents) {
    let index3 = -1;
    let grandparent;
    while (++index3 < parents.length) {
      const parent = parents[index3];
      const siblings = grandparent ? grandparent.children : void 0;
      if (ignored(
        parent,
        siblings ? siblings.indexOf(parent) : void 0,
        grandparent
      )) {
        return;
      }
      grandparent = parent;
    }
    if (grandparent) {
      return handler(node, parents);
    }
  }
  function handler(node, parents) {
    const parent = parents[parents.length - 1];
    const find2 = pairs[pairIndex][0];
    const replace2 = pairs[pairIndex][1];
    let start2 = 0;
    const siblings = parent.children;
    const index3 = siblings.indexOf(node);
    let change = false;
    let nodes = [];
    find2.lastIndex = 0;
    let match = find2.exec(node.value);
    while (match) {
      const position = match.index;
      const matchObject = {
        index: match.index,
        input: match.input,
        stack: [...parents, node]
      };
      let value = replace2(...match, matchObject);
      if (typeof value === "string") {
        value = value.length > 0 ? { type: "text", value } : void 0;
      }
      if (value === false) {
        find2.lastIndex = position + 1;
      } else {
        if (start2 !== position) {
          nodes.push({
            type: "text",
            value: node.value.slice(start2, position)
          });
        }
        if (Array.isArray(value)) {
          nodes.push(...value);
        } else if (value) {
          nodes.push(value);
        }
        start2 = position + match[0].length;
        change = true;
      }
      if (!find2.global) {
        break;
      }
      match = find2.exec(node.value);
    }
    if (change) {
      if (start2 < node.value.length) {
        nodes.push({ type: "text", value: node.value.slice(start2) });
      }
      parent.children.splice(index3, 1, ...nodes);
    } else {
      nodes = [node];
    }
    return index3 + nodes.length;
  }
}
function toPairs2(tupleOrList) {
  const result = [];
  if (!Array.isArray(tupleOrList)) {
    throw new TypeError("Expected find and replace tuple or list of tuples");
  }
  const list2 = !tupleOrList[0] || Array.isArray(tupleOrList[0]) ? tupleOrList : [tupleOrList];
  let index3 = -1;
  while (++index3 < list2.length) {
    const tuple = list2[index3];
    result.push([toExpression2(tuple[0]), toFunction2(tuple[1])]);
  }
  return result;
}
function toExpression2(find2) {
  return typeof find2 === "string" ? new RegExp(escapeStringRegexp2(find2), "g") : find2;
}
function toFunction2(replace2) {
  return typeof replace2 === "function" ? replace2 : function() {
    return replace2;
  };
}

// node_modules/mdast-util-gfm-autolink-literal/lib/index.js
var inConstruct = "phrasing";
var notInConstruct = ["autolink", "link", "image", "label"];
function gfmAutolinkLiteralFromMarkdown() {
  return {
    transforms: [transformGfmAutolinkLiterals],
    enter: {
      literalAutolink: enterLiteralAutolink,
      literalAutolinkEmail: enterLiteralAutolinkValue,
      literalAutolinkHttp: enterLiteralAutolinkValue,
      literalAutolinkWww: enterLiteralAutolinkValue
    },
    exit: {
      literalAutolink: exitLiteralAutolink,
      literalAutolinkEmail: exitLiteralAutolinkEmail,
      literalAutolinkHttp: exitLiteralAutolinkHttp,
      literalAutolinkWww: exitLiteralAutolinkWww
    }
  };
}
function gfmAutolinkLiteralToMarkdown() {
  return {
    unsafe: [
      {
        character: "@",
        before: "[+\\-.\\w]",
        after: "[\\-.\\w]",
        inConstruct,
        notInConstruct
      },
      {
        character: ".",
        before: "[Ww]",
        after: "[\\-.\\w]",
        inConstruct,
        notInConstruct
      },
      {
        character: ":",
        before: "[ps]",
        after: "\\/",
        inConstruct,
        notInConstruct
      }
    ]
  };
}
function enterLiteralAutolink(token) {
  this.enter({ type: "link", title: null, url: "", children: [] }, token);
}
function enterLiteralAutolinkValue(token) {
  this.config.enter.autolinkProtocol.call(this, token);
}
function exitLiteralAutolinkHttp(token) {
  this.config.exit.autolinkProtocol.call(this, token);
}
function exitLiteralAutolinkWww(token) {
  this.config.exit.data.call(this, token);
  const node = this.stack[this.stack.length - 1];
  ok(node.type === "link");
  node.url = "http://" + this.sliceSerialize(token);
}
function exitLiteralAutolinkEmail(token) {
  this.config.exit.autolinkEmail.call(this, token);
}
function exitLiteralAutolink(token) {
  this.exit(token);
}
function transformGfmAutolinkLiterals(tree) {
  findAndReplace2(
    tree,
    [
      [/(https?:\/\/|www(?=\.))([-.\w]+)([^ \t\r\n]*)/gi, findUrl],
      [new RegExp("(?<=^|\\s|\\p{P}|\\p{S})([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)", "gu"), findEmail]
    ],
    { ignore: ["link", "linkReference"] }
  );
}
function findUrl(_23, protocol, domain3, path2, match) {
  let prefix = "";
  if (!previous(match)) {
    return false;
  }
  if (/^w/i.test(protocol)) {
    domain3 = protocol + domain3;
    protocol = "";
    prefix = "http://";
  }
  if (!isCorrectDomain(domain3)) {
    return false;
  }
  const parts = splitUrl(domain3 + path2);
  if (!parts[0]) return false;
  const result = {
    type: "link",
    title: null,
    url: prefix + protocol + parts[0],
    children: [{ type: "text", value: protocol + parts[0] }]
  };
  if (parts[1]) {
    return [result, { type: "text", value: parts[1] }];
  }
  return result;
}
function findEmail(_23, atext, label, match) {
  if (
    // Not an expected previous character.
    !previous(match, true) || // Label ends in not allowed character.
    /[-\d_]$/.test(label)
  ) {
    return false;
  }
  return {
    type: "link",
    title: null,
    url: "mailto:" + atext + "@" + label,
    children: [{ type: "text", value: atext + "@" + label }]
  };
}
function isCorrectDomain(domain3) {
  const parts = domain3.split(".");
  if (parts.length < 2 || parts[parts.length - 1] && (/_/.test(parts[parts.length - 1]) || !/[a-zA-Z\d]/.test(parts[parts.length - 1])) || parts[parts.length - 2] && (/_/.test(parts[parts.length - 2]) || !/[a-zA-Z\d]/.test(parts[parts.length - 2]))) {
    return false;
  }
  return true;
}
function splitUrl(url) {
  const trailExec = /[!"&'),.:;<>?\]}]+$/.exec(url);
  if (!trailExec) {
    return [url, void 0];
  }
  url = url.slice(0, trailExec.index);
  let trail2 = trailExec[0];
  let closingParenIndex = trail2.indexOf(")");
  const openingParens = ccount(url, "(");
  let closingParens = ccount(url, ")");
  while (closingParenIndex !== -1 && openingParens > closingParens) {
    url += trail2.slice(0, closingParenIndex + 1);
    trail2 = trail2.slice(closingParenIndex + 1);
    closingParenIndex = trail2.indexOf(")");
    closingParens++;
  }
  return [url, trail2];
}
function previous(match, email) {
  const code3 = match.input.charCodeAt(match.index - 1);
  return (match.index === 0 || unicodeWhitespace(code3) || unicodePunctuation(code3)) && // If it’s an email, the previous character should not be a slash.
  (!email || code3 !== 47);
}

// node_modules/mdast-util-gfm-footnote/lib/index.js
footnoteReference.peek = footnoteReferencePeek;
function enterFootnoteCallString() {
  this.buffer();
}
function enterFootnoteCall(token) {
  this.enter({ type: "footnoteReference", identifier: "", label: "" }, token);
}
function enterFootnoteDefinitionLabelString() {
  this.buffer();
}
function enterFootnoteDefinition(token) {
  this.enter(
    { type: "footnoteDefinition", identifier: "", label: "", children: [] },
    token
  );
}
function exitFootnoteCallString(token) {
  const label = this.resume();
  const node = this.stack[this.stack.length - 1];
  ok(node.type === "footnoteReference");
  node.identifier = normalizeIdentifier(
    this.sliceSerialize(token)
  ).toLowerCase();
  node.label = label;
}
function exitFootnoteCall(token) {
  this.exit(token);
}
function exitFootnoteDefinitionLabelString(token) {
  const label = this.resume();
  const node = this.stack[this.stack.length - 1];
  ok(node.type === "footnoteDefinition");
  node.identifier = normalizeIdentifier(
    this.sliceSerialize(token)
  ).toLowerCase();
  node.label = label;
}
function exitFootnoteDefinition(token) {
  this.exit(token);
}
function footnoteReferencePeek() {
  return "[";
}
function footnoteReference(node, _23, state, info) {
  const tracker = state.createTracker(info);
  let value = tracker.move("[^");
  const exit2 = state.enter("footnoteReference");
  const subexit = state.enter("reference");
  value += tracker.move(
    state.safe(state.associationId(node), { after: "]", before: value })
  );
  subexit();
  exit2();
  value += tracker.move("]");
  return value;
}
function gfmFootnoteFromMarkdown() {
  return {
    enter: {
      gfmFootnoteCallString: enterFootnoteCallString,
      gfmFootnoteCall: enterFootnoteCall,
      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,
      gfmFootnoteDefinition: enterFootnoteDefinition
    },
    exit: {
      gfmFootnoteCallString: exitFootnoteCallString,
      gfmFootnoteCall: exitFootnoteCall,
      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,
      gfmFootnoteDefinition: exitFootnoteDefinition
    }
  };
}
function gfmFootnoteToMarkdown(options2) {
  let firstLineBlank = false;
  if (options2 && options2.firstLineBlank) {
    firstLineBlank = true;
  }
  return {
    handlers: { footnoteDefinition, footnoteReference },
    // This is on by default already.
    unsafe: [{ character: "[", inConstruct: ["label", "phrasing", "reference"] }]
  };
  function footnoteDefinition(node, _23, state, info) {
    const tracker = state.createTracker(info);
    let value = tracker.move("[^");
    const exit2 = state.enter("footnoteDefinition");
    const subexit = state.enter("label");
    value += tracker.move(
      state.safe(state.associationId(node), { before: value, after: "]" })
    );
    subexit();
    value += tracker.move("]:");
    if (node.children && node.children.length > 0) {
      tracker.shift(4);
      value += tracker.move(
        (firstLineBlank ? "\n" : " ") + state.indentLines(
          state.containerFlow(node, tracker.current()),
          firstLineBlank ? mapAll : mapExceptFirst
        )
      );
    }
    exit2();
    return value;
  }
}
function mapExceptFirst(line, index3, blank) {
  return index3 === 0 ? line : mapAll(line, index3, blank);
}
function mapAll(line, index3, blank) {
  return (blank ? "" : "    ") + line;
}

// node_modules/mdast-util-gfm-strikethrough/lib/index.js
var constructsWithoutStrikethrough = [
  "autolink",
  "destinationLiteral",
  "destinationRaw",
  "reference",
  "titleQuote",
  "titleApostrophe"
];
handleDelete.peek = peekDelete;
function gfmStrikethroughFromMarkdown() {
  return {
    canContainEols: ["delete"],
    enter: { strikethrough: enterStrikethrough },
    exit: { strikethrough: exitStrikethrough }
  };
}
function gfmStrikethroughToMarkdown() {
  return {
    unsafe: [
      {
        character: "~",
        inConstruct: "phrasing",
        notInConstruct: constructsWithoutStrikethrough
      }
    ],
    handlers: { delete: handleDelete }
  };
}
function enterStrikethrough(token) {
  this.enter({ type: "delete", children: [] }, token);
}
function exitStrikethrough(token) {
  this.exit(token);
}
function handleDelete(node, _23, state, info) {
  const tracker = state.createTracker(info);
  const exit2 = state.enter("strikethrough");
  let value = tracker.move("~~");
  value += state.containerPhrasing(node, {
    ...tracker.current(),
    before: value,
    after: "~"
  });
  value += tracker.move("~~");
  exit2();
  return value;
}
function peekDelete() {
  return "~";
}

// node_modules/markdown-table/index.js
function defaultStringLength(value) {
  return value.length;
}
function markdownTable(table, options2) {
  const settings = options2 || {};
  const align = (settings.align || []).concat();
  const stringLength = settings.stringLength || defaultStringLength;
  const alignments = [];
  const cellMatrix = [];
  const sizeMatrix = [];
  const longestCellByColumn = [];
  let mostCellsPerRow = 0;
  let rowIndex = -1;
  while (++rowIndex < table.length) {
    const row2 = [];
    const sizes2 = [];
    let columnIndex2 = -1;
    if (table[rowIndex].length > mostCellsPerRow) {
      mostCellsPerRow = table[rowIndex].length;
    }
    while (++columnIndex2 < table[rowIndex].length) {
      const cell = serialize(table[rowIndex][columnIndex2]);
      if (settings.alignDelimiters !== false) {
        const size = stringLength(cell);
        sizes2[columnIndex2] = size;
        if (longestCellByColumn[columnIndex2] === void 0 || size > longestCellByColumn[columnIndex2]) {
          longestCellByColumn[columnIndex2] = size;
        }
      }
      row2.push(cell);
    }
    cellMatrix[rowIndex] = row2;
    sizeMatrix[rowIndex] = sizes2;
  }
  let columnIndex = -1;
  if (typeof align === "object" && "length" in align) {
    while (++columnIndex < mostCellsPerRow) {
      alignments[columnIndex] = toAlignment(align[columnIndex]);
    }
  } else {
    const code3 = toAlignment(align);
    while (++columnIndex < mostCellsPerRow) {
      alignments[columnIndex] = code3;
    }
  }
  columnIndex = -1;
  const row = [];
  const sizes = [];
  while (++columnIndex < mostCellsPerRow) {
    const code3 = alignments[columnIndex];
    let before = "";
    let after = "";
    if (code3 === 99) {
      before = ":";
      after = ":";
    } else if (code3 === 108) {
      before = ":";
    } else if (code3 === 114) {
      after = ":";
    }
    let size = settings.alignDelimiters === false ? 1 : Math.max(
      1,
      longestCellByColumn[columnIndex] - before.length - after.length
    );
    const cell = before + "-".repeat(size) + after;
    if (settings.alignDelimiters !== false) {
      size = before.length + size + after.length;
      if (size > longestCellByColumn[columnIndex]) {
        longestCellByColumn[columnIndex] = size;
      }
      sizes[columnIndex] = size;
    }
    row[columnIndex] = cell;
  }
  cellMatrix.splice(1, 0, row);
  sizeMatrix.splice(1, 0, sizes);
  rowIndex = -1;
  const lines = [];
  while (++rowIndex < cellMatrix.length) {
    const row2 = cellMatrix[rowIndex];
    const sizes2 = sizeMatrix[rowIndex];
    columnIndex = -1;
    const line = [];
    while (++columnIndex < mostCellsPerRow) {
      const cell = row2[columnIndex] || "";
      let before = "";
      let after = "";
      if (settings.alignDelimiters !== false) {
        const size = longestCellByColumn[columnIndex] - (sizes2[columnIndex] || 0);
        const code3 = alignments[columnIndex];
        if (code3 === 114) {
          before = " ".repeat(size);
        } else if (code3 === 99) {
          if (size % 2) {
            before = " ".repeat(size / 2 + 0.5);
            after = " ".repeat(size / 2 - 0.5);
          } else {
            before = " ".repeat(size / 2);
            after = before;
          }
        } else {
          after = " ".repeat(size);
        }
      }
      if (settings.delimiterStart !== false && !columnIndex) {
        line.push("|");
      }
      if (settings.padding !== false && // Don’t add the opening space if we’re not aligning and the cell is
      // empty: there will be a closing space.
      !(settings.alignDelimiters === false && cell === "") && (settings.delimiterStart !== false || columnIndex)) {
        line.push(" ");
      }
      if (settings.alignDelimiters !== false) {
        line.push(before);
      }
      line.push(cell);
      if (settings.alignDelimiters !== false) {
        line.push(after);
      }
      if (settings.padding !== false) {
        line.push(" ");
      }
      if (settings.delimiterEnd !== false || columnIndex !== mostCellsPerRow - 1) {
        line.push("|");
      }
    }
    lines.push(
      settings.delimiterEnd === false ? line.join("").replace(/ +$/, "") : line.join("")
    );
  }
  return lines.join("\n");
}
function serialize(value) {
  return value === null || value === void 0 ? "" : String(value);
}
function toAlignment(value) {
  const code3 = typeof value === "string" ? value.codePointAt(0) : 0;
  return code3 === 67 || code3 === 99 ? 99 : code3 === 76 || code3 === 108 ? 108 : code3 === 82 || code3 === 114 ? 114 : 0;
}

// node_modules/zwitch/index.js
var own = {}.hasOwnProperty;

// node_modules/mdast-util-to-markdown/lib/configure.js
var own2 = {}.hasOwnProperty;

// node_modules/mdast-util-to-markdown/lib/handle/blockquote.js
function blockquote(node, _23, state, info) {
  const exit2 = state.enter("blockquote");
  const tracker = state.createTracker(info);
  tracker.move("> ");
  tracker.shift(2);
  const value = state.indentLines(
    state.containerFlow(node, tracker.current()),
    map
  );
  exit2();
  return value;
}
function map(line, _23, blank) {
  return ">" + (blank ? "" : " ") + line;
}

// node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js
function patternInScope(stack, pattern) {
  return listInScope(stack, pattern.inConstruct, true) && !listInScope(stack, pattern.notInConstruct, false);
}
function listInScope(stack, list2, none) {
  if (typeof list2 === "string") {
    list2 = [list2];
  }
  if (!list2 || list2.length === 0) {
    return none;
  }
  let index3 = -1;
  while (++index3 < list2.length) {
    if (stack.includes(list2[index3])) {
      return true;
    }
  }
  return false;
}

// node_modules/mdast-util-to-markdown/lib/handle/break.js
function hardBreak(_23, _1, state, info) {
  let index3 = -1;
  while (++index3 < state.unsafe.length) {
    if (state.unsafe[index3].character === "\n" && patternInScope(state.stack, state.unsafe[index3])) {
      return /[ \t]/.test(info.before) ? "" : " ";
    }
  }
  return "\\\n";
}

// node_modules/longest-streak/index.js
function longestStreak(value, substring) {
  const source = String(value);
  let index3 = source.indexOf(substring);
  let expected = index3;
  let count = 0;
  let max2 = 0;
  if (typeof substring !== "string") {
    throw new TypeError("Expected substring");
  }
  while (index3 !== -1) {
    if (index3 === expected) {
      if (++count > max2) {
        max2 = count;
      }
    } else {
      count = 1;
    }
    expected = index3 + substring.length;
    index3 = source.indexOf(substring, expected);
  }
  return max2;
}

// node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js
function formatCodeAsIndented(node, state) {
  return Boolean(
    state.options.fences === false && node.value && // If there’s no info…
    !node.lang && // And there’s a non-whitespace character…
    /[^ \r\n]/.test(node.value) && // And the value doesn’t start or end in a blank…
    !/^[\t ]*(?:[\r\n]|$)|(?:^|[\r\n])[\t ]*$/.test(node.value)
  );
}

// node_modules/mdast-util-to-markdown/lib/util/check-fence.js
function checkFence(state) {
  const marker = state.options.fence || "`";
  if (marker !== "`" && marker !== "~") {
    throw new Error(
      "Cannot serialize code with `" + marker + "` for `options.fence`, expected `` ` `` or `~`"
    );
  }
  return marker;
}

// node_modules/mdast-util-to-markdown/lib/handle/code.js
function code(node, _23, state, info) {
  const marker = checkFence(state);
  const raw = node.value || "";
  const suffix = marker === "`" ? "GraveAccent" : "Tilde";
  if (formatCodeAsIndented(node, state)) {
    const exit3 = state.enter("codeIndented");
    const value2 = state.indentLines(raw, map2);
    exit3();
    return value2;
  }
  const tracker = state.createTracker(info);
  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3));
  const exit2 = state.enter("codeFenced");
  let value = tracker.move(sequence);
  if (node.lang) {
    const subexit = state.enter(`codeFencedLang${suffix}`);
    value += tracker.move(
      state.safe(node.lang, {
        before: value,
        after: " ",
        encode: ["`"],
        ...tracker.current()
      })
    );
    subexit();
  }
  if (node.lang && node.meta) {
    const subexit = state.enter(`codeFencedMeta${suffix}`);
    value += tracker.move(" ");
    value += tracker.move(
      state.safe(node.meta, {
        before: value,
        after: "\n",
        encode: ["`"],
        ...tracker.current()
      })
    );
    subexit();
  }
  value += tracker.move("\n");
  if (raw) {
    value += tracker.move(raw + "\n");
  }
  value += tracker.move(sequence);
  exit2();
  return value;
}
function map2(line, _23, blank) {
  return (blank ? "" : "    ") + line;
}

// node_modules/mdast-util-to-markdown/lib/util/check-quote.js
function checkQuote(state) {
  const marker = state.options.quote || '"';
  if (marker !== '"' && marker !== "'") {
    throw new Error(
      "Cannot serialize title with `" + marker + "` for `options.quote`, expected `\"`, or `'`"
    );
  }
  return marker;
}

// node_modules/mdast-util-to-markdown/lib/handle/definition.js
function definition(node, _23, state, info) {
  const quote = checkQuote(state);
  const suffix = quote === '"' ? "Quote" : "Apostrophe";
  const exit2 = state.enter("definition");
  let subexit = state.enter("label");
  const tracker = state.createTracker(info);
  let value = tracker.move("[");
  value += tracker.move(
    state.safe(state.associationId(node), {
      before: value,
      after: "]",
      ...tracker.current()
    })
  );
  value += tracker.move("]: ");
  subexit();
  if (
    // If there’s no url, or…
    !node.url || // If there are control characters or whitespace.
    /[\0- \u007F]/.test(node.url)
  ) {
    subexit = state.enter("destinationLiteral");
    value += tracker.move("<");
    value += tracker.move(
      state.safe(node.url, { before: value, after: ">", ...tracker.current() })
    );
    value += tracker.move(">");
  } else {
    subexit = state.enter("destinationRaw");
    value += tracker.move(
      state.safe(node.url, {
        before: value,
        after: node.title ? " " : "\n",
        ...tracker.current()
      })
    );
  }
  subexit();
  if (node.title) {
    subexit = state.enter(`title${suffix}`);
    value += tracker.move(" " + quote);
    value += tracker.move(
      state.safe(node.title, {
        before: value,
        after: quote,
        ...tracker.current()
      })
    );
    value += tracker.move(quote);
    subexit();
  }
  exit2();
  return value;
}

// node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js
function checkEmphasis(state) {
  const marker = state.options.emphasis || "*";
  if (marker !== "*" && marker !== "_") {
    throw new Error(
      "Cannot serialize emphasis with `" + marker + "` for `options.emphasis`, expected `*`, or `_`"
    );
  }
  return marker;
}

// node_modules/mdast-util-to-markdown/lib/util/encode-character-reference.js
function encodeCharacterReference(code3) {
  return "&#x" + code3.toString(16).toUpperCase() + ";";
}

// node_modules/mdast-util-to-markdown/lib/util/encode-info.js
function encodeInfo(outside, inside, marker) {
  const outsideKind = classifyCharacter(outside);
  const insideKind = classifyCharacter(inside);
  if (outsideKind === void 0) {
    return insideKind === void 0 ? (
      // Letter inside:
      // we have to encode *both* letters for `_` as it is looser.
      // it already forms for `*` (and GFMs `~`).
      marker === "_" ? { inside: true, outside: true } : { inside: false, outside: false }
    ) : insideKind === 1 ? (
      // Whitespace inside: encode both (letter, whitespace).
      { inside: true, outside: true }
    ) : (
      // Punctuation inside: encode outer (letter)
      { inside: false, outside: true }
    );
  }
  if (outsideKind === 1) {
    return insideKind === void 0 ? (
      // Letter inside: already forms.
      { inside: false, outside: false }
    ) : insideKind === 1 ? (
      // Whitespace inside: encode both (whitespace).
      { inside: true, outside: true }
    ) : (
      // Punctuation inside: already forms.
      { inside: false, outside: false }
    );
  }
  return insideKind === void 0 ? (
    // Letter inside: already forms.
    { inside: false, outside: false }
  ) : insideKind === 1 ? (
    // Whitespace inside: encode inner (whitespace).
    { inside: true, outside: false }
  ) : (
    // Punctuation inside: already forms.
    { inside: false, outside: false }
  );
}

// node_modules/mdast-util-to-markdown/lib/handle/emphasis.js
emphasis.peek = emphasisPeek;
function emphasis(node, _23, state, info) {
  const marker = checkEmphasis(state);
  const exit2 = state.enter("emphasis");
  const tracker = state.createTracker(info);
  const before = tracker.move(marker);
  let between = tracker.move(
    state.containerPhrasing(node, {
      after: marker,
      before,
      ...tracker.current()
    })
  );
  const betweenHead = between.charCodeAt(0);
  const open = encodeInfo(
    info.before.charCodeAt(info.before.length - 1),
    betweenHead,
    marker
  );
  if (open.inside) {
    between = encodeCharacterReference(betweenHead) + between.slice(1);
  }
  const betweenTail = between.charCodeAt(between.length - 1);
  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker);
  if (close.inside) {
    between = between.slice(0, -1) + encodeCharacterReference(betweenTail);
  }
  const after = tracker.move(marker);
  exit2();
  state.attentionEncodeSurroundingInfo = {
    after: close.outside,
    before: open.outside
  };
  return before + between + after;
}
function emphasisPeek(_23, _1, state) {
  return state.options.emphasis || "*";
}

// node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js
function formatHeadingAsSetext(node, state) {
  let literalWithBreak = false;
  visit(node, function(node2) {
    if ("value" in node2 && /\r?\n|\r/.test(node2.value) || node2.type === "break") {
      literalWithBreak = true;
      return EXIT;
    }
  });
  return Boolean(
    (!node.depth || node.depth < 3) && toString(node) && (state.options.setext || literalWithBreak)
  );
}

// node_modules/mdast-util-to-markdown/lib/handle/heading.js
function heading(node, _23, state, info) {
  const rank = Math.max(Math.min(6, node.depth || 1), 1);
  const tracker = state.createTracker(info);
  if (formatHeadingAsSetext(node, state)) {
    const exit3 = state.enter("headingSetext");
    const subexit2 = state.enter("phrasing");
    const value2 = state.containerPhrasing(node, {
      ...tracker.current(),
      before: "\n",
      after: "\n"
    });
    subexit2();
    exit3();
    return value2 + "\n" + (rank === 1 ? "=" : "-").repeat(
      // The whole size…
      value2.length - // Minus the position of the character after the last EOL (or
      // 0 if there is none)…
      (Math.max(value2.lastIndexOf("\r"), value2.lastIndexOf("\n")) + 1)
    );
  }
  const sequence = "#".repeat(rank);
  const exit2 = state.enter("headingAtx");
  const subexit = state.enter("phrasing");
  tracker.move(sequence + " ");
  let value = state.containerPhrasing(node, {
    before: "# ",
    after: "\n",
    ...tracker.current()
  });
  if (/^[\t ]/.test(value)) {
    value = encodeCharacterReference(value.charCodeAt(0)) + value.slice(1);
  }
  value = value ? sequence + " " + value : sequence;
  if (state.options.closeAtx) {
    value += " " + sequence;
  }
  subexit();
  exit2();
  return value;
}

// node_modules/mdast-util-to-markdown/lib/handle/html.js
html.peek = htmlPeek;
function html(node) {
  return node.value || "";
}
function htmlPeek() {
  return "<";
}

// node_modules/mdast-util-to-markdown/lib/handle/image.js
image.peek = imagePeek;
function image(node, _23, state, info) {
  const quote = checkQuote(state);
  const suffix = quote === '"' ? "Quote" : "Apostrophe";
  const exit2 = state.enter("image");
  let subexit = state.enter("label");
  const tracker = state.createTracker(info);
  let value = tracker.move("![");
  value += tracker.move(
    state.safe(node.alt, { before: value, after: "]", ...tracker.current() })
  );
  value += tracker.move("](");
  subexit();
  if (
    // If there’s no url but there is a title…
    !node.url && node.title || // If there are control characters or whitespace.
    /[\0- \u007F]/.test(node.url)
  ) {
    subexit = state.enter("destinationLiteral");
    value += tracker.move("<");
    value += tracker.move(
      state.safe(node.url, { before: value, after: ">", ...tracker.current() })
    );
    value += tracker.move(">");
  } else {
    subexit = state.enter("destinationRaw");
    value += tracker.move(
      state.safe(node.url, {
        before: value,
        after: node.title ? " " : ")",
        ...tracker.current()
      })
    );
  }
  subexit();
  if (node.title) {
    subexit = state.enter(`title${suffix}`);
    value += tracker.move(" " + quote);
    value += tracker.move(
      state.safe(node.title, {
        before: value,
        after: quote,
        ...tracker.current()
      })
    );
    value += tracker.move(quote);
    subexit();
  }
  value += tracker.move(")");
  exit2();
  return value;
}
function imagePeek() {
  return "!";
}

// node_modules/mdast-util-to-markdown/lib/handle/image-reference.js
imageReference.peek = imageReferencePeek;
function imageReference(node, _23, state, info) {
  const type = node.referenceType;
  const exit2 = state.enter("imageReference");
  let subexit = state.enter("label");
  const tracker = state.createTracker(info);
  let value = tracker.move("![");
  const alt = state.safe(node.alt, {
    before: value,
    after: "]",
    ...tracker.current()
  });
  value += tracker.move(alt + "][");
  subexit();
  const stack = state.stack;
  state.stack = [];
  subexit = state.enter("reference");
  const reference2 = state.safe(state.associationId(node), {
    before: value,
    after: "]",
    ...tracker.current()
  });
  subexit();
  state.stack = stack;
  exit2();
  if (type === "full" || !alt || alt !== reference2) {
    value += tracker.move(reference2 + "]");
  } else if (type === "shortcut") {
    value = value.slice(0, -1);
  } else {
    value += tracker.move("]");
  }
  return value;
}
function imageReferencePeek() {
  return "!";
}

// node_modules/mdast-util-to-markdown/lib/handle/inline-code.js
inlineCode.peek = inlineCodePeek;
function inlineCode(node, _23, state) {
  let value = node.value || "";
  let sequence = "`";
  let index3 = -1;
  while (new RegExp("(^|[^`])" + sequence + "([^`]|$)").test(value)) {
    sequence += "`";
  }
  if (/[^ \r\n]/.test(value) && (/^[ \r\n]/.test(value) && /[ \r\n]$/.test(value) || /^`|`$/.test(value))) {
    value = " " + value + " ";
  }
  while (++index3 < state.unsafe.length) {
    const pattern = state.unsafe[index3];
    const expression = state.compilePattern(pattern);
    let match;
    if (!pattern.atBreak) continue;
    while (match = expression.exec(value)) {
      let position = match.index;
      if (value.charCodeAt(position) === 10 && value.charCodeAt(position - 1) === 13) {
        position--;
      }
      value = value.slice(0, position) + " " + value.slice(match.index + 1);
    }
  }
  return sequence + value + sequence;
}
function inlineCodePeek() {
  return "`";
}

// node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js
function formatLinkAsAutolink(node, state) {
  const raw = toString(node);
  return Boolean(
    !state.options.resourceLink && // If there’s a url…
    node.url && // And there’s a no title…
    !node.title && // And the content of `node` is a single text node…
    node.children && node.children.length === 1 && node.children[0].type === "text" && // And if the url is the same as the content…
    (raw === node.url || "mailto:" + raw === node.url) && // And that starts w/ a protocol…
    /^[a-z][a-z+.-]+:/i.test(node.url) && // And that doesn’t contain ASCII control codes (character escapes and
    // references don’t work), space, or angle brackets…
    !/[\0- <>\u007F]/.test(node.url)
  );
}

// node_modules/mdast-util-to-markdown/lib/handle/link.js
link.peek = linkPeek;
function link(node, _23, state, info) {
  const quote = checkQuote(state);
  const suffix = quote === '"' ? "Quote" : "Apostrophe";
  const tracker = state.createTracker(info);
  let exit2;
  let subexit;
  if (formatLinkAsAutolink(node, state)) {
    const stack = state.stack;
    state.stack = [];
    exit2 = state.enter("autolink");
    let value2 = tracker.move("<");
    value2 += tracker.move(
      state.containerPhrasing(node, {
        before: value2,
        after: ">",
        ...tracker.current()
      })
    );
    value2 += tracker.move(">");
    exit2();
    state.stack = stack;
    return value2;
  }
  exit2 = state.enter("link");
  subexit = state.enter("label");
  let value = tracker.move("[");
  value += tracker.move(
    state.containerPhrasing(node, {
      before: value,
      after: "](",
      ...tracker.current()
    })
  );
  value += tracker.move("](");
  subexit();
  if (
    // If there’s no url but there is a title…
    !node.url && node.title || // If there are control characters or whitespace.
    /[\0- \u007F]/.test(node.url)
  ) {
    subexit = state.enter("destinationLiteral");
    value += tracker.move("<");
    value += tracker.move(
      state.safe(node.url, { before: value, after: ">", ...tracker.current() })
    );
    value += tracker.move(">");
  } else {
    subexit = state.enter("destinationRaw");
    value += tracker.move(
      state.safe(node.url, {
        before: value,
        after: node.title ? " " : ")",
        ...tracker.current()
      })
    );
  }
  subexit();
  if (node.title) {
    subexit = state.enter(`title${suffix}`);
    value += tracker.move(" " + quote);
    value += tracker.move(
      state.safe(node.title, {
        before: value,
        after: quote,
        ...tracker.current()
      })
    );
    value += tracker.move(quote);
    subexit();
  }
  value += tracker.move(")");
  exit2();
  return value;
}
function linkPeek(node, _23, state) {
  return formatLinkAsAutolink(node, state) ? "<" : "[";
}

// node_modules/mdast-util-to-markdown/lib/handle/link-reference.js
linkReference.peek = linkReferencePeek;
function linkReference(node, _23, state, info) {
  const type = node.referenceType;
  const exit2 = state.enter("linkReference");
  let subexit = state.enter("label");
  const tracker = state.createTracker(info);
  let value = tracker.move("[");
  const text3 = state.containerPhrasing(node, {
    before: value,
    after: "]",
    ...tracker.current()
  });
  value += tracker.move(text3 + "][");
  subexit();
  const stack = state.stack;
  state.stack = [];
  subexit = state.enter("reference");
  const reference2 = state.safe(state.associationId(node), {
    before: value,
    after: "]",
    ...tracker.current()
  });
  subexit();
  state.stack = stack;
  exit2();
  if (type === "full" || !text3 || text3 !== reference2) {
    value += tracker.move(reference2 + "]");
  } else if (type === "shortcut") {
    value = value.slice(0, -1);
  } else {
    value += tracker.move("]");
  }
  return value;
}
function linkReferencePeek() {
  return "[";
}

// node_modules/mdast-util-to-markdown/lib/util/check-bullet.js
function checkBullet(state) {
  const marker = state.options.bullet || "*";
  if (marker !== "*" && marker !== "+" && marker !== "-") {
    throw new Error(
      "Cannot serialize items with `" + marker + "` for `options.bullet`, expected `*`, `+`, or `-`"
    );
  }
  return marker;
}

// node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js
function checkBulletOther(state) {
  const bullet = checkBullet(state);
  const bulletOther = state.options.bulletOther;
  if (!bulletOther) {
    return bullet === "*" ? "-" : "*";
  }
  if (bulletOther !== "*" && bulletOther !== "+" && bulletOther !== "-") {
    throw new Error(
      "Cannot serialize items with `" + bulletOther + "` for `options.bulletOther`, expected `*`, `+`, or `-`"
    );
  }
  if (bulletOther === bullet) {
    throw new Error(
      "Expected `bullet` (`" + bullet + "`) and `bulletOther` (`" + bulletOther + "`) to be different"
    );
  }
  return bulletOther;
}

// node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js
function checkBulletOrdered(state) {
  const marker = state.options.bulletOrdered || ".";
  if (marker !== "." && marker !== ")") {
    throw new Error(
      "Cannot serialize items with `" + marker + "` for `options.bulletOrdered`, expected `.` or `)`"
    );
  }
  return marker;
}

// node_modules/mdast-util-to-markdown/lib/util/check-rule.js
function checkRule(state) {
  const marker = state.options.rule || "*";
  if (marker !== "*" && marker !== "-" && marker !== "_") {
    throw new Error(
      "Cannot serialize rules with `" + marker + "` for `options.rule`, expected `*`, `-`, or `_`"
    );
  }
  return marker;
}

// node_modules/mdast-util-to-markdown/lib/handle/list.js
function list(node, parent, state, info) {
  const exit2 = state.enter("list");
  const bulletCurrent = state.bulletCurrent;
  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state);
  const bulletOther = node.ordered ? bullet === "." ? ")" : "." : checkBulletOther(state);
  let useDifferentMarker = parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false;
  if (!node.ordered) {
    const firstListItem = node.children ? node.children[0] : void 0;
    if (
      // Bullet could be used as a thematic break marker:
      (bullet === "*" || bullet === "-") && // Empty first list item:
      firstListItem && (!firstListItem.children || !firstListItem.children[0]) && // Directly in two other list items:
      state.stack[state.stack.length - 1] === "list" && state.stack[state.stack.length - 2] === "listItem" && state.stack[state.stack.length - 3] === "list" && state.stack[state.stack.length - 4] === "listItem" && // That are each the first child.
      state.indexStack[state.indexStack.length - 1] === 0 && state.indexStack[state.indexStack.length - 2] === 0 && state.indexStack[state.indexStack.length - 3] === 0
    ) {
      useDifferentMarker = true;
    }
    if (checkRule(state) === bullet && firstListItem) {
      let index3 = -1;
      while (++index3 < node.children.length) {
        const item = node.children[index3];
        if (item && item.type === "listItem" && item.children && item.children[0] && item.children[0].type === "thematicBreak") {
          useDifferentMarker = true;
          break;
        }
      }
    }
  }
  if (useDifferentMarker) {
    bullet = bulletOther;
  }
  state.bulletCurrent = bullet;
  const value = state.containerFlow(node, info);
  state.bulletLastUsed = bullet;
  state.bulletCurrent = bulletCurrent;
  exit2();
  return value;
}

// node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js
function checkListItemIndent(state) {
  const style = state.options.listItemIndent || "one";
  if (style !== "tab" && style !== "one" && style !== "mixed") {
    throw new Error(
      "Cannot serialize items with `" + style + "` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`"
    );
  }
  return style;
}

// node_modules/mdast-util-to-markdown/lib/handle/list-item.js
function listItem(node, parent, state, info) {
  const listItemIndent = checkListItemIndent(state);
  let bullet = state.bulletCurrent || checkBullet(state);
  if (parent && parent.type === "list" && parent.ordered) {
    bullet = (typeof parent.start === "number" && parent.start > -1 ? parent.start : 1) + (state.options.incrementListMarker === false ? 0 : parent.children.indexOf(node)) + bullet;
  }
  let size = bullet.length + 1;
  if (listItemIndent === "tab" || listItemIndent === "mixed" && (parent && parent.type === "list" && parent.spread || node.spread)) {
    size = Math.ceil(size / 4) * 4;
  }
  const tracker = state.createTracker(info);
  tracker.move(bullet + " ".repeat(size - bullet.length));
  tracker.shift(size);
  const exit2 = state.enter("listItem");
  const value = state.indentLines(
    state.containerFlow(node, tracker.current()),
    map3
  );
  exit2();
  return value;
  function map3(line, index3, blank) {
    if (index3) {
      return (blank ? "" : " ".repeat(size)) + line;
    }
    return (blank ? bullet : bullet + " ".repeat(size - bullet.length)) + line;
  }
}

// node_modules/mdast-util-to-markdown/lib/handle/paragraph.js
function paragraph(node, _23, state, info) {
  const exit2 = state.enter("paragraph");
  const subexit = state.enter("phrasing");
  const value = state.containerPhrasing(node, info);
  subexit();
  exit2();
  return value;
}

// node_modules/mdast-util-phrasing/lib/index.js
var phrasing = (
  /** @type {(node?: unknown) => node is Exclude<PhrasingContent, Html>} */
  convert([
    "break",
    "delete",
    "emphasis",
    // To do: next major: removed since footnotes were added to GFM.
    "footnote",
    "footnoteReference",
    "image",
    "imageReference",
    "inlineCode",
    // Enabled by `mdast-util-math`:
    "inlineMath",
    "link",
    "linkReference",
    // Enabled by `mdast-util-mdx`:
    "mdxJsxTextElement",
    // Enabled by `mdast-util-mdx`:
    "mdxTextExpression",
    "strong",
    "text",
    // Enabled by `mdast-util-directive`:
    "textDirective"
  ])
);

// node_modules/mdast-util-to-markdown/lib/handle/root.js
function root(node, _23, state, info) {
  const hasPhrasing = node.children.some(function(d) {
    return phrasing(d);
  });
  const container = hasPhrasing ? state.containerPhrasing : state.containerFlow;
  return container.call(state, node, info);
}

// node_modules/mdast-util-to-markdown/lib/util/check-strong.js
function checkStrong(state) {
  const marker = state.options.strong || "*";
  if (marker !== "*" && marker !== "_") {
    throw new Error(
      "Cannot serialize strong with `" + marker + "` for `options.strong`, expected `*`, or `_`"
    );
  }
  return marker;
}

// node_modules/mdast-util-to-markdown/lib/handle/strong.js
strong.peek = strongPeek;
function strong(node, _23, state, info) {
  const marker = checkStrong(state);
  const exit2 = state.enter("strong");
  const tracker = state.createTracker(info);
  const before = tracker.move(marker + marker);
  let between = tracker.move(
    state.containerPhrasing(node, {
      after: marker,
      before,
      ...tracker.current()
    })
  );
  const betweenHead = between.charCodeAt(0);
  const open = encodeInfo(
    info.before.charCodeAt(info.before.length - 1),
    betweenHead,
    marker
  );
  if (open.inside) {
    between = encodeCharacterReference(betweenHead) + between.slice(1);
  }
  const betweenTail = between.charCodeAt(between.length - 1);
  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker);
  if (close.inside) {
    between = between.slice(0, -1) + encodeCharacterReference(betweenTail);
  }
  const after = tracker.move(marker + marker);
  exit2();
  state.attentionEncodeSurroundingInfo = {
    after: close.outside,
    before: open.outside
  };
  return before + between + after;
}
function strongPeek(_23, _1, state) {
  return state.options.strong || "*";
}

// node_modules/mdast-util-to-markdown/lib/handle/text.js
function text(node, _23, state, info) {
  return state.safe(node.value, info);
}

// node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js
function checkRuleRepetition(state) {
  const repetition = state.options.ruleRepetition || 3;
  if (repetition < 3) {
    throw new Error(
      "Cannot serialize rules with repetition `" + repetition + "` for `options.ruleRepetition`, expected `3` or more"
    );
  }
  return repetition;
}

// node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js
function thematicBreak(_23, _1, state) {
  const value = (checkRule(state) + (state.options.ruleSpaces ? " " : "")).repeat(checkRuleRepetition(state));
  return state.options.ruleSpaces ? value.slice(0, -1) : value;
}

// node_modules/mdast-util-to-markdown/lib/handle/index.js
var handle = {
  blockquote,
  break: hardBreak,
  code,
  definition,
  emphasis,
  hardBreak,
  heading,
  html,
  image,
  imageReference,
  inlineCode,
  link,
  linkReference,
  list,
  listItem,
  paragraph,
  root,
  strong,
  text,
  thematicBreak
};

// node_modules/mdast-util-gfm-table/lib/index.js
function gfmTableFromMarkdown() {
  return {
    enter: {
      table: enterTable,
      tableData: enterCell,
      tableHeader: enterCell,
      tableRow: enterRow
    },
    exit: {
      codeText: exitCodeText,
      table: exitTable,
      tableData: exit,
      tableHeader: exit,
      tableRow: exit
    }
  };
}
function enterTable(token) {
  const align = token._align;
  ok(align, "expected `_align` on table");
  this.enter(
    {
      type: "table",
      align: align.map(function(d) {
        return d === "none" ? null : d;
      }),
      children: []
    },
    token
  );
  this.data.inTable = true;
}
function exitTable(token) {
  this.exit(token);
  this.data.inTable = void 0;
}
function enterRow(token) {
  this.enter({ type: "tableRow", children: [] }, token);
}
function exit(token) {
  this.exit(token);
}
function enterCell(token) {
  this.enter({ type: "tableCell", children: [] }, token);
}
function exitCodeText(token) {
  let value = this.resume();
  if (this.data.inTable) {
    value = value.replace(/\\([\\|])/g, replace);
  }
  const node = this.stack[this.stack.length - 1];
  ok(node.type === "inlineCode");
  node.value = value;
  this.exit(token);
}
function replace($0, $1) {
  return $1 === "|" ? $1 : $0;
}
function gfmTableToMarkdown(options2) {
  const settings = options2 || {};
  const padding = settings.tableCellPadding;
  const alignDelimiters = settings.tablePipeAlign;
  const stringLength = settings.stringLength;
  const around = padding ? " " : "|";
  return {
    unsafe: [
      { character: "\r", inConstruct: "tableCell" },
      { character: "\n", inConstruct: "tableCell" },
      // A pipe, when followed by a tab or space (padding), or a dash or colon
      // (unpadded delimiter row), could result in a table.
      { atBreak: true, character: "|", after: "[	 :-]" },
      // A pipe in a cell must be encoded.
      { character: "|", inConstruct: "tableCell" },
      // A colon must be followed by a dash, in which case it could start a
      // delimiter row.
      { atBreak: true, character: ":", after: "-" },
      // A delimiter row can also start with a dash, when followed by more
      // dashes, a colon, or a pipe.
      // This is a stricter version than the built in check for lists, thematic
      // breaks, and setex heading underlines though:
      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>
      { atBreak: true, character: "-", after: "[:|-]" }
    ],
    handlers: {
      inlineCode: inlineCodeWithTable,
      table: handleTable,
      tableCell: handleTableCell,
      tableRow: handleTableRow
    }
  };
  function handleTable(node, _23, state, info) {
    return serializeData(handleTableAsData(node, state, info), node.align);
  }
  function handleTableRow(node, _23, state, info) {
    const row = handleTableRowAsData(node, state, info);
    const value = serializeData([row]);
    return value.slice(0, value.indexOf("\n"));
  }
  function handleTableCell(node, _23, state, info) {
    const exit2 = state.enter("tableCell");
    const subexit = state.enter("phrasing");
    const value = state.containerPhrasing(node, {
      ...info,
      before: around,
      after: around
    });
    subexit();
    exit2();
    return value;
  }
  function serializeData(matrix, align) {
    return markdownTable(matrix, {
      align,
      // @ts-expect-error: `markdown-table` types should support `null`.
      alignDelimiters,
      // @ts-expect-error: `markdown-table` types should support `null`.
      padding,
      // @ts-expect-error: `markdown-table` types should support `null`.
      stringLength
    });
  }
  function handleTableAsData(node, state, info) {
    const children = node.children;
    let index3 = -1;
    const result = [];
    const subexit = state.enter("table");
    while (++index3 < children.length) {
      result[index3] = handleTableRowAsData(children[index3], state, info);
    }
    subexit();
    return result;
  }
  function handleTableRowAsData(node, state, info) {
    const children = node.children;
    let index3 = -1;
    const result = [];
    const subexit = state.enter("tableRow");
    while (++index3 < children.length) {
      result[index3] = handleTableCell(children[index3], node, state, info);
    }
    subexit();
    return result;
  }
  function inlineCodeWithTable(node, parent, state) {
    let value = handle.inlineCode(node, parent, state);
    if (state.stack.includes("tableCell")) {
      value = value.replace(/\|/g, "\\$&");
    }
    return value;
  }
}

// node_modules/mdast-util-gfm-task-list-item/lib/index.js
function gfmTaskListItemFromMarkdown() {
  return {
    exit: {
      taskListCheckValueChecked: exitCheck,
      taskListCheckValueUnchecked: exitCheck,
      paragraph: exitParagraphWithTaskListItem
    }
  };
}
function gfmTaskListItemToMarkdown() {
  return {
    unsafe: [{ atBreak: true, character: "-", after: "[:|-]" }],
    handlers: { listItem: listItemWithTaskListItem }
  };
}
function exitCheck(token) {
  const node = this.stack[this.stack.length - 2];
  ok(node.type === "listItem");
  node.checked = token.type === "taskListCheckValueChecked";
}
function exitParagraphWithTaskListItem(token) {
  const parent = this.stack[this.stack.length - 2];
  if (parent && parent.type === "listItem" && typeof parent.checked === "boolean") {
    const node = this.stack[this.stack.length - 1];
    ok(node.type === "paragraph");
    const head = node.children[0];
    if (head && head.type === "text") {
      const siblings = parent.children;
      let index3 = -1;
      let firstParaghraph;
      while (++index3 < siblings.length) {
        const sibling = siblings[index3];
        if (sibling.type === "paragraph") {
          firstParaghraph = sibling;
          break;
        }
      }
      if (firstParaghraph === node) {
        head.value = head.value.slice(1);
        if (head.value.length === 0) {
          node.children.shift();
        } else if (node.position && head.position && typeof head.position.start.offset === "number") {
          head.position.start.column++;
          head.position.start.offset++;
          node.position.start = Object.assign({}, head.position.start);
        }
      }
    }
  }
  this.exit(token);
}
function listItemWithTaskListItem(node, parent, state, info) {
  const head = node.children[0];
  const checkable = typeof node.checked === "boolean" && head && head.type === "paragraph";
  const checkbox = "[" + (node.checked ? "x" : " ") + "] ";
  const tracker = state.createTracker(info);
  if (checkable) {
    tracker.move(checkbox);
  }
  let value = handle.listItem(node, parent, state, {
    ...info,
    ...tracker.current()
  });
  if (checkable) {
    value = value.replace(/^(?:[*+-]|\d+\.)([\r\n]| {1,3})/, check);
  }
  return value;
  function check($0) {
    return $0 + checkbox;
  }
}

// node_modules/mdast-util-gfm/lib/index.js
function gfmFromMarkdown() {
  return [
    gfmAutolinkLiteralFromMarkdown(),
    gfmFootnoteFromMarkdown(),
    gfmStrikethroughFromMarkdown(),
    gfmTableFromMarkdown(),
    gfmTaskListItemFromMarkdown()
  ];
}
function gfmToMarkdown(options2) {
  return {
    extensions: [
      gfmAutolinkLiteralToMarkdown(),
      gfmFootnoteToMarkdown(options2),
      gfmStrikethroughToMarkdown(),
      gfmTableToMarkdown(options2),
      gfmTaskListItemToMarkdown()
    ]
  };
}

// node_modules/micromark-extension-gfm-autolink-literal/dev/lib/syntax.js
var wwwPrefix = { tokenize: tokenizeWwwPrefix, partial: true };
var domain2 = { tokenize: tokenizeDomain, partial: true };
var path = { tokenize: tokenizePath, partial: true };
var trail = { tokenize: tokenizeTrail, partial: true };
var emailDomainDotTrail = {
  tokenize: tokenizeEmailDomainDotTrail,
  partial: true
};
var wwwAutolink = {
  name: "wwwAutolink",
  tokenize: tokenizeWwwAutolink,
  previous: previousWww
};
var protocolAutolink = {
  name: "protocolAutolink",
  tokenize: tokenizeProtocolAutolink,
  previous: previousProtocol
};
var emailAutolink = {
  name: "emailAutolink",
  tokenize: tokenizeEmailAutolink,
  previous: previousEmail
};
var text2 = {};
function gfmAutolinkLiteral() {
  return { text: text2 };
}
var code2 = codes.digit0;
while (code2 < codes.leftCurlyBrace) {
  text2[code2] = emailAutolink;
  code2++;
  if (code2 === codes.colon) code2 = codes.uppercaseA;
  else if (code2 === codes.leftSquareBracket) code2 = codes.lowercaseA;
}
text2[codes.plusSign] = emailAutolink;
text2[codes.dash] = emailAutolink;
text2[codes.dot] = emailAutolink;
text2[codes.underscore] = emailAutolink;
text2[codes.uppercaseH] = [emailAutolink, protocolAutolink];
text2[codes.lowercaseH] = [emailAutolink, protocolAutolink];
text2[codes.uppercaseW] = [emailAutolink, wwwAutolink];
text2[codes.lowercaseW] = [emailAutolink, wwwAutolink];
function tokenizeEmailAutolink(effects, ok2, nok) {
  const self2 = this;
  let dot;
  let data;
  return start2;
  function start2(code3) {
    if (!gfmAtext(code3) || !previousEmail.call(self2, self2.previous) || previousUnbalanced(self2.events)) {
      return nok(code3);
    }
    effects.enter("literalAutolink");
    effects.enter("literalAutolinkEmail");
    return atext(code3);
  }
  function atext(code3) {
    if (gfmAtext(code3)) {
      effects.consume(code3);
      return atext;
    }
    if (code3 === codes.atSign) {
      effects.consume(code3);
      return emailDomain;
    }
    return nok(code3);
  }
  function emailDomain(code3) {
    if (code3 === codes.dot) {
      return effects.check(
        emailDomainDotTrail,
        emailDomainAfter,
        emailDomainDot
      )(code3);
    }
    if (code3 === codes.dash || code3 === codes.underscore || asciiAlphanumeric(code3)) {
      data = true;
      effects.consume(code3);
      return emailDomain;
    }
    return emailDomainAfter(code3);
  }
  function emailDomainDot(code3) {
    effects.consume(code3);
    dot = true;
    return emailDomain;
  }
  function emailDomainAfter(code3) {
    if (data && dot && asciiAlpha(self2.previous)) {
      effects.exit("literalAutolinkEmail");
      effects.exit("literalAutolink");
      return ok2(code3);
    }
    return nok(code3);
  }
}
function tokenizeWwwAutolink(effects, ok2, nok) {
  const self2 = this;
  return wwwStart;
  function wwwStart(code3) {
    if (code3 !== codes.uppercaseW && code3 !== codes.lowercaseW || !previousWww.call(self2, self2.previous) || previousUnbalanced(self2.events)) {
      return nok(code3);
    }
    effects.enter("literalAutolink");
    effects.enter("literalAutolinkWww");
    return effects.check(
      wwwPrefix,
      effects.attempt(domain2, effects.attempt(path, wwwAfter), nok),
      nok
    )(code3);
  }
  function wwwAfter(code3) {
    effects.exit("literalAutolinkWww");
    effects.exit("literalAutolink");
    return ok2(code3);
  }
}
function tokenizeProtocolAutolink(effects, ok2, nok) {
  const self2 = this;
  let buffer = "";
  let seen = false;
  return protocolStart;
  function protocolStart(code3) {
    if ((code3 === codes.uppercaseH || code3 === codes.lowercaseH) && previousProtocol.call(self2, self2.previous) && !previousUnbalanced(self2.events)) {
      effects.enter("literalAutolink");
      effects.enter("literalAutolinkHttp");
      buffer += String.fromCodePoint(code3);
      effects.consume(code3);
      return protocolPrefixInside;
    }
    return nok(code3);
  }
  function protocolPrefixInside(code3) {
    if (asciiAlpha(code3) && buffer.length < 5) {
      buffer += String.fromCodePoint(code3);
      effects.consume(code3);
      return protocolPrefixInside;
    }
    if (code3 === codes.colon) {
      const protocol = buffer.toLowerCase();
      if (protocol === "http" || protocol === "https") {
        effects.consume(code3);
        return protocolSlashesInside;
      }
    }
    return nok(code3);
  }
  function protocolSlashesInside(code3) {
    if (code3 === codes.slash) {
      effects.consume(code3);
      if (seen) {
        return afterProtocol;
      }
      seen = true;
      return protocolSlashesInside;
    }
    return nok(code3);
  }
  function afterProtocol(code3) {
    return code3 === codes.eof || asciiControl(code3) || markdownLineEndingOrSpace(code3) || unicodeWhitespace(code3) || unicodePunctuation(code3) ? nok(code3) : effects.attempt(domain2, effects.attempt(path, protocolAfter), nok)(code3);
  }
  function protocolAfter(code3) {
    effects.exit("literalAutolinkHttp");
    effects.exit("literalAutolink");
    return ok2(code3);
  }
}
function tokenizeWwwPrefix(effects, ok2, nok) {
  let size = 0;
  return wwwPrefixInside;
  function wwwPrefixInside(code3) {
    if ((code3 === codes.uppercaseW || code3 === codes.lowercaseW) && size < 3) {
      size++;
      effects.consume(code3);
      return wwwPrefixInside;
    }
    if (code3 === codes.dot && size === 3) {
      effects.consume(code3);
      return wwwPrefixAfter;
    }
    return nok(code3);
  }
  function wwwPrefixAfter(code3) {
    return code3 === codes.eof ? nok(code3) : ok2(code3);
  }
}
function tokenizeDomain(effects, ok2, nok) {
  let underscoreInLastSegment;
  let underscoreInLastLastSegment;
  let seen;
  return domainInside;
  function domainInside(code3) {
    if (code3 === codes.dot || code3 === codes.underscore) {
      return effects.check(trail, domainAfter, domainAtPunctuation)(code3);
    }
    if (code3 === codes.eof || markdownLineEndingOrSpace(code3) || unicodeWhitespace(code3) || code3 !== codes.dash && unicodePunctuation(code3)) {
      return domainAfter(code3);
    }
    seen = true;
    effects.consume(code3);
    return domainInside;
  }
  function domainAtPunctuation(code3) {
    if (code3 === codes.underscore) {
      underscoreInLastSegment = true;
    } else {
      underscoreInLastLastSegment = underscoreInLastSegment;
      underscoreInLastSegment = void 0;
    }
    effects.consume(code3);
    return domainInside;
  }
  function domainAfter(code3) {
    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {
      return nok(code3);
    }
    return ok2(code3);
  }
}
function tokenizePath(effects, ok2) {
  let sizeOpen = 0;
  let sizeClose = 0;
  return pathInside;
  function pathInside(code3) {
    if (code3 === codes.leftParenthesis) {
      sizeOpen++;
      effects.consume(code3);
      return pathInside;
    }
    if (code3 === codes.rightParenthesis && sizeClose < sizeOpen) {
      return pathAtPunctuation(code3);
    }
    if (code3 === codes.exclamationMark || code3 === codes.quotationMark || code3 === codes.ampersand || code3 === codes.apostrophe || code3 === codes.rightParenthesis || code3 === codes.asterisk || code3 === codes.comma || code3 === codes.dot || code3 === codes.colon || code3 === codes.semicolon || code3 === codes.lessThan || code3 === codes.questionMark || code3 === codes.rightSquareBracket || code3 === codes.underscore || code3 === codes.tilde) {
      return effects.check(trail, ok2, pathAtPunctuation)(code3);
    }
    if (code3 === codes.eof || markdownLineEndingOrSpace(code3) || unicodeWhitespace(code3)) {
      return ok2(code3);
    }
    effects.consume(code3);
    return pathInside;
  }
  function pathAtPunctuation(code3) {
    if (code3 === codes.rightParenthesis) {
      sizeClose++;
    }
    effects.consume(code3);
    return pathInside;
  }
}
function tokenizeTrail(effects, ok2, nok) {
  return trail2;
  function trail2(code3) {
    if (code3 === codes.exclamationMark || code3 === codes.quotationMark || code3 === codes.apostrophe || code3 === codes.rightParenthesis || code3 === codes.asterisk || code3 === codes.comma || code3 === codes.dot || code3 === codes.colon || code3 === codes.semicolon || code3 === codes.questionMark || code3 === codes.underscore || code3 === codes.tilde) {
      effects.consume(code3);
      return trail2;
    }
    if (code3 === codes.ampersand) {
      effects.consume(code3);
      return trailCharacterReferenceStart;
    }
    if (code3 === codes.rightSquareBracket) {
      effects.consume(code3);
      return trailBracketAfter;
    }
    if (
      // `<` is an end.
      code3 === codes.lessThan || // So is whitespace.
      code3 === codes.eof || markdownLineEndingOrSpace(code3) || unicodeWhitespace(code3)
    ) {
      return ok2(code3);
    }
    return nok(code3);
  }
  function trailBracketAfter(code3) {
    if (code3 === codes.eof || code3 === codes.leftParenthesis || code3 === codes.leftSquareBracket || markdownLineEndingOrSpace(code3) || unicodeWhitespace(code3)) {
      return ok2(code3);
    }
    return trail2(code3);
  }
  function trailCharacterReferenceStart(code3) {
    return asciiAlpha(code3) ? trailCharacterReferenceInside(code3) : nok(code3);
  }
  function trailCharacterReferenceInside(code3) {
    if (code3 === codes.semicolon) {
      effects.consume(code3);
      return trail2;
    }
    if (asciiAlpha(code3)) {
      effects.consume(code3);
      return trailCharacterReferenceInside;
    }
    return nok(code3);
  }
}
function tokenizeEmailDomainDotTrail(effects, ok2, nok) {
  return start2;
  function start2(code3) {
    effects.consume(code3);
    return after;
  }
  function after(code3) {
    return asciiAlphanumeric(code3) ? nok(code3) : ok2(code3);
  }
}
function previousWww(code3) {
  return code3 === codes.eof || code3 === codes.leftParenthesis || code3 === codes.asterisk || code3 === codes.underscore || code3 === codes.leftSquareBracket || code3 === codes.rightSquareBracket || code3 === codes.tilde || markdownLineEndingOrSpace(code3);
}
function previousProtocol(code3) {
  return !asciiAlpha(code3);
}
function previousEmail(code3) {
  return !(code3 === codes.slash || gfmAtext(code3));
}
function gfmAtext(code3) {
  return code3 === codes.plusSign || code3 === codes.dash || code3 === codes.dot || code3 === codes.underscore || asciiAlphanumeric(code3);
}
function previousUnbalanced(events) {
  let index3 = events.length;
  let result = false;
  while (index3--) {
    const token = events[index3][1];
    if ((token.type === "labelLink" || token.type === "labelImage") && !token._balanced) {
      result = true;
      break;
    }
    if (token._gfmAutolinkLiteralWalkedInto) {
      result = false;
      break;
    }
  }
  if (events.length > 0 && !result) {
    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true;
  }
  return result;
}

// node_modules/micromark-extension-gfm-footnote/dev/lib/syntax.js
var indent = { tokenize: tokenizeIndent, partial: true };
function gfmFootnote() {
  return {
    document: {
      [codes.leftSquareBracket]: {
        name: "gfmFootnoteDefinition",
        tokenize: tokenizeDefinitionStart,
        continuation: { tokenize: tokenizeDefinitionContinuation },
        exit: gfmFootnoteDefinitionEnd
      }
    },
    text: {
      [codes.leftSquareBracket]: {
        name: "gfmFootnoteCall",
        tokenize: tokenizeGfmFootnoteCall
      },
      [codes.rightSquareBracket]: {
        name: "gfmPotentialFootnoteCall",
        add: "after",
        tokenize: tokenizePotentialGfmFootnoteCall,
        resolveTo: resolveToPotentialGfmFootnoteCall
      }
    }
  };
}
function tokenizePotentialGfmFootnoteCall(effects, ok2, nok) {
  const self2 = this;
  let index3 = self2.events.length;
  const defined = self2.parser.gfmFootnotes || (self2.parser.gfmFootnotes = []);
  let labelStart;
  while (index3--) {
    const token = self2.events[index3][1];
    if (token.type === types.labelImage) {
      labelStart = token;
      break;
    }
    if (token.type === "gfmFootnoteCall" || token.type === types.labelLink || token.type === types.label || token.type === types.image || token.type === types.link) {
      break;
    }
  }
  return start2;
  function start2(code3) {
    ok(code3 === codes.rightSquareBracket, "expected `]`");
    if (!labelStart || !labelStart._balanced) {
      return nok(code3);
    }
    const id = normalizeIdentifier(
      self2.sliceSerialize({ start: labelStart.end, end: self2.now() })
    );
    if (id.codePointAt(0) !== codes.caret || !defined.includes(id.slice(1))) {
      return nok(code3);
    }
    effects.enter("gfmFootnoteCallLabelMarker");
    effects.consume(code3);
    effects.exit("gfmFootnoteCallLabelMarker");
    return ok2(code3);
  }
}
function resolveToPotentialGfmFootnoteCall(events, context) {
  let index3 = events.length;
  let labelStart;
  while (index3--) {
    if (events[index3][1].type === types.labelImage && events[index3][0] === "enter") {
      labelStart = events[index3][1];
      break;
    }
  }
  ok(labelStart, "expected `labelStart` to resolve");
  events[index3 + 1][1].type = types.data;
  events[index3 + 3][1].type = "gfmFootnoteCallLabelMarker";
  const call = {
    type: "gfmFootnoteCall",
    start: Object.assign({}, events[index3 + 3][1].start),
    end: Object.assign({}, events[events.length - 1][1].end)
  };
  const marker = {
    type: "gfmFootnoteCallMarker",
    start: Object.assign({}, events[index3 + 3][1].end),
    end: Object.assign({}, events[index3 + 3][1].end)
  };
  marker.end.column++;
  marker.end.offset++;
  marker.end._bufferIndex++;
  const string = {
    type: "gfmFootnoteCallString",
    start: Object.assign({}, marker.end),
    end: Object.assign({}, events[events.length - 1][1].start)
  };
  const chunk = {
    type: types.chunkString,
    contentType: "string",
    start: Object.assign({}, string.start),
    end: Object.assign({}, string.end)
  };
  const replacement = [
    // Take the `labelImageMarker` (now `data`, the `!`)
    events[index3 + 1],
    events[index3 + 2],
    ["enter", call, context],
    // The `[`
    events[index3 + 3],
    events[index3 + 4],
    // The `^`.
    ["enter", marker, context],
    ["exit", marker, context],
    // Everything in between.
    ["enter", string, context],
    ["enter", chunk, context],
    ["exit", chunk, context],
    ["exit", string, context],
    // The ending (`]`, properly parsed and labelled).
    events[events.length - 2],
    events[events.length - 1],
    ["exit", call, context]
  ];
  events.splice(index3, events.length - index3 + 1, ...replacement);
  return events;
}
function tokenizeGfmFootnoteCall(effects, ok2, nok) {
  const self2 = this;
  const defined = self2.parser.gfmFootnotes || (self2.parser.gfmFootnotes = []);
  let size = 0;
  let data;
  return start2;
  function start2(code3) {
    ok(code3 === codes.leftSquareBracket, "expected `[`");
    effects.enter("gfmFootnoteCall");
    effects.enter("gfmFootnoteCallLabelMarker");
    effects.consume(code3);
    effects.exit("gfmFootnoteCallLabelMarker");
    return callStart;
  }
  function callStart(code3) {
    if (code3 !== codes.caret) return nok(code3);
    effects.enter("gfmFootnoteCallMarker");
    effects.consume(code3);
    effects.exit("gfmFootnoteCallMarker");
    effects.enter("gfmFootnoteCallString");
    effects.enter("chunkString").contentType = "string";
    return callData;
  }
  function callData(code3) {
    if (
      // Too long.
      size > constants.linkReferenceSizeMax || // Closing brace with nothing.
      code3 === codes.rightSquareBracket && !data || // Space or tab is not supported by GFM for some reason.
      // `\n` and `[` not being supported makes sense.
      code3 === codes.eof || code3 === codes.leftSquareBracket || markdownLineEndingOrSpace(code3)
    ) {
      return nok(code3);
    }
    if (code3 === codes.rightSquareBracket) {
      effects.exit("chunkString");
      const token = effects.exit("gfmFootnoteCallString");
      if (!defined.includes(normalizeIdentifier(self2.sliceSerialize(token)))) {
        return nok(code3);
      }
      effects.enter("gfmFootnoteCallLabelMarker");
      effects.consume(code3);
      effects.exit("gfmFootnoteCallLabelMarker");
      effects.exit("gfmFootnoteCall");
      return ok2;
    }
    if (!markdownLineEndingOrSpace(code3)) {
      data = true;
    }
    size++;
    effects.consume(code3);
    return code3 === codes.backslash ? callEscape : callData;
  }
  function callEscape(code3) {
    if (code3 === codes.leftSquareBracket || code3 === codes.backslash || code3 === codes.rightSquareBracket) {
      effects.consume(code3);
      size++;
      return callData;
    }
    return callData(code3);
  }
}
function tokenizeDefinitionStart(effects, ok2, nok) {
  const self2 = this;
  const defined = self2.parser.gfmFootnotes || (self2.parser.gfmFootnotes = []);
  let identifier;
  let size = 0;
  let data;
  return start2;
  function start2(code3) {
    ok(code3 === codes.leftSquareBracket, "expected `[`");
    effects.enter("gfmFootnoteDefinition")._container = true;
    effects.enter("gfmFootnoteDefinitionLabel");
    effects.enter("gfmFootnoteDefinitionLabelMarker");
    effects.consume(code3);
    effects.exit("gfmFootnoteDefinitionLabelMarker");
    return labelAtMarker;
  }
  function labelAtMarker(code3) {
    if (code3 === codes.caret) {
      effects.enter("gfmFootnoteDefinitionMarker");
      effects.consume(code3);
      effects.exit("gfmFootnoteDefinitionMarker");
      effects.enter("gfmFootnoteDefinitionLabelString");
      effects.enter("chunkString").contentType = "string";
      return labelInside;
    }
    return nok(code3);
  }
  function labelInside(code3) {
    if (
      // Too long.
      size > constants.linkReferenceSizeMax || // Closing brace with nothing.
      code3 === codes.rightSquareBracket && !data || // Space or tab is not supported by GFM for some reason.
      // `\n` and `[` not being supported makes sense.
      code3 === codes.eof || code3 === codes.leftSquareBracket || markdownLineEndingOrSpace(code3)
    ) {
      return nok(code3);
    }
    if (code3 === codes.rightSquareBracket) {
      effects.exit("chunkString");
      const token = effects.exit("gfmFootnoteDefinitionLabelString");
      identifier = normalizeIdentifier(self2.sliceSerialize(token));
      effects.enter("gfmFootnoteDefinitionLabelMarker");
      effects.consume(code3);
      effects.exit("gfmFootnoteDefinitionLabelMarker");
      effects.exit("gfmFootnoteDefinitionLabel");
      return labelAfter;
    }
    if (!markdownLineEndingOrSpace(code3)) {
      data = true;
    }
    size++;
    effects.consume(code3);
    return code3 === codes.backslash ? labelEscape : labelInside;
  }
  function labelEscape(code3) {
    if (code3 === codes.leftSquareBracket || code3 === codes.backslash || code3 === codes.rightSquareBracket) {
      effects.consume(code3);
      size++;
      return labelInside;
    }
    return labelInside(code3);
  }
  function labelAfter(code3) {
    if (code3 === codes.colon) {
      effects.enter("definitionMarker");
      effects.consume(code3);
      effects.exit("definitionMarker");
      if (!defined.includes(identifier)) {
        defined.push(identifier);
      }
      return factorySpace(
        effects,
        whitespaceAfter,
        "gfmFootnoteDefinitionWhitespace"
      );
    }
    return nok(code3);
  }
  function whitespaceAfter(code3) {
    return ok2(code3);
  }
}
function tokenizeDefinitionContinuation(effects, ok2, nok) {
  return effects.check(blankLine, ok2, effects.attempt(indent, ok2, nok));
}
function gfmFootnoteDefinitionEnd(effects) {
  effects.exit("gfmFootnoteDefinition");
}
function tokenizeIndent(effects, ok2, nok) {
  const self2 = this;
  return factorySpace(
    effects,
    afterPrefix,
    "gfmFootnoteDefinitionIndent",
    constants.tabSize + 1
  );
  function afterPrefix(code3) {
    const tail = self2.events[self2.events.length - 1];
    return tail && tail[1].type === "gfmFootnoteDefinitionIndent" && tail[2].sliceSerialize(tail[1], true).length === constants.tabSize ? ok2(code3) : nok(code3);
  }
}

// node_modules/micromark-extension-gfm-footnote/dev/lib/html.js
var own3 = {}.hasOwnProperty;

// node_modules/micromark-extension-gfm-strikethrough/dev/lib/syntax.js
function gfmStrikethrough(options2) {
  const options_ = options2 || {};
  let single = options_.singleTilde;
  const tokenizer = {
    name: "strikethrough",
    tokenize: tokenizeStrikethrough,
    resolveAll: resolveAllStrikethrough
  };
  if (single === null || single === void 0) {
    single = true;
  }
  return {
    text: { [codes.tilde]: tokenizer },
    insideSpan: { null: [tokenizer] },
    attentionMarkers: { null: [codes.tilde] }
  };
  function resolveAllStrikethrough(events, context) {
    let index3 = -1;
    while (++index3 < events.length) {
      if (events[index3][0] === "enter" && events[index3][1].type === "strikethroughSequenceTemporary" && events[index3][1]._close) {
        let open = index3;
        while (open--) {
          if (events[open][0] === "exit" && events[open][1].type === "strikethroughSequenceTemporary" && events[open][1]._open && // If the sizes are the same:
          events[index3][1].end.offset - events[index3][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {
            events[index3][1].type = "strikethroughSequence";
            events[open][1].type = "strikethroughSequence";
            const strikethrough = {
              type: "strikethrough",
              start: Object.assign({}, events[open][1].start),
              end: Object.assign({}, events[index3][1].end)
            };
            const text3 = {
              type: "strikethroughText",
              start: Object.assign({}, events[open][1].end),
              end: Object.assign({}, events[index3][1].start)
            };
            const nextEvents = [
              ["enter", strikethrough, context],
              ["enter", events[open][1], context],
              ["exit", events[open][1], context],
              ["enter", text3, context]
            ];
            const insideSpan = context.parser.constructs.insideSpan.null;
            if (insideSpan) {
              splice(
                nextEvents,
                nextEvents.length,
                0,
                resolveAll(insideSpan, events.slice(open + 1, index3), context)
              );
            }
            splice(nextEvents, nextEvents.length, 0, [
              ["exit", text3, context],
              ["enter", events[index3][1], context],
              ["exit", events[index3][1], context],
              ["exit", strikethrough, context]
            ]);
            splice(events, open - 1, index3 - open + 3, nextEvents);
            index3 = open + nextEvents.length - 2;
            break;
          }
        }
      }
    }
    index3 = -1;
    while (++index3 < events.length) {
      if (events[index3][1].type === "strikethroughSequenceTemporary") {
        events[index3][1].type = types.data;
      }
    }
    return events;
  }
  function tokenizeStrikethrough(effects, ok2, nok) {
    const previous2 = this.previous;
    const events = this.events;
    let size = 0;
    return start2;
    function start2(code3) {
      ok(code3 === codes.tilde, "expected `~`");
      if (previous2 === codes.tilde && events[events.length - 1][1].type !== types.characterEscape) {
        return nok(code3);
      }
      effects.enter("strikethroughSequenceTemporary");
      return more(code3);
    }
    function more(code3) {
      const before = classifyCharacter(previous2);
      if (code3 === codes.tilde) {
        if (size > 1) return nok(code3);
        effects.consume(code3);
        size++;
        return more;
      }
      if (size < 2 && !single) return nok(code3);
      const token = effects.exit("strikethroughSequenceTemporary");
      const after = classifyCharacter(code3);
      token._open = !after || after === constants.attentionSideAfter && Boolean(before);
      token._close = !before || before === constants.attentionSideAfter && Boolean(after);
      return ok2(code3);
    }
  }
}

// node_modules/micromark-extension-gfm-table/dev/lib/edit-map.js
var EditMap = class {
  /**
   * Create a new edit map.
   */
  constructor() {
    this.map = [];
  }
  /**
   * Create an edit: a remove and/or add at a certain place.
   *
   * @param {number} index
   * @param {number} remove
   * @param {Array<Event>} add
   * @returns {undefined}
   */
  add(index3, remove, add) {
    addImplementation(this, index3, remove, add);
  }
  // To do: add this when moving to `micromark`.
  // /**
  //  * Create an edit: but insert `add` before existing additions.
  //  *
  //  * @param {number} index
  //  * @param {number} remove
  //  * @param {Array<Event>} add
  //  * @returns {undefined}
  //  */
  // addBefore(index, remove, add) {
  //   addImplementation(this, index, remove, add, true)
  // }
  /**
   * Done, change the events.
   *
   * @param {Array<Event>} events
   * @returns {undefined}
   */
  consume(events) {
    this.map.sort(function(a, b) {
      return a[0] - b[0];
    });
    if (this.map.length === 0) {
      return;
    }
    let index3 = this.map.length;
    const vecs = [];
    while (index3 > 0) {
      index3 -= 1;
      vecs.push(
        events.slice(this.map[index3][0] + this.map[index3][1]),
        this.map[index3][2]
      );
      events.length = this.map[index3][0];
    }
    vecs.push(events.slice());
    events.length = 0;
    let slice = vecs.pop();
    while (slice) {
      for (const element2 of slice) {
        events.push(element2);
      }
      slice = vecs.pop();
    }
    this.map.length = 0;
  }
};
function addImplementation(editMap, at, remove, add) {
  let index3 = 0;
  if (remove === 0 && add.length === 0) {
    return;
  }
  while (index3 < editMap.map.length) {
    if (editMap.map[index3][0] === at) {
      editMap.map[index3][1] += remove;
      editMap.map[index3][2].push(...add);
      return;
    }
    index3 += 1;
  }
  editMap.map.push([at, remove, add]);
}

// node_modules/micromark-extension-gfm-table/dev/lib/infer.js
function gfmTableAlign(events, index3) {
  ok(events[index3][1].type === "table", "expected table");
  let inDelimiterRow = false;
  const align = [];
  while (index3 < events.length) {
    const event = events[index3];
    if (inDelimiterRow) {
      if (event[0] === "enter") {
        if (event[1].type === "tableContent") {
          align.push(
            events[index3 + 1][1].type === "tableDelimiterMarker" ? "left" : "none"
          );
        }
      } else if (event[1].type === "tableContent") {
        if (events[index3 - 1][1].type === "tableDelimiterMarker") {
          const alignIndex = align.length - 1;
          align[alignIndex] = align[alignIndex] === "left" ? "center" : "right";
        }
      } else if (event[1].type === "tableDelimiterRow") {
        break;
      }
    } else if (event[0] === "enter" && event[1].type === "tableDelimiterRow") {
      inDelimiterRow = true;
    }
    index3 += 1;
  }
  return align;
}

// node_modules/micromark-extension-gfm-table/dev/lib/syntax.js
function gfmTable() {
  return {
    flow: {
      null: { name: "table", tokenize: tokenizeTable, resolveAll: resolveTable }
    }
  };
}
function tokenizeTable(effects, ok2, nok) {
  const self2 = this;
  let size = 0;
  let sizeB = 0;
  let seen;
  return start2;
  function start2(code3) {
    let index3 = self2.events.length - 1;
    while (index3 > -1) {
      const type = self2.events[index3][1].type;
      if (type === types.lineEnding || // Note: markdown-rs uses `whitespace` instead of `linePrefix`
      type === types.linePrefix)
        index3--;
      else break;
    }
    const tail = index3 > -1 ? self2.events[index3][1].type : null;
    const next = tail === "tableHead" || tail === "tableRow" ? bodyRowStart : headRowBefore;
    if (next === bodyRowStart && self2.parser.lazy[self2.now().line]) {
      return nok(code3);
    }
    return next(code3);
  }
  function headRowBefore(code3) {
    effects.enter("tableHead");
    effects.enter("tableRow");
    return headRowStart(code3);
  }
  function headRowStart(code3) {
    if (code3 === codes.verticalBar) {
      return headRowBreak(code3);
    }
    seen = true;
    sizeB += 1;
    return headRowBreak(code3);
  }
  function headRowBreak(code3) {
    if (code3 === codes.eof) {
      return nok(code3);
    }
    if (markdownLineEnding(code3)) {
      if (sizeB > 1) {
        sizeB = 0;
        self2.interrupt = true;
        effects.exit("tableRow");
        effects.enter(types.lineEnding);
        effects.consume(code3);
        effects.exit(types.lineEnding);
        return headDelimiterStart;
      }
      return nok(code3);
    }
    if (markdownSpace(code3)) {
      return factorySpace(effects, headRowBreak, types.whitespace)(code3);
    }
    sizeB += 1;
    if (seen) {
      seen = false;
      size += 1;
    }
    if (code3 === codes.verticalBar) {
      effects.enter("tableCellDivider");
      effects.consume(code3);
      effects.exit("tableCellDivider");
      seen = true;
      return headRowBreak;
    }
    effects.enter(types.data);
    return headRowData(code3);
  }
  function headRowData(code3) {
    if (code3 === codes.eof || code3 === codes.verticalBar || markdownLineEndingOrSpace(code3)) {
      effects.exit(types.data);
      return headRowBreak(code3);
    }
    effects.consume(code3);
    return code3 === codes.backslash ? headRowEscape : headRowData;
  }
  function headRowEscape(code3) {
    if (code3 === codes.backslash || code3 === codes.verticalBar) {
      effects.consume(code3);
      return headRowData;
    }
    return headRowData(code3);
  }
  function headDelimiterStart(code3) {
    self2.interrupt = false;
    if (self2.parser.lazy[self2.now().line]) {
      return nok(code3);
    }
    effects.enter("tableDelimiterRow");
    seen = false;
    if (markdownSpace(code3)) {
      ok(self2.parser.constructs.disable.null, "expected `disabled.null`");
      return factorySpace(
        effects,
        headDelimiterBefore,
        types.linePrefix,
        self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : constants.tabSize
      )(code3);
    }
    return headDelimiterBefore(code3);
  }
  function headDelimiterBefore(code3) {
    if (code3 === codes.dash || code3 === codes.colon) {
      return headDelimiterValueBefore(code3);
    }
    if (code3 === codes.verticalBar) {
      seen = true;
      effects.enter("tableCellDivider");
      effects.consume(code3);
      effects.exit("tableCellDivider");
      return headDelimiterCellBefore;
    }
    return headDelimiterNok(code3);
  }
  function headDelimiterCellBefore(code3) {
    if (markdownSpace(code3)) {
      return factorySpace(
        effects,
        headDelimiterValueBefore,
        types.whitespace
      )(code3);
    }
    return headDelimiterValueBefore(code3);
  }
  function headDelimiterValueBefore(code3) {
    if (code3 === codes.colon) {
      sizeB += 1;
      seen = true;
      effects.enter("tableDelimiterMarker");
      effects.consume(code3);
      effects.exit("tableDelimiterMarker");
      return headDelimiterLeftAlignmentAfter;
    }
    if (code3 === codes.dash) {
      sizeB += 1;
      return headDelimiterLeftAlignmentAfter(code3);
    }
    if (code3 === codes.eof || markdownLineEnding(code3)) {
      return headDelimiterCellAfter(code3);
    }
    return headDelimiterNok(code3);
  }
  function headDelimiterLeftAlignmentAfter(code3) {
    if (code3 === codes.dash) {
      effects.enter("tableDelimiterFiller");
      return headDelimiterFiller(code3);
    }
    return headDelimiterNok(code3);
  }
  function headDelimiterFiller(code3) {
    if (code3 === codes.dash) {
      effects.consume(code3);
      return headDelimiterFiller;
    }
    if (code3 === codes.colon) {
      seen = true;
      effects.exit("tableDelimiterFiller");
      effects.enter("tableDelimiterMarker");
      effects.consume(code3);
      effects.exit("tableDelimiterMarker");
      return headDelimiterRightAlignmentAfter;
    }
    effects.exit("tableDelimiterFiller");
    return headDelimiterRightAlignmentAfter(code3);
  }
  function headDelimiterRightAlignmentAfter(code3) {
    if (markdownSpace(code3)) {
      return factorySpace(
        effects,
        headDelimiterCellAfter,
        types.whitespace
      )(code3);
    }
    return headDelimiterCellAfter(code3);
  }
  function headDelimiterCellAfter(code3) {
    if (code3 === codes.verticalBar) {
      return headDelimiterBefore(code3);
    }
    if (code3 === codes.eof || markdownLineEnding(code3)) {
      if (!seen || size !== sizeB) {
        return headDelimiterNok(code3);
      }
      effects.exit("tableDelimiterRow");
      effects.exit("tableHead");
      return ok2(code3);
    }
    return headDelimiterNok(code3);
  }
  function headDelimiterNok(code3) {
    return nok(code3);
  }
  function bodyRowStart(code3) {
    effects.enter("tableRow");
    return bodyRowBreak(code3);
  }
  function bodyRowBreak(code3) {
    if (code3 === codes.verticalBar) {
      effects.enter("tableCellDivider");
      effects.consume(code3);
      effects.exit("tableCellDivider");
      return bodyRowBreak;
    }
    if (code3 === codes.eof || markdownLineEnding(code3)) {
      effects.exit("tableRow");
      return ok2(code3);
    }
    if (markdownSpace(code3)) {
      return factorySpace(effects, bodyRowBreak, types.whitespace)(code3);
    }
    effects.enter(types.data);
    return bodyRowData(code3);
  }
  function bodyRowData(code3) {
    if (code3 === codes.eof || code3 === codes.verticalBar || markdownLineEndingOrSpace(code3)) {
      effects.exit(types.data);
      return bodyRowBreak(code3);
    }
    effects.consume(code3);
    return code3 === codes.backslash ? bodyRowEscape : bodyRowData;
  }
  function bodyRowEscape(code3) {
    if (code3 === codes.backslash || code3 === codes.verticalBar) {
      effects.consume(code3);
      return bodyRowData;
    }
    return bodyRowData(code3);
  }
}
function resolveTable(events, context) {
  let index3 = -1;
  let inFirstCellAwaitingPipe = true;
  let rowKind = 0;
  let lastCell = [0, 0, 0, 0];
  let cell = [0, 0, 0, 0];
  let afterHeadAwaitingFirstBodyRow = false;
  let lastTableEnd = 0;
  let currentTable;
  let currentBody;
  let currentCell;
  const map3 = new EditMap();
  while (++index3 < events.length) {
    const event = events[index3];
    const token = event[1];
    if (event[0] === "enter") {
      if (token.type === "tableHead") {
        afterHeadAwaitingFirstBodyRow = false;
        if (lastTableEnd !== 0) {
          ok(currentTable, "there should be a table opening");
          flushTableEnd(map3, context, lastTableEnd, currentTable, currentBody);
          currentBody = void 0;
          lastTableEnd = 0;
        }
        currentTable = {
          type: "table",
          start: Object.assign({}, token.start),
          // Note: correct end is set later.
          end: Object.assign({}, token.end)
        };
        map3.add(index3, 0, [["enter", currentTable, context]]);
      } else if (token.type === "tableRow" || token.type === "tableDelimiterRow") {
        inFirstCellAwaitingPipe = true;
        currentCell = void 0;
        lastCell = [0, 0, 0, 0];
        cell = [0, index3 + 1, 0, 0];
        if (afterHeadAwaitingFirstBodyRow) {
          afterHeadAwaitingFirstBodyRow = false;
          currentBody = {
            type: "tableBody",
            start: Object.assign({}, token.start),
            // Note: correct end is set later.
            end: Object.assign({}, token.end)
          };
          map3.add(index3, 0, [["enter", currentBody, context]]);
        }
        rowKind = token.type === "tableDelimiterRow" ? 2 : currentBody ? 3 : 1;
      } else if (rowKind && (token.type === types.data || token.type === "tableDelimiterMarker" || token.type === "tableDelimiterFiller")) {
        inFirstCellAwaitingPipe = false;
        if (cell[2] === 0) {
          if (lastCell[1] !== 0) {
            cell[0] = cell[1];
            currentCell = flushCell(
              map3,
              context,
              lastCell,
              rowKind,
              void 0,
              currentCell
            );
            lastCell = [0, 0, 0, 0];
          }
          cell[2] = index3;
        }
      } else if (token.type === "tableCellDivider") {
        if (inFirstCellAwaitingPipe) {
          inFirstCellAwaitingPipe = false;
        } else {
          if (lastCell[1] !== 0) {
            cell[0] = cell[1];
            currentCell = flushCell(
              map3,
              context,
              lastCell,
              rowKind,
              void 0,
              currentCell
            );
          }
          lastCell = cell;
          cell = [lastCell[1], index3, 0, 0];
        }
      }
    } else if (token.type === "tableHead") {
      afterHeadAwaitingFirstBodyRow = true;
      lastTableEnd = index3;
    } else if (token.type === "tableRow" || token.type === "tableDelimiterRow") {
      lastTableEnd = index3;
      if (lastCell[1] !== 0) {
        cell[0] = cell[1];
        currentCell = flushCell(
          map3,
          context,
          lastCell,
          rowKind,
          index3,
          currentCell
        );
      } else if (cell[1] !== 0) {
        currentCell = flushCell(map3, context, cell, rowKind, index3, currentCell);
      }
      rowKind = 0;
    } else if (rowKind && (token.type === types.data || token.type === "tableDelimiterMarker" || token.type === "tableDelimiterFiller")) {
      cell[3] = index3;
    }
  }
  if (lastTableEnd !== 0) {
    ok(currentTable, "expected table opening");
    flushTableEnd(map3, context, lastTableEnd, currentTable, currentBody);
  }
  map3.consume(context.events);
  index3 = -1;
  while (++index3 < context.events.length) {
    const event = context.events[index3];
    if (event[0] === "enter" && event[1].type === "table") {
      event[1]._align = gfmTableAlign(context.events, index3);
    }
  }
  return events;
}
function flushCell(map3, context, range, rowKind, rowEnd, previousCell) {
  const groupName = rowKind === 1 ? "tableHeader" : rowKind === 2 ? "tableDelimiter" : "tableData";
  const valueName = "tableContent";
  if (range[0] !== 0) {
    ok(previousCell, "expected previous cell enter");
    previousCell.end = Object.assign({}, getPoint(context.events, range[0]));
    map3.add(range[0], 0, [["exit", previousCell, context]]);
  }
  const now = getPoint(context.events, range[1]);
  previousCell = {
    type: groupName,
    start: Object.assign({}, now),
    // Note: correct end is set later.
    end: Object.assign({}, now)
  };
  map3.add(range[1], 0, [["enter", previousCell, context]]);
  if (range[2] !== 0) {
    const relatedStart = getPoint(context.events, range[2]);
    const relatedEnd = getPoint(context.events, range[3]);
    const valueToken = {
      type: valueName,
      start: Object.assign({}, relatedStart),
      end: Object.assign({}, relatedEnd)
    };
    map3.add(range[2], 0, [["enter", valueToken, context]]);
    ok(range[3] !== 0);
    if (rowKind !== 2) {
      const start2 = context.events[range[2]];
      const end2 = context.events[range[3]];
      start2[1].end = Object.assign({}, end2[1].end);
      start2[1].type = types.chunkText;
      start2[1].contentType = constants.contentTypeText;
      if (range[3] > range[2] + 1) {
        const a = range[2] + 1;
        const b = range[3] - range[2] - 1;
        map3.add(a, b, []);
      }
    }
    map3.add(range[3] + 1, 0, [["exit", valueToken, context]]);
  }
  if (rowEnd !== void 0) {
    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd));
    map3.add(rowEnd, 0, [["exit", previousCell, context]]);
    previousCell = void 0;
  }
  return previousCell;
}
function flushTableEnd(map3, context, index3, table, tableBody) {
  const exits = [];
  const related = getPoint(context.events, index3);
  if (tableBody) {
    tableBody.end = Object.assign({}, related);
    exits.push(["exit", tableBody, context]);
  }
  table.end = Object.assign({}, related);
  exits.push(["exit", table, context]);
  map3.add(index3 + 1, 0, exits);
}
function getPoint(events, index3) {
  const event = events[index3];
  const side = event[0] === "enter" ? "start" : "end";
  return event[1][side];
}

// node_modules/micromark-extension-gfm-tagfilter/lib/index.js
var reFlow = /<(\/?)(iframe|noembed|noframes|plaintext|script|style|title|textarea|xmp)(?=[\t\n\f\r />])/gi;
var reText = new RegExp("^" + reFlow.source, "i");

// node_modules/micromark-extension-gfm-task-list-item/dev/lib/syntax.js
var tasklistCheck = { name: "tasklistCheck", tokenize: tokenizeTasklistCheck };
function gfmTaskListItem() {
  return {
    text: { [codes.leftSquareBracket]: tasklistCheck }
  };
}
function tokenizeTasklistCheck(effects, ok2, nok) {
  const self2 = this;
  return open;
  function open(code3) {
    ok(code3 === codes.leftSquareBracket, "expected `[`");
    if (
      // Exit if there’s stuff before.
      self2.previous !== codes.eof || // Exit if not in the first content that is the first child of a list
      // item.
      !self2._gfmTasklistFirstContentOfListItem
    ) {
      return nok(code3);
    }
    effects.enter("taskListCheck");
    effects.enter("taskListCheckMarker");
    effects.consume(code3);
    effects.exit("taskListCheckMarker");
    return inside;
  }
  function inside(code3) {
    if (markdownLineEndingOrSpace(code3)) {
      effects.enter("taskListCheckValueUnchecked");
      effects.consume(code3);
      effects.exit("taskListCheckValueUnchecked");
      return close;
    }
    if (code3 === codes.uppercaseX || code3 === codes.lowercaseX) {
      effects.enter("taskListCheckValueChecked");
      effects.consume(code3);
      effects.exit("taskListCheckValueChecked");
      return close;
    }
    return nok(code3);
  }
  function close(code3) {
    if (code3 === codes.rightSquareBracket) {
      effects.enter("taskListCheckMarker");
      effects.consume(code3);
      effects.exit("taskListCheckMarker");
      effects.exit("taskListCheck");
      return after;
    }
    return nok(code3);
  }
  function after(code3) {
    if (markdownLineEnding(code3)) {
      return ok2(code3);
    }
    if (markdownSpace(code3)) {
      return effects.check({ tokenize: spaceThenNonSpace }, ok2, nok)(code3);
    }
    return nok(code3);
  }
}
function spaceThenNonSpace(effects, ok2, nok) {
  return factorySpace(effects, after, types.whitespace);
  function after(code3) {
    return code3 === codes.eof ? nok(code3) : ok2(code3);
  }
}

// node_modules/micromark-extension-gfm/index.js
function gfm(options2) {
  return combineExtensions([
    gfmAutolinkLiteral(),
    gfmFootnote(),
    gfmStrikethrough(options2),
    gfmTable(),
    gfmTaskListItem()
  ]);
}

// node_modules/remark-gfm/lib/index.js
var emptyOptions2 = {};
function remarkGfm(options2) {
  const self2 = (
    /** @type {Processor<Root>} */
    this
  );
  const settings = options2 || emptyOptions2;
  const data = self2.data();
  const micromarkExtensions = data.micromarkExtensions || (data.micromarkExtensions = []);
  const fromMarkdownExtensions = data.fromMarkdownExtensions || (data.fromMarkdownExtensions = []);
  const toMarkdownExtensions = data.toMarkdownExtensions || (data.toMarkdownExtensions = []);
  micromarkExtensions.push(gfm(settings));
  fromMarkdownExtensions.push(gfmFromMarkdown());
  toMarkdownExtensions.push(gfmToMarkdown(settings));
}

// node_modules/stream-chat-react/dist/components/Message/renderText/componentRenderers/Anchor.js
var import_react91 = __toESM(require_react());
var Anchor = ({ children, href }) => {
  const isEmail = href == null ? void 0 : href.startsWith("mailto:");
  const isUrl = href == null ? void 0 : href.startsWith("http");
  if (!href || !isEmail && !isUrl)
    return import_react91.default.createElement(import_react91.default.Fragment, null, children);
  return import_react91.default.createElement("a", { className: clsx_default({ "str-chat__message-url-link": isUrl }), href, rel: "nofollow noreferrer noopener", target: "_blank" }, children);
};

// node_modules/stream-chat-react/dist/components/Message/renderText/componentRenderers/Emoji.js
var import_react92 = __toESM(require_react());
var Emoji = ({ children }) => import_react92.default.createElement("span", { className: "inline-text-emoji", "data-testid": "inline-text-emoji" }, children);

// node_modules/stream-chat-react/dist/components/Message/renderText/componentRenderers/Mention.js
var import_react93 = __toESM(require_react());
var Mention = ({ children, node: { mentionedUser } }) => import_react93.default.createElement("span", { className: "str-chat__message-mention", "data-user-id": mentionedUser.id }, children);

// node_modules/stream-chat-react/dist/components/UtilityComponents/NullComponent.js
var NullComponent = () => null;

// node_modules/stream-chat-react/dist/components/UtilityComponents/ErrorBoundary.js
var import_react94 = __toESM(require_react());
var ErrorBoundary = class extends import_react94.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }
  static getDerivedStateFromError() {
    return { hasError: true };
  }
  componentDidCatch(error2, information) {
    console.error(error2, information);
  }
  render() {
    if (this.state.hasError) {
      return this.props.fallback;
    }
    return this.props.children;
  }
};

// node_modules/stream-chat-react/dist/components/Message/renderText/renderText.js
var defaultAllowedTagNames = [
  "html",
  "text",
  "br",
  "p",
  "em",
  "strong",
  "a",
  "ol",
  "ul",
  "li",
  "code",
  "pre",
  "blockquote",
  "del",
  "table",
  "thead",
  "tbody",
  "th",
  "tr",
  "td",
  "tfoot",
  // custom types (tagNames)
  "emoji",
  "mention"
];
function formatUrlForDisplay(url) {
  try {
    return decodeURIComponent(url).replace(detectHttp, "");
  } catch (e) {
    return url;
  }
}
function encodeDecode(url) {
  try {
    return encodeURI(decodeURIComponent(url));
  } catch (error2) {
    return url;
  }
}
var urlTransform = (uri) => uri.startsWith("app://") ? uri : defaultUrlTransform(uri);
var getPluginsForward = (plugins) => plugins;
var markDownRenderers = {
  a: Anchor,
  emoji: Emoji,
  mention: Mention
};
var renderText = (text3, mentionedUsers, { allowedTagNames = defaultAllowedTagNames, customMarkDownRenderers, getRehypePlugins = getPluginsForward, getRemarkPlugins = getPluginsForward } = {}) => {
  if (!text3)
    return null;
  if (text3.trim().length === 1)
    return import_react95.default.createElement(import_react95.default.Fragment, null, text3);
  let newText = text3;
  const markdownLinks = matchMarkdownLinks(newText);
  const codeBlocks = messageCodeBlocks(newText);
  (0, import_lodash3.default)([...find(newText, "email"), ...find(newText, "url")], "value").forEach(({ href, type, value }) => {
    const linkIsInBlock = codeBlocks.some((block) => block == null ? void 0 : block.includes(value));
    const noParsingNeeded = markdownLinks && markdownLinks.filter((text4) => {
      const strippedHref = href == null ? void 0 : href.replace(detectHttp, "");
      const strippedText = text4 == null ? void 0 : text4.replace(detectHttp, "");
      if (!strippedHref || !strippedText)
        return false;
      return strippedHref.includes(strippedText) || strippedText.includes(strippedHref);
    });
    if (noParsingNeeded.length > 0 || linkIsInBlock)
      return;
    try {
      if (type === "email" && mentionedUsers) {
        const emailMatchesWithName = mentionedUsers.some((u2) => u2.name === value);
        if (emailMatchesWithName) {
          newText = newText.replace(new RegExp(escapeRegExp(value), "g"), (match, position) => {
            const isMention = newText.charAt(position - 1) === "@";
            return isMention ? match : `[${match}](${encodeDecode(href)})`;
          });
          return;
        }
      }
      const displayLink = type === "email" ? value : formatUrlForDisplay(href);
      newText = newText.replace(new RegExp(escapeRegExp(value), "g"), `[${displayLink}](${encodeDecode(href)})`);
    } catch (e) {
    }
  });
  const remarkPlugins = [
    htmlToTextPlugin,
    keepLineBreaksPlugin,
    [remarkGfm, { singleTilde: false }]
  ];
  const rehypePlugins = [emojiMarkdownPlugin];
  if (mentionedUsers == null ? void 0 : mentionedUsers.length) {
    rehypePlugins.push(mentionsMarkdownPlugin(mentionedUsers));
  }
  return import_react95.default.createElement(
    ErrorBoundary,
    { fallback: import_react95.default.createElement(import_react95.default.Fragment, null, text3) },
    import_react95.default.createElement(Markdown, { allowedElements: allowedTagNames, components: {
      ...markDownRenderers,
      ...customMarkDownRenderers
    }, rehypePlugins: getRehypePlugins(rehypePlugins), remarkPlugins: getRemarkPlugins(remarkPlugins), skipHtml: true, unwrapDisallowed: true, urlTransform }, newText)
  );
};

// node_modules/stream-chat-react/dist/components/AutoCompleteTextarea/List.js
var List = ({ className, component, currentTrigger, dropdownScroll, getSelectedItem, getTextToReplace, itemClassName, itemStyle, onSelect, selectionEnd, style, SuggestionItem: PropSuggestionItem, value: propValue, values }) => {
  const { AutocompleteSuggestionItem } = useComponentContext("SuggestionList");
  const SuggestionItem = PropSuggestionItem || AutocompleteSuggestionItem || Item;
  const [selectedItemIndex, setSelectedItemIndex] = (0, import_react96.useState)(void 0);
  const itemsRef = [];
  const isSelected = (item) => selectedItemIndex === values.findIndex((value) => getId(value) === getId(item));
  const getId = (item) => {
    const textToReplace = getTextToReplace(item);
    if (textToReplace.key) {
      return textToReplace.key;
    }
    if (typeof item === "string" || !item.key) {
      return textToReplace.text;
    }
    return item.key;
  };
  const findItemIndex = (0, import_react96.useCallback)((item) => values.findIndex((value) => value.id ? value.id === item.id : value.name === item.name), [values]);
  const modifyText = (value) => {
    if (!value)
      return;
    onSelect(getTextToReplace(value));
    if (getSelectedItem)
      getSelectedItem(value);
  };
  const handleClick = (0, import_react96.useCallback)(
    (e, item) => {
      e == null ? void 0 : e.preventDefault();
      const index3 = findItemIndex(item);
      modifyText(values[index3]);
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [modifyText, findItemIndex]
  );
  const selectItem = (0, import_react96.useCallback)((item) => {
    const index3 = findItemIndex(item);
    setSelectedItemIndex(index3);
  }, [findItemIndex]);
  const handleKeyDown = (0, import_react96.useCallback)(
    (event) => {
      if (event.key === "ArrowUp") {
        setSelectedItemIndex((prevSelected) => {
          if (prevSelected === void 0)
            return 0;
          const newIndex = prevSelected === 0 ? values.length - 1 : prevSelected - 1;
          dropdownScroll(itemsRef[newIndex]);
          return newIndex;
        });
      }
      if (event.key === "ArrowDown") {
        setSelectedItemIndex((prevSelected) => {
          if (prevSelected === void 0)
            return 0;
          const newIndex = prevSelected === values.length - 1 ? 0 : prevSelected + 1;
          dropdownScroll(itemsRef[newIndex]);
          return newIndex;
        });
      }
      if ((event.key === "Enter" || event.key === "Tab") && selectedItemIndex !== void 0) {
        handleClick(event, values[selectedItemIndex]);
      }
      return null;
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [selectedItemIndex, values]
  );
  (0, import_react96.useEffect)(() => {
    document.addEventListener("keydown", handleKeyDown, false);
    return () => document.removeEventListener("keydown", handleKeyDown);
  }, [handleKeyDown]);
  (0, import_react96.useEffect)(() => {
    if (values == null ? void 0 : values.length)
      selectItem(values[0]);
  }, [values]);
  const restructureItem = (0, import_react96.useCallback)((item) => {
    const matched = item.name || item.id;
    const textBeforeCursor = propValue.slice(0, selectionEnd);
    const triggerIndex = textBeforeCursor.lastIndexOf(currentTrigger);
    const editedPropValue = escapeRegExp(textBeforeCursor.slice(triggerIndex + 1));
    const parts = matched.split(new RegExp(`(${editedPropValue})`, "gi"));
    const itemNameParts = { match: editedPropValue, parts };
    return { ...item, itemNameParts };
  }, [propValue, selectionEnd, currentTrigger]);
  const restructuredValues = (0, import_react96.useMemo)(() => values.map(restructureItem), [values, restructureItem]);
  return import_react96.default.createElement("ul", { className: clsx_default("str-chat__suggestion-list", className), style }, restructuredValues.map((item, i) => import_react96.default.createElement(SuggestionItem, { className: itemClassName, component, item, key: getId(item), onClickHandler: handleClick, onSelectHandler: selectItem, ref: (ref) => {
    itemsRef[i] = ref;
  }, selected: isSelected(item), style: itemStyle, value: propValue })));
};

// node_modules/stream-chat-react/dist/components/AutoCompleteTextarea/Textarea.js
var import_react106 = __toESM(require_react());
var import_prop_types2 = __toESM(require_prop_types());

// node_modules/react-textarea-autosize/dist/react-textarea-autosize.browser.development.esm.js
var React52 = __toESM(require_react());

// node_modules/use-latest/dist/use-latest.esm.js
var import_react98 = __toESM(require_react());

// node_modules/use-isomorphic-layout-effect/dist/use-isomorphic-layout-effect.browser.esm.js
var import_react97 = __toESM(require_react());
var index = import_react97.useLayoutEffect;

// node_modules/use-latest/dist/use-latest.esm.js
var useLatest = function useLatest2(value) {
  var ref = import_react98.default.useRef(value);
  index(function() {
    ref.current = value;
  });
  return ref;
};

// node_modules/use-composed-ref/dist/use-composed-ref.esm.js
var import_react99 = __toESM(require_react());
var updateRef = function updateRef2(ref, value) {
  if (typeof ref === "function") {
    ref(value);
    return;
  }
  ref.current = value;
};
var useComposedRef = function useComposedRef2(libRef, userRef) {
  var prevUserRef = import_react99.default.useRef();
  return import_react99.default.useCallback(function(instance2) {
    libRef.current = instance2;
    if (prevUserRef.current) {
      updateRef(prevUserRef.current, null);
    }
    prevUserRef.current = userRef;
    if (!userRef) {
      return;
    }
    updateRef(userRef, instance2);
  }, [userRef]);
};

// node_modules/react-textarea-autosize/dist/react-textarea-autosize.browser.development.esm.js
var HIDDEN_TEXTAREA_STYLE = {
  "min-height": "0",
  "max-height": "none",
  height: "0",
  visibility: "hidden",
  overflow: "hidden",
  position: "absolute",
  "z-index": "-1000",
  top: "0",
  right: "0",
  display: "block"
};
var forceHiddenStyles = function forceHiddenStyles2(node) {
  Object.keys(HIDDEN_TEXTAREA_STYLE).forEach(function(key) {
    node.style.setProperty(key, HIDDEN_TEXTAREA_STYLE[key], "important");
  });
};
var forceHiddenStyles$1 = forceHiddenStyles;
var hiddenTextarea = null;
var getHeight = function getHeight2(node, sizingData) {
  var height = node.scrollHeight;
  if (sizingData.sizingStyle.boxSizing === "border-box") {
    return height + sizingData.borderSize;
  }
  return height - sizingData.paddingSize;
};
function calculateNodeHeight(sizingData, value, minRows, maxRows) {
  if (minRows === void 0) {
    minRows = 1;
  }
  if (maxRows === void 0) {
    maxRows = Infinity;
  }
  if (!hiddenTextarea) {
    hiddenTextarea = document.createElement("textarea");
    hiddenTextarea.setAttribute("tabindex", "-1");
    hiddenTextarea.setAttribute("aria-hidden", "true");
    forceHiddenStyles$1(hiddenTextarea);
  }
  if (hiddenTextarea.parentNode === null) {
    document.body.appendChild(hiddenTextarea);
  }
  var paddingSize = sizingData.paddingSize, borderSize = sizingData.borderSize, sizingStyle = sizingData.sizingStyle;
  var boxSizing = sizingStyle.boxSizing;
  Object.keys(sizingStyle).forEach(function(_key) {
    var key = _key;
    hiddenTextarea.style[key] = sizingStyle[key];
  });
  forceHiddenStyles$1(hiddenTextarea);
  hiddenTextarea.value = value;
  var height = getHeight(hiddenTextarea, sizingData);
  hiddenTextarea.value = value;
  height = getHeight(hiddenTextarea, sizingData);
  hiddenTextarea.value = "x";
  var rowHeight = hiddenTextarea.scrollHeight - paddingSize;
  var minHeight = rowHeight * minRows;
  if (boxSizing === "border-box") {
    minHeight = minHeight + paddingSize + borderSize;
  }
  height = Math.max(minHeight, height);
  var maxHeight = rowHeight * maxRows;
  if (boxSizing === "border-box") {
    maxHeight = maxHeight + paddingSize + borderSize;
  }
  height = Math.min(maxHeight, height);
  return [height, rowHeight];
}
var noop4 = function noop5() {
};
var pick = function pick2(props, obj) {
  return props.reduce(function(acc, prop) {
    acc[prop] = obj[prop];
    return acc;
  }, {});
};
var SIZING_STYLE = [
  "borderBottomWidth",
  "borderLeftWidth",
  "borderRightWidth",
  "borderTopWidth",
  "boxSizing",
  "fontFamily",
  "fontSize",
  "fontStyle",
  "fontWeight",
  "letterSpacing",
  "lineHeight",
  "paddingBottom",
  "paddingLeft",
  "paddingRight",
  "paddingTop",
  // non-standard
  "tabSize",
  "textIndent",
  // non-standard
  "textRendering",
  "textTransform",
  "width",
  "wordBreak",
  "wordSpacing",
  "scrollbarGutter"
];
var isIE = !!document.documentElement.currentStyle;
var getSizingData = function getSizingData2(node) {
  var style = window.getComputedStyle(node);
  if (style === null) {
    return null;
  }
  var sizingStyle = pick(SIZING_STYLE, style);
  var boxSizing = sizingStyle.boxSizing;
  if (boxSizing === "") {
    return null;
  }
  if (isIE && boxSizing === "border-box") {
    sizingStyle.width = parseFloat(sizingStyle.width) + parseFloat(sizingStyle.borderRightWidth) + parseFloat(sizingStyle.borderLeftWidth) + parseFloat(sizingStyle.paddingRight) + parseFloat(sizingStyle.paddingLeft) + "px";
  }
  var paddingSize = parseFloat(sizingStyle.paddingBottom) + parseFloat(sizingStyle.paddingTop);
  var borderSize = parseFloat(sizingStyle.borderBottomWidth) + parseFloat(sizingStyle.borderTopWidth);
  return {
    sizingStyle,
    paddingSize,
    borderSize
  };
};
var getSizingData$1 = getSizingData;
function useListener(target, type, listener) {
  var latestListener = useLatest(listener);
  React52.useLayoutEffect(function() {
    var handler = function handler2(ev) {
      return latestListener.current(ev);
    };
    if (!target) {
      return;
    }
    target.addEventListener(type, handler);
    return function() {
      return target.removeEventListener(type, handler);
    };
  }, []);
}
var useFormResetListener = function useFormResetListener2(libRef, listener) {
  useListener(document.body, "reset", function(ev) {
    if (libRef.current.form === ev.target) {
      listener(ev);
    }
  });
};
var useWindowResizeListener = function useWindowResizeListener2(listener) {
  useListener(window, "resize", listener);
};
var useFontsLoadedListener = function useFontsLoadedListener2(listener) {
  useListener(document.fonts, "loadingdone", listener);
};
var _excluded5 = ["cacheMeasurements", "maxRows", "minRows", "onChange", "onHeightChange"];
var TextareaAutosize = function TextareaAutosize2(_ref, userRef) {
  var cacheMeasurements = _ref.cacheMeasurements, maxRows = _ref.maxRows, minRows = _ref.minRows, _ref$onChange = _ref.onChange, onChange = _ref$onChange === void 0 ? noop4 : _ref$onChange, _ref$onHeightChange = _ref.onHeightChange, onHeightChange = _ref$onHeightChange === void 0 ? noop4 : _ref$onHeightChange, props = _objectWithoutPropertiesLoose(_ref, _excluded5);
  if (props.style) {
    if ("maxHeight" in props.style) {
      throw new Error("Using `style.maxHeight` for <TextareaAutosize/> is not supported. Please use `maxRows`.");
    }
    if ("minHeight" in props.style) {
      throw new Error("Using `style.minHeight` for <TextareaAutosize/> is not supported. Please use `minRows`.");
    }
  }
  var isControlled = props.value !== void 0;
  var libRef = React52.useRef(null);
  var ref = useComposedRef(libRef, userRef);
  var heightRef = React52.useRef(0);
  var measurementsCacheRef = React52.useRef();
  var resizeTextarea = function resizeTextarea2() {
    var node = libRef.current;
    var nodeSizingData = cacheMeasurements && measurementsCacheRef.current ? measurementsCacheRef.current : getSizingData$1(node);
    if (!nodeSizingData) {
      return;
    }
    measurementsCacheRef.current = nodeSizingData;
    var _calculateNodeHeight = calculateNodeHeight(nodeSizingData, node.value || node.placeholder || "x", minRows, maxRows), height = _calculateNodeHeight[0], rowHeight = _calculateNodeHeight[1];
    if (heightRef.current !== height) {
      heightRef.current = height;
      node.style.setProperty("height", height + "px", "important");
      onHeightChange(height, {
        rowHeight
      });
    }
  };
  var handleChange = function handleChange2(event) {
    if (!isControlled) {
      resizeTextarea();
    }
    onChange(event);
  };
  {
    React52.useLayoutEffect(resizeTextarea);
    useFormResetListener(libRef, function() {
      if (!isControlled) {
        var currentValue = libRef.current.value;
        requestAnimationFrame(function() {
          var node = libRef.current;
          if (node && currentValue !== node.value) {
            resizeTextarea();
          }
        });
      }
    });
    useWindowResizeListener(resizeTextarea);
    useFontsLoadedListener(resizeTextarea);
    return React52.createElement("textarea", _extends({}, props, {
      onChange: handleChange,
      ref
    }));
  }
};
var index2 = React52.forwardRef(TextareaAutosize);

// node_modules/stream-chat-react/dist/components/AutoCompleteTextarea/Textarea.js
var import_textarea_caret = __toESM(require_textarea_caret());

// node_modules/stream-chat-react/dist/components/AutoCompleteTextarea/utils.js
var DEFAULT_CARET_POSITION = "next";
function defaultScrollToItem(container, item) {
  if (!item)
    return;
  const itemHeight = parseInt(getComputedStyle(item).getPropertyValue("height"), 10);
  const containerHight = parseInt(getComputedStyle(container).getPropertyValue("height"), 10) - itemHeight;
  const actualScrollTop = container.scrollTop;
  const itemOffsetTop = item.offsetTop;
  if (itemOffsetTop < actualScrollTop + containerHight && actualScrollTop < itemOffsetTop) {
    return;
  }
  container.scrollTop = itemOffsetTop;
}
var errorMessage = (message) => console.error(`RTA: dataProvider fails: ${message}
    
Check the documentation or create issue if you think it's bug. https://github.com/webscopeio/react-textarea-autocomplete/issues`);
var triggerPropsCheck = ({ trigger }) => {
  if (!trigger)
    return Error("Invalid prop trigger. Prop missing.");
  const triggers = Object.entries(trigger);
  for (let i = 0; i < triggers.length; i += 1) {
    const [triggerChar, settings] = triggers[i];
    if (typeof triggerChar !== "string" || triggerChar.length !== 1) {
      return Error("Invalid prop trigger. Keys of the object has to be string / one character.");
    }
    const triggerSetting = settings;
    const { callback, dataProvider, output: output2 } = triggerSetting;
    if (!dataProvider || typeof dataProvider !== "function") {
      return Error("Invalid prop trigger: dataProvider should be defined.");
    }
    if (output2 && typeof output2 !== "function") {
      return Error("Invalid prop trigger: output should be a function.");
    }
    if (callback && typeof callback !== "function") {
      return Error("Invalid prop trigger: callback should be a function.");
    }
  }
  return null;
};

// node_modules/stream-chat-react/dist/components/CommandItem/CommandItem.js
var import_react100 = __toESM(require_react());
var UnMemoizedCommandItem = (props) => {
  const { entity } = props;
  return import_react100.default.createElement(
    "div",
    { className: "str-chat__slash-command" },
    import_react100.default.createElement(
      "span",
      { className: "str-chat__slash-command-header" },
      import_react100.default.createElement("strong", null, entity.name),
      " ",
      entity.args
    ),
    import_react100.default.createElement("br", null),
    import_react100.default.createElement("span", { className: "str-chat__slash-command-description" }, entity.description)
  );
};
var CommandItem = import_react100.default.memo(UnMemoizedCommandItem);

// node_modules/stream-chat-react/dist/components/UserItem/UserItem.js
var import_react105 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Avatar/Avatar.js
var import_react102 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Threads/icons.js
var import_react101 = __toESM(require_react());
var Icon = {
  MessageBubble: (props) => import_react101.default.createElement(
    "svg",
    { className: "str-chat__icon str-chat__icon--message-bubble", fill: "none", height: "14", viewBox: "0 0 14 14", width: "14", xmlns: "http://www.w3.org/2000/svg", ...props },
    import_react101.default.createElement("path", { d: "M1.66659 1.66665H12.3333V9.66665H2.44659L1.66659 10.4466V1.66665ZM1.66659 0.333313C0.933252 0.333313 0.339919 0.933313 0.339919 1.66665L0.333252 13.6666L2.99992 11H12.3333C13.0666 11 13.6666 10.4 13.6666 9.66665V1.66665C13.6666 0.933313 13.0666 0.333313 12.3333 0.333313H1.66659ZM2.99992 6.99998H10.9999V8.33331H2.99992V6.99998ZM2.99992 4.99998H10.9999V6.33331H2.99992V4.99998ZM2.99992 2.99998H10.9999V4.33331H2.99992V2.99998Z", fill: "currentColor" })
  ),
  MessageBubbleEmpty: (props) => import_react101.default.createElement(
    "svg",
    { className: "str-chat__icon str-chat__icon--message-bubble-empty", fill: "none", height: "20", viewBox: "0 0 20 20", width: "20", xmlns: "http://www.w3.org/2000/svg", ...props },
    import_react101.default.createElement("path", { d: "M18 0H2C0.9 0 0 0.9 0 2V20L4 16H18C19.1 16 20 15.1 20 14V2C20 0.9 19.1 0 18 0ZM18 14H4L2 16V2H18V14Z", fill: "currentColor" })
  ),
  Reload: (props) => import_react101.default.createElement(
    "svg",
    { className: "str-chat__icon str-chat__icon--reload", fill: "none", height: "22", viewBox: "0 0 16 22", width: "16", xmlns: "http://www.w3.org/2000/svg", ...props },
    import_react101.default.createElement("path", { d: "M8 3V0L4 4L8 8V5C11.31 5 14 7.69 14 11C14 12.01 13.75 12.97 13.3 13.8L14.76 15.26C15.54 14.03 16 12.57 16 11C16 6.58 12.42 3 8 3ZM8 17C4.69 17 2 14.31 2 11C2 9.99 2.25 9.03 2.7 8.2L1.24 6.74C0.46 7.97 0 9.43 0 11C0 15.42 3.58 19 8 19V22L12 18L8 14V17Z", fill: "currentColor" })
  ),
  User: (props) => import_react101.default.createElement(
    "svg",
    { className: "str-chat__icon str-chat__icon--user", fill: "none", height: "16", viewBox: "0 0 16 16", width: "16", xmlns: "http://www.w3.org/2000/svg", ...props },
    import_react101.default.createElement("path", { d: "M8 2C9.1 2 10 2.9 10 4C10 5.1 9.1 6 8 6C6.9 6 6 5.1 6 4C6 2.9 6.9 2 8 2ZM8 12C10.7 12 13.8 13.29 14 14H2C2.23 13.28 5.31 12 8 12ZM8 0C5.79 0 4 1.79 4 4C4 6.21 5.79 8 8 8C10.21 8 12 6.21 12 4C12 1.79 10.21 0 8 0ZM8 10C5.33 10 0 11.34 0 14V16H16V14C16 11.34 10.67 10 8 10Z", fill: "currentColor" })
  )
};

// node_modules/stream-chat-react/dist/utils/getChannel.js
var WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL = {};
var getChannel = async ({ channel, client, id, members, options: options2, type }) => {
  if (!channel && !type) {
    throw new Error("Channel or channel type have to be provided to query a channel.");
  }
  const theChannel = channel || client.channel(type, id, { members });
  const originalCid = (theChannel == null ? void 0 : theChannel.id) ? theChannel.cid : members && members.length ? generateChannelTempCid(theChannel.type, members) : void 0;
  if (!originalCid) {
    throw new Error("Channel ID or channel members array have to be provided to query a channel.");
  }
  const queryPromise = WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid];
  if (queryPromise) {
    await queryPromise;
  } else {
    try {
      WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid] = theChannel.watch(options2);
      await WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid];
    } finally {
      delete WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid];
    }
  }
  return theChannel;
};
var generateChannelTempCid = (channelType, members) => {
  if (!members)
    return;
  const membersStr = [...members].sort().join(",");
  return `${channelType}:!members-${membersStr}`;
};

// node_modules/stream-chat-react/dist/utils/getWholeChar.js
var getWholeChar = (str, i) => {
  const code3 = str.charCodeAt(i);
  if (Number.isNaN(code3))
    return "";
  if (code3 < 55296 || code3 > 57343)
    return str.charAt(i);
  if (55296 <= code3 && code3 <= 56319) {
    if (str.length <= i + 1) {
      throw "High surrogate without following low surrogate";
    }
    const next = str.charCodeAt(i + 1);
    if (56320 > next || next > 57343) {
      throw "High surrogate without following low surrogate";
    }
    return str.charAt(i) + str.charAt(i + 1);
  }
  if (i === 0) {
    throw "Low surrogate without preceding high surrogate";
  }
  const prev = str.charCodeAt(i - 1);
  if (55296 > prev || prev > 56319) {
    throw "Low surrogate without preceding high surrogate";
  }
  return "";
};

// node_modules/stream-chat-react/dist/components/Avatar/Avatar.js
var Avatar = (props) => {
  const { className, image: image2, name, onClick = () => void 0, onMouseOver = () => void 0 } = props;
  const [error2, setError] = (0, import_react102.useState)(false);
  (0, import_react102.useEffect)(() => {
    setError(false);
  }, [image2]);
  const nameStr = (name == null ? void 0 : name.toString()) || "";
  const initials = getWholeChar(nameStr, 0);
  const showImage = image2 && !error2;
  return import_react102.default.createElement("div", { className: clsx_default(`str-chat__avatar str-chat__message-sender-avatar`, className, {
    ["str-chat__avatar--multiple-letters"]: initials.length > 1,
    ["str-chat__avatar--no-letters"]: !initials.length,
    ["str-chat__avatar--one-letter"]: initials.length === 1
  }), "data-testid": "avatar", onClick, onMouseOver, role: "button", title: name }, showImage ? import_react102.default.createElement("img", { alt: initials, className: "str-chat__avatar-image", "data-testid": "avatar-img", onError: () => setError(true), src: image2 }) : import_react102.default.createElement(
    import_react102.default.Fragment,
    null,
    !!initials.length && import_react102.default.createElement("div", { className: clsx_default("str-chat__avatar-fallback"), "data-testid": "avatar-fallback" }, initials),
    !initials.length && import_react102.default.createElement(Icon.User, null)
  ));
};

// node_modules/stream-chat-react/dist/components/Avatar/ChannelAvatar.js
var import_react103 = __toESM(require_react());
var ChannelAvatar = ({ groupChannelDisplayInfo, image: image2, name, user, ...sharedProps }) => {
  if (groupChannelDisplayInfo) {
    return import_react103.default.createElement(GroupAvatar, { groupChannelDisplayInfo, ...sharedProps });
  }
  return import_react103.default.createElement(Avatar, { image: image2, name, user, ...sharedProps });
};

// node_modules/stream-chat-react/dist/components/Avatar/GroupAvatar.js
var import_react104 = __toESM(require_react());
var GroupAvatar = ({ className, groupChannelDisplayInfo, onClick, onMouseOver }) => import_react104.default.createElement("div", { className: clsx_default(`str-chat__avatar-group`, { "str-chat__avatar-group--three-part": groupChannelDisplayInfo.length === 3 }, className), "data-testid": "group-avatar", onClick, onMouseOver, role: "button" }, groupChannelDisplayInfo.slice(0, 4).map(({ image: image2, name }, i) => import_react104.default.createElement(Avatar, { className: clsx_default({
  "str-chat__avatar--single": groupChannelDisplayInfo.length === 3 && i === 0
}), image: image2, key: `${name}-${image2}-${i}`, name })));

// node_modules/stream-chat-react/dist/components/UserItem/UserItem.js
var UnMemoizedUserItem = ({ Avatar: Avatar2 = Avatar, entity }) => {
  const hasEntity = !!Object.keys(entity).length;
  const itemParts = entity == null ? void 0 : entity.itemNameParts;
  const renderName = () => {
    if (!hasEntity)
      return null;
    return itemParts.parts.map((part, i) => {
      const matches = part.toLowerCase() === itemParts.match.toLowerCase();
      return import_react105.default.createElement("span", { className: clsx_default({
        "str-chat__emoji-item--highlight": matches,
        "str-chat__emoji-item--part": !matches
      }), key: `part-${i}` }, part);
    });
  };
  return import_react105.default.createElement(
    "div",
    { className: "str-chat__user-item" },
    import_react105.default.createElement(Avatar2, { className: "str-chat__avatar--autocomplete-item", image: entity.image, name: entity.name || entity.id }),
    import_react105.default.createElement("span", { className: "str-chat__user-item--name", "data-testid": "user-item-name" }, renderName()),
    import_react105.default.createElement("div", { className: "str-chat__user-item-at" }, "@")
  );
};
var UserItem = import_react105.default.memo(UnMemoizedUserItem);

// node_modules/stream-chat-react/dist/utils/browsers.js
var isSafari = () => {
  if (typeof navigator === "undefined")
    return false;
  return /^((?!chrome|android).)*safari/i.test(navigator.userAgent || "");
};

// node_modules/stream-chat-react/dist/components/AutoCompleteTextarea/Textarea.js
var ReactTextareaAutocomplete = class extends import_react106.default.Component {
  constructor(props) {
    super(props);
    this.getSelectionPosition = () => {
      if (!this.textareaRef)
        return null;
      return {
        selectionEnd: this.textareaRef.selectionEnd,
        selectionStart: this.textareaRef.selectionStart
      };
    };
    this.getSelectedText = () => {
      if (!this.textareaRef)
        return null;
      const { selectionEnd, selectionStart } = this.textareaRef;
      if (selectionStart === selectionEnd)
        return null;
      return this.state.value.substr(selectionStart, selectionEnd - selectionStart);
    };
    this.setCaretPosition = (position = 0) => {
      if (!this.textareaRef)
        return;
      this.textareaRef.focus();
      this.textareaRef.setSelectionRange(position, position);
    };
    this.getCaretPosition = () => {
      if (!this.textareaRef)
        return 0;
      return this.textareaRef.selectionEnd;
    };
    this._defaultShouldSubmit = (event) => event.key === "Enter" && !event.shiftKey && !event.nativeEvent.isComposing;
    this._handleKeyDown = (event) => {
      const { shouldSubmit = this._defaultShouldSubmit } = this.props;
      if ((event.key === "ArrowUp" || event.key === "ArrowDown") && this.dropdownRef)
        event.preventDefault();
      if (shouldSubmit == null ? void 0 : shouldSubmit(event))
        return this._onEnter(event);
      if (event.key === " ")
        return this._onSpace(event);
      if (event.key === "Escape")
        return this._closeAutocomplete();
    };
    this._onEnter = async (event) => {
      if (!this.textareaRef)
        return;
      const trigger2 = this.state.currentTrigger;
      if (!trigger2 || !this.state.data) {
        event.persist();
        await this._replaceWord();
        if (this.textareaRef) {
          this.textareaRef.selectionEnd = 0;
        }
        this.props.handleSubmit(event);
        this._closeAutocomplete();
      }
    };
    this._onSpace = () => {
      if (!this.props.replaceWord || !this.textareaRef)
        return;
      const hasFocus = this.textareaRef.matches(":focus");
      if (!hasFocus)
        return;
      this._replaceWord();
    };
    this._replaceWord = async () => {
      const { value: value2 } = this.state;
      const lastWordRegex = /([^\s]+)(\s*)$/;
      const match = lastWordRegex.exec(value2.slice(0, this.getCaretPosition()));
      const lastWord = match && match[1];
      if (!lastWord)
        return;
      const spaces = match[2];
      const newWord = await this.props.replaceWord(lastWord);
      if (newWord == null)
        return;
      const textBeforeWord = value2.slice(0, this.getCaretPosition() - match[0].length);
      const textAfterCaret = value2.slice(this.getCaretPosition(), -1);
      const newText = textBeforeWord + newWord + spaces + textAfterCaret;
      this.setState({
        value: newText
      }, () => {
        const e = new CustomEvent("change", { bubbles: true });
        this.textareaRef.dispatchEvent(e);
        if (this.props.onChange)
          this.props.onChange(e);
      });
    };
    this._onSelect = (newToken) => {
      const { closeCommandsList, closeMentionsList, onChange, showCommandsList, showMentionsList } = this.props;
      const { currentTrigger: stateTrigger, selectionEnd, value: textareaValue } = this.state;
      const currentTrigger = showCommandsList ? "/" : showMentionsList ? "@" : stateTrigger;
      if (!currentTrigger)
        return;
      const computeCaretPosition = (position, token, startToken) => {
        switch (position) {
          case "start":
            return startToken;
          case "next":
          case "end":
            return startToken + token.length;
          default:
            if (!Number.isInteger(position)) {
              throw new Error('RTA: caretPosition should be "start", "next", "end" or number.');
            }
            return position;
        }
      };
      const textToModify = showCommandsList ? "/" : showMentionsList ? "@" : textareaValue.slice(0, selectionEnd);
      const startOfTokenPosition = textToModify.lastIndexOf(currentTrigger);
      const newTokenString = newToken.caretPosition === "next" ? `${newToken.text} ` : newToken.text;
      const newCaretPosition = computeCaretPosition(newToken.caretPosition, newTokenString, startOfTokenPosition);
      const modifiedText = textToModify.substring(0, startOfTokenPosition) + newTokenString;
      const valueToReplace = textareaValue.replace(textToModify, modifiedText);
      this.setState({
        dataLoading: false,
        value: valueToReplace
      }, () => {
        const e = new CustomEvent("change", { bubbles: true });
        this.textareaRef.dispatchEvent(e);
        if (onChange)
          onChange(e);
        this.setCaretPosition(newCaretPosition);
      });
      this._closeAutocomplete();
      if (showCommandsList)
        closeCommandsList();
      if (showMentionsList)
        closeMentionsList();
    };
    this._getItemOnSelect = (paramTrigger) => {
      const { currentTrigger: stateTrigger } = this.state;
      const triggerSettings = this._getCurrentTriggerSettings(paramTrigger);
      const currentTrigger = paramTrigger || stateTrigger;
      if (!currentTrigger || !triggerSettings)
        return null;
      const { callback } = triggerSettings;
      if (!callback)
        return null;
      return (item) => {
        if (typeof callback !== "function") {
          throw new Error('Output functor is not defined! You have to define "output" function. https://github.com/webscopeio/react-textarea-autocomplete#trigger-type');
        }
        if (callback) {
          return callback(item, currentTrigger);
        }
        return null;
      };
    };
    this._getTextToReplace = (paramTrigger) => {
      const { actualToken, currentTrigger: stateTrigger } = this.state;
      const triggerSettings = this._getCurrentTriggerSettings(paramTrigger);
      const currentTrigger = paramTrigger || stateTrigger;
      if (!currentTrigger || !triggerSettings)
        return null;
      const { output: output2 } = triggerSettings;
      return (item) => {
        if (typeof item === "object" && (!output2 || typeof output2 !== "function")) {
          throw new Error('Output functor is not defined! If you are using items as object you have to define "output" function. https://github.com/webscopeio/react-textarea-autocomplete#trigger-type');
        }
        if (output2) {
          const textToReplace = output2(item, currentTrigger);
          if (!textToReplace || typeof textToReplace === "number") {
            throw new Error(`Output functor should return string or object in shape {text: string, caretPosition: string | number}.
Got "${String(textToReplace)}". Check the implementation for trigger "${currentTrigger}" and its token "${actualToken}"

See https://github.com/webscopeio/react-textarea-autocomplete#trigger-type for more informations.
`);
          }
          if (typeof textToReplace === "string") {
            return {
              caretPosition: DEFAULT_CARET_POSITION,
              text: textToReplace
            };
          }
          if (!textToReplace.text && currentTrigger !== ":") {
            throw new Error(`Output "text" is not defined! Object should has shape {text: string, caretPosition: string | number}. Check the implementation for trigger "${currentTrigger}" and its token "${actualToken}"
`);
          }
          if (!textToReplace.caretPosition) {
            throw new Error(`Output "caretPosition" is not defined! Object should has shape {text: string, caretPosition: string | number}. Check the implementation for trigger "${currentTrigger}" and its token "${actualToken}"
`);
          }
          return textToReplace;
        }
        if (typeof item !== "string") {
          throw new Error("Output item should be string\n");
        }
        return {
          caretPosition: DEFAULT_CARET_POSITION,
          text: `${currentTrigger}${item}${currentTrigger}`
        };
      };
    };
    this._getCurrentTriggerSettings = (paramTrigger) => {
      const { currentTrigger: stateTrigger } = this.state;
      const currentTrigger = paramTrigger || stateTrigger;
      if (!currentTrigger)
        return null;
      return this.props.trigger[currentTrigger];
    };
    this._getValuesFromProvider = () => {
      const { actualToken, currentTrigger } = this.state;
      const triggerSettings = this._getCurrentTriggerSettings();
      if (!currentTrigger || !triggerSettings)
        return;
      const { component, dataProvider } = triggerSettings;
      if (typeof dataProvider !== "function") {
        throw new Error("Trigger provider has to be a function!");
      }
      this.setState({ dataLoading: true });
      dataProvider(actualToken, this.state.value, (data, token) => {
        if (token !== this.state.actualToken)
          return;
        if (!Array.isArray(data)) {
          throw new Error("Trigger provider has to provide an array!");
        }
        if (currentTrigger !== this.state.currentTrigger)
          return;
        if (!data.length) {
          this._closeAutocomplete();
          return;
        }
        this.setState({
          component,
          data,
          dataLoading: false
        });
      });
    };
    this._getSuggestions = (paramTrigger) => {
      const { currentTrigger: stateTrigger, data } = this.state;
      const currentTrigger = paramTrigger || stateTrigger;
      if (!currentTrigger || !data || data && !data.length)
        return null;
      return data;
    };
    this._closeAutocomplete = () => {
      this.setState({
        currentTrigger: null,
        data: null,
        dataLoading: false,
        left: null,
        top: null
      });
    };
    this._cleanUpProps = () => {
      const props2 = { ...this.props };
      const notSafe = [
        "additionalTextareaProps",
        "className",
        "closeCommandsList",
        "closeMentionsList",
        "closeOnClickOutside",
        "containerClassName",
        "containerStyle",
        "disableMentions",
        "dropdownClassName",
        "dropdownStyle",
        "grow",
        "handleSubmit",
        "innerRef",
        "itemClassName",
        "itemStyle",
        "listClassName",
        "listStyle",
        "loaderClassName",
        "loaderStyle",
        "loadingComponent",
        "minChar",
        "movePopupAsYouType",
        "onCaretPositionChange",
        "onChange",
        "ref",
        "replaceWord",
        "scrollToItem",
        "shouldSubmit",
        "showCommandsList",
        "showMentionsList",
        "SuggestionItem",
        "SuggestionList",
        "trigger",
        "value"
      ];
      for (const prop in props2) {
        if (notSafe.includes(prop))
          delete props2[prop];
      }
      return props2;
    };
    this._isCommand = (text3) => {
      if (text3[0] !== "/")
        return false;
      const tokens = text3.split(" ");
      return tokens.length <= 1;
    };
    this._changeHandler = (e) => {
      const { minChar, movePopupAsYouType, onCaretPositionChange, onChange, trigger: trigger2 } = this.props;
      const { left: left2, top: top2 } = this.state;
      const textarea = e.target;
      const { selectionEnd, selectionStart, value: value2 } = textarea;
      if (onChange) {
        e.persist();
        onChange(e);
      }
      if (onCaretPositionChange)
        onCaretPositionChange(this.getCaretPosition());
      this.setState({ value: value2 });
      let currentTrigger;
      let lastToken;
      if (this._isCommand(value2)) {
        currentTrigger = "/";
        lastToken = value2;
      } else {
        const triggerTokens = Object.keys(trigger2).join().replace("/", "");
        const triggerNorWhitespace = `[^\\s${triggerTokens}]*`;
        const regex = new RegExp(`(?!^|\\W)?[${triggerTokens}]${triggerNorWhitespace}\\s?${triggerNorWhitespace}$`, "g");
        const tokenMatch = value2.slice(0, selectionEnd).match(regex);
        lastToken = tokenMatch && tokenMatch[tokenMatch.length - 1].trim();
        currentTrigger = lastToken && Object.keys(trigger2).find((a) => a === lastToken[0]) || null;
      }
      if (!lastToken || lastToken.length <= minChar) {
        this._closeAutocomplete();
        return;
      }
      const actualToken = lastToken.slice(1);
      if (!currentTrigger)
        return;
      if (movePopupAsYouType || top2 === null && left2 === null || // if we have single char - trigger it means we want to re-position the autocomplete
      lastToken.length === 1) {
        const { left: newLeft, top: newTop } = (0, import_textarea_caret.default)(textarea, selectionEnd);
        this.setState({
          // make position relative to textarea
          left: newLeft,
          top: newTop - this.textareaRef.scrollTop || 0
        });
      }
      this.setState({
        actualToken,
        currentTrigger,
        selectionEnd,
        selectionStart
      }, () => {
        try {
          this._getValuesFromProvider();
        } catch (err) {
          errorMessage(err.message);
        }
      });
    };
    this._selectHandler = (e) => {
      const { onCaretPositionChange, onSelect } = this.props;
      if (onCaretPositionChange)
        onCaretPositionChange(this.getCaretPosition());
      if (onSelect) {
        e.persist();
        onSelect(e);
      }
    };
    this._onClickAndBlurHandler = (e) => {
      const { closeOnClickOutside, onBlur } = this.props;
      const el = e.relatedTarget;
      const focusedAwayInSafari = isSafari() && e.type === "blur";
      if (this.dropdownRef && el instanceof Node && this.dropdownRef.contains(el) || focusedAwayInSafari) {
        return;
      }
      if (closeOnClickOutside)
        this._closeAutocomplete();
      if (onBlur) {
        e.persist();
        onBlur(e);
      }
    };
    this._onScrollHandler = () => this._closeAutocomplete();
    this._dropdownScroll = (item) => {
      const { scrollToItem } = this.props;
      if (!scrollToItem)
        return;
      if (scrollToItem === true) {
        defaultScrollToItem(this.dropdownRef, item);
        return;
      }
      if (typeof scrollToItem !== "function" || scrollToItem.length !== 2) {
        throw new Error("`scrollToItem` has to be boolean (true for default implementation) or function with two parameters: container, item.");
      }
      scrollToItem(this.dropdownRef, item);
    };
    this.getTriggerProps = () => {
      const { showCommandsList, showMentionsList, trigger: trigger2 } = this.props;
      const { component, currentTrigger, selectionEnd, value: value2 } = this.state;
      const selectedItem = this._getItemOnSelect();
      const suggestionData = this._getSuggestions();
      const textToReplace = this._getTextToReplace();
      const triggerProps = {
        component,
        currentTrigger,
        getSelectedItem: selectedItem,
        getTextToReplace: textToReplace,
        selectionEnd,
        value: value2,
        values: suggestionData
      };
      if (showCommandsList && trigger2["/"] || showMentionsList && trigger2["@"]) {
        let currentCommands;
        const getCommands = trigger2[showCommandsList ? "/" : "@"].dataProvider;
        getCommands == null ? void 0 : getCommands("", showCommandsList ? "/" : "@", (data) => {
          currentCommands = data;
        });
        triggerProps.component = showCommandsList ? CommandItem : UserItem;
        triggerProps.currentTrigger = showCommandsList ? "/" : "@";
        triggerProps.getTextToReplace = this._getTextToReplace(showCommandsList ? "/" : "@");
        triggerProps.getSelectedItem = this._getItemOnSelect(showCommandsList ? "/" : "@");
        triggerProps.selectionEnd = 1;
        triggerProps.value = showCommandsList ? "/" : "@";
        triggerProps.values = currentCommands;
      }
      return triggerProps;
    };
    this.setDropdownRef = (element2) => {
      this.dropdownRef = element2;
    };
    const { loadingComponent, trigger, value } = this.props;
    if (!loadingComponent) {
      throw new Error("RTA: loadingComponent is not defined");
    }
    if (!trigger) {
      throw new Error("RTA: trigger is not defined");
    }
    this.state = {
      actualToken: "",
      component: null,
      currentTrigger: null,
      data: null,
      dataLoading: false,
      isComposing: false,
      left: null,
      selectionEnd: 0,
      selectionStart: 0,
      top: null,
      value: value || ""
    };
  }
  /**
   * setup to emulate the UNSAFE_componentWillReceiveProps
   */
  static getDerivedStateFromProps(props, state) {
    if (props.value !== state.propsValue || !state.value) {
      return { propsValue: props.value, value: props.value };
    } else {
      return null;
    }
  }
  renderSuggestionListContainer() {
    const { disableMentions, dropdownClassName, dropdownStyle, itemClassName, itemStyle, listClassName, SuggestionItem, SuggestionList = List } = this.props;
    const { isComposing } = this.state;
    const triggerProps = this.getTriggerProps();
    if (isComposing || !triggerProps.values || !triggerProps.currentTrigger || disableMentions && triggerProps.currentTrigger === "@")
      return null;
    return import_react106.default.createElement(
      "div",
      { className: clsx_default("str-chat__suggestion-list-container", dropdownClassName), ref: this.setDropdownRef, style: dropdownStyle },
      import_react106.default.createElement(SuggestionList, { className: listClassName, dropdownScroll: this._dropdownScroll, itemClassName: clsx_default("str-chat__suggestion-list-item", itemClassName), itemStyle, onSelect: this._onSelect, SuggestionItem, ...triggerProps })
    );
  }
  render() {
    const { className, containerClassName, containerStyle, style } = this.props;
    const { onBlur, onChange, onClick, onFocus, onKeyDown, onScroll, onSelect, ...restAdditionalTextareaProps } = this.props.additionalTextareaProps || {};
    let { maxRows } = this.props;
    const { dataLoading, value } = this.state;
    if (!this.props.grow)
      maxRows = 1;
    return import_react106.default.createElement(
      "div",
      { className: clsx_default("rta", containerClassName, {
        ["rta--loading"]: dataLoading
      }), style: containerStyle },
      this.renderSuggestionListContainer(),
      import_react106.default.createElement(index2, { "data-testid": "message-input", ...this._cleanUpProps(), className: clsx_default("rta__textarea", className), maxRows, onBlur: (e) => {
        this._onClickAndBlurHandler(e);
        onBlur == null ? void 0 : onBlur(e);
      }, onChange: (e) => {
        this._changeHandler(e);
        onChange == null ? void 0 : onChange(e);
      }, onClick: (e) => {
        this._onClickAndBlurHandler(e);
        onClick == null ? void 0 : onClick(e);
      }, onCompositionEnd: () => this.setState((pv) => ({ ...pv, isComposing: false })), onCompositionStart: () => this.setState((pv) => ({ ...pv, isComposing: true })), onFocus: (e) => {
        var _a, _b;
        (_b = (_a = this.props).onFocus) == null ? void 0 : _b.call(_a, e);
        onFocus == null ? void 0 : onFocus(e);
      }, onKeyDown: (e) => {
        this._handleKeyDown(e);
        onKeyDown == null ? void 0 : onKeyDown(e);
      }, onScroll: (e) => {
        this._onScrollHandler(e);
        onScroll == null ? void 0 : onScroll(e);
      }, onSelect: (e) => {
        this._selectHandler(e);
        onSelect == null ? void 0 : onSelect(e);
      }, ref: (ref) => {
        var _a;
        (_a = this.props) == null ? void 0 : _a.innerRef(ref);
        this.textareaRef = ref;
      }, style, value, ...restAdditionalTextareaProps, defaultValue: void 0 })
    );
  }
};
ReactTextareaAutocomplete.defaultProps = {
  closeOnClickOutside: true,
  maxRows: 10,
  minChar: 1,
  movePopupAsYouType: false,
  scrollToItem: true,
  value: ""
};
ReactTextareaAutocomplete.propTypes = {
  className: import_prop_types2.default.string,
  closeOnClickOutside: import_prop_types2.default.bool,
  containerClassName: import_prop_types2.default.string,
  containerStyle: import_prop_types2.default.object,
  disableMentions: import_prop_types2.default.bool,
  dropdownClassName: import_prop_types2.default.string,
  dropdownStyle: import_prop_types2.default.object,
  itemClassName: import_prop_types2.default.string,
  itemStyle: import_prop_types2.default.object,
  listClassName: import_prop_types2.default.string,
  listStyle: import_prop_types2.default.object,
  loaderClassName: import_prop_types2.default.string,
  loaderStyle: import_prop_types2.default.object,
  loadingComponent: import_prop_types2.default.elementType,
  minChar: import_prop_types2.default.number,
  onBlur: import_prop_types2.default.func,
  onCaretPositionChange: import_prop_types2.default.func,
  onChange: import_prop_types2.default.func,
  onSelect: import_prop_types2.default.func,
  shouldSubmit: import_prop_types2.default.func,
  style: import_prop_types2.default.object,
  SuggestionList: import_prop_types2.default.elementType,
  trigger: triggerPropsCheck,
  value: import_prop_types2.default.string
};

// node_modules/stream-chat-react/dist/components/Channel/Channel.js
var import_react306 = __toESM(require_react());
var import_lodash21 = __toESM(require_lodash3());
var import_lodash22 = __toESM(require_lodash4());
var import_lodash23 = __toESM(require_lodash());

// node_modules/stream-chat-react/dist/components/Channel/channelState.js
var makeChannelReducer = () => (state, action) => {
  var _a;
  switch (action.type) {
    case "closeThread": {
      return {
        ...state,
        thread: null,
        threadLoadingMore: false,
        threadMessages: []
      };
    }
    case "copyMessagesFromChannel": {
      const { channel, parentId } = action;
      return {
        ...state,
        messages: [...channel.state.messages],
        pinnedMessages: [...channel.state.pinnedMessages],
        // copying messages from channel happens with new message - this resets the suppressAutoscroll
        suppressAutoscroll: false,
        threadMessages: parentId ? { ...channel.state.threads }[parentId] || [] : state.threadMessages
      };
    }
    case "copyStateFromChannelOnEvent": {
      const { channel } = action;
      return {
        ...state,
        members: { ...channel.state.members },
        messages: [...channel.state.messages],
        pinnedMessages: [...channel.state.pinnedMessages],
        read: { ...channel.state.read },
        watcherCount: channel.state.watcher_count,
        watchers: { ...channel.state.watchers }
      };
    }
    case "initStateFromChannel": {
      const { channel, hasMore } = action;
      return {
        ...state,
        hasMore,
        loading: false,
        members: { ...channel.state.members },
        messages: [...channel.state.messages],
        pinnedMessages: [...channel.state.pinnedMessages],
        read: { ...channel.state.read },
        watcherCount: channel.state.watcher_count,
        watchers: { ...channel.state.watchers }
      };
    }
    case "jumpToLatestMessage": {
      return {
        ...state,
        hasMoreNewer: false,
        highlightedMessageId: void 0,
        loading: false,
        suppressAutoscroll: false
      };
    }
    case "jumpToMessageFinished": {
      return {
        ...state,
        hasMoreNewer: action.channel.state.messagePagination.hasNext,
        highlightedMessageId: action.highlightedMessageId,
        messages: action.channel.state.messages
      };
    }
    case "clearHighlightedMessage": {
      return {
        ...state,
        highlightedMessageId: void 0
      };
    }
    case "loadMoreFinished": {
      const { hasMore, messages } = action;
      return {
        ...state,
        hasMore,
        loadingMore: false,
        messages,
        suppressAutoscroll: false
      };
    }
    case "loadMoreNewerFinished": {
      const { hasMoreNewer, messages } = action;
      return {
        ...state,
        hasMoreNewer,
        loadingMoreNewer: false,
        messages
      };
    }
    case "loadMoreThreadFinished": {
      const { threadHasMore, threadMessages } = action;
      return {
        ...state,
        threadHasMore,
        threadLoadingMore: false,
        threadMessages
      };
    }
    case "openThread": {
      const { channel, message } = action;
      return {
        ...state,
        thread: message,
        threadHasMore: true,
        threadMessages: message.id ? { ...channel.state.threads }[message.id] || [] : [],
        threadSuppressAutoscroll: false
      };
    }
    case "setError": {
      const { error: error2 } = action;
      return { ...state, error: error2 };
    }
    case "setLoadingMore": {
      const { loadingMore } = action;
      return { ...state, loadingMore, suppressAutoscroll: loadingMore };
    }
    case "setLoadingMoreNewer": {
      const { loadingMoreNewer } = action;
      return { ...state, loadingMoreNewer };
    }
    case "setThread": {
      const { message } = action;
      return { ...state, thread: message };
    }
    case "setTyping": {
      const { channel } = action;
      return {
        ...state,
        typing: { ...channel.state.typing }
      };
    }
    case "startLoadingThread": {
      return {
        ...state,
        threadLoadingMore: true,
        threadSuppressAutoscroll: true
      };
    }
    case "updateThreadOnEvent": {
      const { channel, message } = action;
      if (!state.thread)
        return state;
      return {
        ...state,
        thread: (message == null ? void 0 : message.id) === state.thread.id ? channel.state.formatMessage(message) : state.thread,
        threadMessages: ((_a = state.thread) == null ? void 0 : _a.id) ? { ...channel.state.threads }[state.thread.id] || [] : []
      };
    }
    default:
      return state;
  }
};
var initialState2 = {
  error: null,
  hasMore: true,
  hasMoreNewer: false,
  loading: true,
  loadingMore: false,
  members: {},
  messages: [],
  pinnedMessages: [],
  read: {},
  suppressAutoscroll: false,
  thread: null,
  threadHasMore: true,
  threadLoadingMore: false,
  threadMessages: [],
  threadSuppressAutoscroll: false,
  typing: {},
  watcherCount: 0,
  watchers: {}
};

// node_modules/stream-chat-react/dist/components/Channel/hooks/useCreateChannelStateContext.js
var import_react107 = __toESM(require_react());

// node_modules/stream-chat-react/dist/i18n/de.json
var de_default = {
  "Add a comment": "Einen Kommentar hinzufügen",
  "Add an option": "Eine Option hinzufügen",
  "All results loaded": "Alle Ergebnisse geladen",
  "Allow access to camera": "Zugriff auf Kamera erlauben",
  "Allow access to microphone": "Zugriff auf Mikrofon erlauben",
  "Allow comments": "Kommentare erlauben",
  "Allow option suggestion": "Optionsvorschläge erlauben",
  "An error has occurred during recording": "Ein Fehler ist während der Aufnahme aufgetreten",
  "An error has occurred during the recording processing": "Ein Fehler ist während der Aufnahmeverarbeitung aufgetreten",
  Anonymous: "Anonym",
  "Anonymous poll": "Anonyme Umfrage",
  Archive: "Archivieren",
  "Ask a question": "Eine Frage stellen",
  "Attach files": "Dateien anhängen",
  Cancel: "Abbrechen",
  "Cannot seek in the recording": "In der Aufnahme kann nicht gesucht werden",
  "Channel Missing": "Kanal fehlt",
  Close: "Schließen",
  "Close emoji picker": "Emoji-Auswahl schließen",
  "Commands matching": "Übereinstimmende Befehle",
  "Connection failure, reconnecting now...": "Verbindungsfehler, Wiederherstellung der Verbindung...",
  Create: "Erstellen",
  "Create poll": "Umfrage erstellen",
  Delete: "Löschen",
  Delivered: "Zugestellt",
  "Download attachment {{ name }}": "Anhang {{ name }} herunterladen",
  "Drag your files here": "Ziehen Sie Ihre Dateien hierher",
  "Drag your files here to add to your post": "Ziehen Sie Ihre Dateien hierher, um sie Ihrem Beitrag hinzuzufügen",
  "Edit Message": "Nachricht bearbeiten",
  "Edit message request failed": "Anfrage zum Bearbeiten der Nachricht fehlgeschlagen",
  Edited: "Bearbeitet",
  "Emoji matching": "Passende Emojis",
  "Empty message...": "Leere Nachricht...",
  End: "Beenden",
  "End vote": "Abstimmung beenden",
  "Error adding flag": "Fehler beim Hinzufügen des Flags",
  "Error connecting to chat, refresh the page to try again.": "Verbindungsfehler zum Chat, aktualisieren Sie die Seite, um es erneut zu versuchen.",
  "Error deleting message": "Fehler beim Löschen der Nachricht",
  "Error fetching reactions": "Fehler beim Laden von Reaktionen",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "Fehler beim Markieren der Nachricht als ungelesen. Kann keine älteren ungelesenen Nachrichten markieren als die neuesten 100 Kanalnachrichten.",
  "Error muting a user ...": "Fehler beim Stummschalten eines Nutzers.",
  "Error pinning message": "Fehler beim Pinnen der Nachricht",
  "Error removing message pin": "Fehler beim Entfernen der gepinnten Nachricht",
  "Error reproducing the recording": "Fehler bei der Wiedergabe der Aufnahme",
  "Error starting recording": "Fehler beim Starten der Aufnahme",
  "Error unmuting a user ...": "Fehler beim Aufheben der Stummschaltung eines Nutzers ...",
  "Error uploading attachment": "Fehler beim Hochladen des Anhangs",
  "Error uploading file": "Fehler beim Hochladen der Datei",
  "Error uploading image": "Fehler beim Hochladen des Bildes",
  "Error · Unsent": "Fehler · Nicht gesendet",
  "Error: {{ errorMessage }}": "Fehler: {{ errorMessage }}",
  "Failed to jump to the first unread message": "Fehler beim Springen zur ersten ungelesenen Nachricht",
  "Failed to mark channel as read": "Fehler beim Markieren des Kanals als gelesen",
  "Failed to play the recording": "Wiedergabe der Aufnahme fehlgeschlagen",
  File: "Datei",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "Datei ist zu groß: {{ size }}, maximale Upload-Größe beträgt {{ limit }}",
  Flag: "Melden",
  "Generating...": "Generieren...",
  "Latest Messages": "Neueste Nachrichten",
  "Load more": "Mehr laden",
  "Mark as unread": "Als ungelesen markieren",
  "Maximum number of votes (from 2 to 10)": "Maximale Anzahl der Stimmen (von 2 bis 10)",
  Menu: "Menü",
  "Message Failed · Click to try again": "Nachricht fehlgeschlagen · Klicken, um es erneut zu versuchen",
  "Message Failed · Unauthorized": "Nachricht fehlgeschlagen · Nicht autorisiert",
  "Message deleted": "Nachricht gelöscht",
  "Message has been successfully flagged": "Nachricht wurde erfolgreich gemeldet",
  "Message pinned": "Nachricht angeheftet",
  "Message was blocked by moderation policies": "Nachricht wurde durch moderationsrichtlinien blockiert",
  "Messages have been marked unread.": "Nachrichten wurden als ungelesen markiert.",
  "Missing permissions to upload the attachment": "Fehlende Berechtigungen zum Hochladen des Anhangs",
  "Multiple answers": "Mehrere Antworten",
  Mute: "Stummschalten",
  New: "Neu",
  "New Messages!": "Neue Nachrichten!",
  "No chats here yet…": "Noch keine Chats hier...",
  "No results found": "Keine Ergebnisse gefunden",
  "Nobody will be able to vote in this poll anymore.": "Niemand kann mehr in dieser Umfrage abstimmen.",
  "Nothing yet...": "Noch nichts...",
  Ok: "Ok",
  "Open emoji picker": "Emoji-Auswahl öffnen",
  "Option already exists": "Option existiert bereits",
  Options: "Optionen",
  "People matching": "Passende Personen",
  Pin: "Anheften",
  "Pinned by": "Angeheftet von",
  Poll: "Umfrage",
  "Poll comments": "Umfragekommentare",
  "Poll options": "Umfrageoptionen",
  "Poll results": "Umfrageergebnisse",
  Question: "Frage",
  Quote: "Zitieren",
  "Recording format is not supported and cannot be reproduced": "Aufnahmeformat wird nicht unterstützt und kann nicht wiedergegeben werden",
  Reply: "Antworten",
  "Reply to Message": "Auf Nachricht antworten",
  Search: "Suche",
  "Searching...": "Suchen...",
  "See all options ({{count}})_one": "Alle Optionen anzeigen ({{count}})",
  "See all options ({{count}})_other": "Alle Optionen anzeigen ({{count}})",
  "Select one": "Eine auswählen",
  "Select one or more": "Eine oder mehrere auswählen",
  "Select up to {{count}}_one": "Bis zu {{count}} auswählen",
  "Select up to {{count}}_other": "Bis zu {{count}} auswählen",
  Send: "Senden",
  "Send Anyway": "Trotzdem senden",
  "Send message request failed": "Senden der Nachrichtenanfrage fehlgeschlagen",
  "Sending...": "Senden...",
  "Show all": "Alle anzeigen",
  Shuffle: "Mischen",
  "Slow Mode ON": "Langsamer Modus EIN",
  "Some of the files will not be accepted": "Einige der Dateien werden nicht akzeptiert",
  "Start typing to search": "Tippen Sie, um zu suchen",
  Submit: "Absenden",
  "Suggest an option": "Eine Option vorschlagen",
  "Thinking...": "Denken...",
  "This message did not meet our content guidelines": "Diese Nachricht entsprach nicht unseren Inhaltsrichtlinien",
  "This message was deleted...": "Diese Nachricht wurde gelöscht...",
  Thread: "Thread",
  "To start recording, allow the camera access in your browser": "Um mit der Aufnahme zu beginnen, erlauben Sie den Zugriff auf die Kamera in Ihrem Browser",
  "To start recording, allow the microphone access in your browser": "Um mit der Aufnahme zu beginnen, erlauben Sie den Zugriff auf das Mikrofon in Ihrem Browser",
  "Type a number from 2 to 10": "Geben Sie eine Zahl von 2 bis 10 ein",
  "Type your message": "Nachricht eingeben",
  Unarchive: "Archivierung aufheben",
  Unmute: "Stummschaltung aufheben",
  Unpin: "Anheftung aufheben",
  "Unread messages": "Ungelesene Nachrichten",
  "Unsupported attachment": "Nicht unterstützter Anhang",
  "Update your comment": "Ihren Kommentar aktualisieren",
  'Upload type: "{{ type }}" is not allowed': 'Upload-Typ: "{{ type }}" ist nicht erlaubt',
  "User uploaded content": "Vom Benutzer hochgeladener Inhalt",
  "View results": "Ergebnisse anzeigen",
  "View {{count}} comments_one": "{{count}} Kommentar anzeigen",
  "View {{count}} comments_other": "{{count}} Kommentare anzeigen",
  "Voice message": "Sprachnachricht",
  "Vote ended": "Abstimmung beendet",
  "Wait until all attachments have uploaded": "Bitte warten, bis alle Anhänge hochgeladen wurden",
  You: "Du",
  "You have no channels currently": "Du hast momentan noch keine Kanäle",
  "You've reached the maximum number of files": "Die maximale Anzahl an Dateien ist erreicht",
  "aria/Attachment": "Anhang",
  "aria/Cancel Reply": "Antwort abbrechen",
  "aria/Cancel upload": "Upload abbrechen",
  "aria/Channel list": "Kanalliste",
  "aria/Channel search results": "Kanalsuchergebnisse",
  "aria/Close thread": "Thread schließen",
  "aria/Download attachment": "Anhang herunterladen",
  "aria/Emoji picker": "Emoji-Auswahl",
  "aria/File input": "Dateieingabe",
  "aria/File upload": "Datei hochladen",
  "aria/Image input": "Bildeingabe",
  "aria/Load More Channels": "Mehr Kanäle laden",
  "aria/Menu": "Menü",
  "aria/Message Options": "Nachrichtenoptionen",
  "aria/Open Attachment Selector": "Anhang-Auswahl öffnen",
  "aria/Open Message Actions Menu": "Nachrichtenaktionsmenü öffnen",
  "aria/Open Reaction Selector": "Reaktionsauswahl öffnen",
  "aria/Open Thread": "Thread öffnen",
  "aria/Reaction list": "Reaktionsliste",
  "aria/Remove attachment": "Anhang entfernen",
  "aria/Retry upload": "Upload erneut versuchen",
  "aria/Search results": "Suchergebnisse",
  "aria/Search results header filter button": "Suchergebnisse-Kopfzeilen-Filterbutton",
  "aria/Send": "Senden",
  "aria/Stop AI Generation": "KI-Generierung stoppen",
  "ban-command-args": "[@Benutzername] [Text]",
  "ban-command-description": "Einen Benutzer verbannen",
  "giphy-command-args": "[Text]",
  "giphy-command-description": "Poste ein zufälliges Gif in den Kanal",
  live: "live",
  "mute-command-args": "[@Benutzername]",
  "mute-command-description": "Stummschalten eines Benutzers",
  replyCount_one: "1 Antwort",
  replyCount_other: "{{ count }} Antworten",
  "search-results-header-filter-source-button-label--channels": "Kanäle",
  "search-results-header-filter-source-button-label--messages": "Nachrichten",
  "search-results-header-filter-source-button-label--users": "Benutzer",
  searchResultsCount_one: "1 Ergebnis",
  searchResultsCount_other: "{{ count }} Ergebnisse",
  "this content could not be displayed": "Dieser Inhalt konnte nicht angezeigt werden",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/PollVote": "{{ timestamp | timestampFormatter(format: MMM D [at] HH:mm) }}",
  "timestamp/PollVoteTooltip": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "unban-command-args": "[@Benutzername]",
  "unban-command-description": "Einen Benutzer entbannen",
  "unmute-command-args": "[@Benutzername]",
  "unmute-command-description": "Stummschaltung eines Benutzers aufheben",
  unreadMessagesSeparatorText_one: "1 ungelesene Nachricht",
  unreadMessagesSeparatorText_other: "{{count}} ungelesene Nachrichten",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} und {{moreCount}} mehr",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} und {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} und {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }} mehr",
  "{{ memberCount }} members": "{{ memberCount }} Mitglieder",
  "{{ user }} has been muted": "{{ user }} wurde stummgeschaltet",
  "{{ user }} has been unmuted": "Die Stummschaltung von {{ user }} wurde aufgehoben",
  "{{ user }} is typing...": "{{ user }} tippt...",
  "{{ users }} and more are typing...": "{{ users }} und mehr tippen...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} und {{ user }} tippen...",
  "{{ watcherCount }} online": "{{ watcherCount }} online",
  "{{count}} unread_one": "{{count}} ungelesen",
  "{{count}} unread_other": "{{count}} ungelesen",
  "{{count}} votes_one": "{{count}} Stimme",
  "{{count}} votes_other": "{{count}} Stimmen",
  "🏙 Attachment...": "🏙 Anhang...",
  "📊 {{createdBy}} created: {{ pollName}}": "📊 {{createdBy}} hat erstellt: {{ pollName}}",
  "📊 {{votedBy}} voted: {{pollOptionText}}": "📊 {{votedBy}} hat abgestimmt: {{pollOptionText}}"
};

// node_modules/stream-chat-react/dist/i18n/en.json
var en_default = {
  "Add a comment": "Add a comment",
  "Add an option": "Add an option",
  "All results loaded": "All results loaded",
  "Allow access to camera": "Allow access to camera",
  "Allow access to microphone": "Allow access to microphone",
  "Allow comments": "Allow comments",
  "Allow option suggestion": "Allow option suggestion",
  "An error has occurred during recording": "An error has occurred during recording",
  "An error has occurred during the recording processing": "An error has occurred during the recording processing",
  Anonymous: "Anonymous",
  "Anonymous poll": "Anonymous poll",
  Archive: "Archive",
  "Ask a question": "Ask a question",
  "Attach files": "Attach files",
  Cancel: "Cancel",
  "Cannot seek in the recording": "Cannot seek in the recording",
  "Channel Missing": "Channel Missing",
  Close: "Close",
  "Close emoji picker": "Close emoji picker",
  "Commands matching": "Commands matching",
  "Connection failure, reconnecting now...": "Connection failure, reconnecting now...",
  Create: "Create",
  "Create poll": "Create poll",
  Delete: "Delete",
  Delivered: "Delivered",
  "Download attachment {{ name }}": "Download attachment {{ name }}",
  "Drag your files here": "Drag your files here",
  "Drag your files here to add to your post": "Drag your files here to add to your post",
  "Edit Message": "Edit Message",
  "Edit message request failed": "Edit message request failed",
  Edited: "Edited",
  "Emoji matching": "Emoji matching",
  "Empty message...": "Empty message...",
  End: "End",
  "End vote": "End vote",
  "Error adding flag": "Error adding flag",
  "Error connecting to chat, refresh the page to try again.": "Error connecting to chat, refresh the page to try again.",
  "Error deleting message": "Error deleting message",
  "Error fetching reactions": "Error loading reactions",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.",
  "Error muting a user ...": "Error muting a user ...",
  "Error pinning message": "Error pinning message",
  "Error removing message pin": "Error removing message pin",
  "Error reproducing the recording": "Error reproducing the recording",
  "Error starting recording": "Error starting recording",
  "Error unmuting a user ...": "Error unmuting a user ...",
  "Error uploading attachment": "Error uploading attachment",
  "Error uploading file": "Error uploading file",
  "Error uploading image": "Error uploading image",
  "Error · Unsent": "Error · Unsent",
  "Error: {{ errorMessage }}": "Error: {{ errorMessage }}",
  "Failed to jump to the first unread message": "Failed to jump to the first unread message",
  "Failed to mark channel as read": "Failed to mark channel as read",
  "Failed to play the recording": "Failed to play the recording",
  File: "File",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "File is too large: {{ size }}, maximum upload size is {{ limit }}",
  Flag: "Flag",
  "Generating...": "Generating...",
  "Latest Messages": "Latest Messages",
  "Load more": "Load more",
  "Mark as unread": "Mark as unread",
  "Maximum number of votes (from 2 to 10)": "Maximum number of votes (from 2 to 10)",
  Menu: "Menu",
  "Message Failed · Click to try again": "Message Failed · Click to try again",
  "Message Failed · Unauthorized": "Message Failed · Unauthorized",
  "Message deleted": "Message deleted",
  "Message has been successfully flagged": "Message has been successfully flagged",
  "Message pinned": "Message pinned",
  "Message was blocked by moderation policies": "Message was blocked by moderation policies",
  "Messages have been marked unread.": "Messages have been marked unread.",
  "Missing permissions to upload the attachment": "Missing permissions to upload the attachment",
  "Multiple answers": "Multiple answers",
  Mute: "Mute",
  New: "New",
  "New Messages!": "New Messages!",
  "No chats here yet…": "No chats here yet…",
  "No results found": "No results found",
  "Nobody will be able to vote in this poll anymore.": "Nobody will be able to vote in this poll anymore.",
  "Nothing yet...": "Nothing yet...",
  Ok: "Ok",
  "Open emoji picker": "Open emoji picker",
  "Option already exists": "Option already exists",
  Options: "Options",
  "People matching": "People matching",
  Pin: "Pin",
  "Pinned by": "Pinned by",
  Poll: "Poll",
  "Poll comments": "Poll comments",
  "Poll options": "Poll options",
  "Poll results": "Poll results",
  Question: "Question",
  Quote: "Quote",
  "Recording format is not supported and cannot be reproduced": "Recording format is not supported and cannot be reproduced",
  Reply: "Reply",
  "Reply to Message": "Reply to Message",
  Search: "Search",
  "Searching...": "Searching...",
  "See all options ({{count}})_one": "See all options ({{count}})",
  "See all options ({{count}})_other": "See all options ({{count}})",
  "Select one": "Select one",
  "Select one or more": "Select one or more",
  "Select up to {{count}}_one": "Select up to {{count}}",
  "Select up to {{count}}_other": "Select up to {{count}}",
  Send: "Send",
  "Send Anyway": "Send Anyway",
  "Send message request failed": "Send message request failed",
  "Sending...": "Sending...",
  "Show all": "Show all",
  Shuffle: "Shuffle",
  "Slow Mode ON": "Slow Mode ON",
  "Some of the files will not be accepted": "Some of the files will not be accepted",
  "Start typing to search": "Start typing to search",
  Submit: "Submit",
  "Suggest an option": "Suggest an option",
  "Thinking...": "Thinking...",
  "This message did not meet our content guidelines": "This message did not meet our content guidelines",
  "This message was deleted...": "This message was deleted...",
  Thread: "Thread",
  "To start recording, allow the camera access in your browser": "To start recording, allow the camera access in your browser",
  "To start recording, allow the microphone access in your browser": "To start recording, allow the microphone access in your browser",
  "Type a number from 2 to 10": "Type a number from 2 to 10",
  "Type your message": "Type your message",
  Unarchive: "Unarchive",
  Unmute: "Unmute",
  Unpin: "Unpin",
  "Unread messages": "Unread messages",
  "Unsupported attachment": "Unsupported attachment",
  "Update your comment": "Update your comment",
  'Upload type: "{{ type }}" is not allowed': 'Upload type: "{{ type }}" is not allowed',
  "User uploaded content": "User uploaded content",
  "View results": "View results",
  "View {{count}} comments_one": "View {{count}} comment",
  "View {{count}} comments_other": "View {{count}} comments",
  "Voice message": "Voice message",
  "Vote ended": "Vote ended",
  "Wait until all attachments have uploaded": "Wait until all attachments have uploaded",
  You: "You",
  "You have no channels currently": "You have no channels currently",
  "You've reached the maximum number of files": "You've reached the maximum number of files",
  "aria/Attachment": "Attachment",
  "aria/Cancel Reply": "Cancel Reply",
  "aria/Cancel upload": "Cancel upload",
  "aria/Channel list": "Channel list",
  "aria/Channel search results": "Channel search results",
  "aria/Close thread": "Close thread",
  "aria/Download attachment": "aria/Download attachment",
  "aria/Emoji picker": "Emoji picker",
  "aria/File input": "File input",
  "aria/File upload": "File upload",
  "aria/Image input": "Image input",
  "aria/Load More Channels": "Load More Channels",
  "aria/Menu": "Menu",
  "aria/Message Options": "Message Options",
  "aria/Open Attachment Selector": "aria/Open Attachment Selector",
  "aria/Open Message Actions Menu": "Open Message Actions Menu",
  "aria/Open Reaction Selector": "Open Reaction Selector",
  "aria/Open Thread": "Open Thread",
  "aria/Reaction list": "Reaction list",
  "aria/Remove attachment": "Remove attachment",
  "aria/Retry upload": "Retry upload",
  "aria/Search results": "Search results",
  "aria/Search results header filter button": "Search results header filter button",
  "aria/Send": "Send",
  "aria/Stop AI Generation": "Stop AI Generation",
  live: "live",
  replyCount_one: "1 reply",
  replyCount_other: "{{ count }} replies",
  "search-results-header-filter-source-button-label--channels": "channels",
  "search-results-header-filter-source-button-label--messages": "messages",
  "search-results-header-filter-source-button-label--users": "users",
  searchResultsCount_one: "1 result",
  searchResultsCount_other: "{{ count }} results",
  "this content could not be displayed": "this content could not be displayed",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/PollVote": "{{ timestamp | timestampFormatter(format: MMM D [at] HH:mm) }}",
  "timestamp/PollVoteTooltip": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  unreadMessagesSeparatorText_one: "1 unread message",
  unreadMessagesSeparatorText_other: "{{count}} unread messages",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} and {{ moreCount }} more",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }}, and {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} and {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }} more",
  "{{ memberCount }} members": "{{ memberCount }} members",
  "{{ user }} has been muted": "{{ user }} has been muted",
  "{{ user }} has been unmuted": "{{ user }} has been unmuted",
  "{{ user }} is typing...": "{{ user }} is typing...",
  "{{ users }} and more are typing...": "{{ users }} and more are typing...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} and {{ user }} are typing...",
  "{{ watcherCount }} online": "{{ watcherCount }} online",
  "{{count}} unread_one": "{{count}} unread",
  "{{count}} unread_other": "{{count}} unread",
  "{{count}} votes_one": "{{count}} vote",
  "{{count}} votes_other": "{{count}} votes",
  "🏙 Attachment...": "🏙 Attachment...",
  "📊 {{createdBy}} created: {{ pollName}}": "📊 {{createdBy}} created: {{ pollName}}",
  "📊 {{votedBy}} voted: {{pollOptionText}}": "📊 {{votedBy}} voted: {{pollOptionText}}"
};

// node_modules/stream-chat-react/dist/i18n/es.json
var es_default = {
  "Add a comment": "Agregar un comentario",
  "Add an option": "Agregar una opción",
  "All results loaded": "Todos los resultados cargados",
  "Allow access to camera": "Permitir acceso a la cámara",
  "Allow access to microphone": "Permitir acceso al micrófono",
  "Allow comments": "Permitir comentarios",
  "Allow option suggestion": "Permitir sugerencia de opciones",
  "An error has occurred during recording": "Se ha producido un error durante la grabación",
  "An error has occurred during the recording processing": "Se ha producido un error durante el procesamiento de la grabación",
  Anonymous: "Anónimo",
  "Anonymous poll": "Encuesta anónima",
  Archive: "Archivo",
  "Ask a question": "Hacer una pregunta",
  "Attach files": "Adjuntar archivos",
  Cancel: "Cancelar",
  "Cannot seek in the recording": "No se puede buscar en la grabación",
  "Channel Missing": "Falta canal",
  Close: "Cerrar",
  "Close emoji picker": "Cerrar el selector de emojis",
  "Commands matching": "Coincidencia de comandos",
  "Connection failure, reconnecting now...": "Fallo de conexión, reconectando ahora...",
  Create: "Crear",
  "Create poll": "Crear encuesta",
  Delete: "Borrar",
  Delivered: "Entregado",
  "Download attachment {{ name }}": "Descargar adjunto {{ name }}",
  "Drag your files here": "Arrastra tus archivos aquí",
  "Drag your files here to add to your post": "Arrastra tus archivos aquí para agregarlos a tu publicación",
  "Edit Message": "Editar mensaje",
  "Edit message request failed": "Error al editar la solicitud de mensaje",
  Edited: "Editado",
  "Emoji matching": "Coincidencia de emoji",
  "Empty message...": "Mensaje vacío...",
  End: "Final",
  "End vote": "Finalizar votación",
  "Error adding flag": "Error al agregar la bandera",
  "Error connecting to chat, refresh the page to try again.": "Error al conectarse al chat, actualice la página para volver a intentarlo.",
  "Error deleting message": "Error al eliminar el mensaje",
  "Error fetching reactions": "Error al cargar las reacciones",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "Error al marcar el mensaje como no leído. No se pueden marcar mensajes no leídos más antiguos que los últimos 100 mensajes del canal.",
  "Error muting a user ...": "Error al silenciar el usuario...",
  "Error pinning message": "Error al fijar el mensaje",
  "Error removing message pin": "Error al quitar el pin del mensaje",
  "Error reproducing the recording": "Error al reproducir la grabación",
  "Error starting recording": "Error al iniciar la grabación",
  "Error unmuting a user ...": "Error al desactivar el silencio del usuario...",
  "Error uploading attachment": "Error al subir el archivo adjunto",
  "Error uploading file": "Error al cargar el archivo",
  "Error uploading image": "Error al subir la imagen",
  "Error · Unsent": "Error · No enviado",
  "Error: {{ errorMessage }}": "Error: {{ errorMessage }}",
  "Failed to jump to the first unread message": "Error al saltar al primer mensaje no leído",
  "Failed to mark channel as read": "Error al marcar el canal como leído",
  "Failed to play the recording": "No se pudo reproducir la grabación",
  File: "Archivo",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "El archivo es demasiado grande: {{ size }}, el tamaño máximo de carga es de {{ limit }}",
  Flag: "Marcar",
  "Generating...": "Generando...",
  "Latest Messages": "Últimos mensajes",
  "Load more": "Cargar más",
  "Mark as unread": "Marcar como no leído",
  "Maximum number of votes (from 2 to 10)": "Número máximo de votos (de 2 a 10)",
  Menu: "Menú",
  "Message Failed · Click to try again": "Mensaje fallido · Haga clic para volver a intentarlo",
  "Message Failed · Unauthorized": "Mensaje fallido · No autorizado",
  "Message deleted": "Mensaje eliminado",
  "Message has been successfully flagged": "El mensaje se marcó correctamente",
  "Message pinned": "Mensaje fijado",
  "Message was blocked by moderation policies": "El mensaje fue bloqueado por las políticas de moderación",
  "Messages have been marked unread.": "Los mensajes han sido marcados como no leídos.",
  "Missing permissions to upload the attachment": "Faltan permisos para subir el archivo adjunto",
  "Multiple answers": "Múltiples respuestas",
  Mute: "Silenciar",
  New: "Nuevo",
  "New Messages!": "¡Nuevos mensajes!",
  "No chats here yet…": "Aún no hay mensajes aquí...",
  "No results found": "No se han encontrado resultados",
  "Nobody will be able to vote in this poll anymore.": "Nadie podrá votar en esta encuesta.",
  "Nothing yet...": "Nada aún...",
  Ok: "Ok",
  "Open emoji picker": "Abrir el selector de emojis",
  "Option already exists": "La opción ya existe",
  Options: "Opciones",
  "People matching": "Personas que coinciden",
  Pin: "Fijar",
  "Pinned by": "Fijado por",
  Poll: "Encuesta",
  "Poll comments": "Comentarios de la encuesta",
  "Poll options": "Opciones de la encuesta",
  "Poll results": "Resultados de la encuesta",
  Question: "Pregunta",
  Quote: "Citar",
  "Recording format is not supported and cannot be reproduced": "El formato de grabación no es compatible y no se puede reproducir",
  Reply: "Responder",
  "Reply to Message": "Responder al mensaje",
  Search: "Buscar",
  "Searching...": "Buscando...",
  "See all options ({{count}})_many": "Ver todas las opciones ({{count}})",
  "See all options ({{count}})_one": "Ver todas las opciones ({{count}})",
  "See all options ({{count}})_other": "Ver todas las opciones ({{count}})",
  "Select one": "Seleccionar uno",
  "Select one or more": "Seleccionar uno o más",
  "Select up to {{count}}_many": "Selecciona hasta {{count}}",
  "Select up to {{count}}_one": "Selecciona hasta {{count}}",
  "Select up to {{count}}_other": "Selecciona hasta {{count}}",
  Send: "Enviar",
  "Send Anyway": "Enviar de todos modos",
  "Send message request failed": "Error al enviar la solicitud de mensaje",
  "Sending...": "Enviando...",
  "Show all": "Mostrar todo",
  Shuffle: "Mezclar",
  "Slow Mode ON": "Modo lento activado",
  "Some of the files will not be accepted": "Algunos archivos no serán aceptados",
  "Start typing to search": "Empieza a escribir para buscar",
  Submit: "Enviar",
  "Suggest an option": "Sugerir una opción",
  "Thinking...": "Pensando...",
  "This message did not meet our content guidelines": "Este mensaje no cumple con nuestras directrices de contenido",
  "This message was deleted...": "Este mensaje fue eliminado...",
  Thread: "Hilo",
  "To start recording, allow the camera access in your browser": "Para comenzar a grabar, permita el acceso a la cámara en su navegador",
  "To start recording, allow the microphone access in your browser": "Para comenzar a grabar, permita el acceso al micrófono en su navegador",
  "Type a number from 2 to 10": "Escribe un número del 2 al 10",
  "Type your message": "Escribe tu mensaje",
  Unarchive: "Desarchivar",
  Unmute: "Activar sonido",
  Unpin: "Desfijar",
  "Unread messages": "Mensajes no leídos",
  "Unsupported attachment": "Adjunto no compatible",
  "Update your comment": "Actualizar tu comentario",
  'Upload type: "{{ type }}" is not allowed': 'Tipo de carga: "{{ type }}" no está permitido',
  "User uploaded content": "Contenido subido por el usuario",
  "View results": "Ver resultados",
  "View {{count}} comments_many": "Ver {{count}} comentarios",
  "View {{count}} comments_one": "Ver {{count}} comentario",
  "View {{count}} comments_other": "Ver {{count}} comentarios",
  "Voice message": "Mensaje de voz",
  "Vote ended": "Votación finalizada",
  "Wait until all attachments have uploaded": "Espere hasta que se hayan cargado todos los archivos adjuntos",
  You: "Tú",
  "You have no channels currently": "Actualmente no tienes canales",
  "You've reached the maximum number of files": "Has alcanzado el número máximo de archivos",
  "aria/Attachment": "Adjunto",
  "aria/Cancel Reply": "Cancelar respuesta",
  "aria/Cancel upload": "Cancelar carga",
  "aria/Channel list": "Lista de canales",
  "aria/Channel search results": "Resultados de búsqueda de canales",
  "aria/Close thread": "Cerrar hilo",
  "aria/Download attachment": "Descargar adjunto",
  "aria/Emoji picker": "Selector de emojis",
  "aria/File input": "Entrada de archivo",
  "aria/File upload": "Carga de archivo",
  "aria/Image input": "Entrada de imagen",
  "aria/Load More Channels": "Cargar más canales",
  "aria/Menu": "Menú",
  "aria/Message Options": "Opciones de mensaje",
  "aria/Open Attachment Selector": "Abrir selector de adjuntos",
  "aria/Open Message Actions Menu": "Abrir menú de acciones de mensaje",
  "aria/Open Reaction Selector": "Abrir selector de reacciones",
  "aria/Open Thread": "Abrir hilo",
  "aria/Reaction list": "Lista de reacciones",
  "aria/Remove attachment": "Eliminar adjunto",
  "aria/Retry upload": "Reintentar carga",
  "aria/Search results": "Resultados de búsqueda",
  "aria/Search results header filter button": "Botón de filtro del encabezado de resultados de búsqueda",
  "aria/Send": "Enviar",
  "aria/Stop AI Generation": "Detener generación de IA",
  "ban-command-args": "[@usuario] [texto]",
  "ban-command-description": "Prohibir a un usuario",
  "giphy-command-args": "[texto]",
  "giphy-command-description": "Publicar un gif aleatorio en el canal",
  live: "En vivo",
  "mute-command-args": "[@usuario]",
  "mute-command-description": "Silenciar a un usuario",
  replyCount_many: "{{ count }} respuestas",
  replyCount_one: "1 respuesta",
  replyCount_other: "{{ count }} respuestas",
  "search-results-header-filter-source-button-label--channels": "canales",
  "search-results-header-filter-source-button-label--messages": "mensajes",
  "search-results-header-filter-source-button-label--users": "usuarios",
  searchResultsCount_many: "{{ count }} resultados",
  searchResultsCount_one: "1 resultado",
  searchResultsCount_other: "{{ count }} resultados",
  "this content could not be displayed": "Este contenido no se pudo mostrar",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/PollVote": "{{ timestamp | timestampFormatter(format: MMM D [at] HH:mm) }}",
  "timestamp/PollVoteTooltip": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "unban-command-args": "[@usuario]",
  "unban-command-description": "Quitar la prohibición a un usuario",
  "unmute-command-args": "[@usuario]",
  "unmute-command-description": "Desactivar el silencio de un usuario",
  unreadMessagesSeparatorText_many: "{{count}} mensajes no leídos",
  unreadMessagesSeparatorText_one: "1 mensaje no leído",
  unreadMessagesSeparatorText_other: "{{count}} mensajes no leídos",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} y {{ moreCount }} más",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} y {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} y {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }} más",
  "{{ memberCount }} members": "{{ memberCount }} miembros",
  "{{ user }} has been muted": "{{ user }} ha sido silenciado",
  "{{ user }} has been unmuted": "Se ha desactivado el silencio de {{ user }}",
  "{{ user }} is typing...": "{{ user }} está escribiendo...",
  "{{ users }} and more are typing...": "{{ users }} y más están escribiendo...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} y {{ user }} están escribiendo...",
  "{{ watcherCount }} online": "{{ watcherCount }} en línea",
  "{{count}} unread_many": "{{count}} no leídos",
  "{{count}} unread_one": "{{count}} no leído",
  "{{count}} unread_other": "{{count}} no leídos",
  "{{count}} votes_many": "{{count}} votos",
  "{{count}} votes_one": "1 voto",
  "{{count}} votes_other": "{{count}} votos",
  "🏙 Attachment...": "🏙 Adjunto...",
  "📊 {{createdBy}} created: {{ pollName}}": "📊 {{createdBy}} creó: {{ pollName}}",
  "📊 {{votedBy}} voted: {{pollOptionText}}": "📊 {{votedBy}} votó: {{pollOptionText}}"
};

// node_modules/stream-chat-react/dist/i18n/fr.json
var fr_default = {
  "Add a comment": "Ajouter un commentaire",
  "Add an option": "Ajouter une option",
  "All results loaded": "Tous les résultats sont chargés",
  "Allow access to camera": "Autoriser l'accès à la caméra",
  "Allow access to microphone": "Autoriser l'accès au microphone",
  "Allow comments": "Autoriser les commentaires",
  "Allow option suggestion": "Autoriser la suggestion d'options",
  "An error has occurred during recording": "Une erreur s'est produite pendant l'enregistrement",
  "An error has occurred during the recording processing": "Une erreur s'est produite pendant le traitement de l'enregistrement",
  Anonymous: "Anonyme",
  "Anonymous poll": "Sondage anonyme",
  Archive: "Archive",
  "Ask a question": "Poser une question",
  "Attach files": "Joindre des fichiers",
  Cancel: "Annuler",
  "Cannot seek in the recording": "Impossible de rechercher dans l'enregistrement",
  "Channel Missing": "Canal Manquant",
  Close: "Fermer",
  "Close emoji picker": "Fermer le sélecteur d'émojis",
  "Commands matching": "Correspondance des commandes",
  "Connection failure, reconnecting now...": "Échec de la connexion, reconnexion en cours...",
  Create: "Créer",
  "Create poll": "Créer un sondage",
  Delete: "Supprimer",
  Delivered: "Publié",
  "Download attachment {{ name }}": "Télécharger la pièce jointe {{ name }}",
  "Drag your files here": "Glissez vos fichiers ici",
  "Drag your files here to add to your post": "Glissez vos fichiers ici pour les ajouter à votre publication",
  "Edit Message": "Éditer un message",
  "Edit message request failed": "Échec de la demande de modification du message",
  Edited: "Modifié",
  "Emoji matching": "Correspondance d'émojis",
  "Empty message...": "Message vide...",
  End: "Fin",
  "End vote": "Fin du vote",
  "Error adding flag": "Erreur lors de l'ajout du signalement",
  "Error connecting to chat, refresh the page to try again.": "Erreur de connexion au chat, rafraîchissez la page pour réessayer.",
  "Error deleting message": "Erreur lors de la suppression du message",
  "Error fetching reactions": "Erreur lors du chargement des réactions",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "Erreur lors de la marque du message comme non lu. Impossible de marquer des messages non lus plus anciens que les 100 derniers messages du canal.",
  "Error muting a user ...": "Erreur lors de la mise en sourdine d'un utilisateur...",
  "Error pinning message": "Erreur lors de l'épinglage du message",
  "Error removing message pin": "Erreur lors du retrait de l'épinglage du message",
  "Error reproducing the recording": "Erreur lors de la reproduction de l'enregistrement",
  "Error starting recording": "Erreur lors du démarrage de l'enregistrement",
  "Error unmuting a user ...": "Erreur lors du démarrage de la sourdine d'un utilisateur ...",
  "Error uploading attachment": "Erreur lors du téléchargement de la pièce jointe",
  "Error uploading file": "Erreur lors du téléchargement du fichier",
  "Error uploading image": "Erreur lors de l'envoi de l'image",
  "Error · Unsent": "Erreur - Non envoyé",
  "Error: {{ errorMessage }}": "Erreur : {{ errorMessage }}",
  "Failed to jump to the first unread message": "Échec du saut vers le premier message non lu",
  "Failed to mark channel as read": "Échec du marquage du canal comme lu",
  "Failed to play the recording": "Impossible de lire l'enregistrement",
  File: "Fichier",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "Le fichier est trop volumineux : {{ size }}, la taille maximale de téléchargement est de {{ limit }}",
  Flag: "Signaler",
  "Generating...": "Génération...",
  "Latest Messages": "Derniers messages",
  "Load more": "Charger plus",
  "Mark as unread": "Marquer comme non lu",
  "Maximum number of votes (from 2 to 10)": "Nombre maximum de votes (de 2 à 10)",
  Menu: "Menu",
  "Message Failed · Click to try again": "Échec de l'envoi du message - Cliquez pour réessayer",
  "Message Failed · Unauthorized": "Échec de l'envoi du message - Non autorisé",
  "Message deleted": "Message supprimé",
  "Message has been successfully flagged": "Le message a été signalé avec succès",
  "Message pinned": "Message épinglé",
  "Message was blocked by moderation policies": "Le message a été bloqué par les politiques de modération",
  "Messages have been marked unread.": "Les messages ont été marqués comme non lus.",
  "Missing permissions to upload the attachment": "Autorisations manquantes pour télécharger la pièce jointe",
  "Multiple answers": "Réponses multiples",
  Mute: "Muet",
  New: "Nouveau",
  "New Messages!": "Nouveaux Messages!",
  "No chats here yet…": "Pas encore de messages ici...",
  "No results found": "Aucun résultat trouvé",
  "Nobody will be able to vote in this poll anymore.": "Personne ne pourra plus voter dans ce sondage.",
  "Nothing yet...": "Rien pour l'instant...",
  Ok: "D'accord",
  "Open emoji picker": "Ouvrir le sélecteur d'émojis",
  "Option already exists": "L'option existe déjà",
  Options: "Options",
  "People matching": "Correspondance de personnes",
  Pin: "Épingler",
  "Pinned by": "Épinglé par",
  Poll: "Sondage",
  "Poll comments": "Commentaires du sondage",
  "Poll options": "Options du sondage",
  "Poll results": "Résultats du sondage",
  Question: "Question",
  Quote: "Citer",
  "Recording format is not supported and cannot be reproduced": "Le format d'enregistrement n'est pas pris en charge et ne peut pas être reproduit",
  Reply: "Répondre",
  "Reply to Message": "Répondre au message",
  Search: "Rechercher",
  "Searching...": "Recherche en cours...",
  "See all options ({{count}})_many": "Voir toutes les options ({{count}})",
  "See all options ({{count}})_one": "Voir toutes les options ({{count}})",
  "See all options ({{count}})_other": "Voir toutes les options ({{count}})",
  "Select one": "Sélectionner un",
  "Select one or more": "Sélectionner un ou plusieurs",
  "Select up to {{count}}_many": "Sélectionner jusqu'à {{count}}",
  "Select up to {{count}}_one": "Sélectionner jusqu'à {{count}}",
  "Select up to {{count}}_other": "Sélectionner jusqu'à {{count}}",
  Send: "Envoyer",
  "Send Anyway": "Envoyer quand même",
  "Send message request failed": "Échec de la demande d'envoi de message",
  "Sending...": "Envoi en cours...",
  "Show all": "Tout afficher",
  Shuffle: "Mélanger",
  "Slow Mode ON": "Mode lent activé",
  "Some of the files will not be accepted": "Certains fichiers ne seront pas acceptés",
  "Start typing to search": "Commencez à taper pour rechercher",
  Submit: "Envoyer",
  "Suggest an option": "Suggérer une option",
  "Thinking...": "Réflexion...",
  "This message did not meet our content guidelines": "Ce message ne respecte pas nos directives de contenu",
  "This message was deleted...": "Ce message a été supprimé...",
  Thread: "Fil de discussion",
  "To start recording, allow the camera access in your browser": "Pour commencer l'enregistrement, autorisez l'accès à la caméra dans votre navigateur",
  "To start recording, allow the microphone access in your browser": "Pour commencer l'enregistrement, autorisez l'accès au microphone dans votre navigateur",
  "Type a number from 2 to 10": "Tapez un nombre de 2 à 10",
  "Type your message": "Tapez votre message",
  Unarchive: "Désarchiver",
  Unmute: "Désactiver muet",
  Unpin: "Détacher",
  "Unread messages": "Messages non lus",
  "Unsupported attachment": "Pièce jointe non prise en charge",
  "Update your comment": "Mettre à jour votre commentaire",
  'Upload type: "{{ type }}" is not allowed': `Le type de fichier : "{{ type }}" n'est pas autorisé`,
  "User uploaded content": "Contenu téléchargé par l'utilisateur",
  "View results": "Voir les résultats",
  "View {{count}} comments_many": "Voir {{count}} commentaires",
  "View {{count}} comments_one": "Voir {{count}} commentaire",
  "View {{count}} comments_other": "Voir {{count}} commentaires",
  "Voice message": "Message vocal",
  "Vote ended": "Vote terminé",
  "Wait until all attachments have uploaded": "Attendez que toutes les pièces jointes soient téléchargées",
  You: "Vous",
  "You have no channels currently": "Vous n'avez actuellement aucun canal",
  "You've reached the maximum number of files": "Vous avez atteint le nombre maximal de fichiers",
  "aria/Attachment": "Pièce jointe",
  "aria/Cancel Reply": "Annuler la réponse",
  "aria/Cancel upload": "Annuler le téléchargement",
  "aria/Channel list": "Liste des canaux",
  "aria/Channel search results": "Résultats de recherche de canaux",
  "aria/Close thread": "Fermer le fil",
  "aria/Download attachment": "Télécharger la pièce jointe",
  "aria/Emoji picker": "Sélecteur d'émojis",
  "aria/File input": "Entrée de fichier",
  "aria/File upload": "Téléchargement de fichier",
  "aria/Image input": "Entrée d'image",
  "aria/Load More Channels": "Charger plus de canaux",
  "aria/Menu": "Menu",
  "aria/Message Options": "Options du message",
  "aria/Open Attachment Selector": "Ouvrir le sélecteur de pièces jointes",
  "aria/Open Message Actions Menu": "Ouvrir le menu des actions du message",
  "aria/Open Reaction Selector": "Ouvrir le sélecteur de réactions",
  "aria/Open Thread": "Ouvrir le fil",
  "aria/Reaction list": "Liste des réactions",
  "aria/Remove attachment": "Supprimer la pièce jointe",
  "aria/Retry upload": "Réessayer le téléchargement",
  "aria/Search results": "Résultats de recherche",
  "aria/Search results header filter button": "Bouton de filtre d'en-tête des résultats de recherche",
  "aria/Send": "Envoyer",
  "aria/Stop AI Generation": "Arrêter la génération d'IA",
  "ban-command-args": "[@nomdutilisateur] [texte]",
  "ban-command-description": "Bannir un utilisateur",
  "giphy-command-args": "[texte]",
  "giphy-command-description": "Poster un GIF aléatoire dans le canal",
  live: "en direct",
  "mute-command-args": "[@nomdutilisateur]",
  "mute-command-description": "Muter un utilisateur",
  replyCount_many: "{{ count }} réponses",
  replyCount_one: "1 réponse",
  replyCount_other: "{{ count }} réponses",
  "search-results-header-filter-source-button-label--channels": "canaux",
  "search-results-header-filter-source-button-label--messages": "messages",
  "search-results-header-filter-source-button-label--users": "utilisateurs",
  searchResultsCount_many: "{{ count }} résultats",
  searchResultsCount_one: "1 résultat",
  searchResultsCount_other: "{{ count }} résultats",
  "this content could not be displayed": "ce contenu n'a pas pu être affiché",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/PollVote": "{{ timestamp | timestampFormatter(format: MMM D [at] HH:mm) }}",
  "timestamp/PollVoteTooltip": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "unban-command-args": "[@nomdutilisateur]",
  "unban-command-description": "Débannir un utilisateur",
  "unmute-command-args": "[@nomdutilisateur]",
  "unmute-command-description": "Démuter un utilisateur",
  unreadMessagesSeparatorText_many: "{{count}} messages non lus",
  unreadMessagesSeparatorText_one: "1 message non lu",
  unreadMessagesSeparatorText_other: "{{count}} messages non lus",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} et {{ moreCount }} autres",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} et {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} et {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }} supplémentaires",
  "{{ memberCount }} members": "{{ memberCount }} membres",
  "{{ user }} has been muted": "{{ user }} a été mis en sourdine",
  "{{ user }} has been unmuted": "{{ user }} n'est plus en sourdine",
  "{{ user }} is typing...": "{{ user }} est en train d'écrire...",
  "{{ users }} and more are typing...": "{{ users }} et plus sont en train d'écrire...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} et {{ user }} sont en train d'écrire...",
  "{{ watcherCount }} online": "{{ watcherCount }} en ligne",
  "{{count}} unread_many": "{{count}} non lus",
  "{{count}} unread_one": "{{count}} non lu",
  "{{count}} unread_other": "{{count}} non lus",
  "{{count}} votes_many": "{{count}} votes",
  "{{count}} votes_one": "{{count}} vote",
  "{{count}} votes_other": "{{count}} votes",
  "🏙 Attachment...": "🏙 Pièce jointe...",
  "📊 {{createdBy}} created: {{ pollName}}": "📊 {{createdBy}} a créé : {{ pollName}}",
  "📊 {{votedBy}} voted: {{pollOptionText}}": "📊 {{votedBy}} a voté : {{pollOptionText}}"
};

// node_modules/stream-chat-react/dist/i18n/hi.json
var hi_default = {
  "Add a comment": "एक टिप्पणी जोड़ें",
  "Add an option": "एक विकल्प जोड़ें",
  "All results loaded": "सभी परिणाम लोड हो गए",
  "Allow access to camera": "कैमरा तक पहुँच दें",
  "Allow access to microphone": "माइक्रोफ़ोन तक पहुँच दें",
  "Allow comments": "टिप्पणियाँ की अनुमति दें",
  "Allow option suggestion": "विकल्प सुझाव की अनुमति दें",
  "An error has occurred during recording": "रेकॉर्डिंग के दौरान एक त्रुटि आ गई है",
  "An error has occurred during the recording processing": "रेकॉर्डिंग प्रोसेसिंग के दौरान एक त्रुटि आ गई है",
  Anonymous: "गुमनाम",
  "Anonymous poll": "गुमनाम मतदान",
  Archive: "आर्काइव",
  "Ask a question": "एक प्रश्न पूछें",
  "Attach files": "फाइल्स अटैच करे",
  Cancel: "रद्द करें",
  "Cannot seek in the recording": "रेकॉर्डिंग में खोज नहीं की जा सकती",
  "Channel Missing": "चैनल उपलब्ध नहीं है",
  Close: "बंद करे",
  "Close emoji picker": "इमोजी पिकर बंद करें",
  "Commands matching": "मेल खाती है",
  "Connection failure, reconnecting now...": "कनेक्शन विफल रहा, अब पुनः कनेक्ट हो रहा है ...",
  Create: "बनाएँ",
  "Create poll": "मतदान बनाएँ",
  Delete: "डिलीट",
  Delivered: "पहुंच गया",
  "Download attachment {{ name }}": "अनुलग्नक {{ name }} डाउनलोड करें",
  "Drag your files here": "अपनी फ़ाइलें यहाँ खींचें",
  "Drag your files here to add to your post": "अपनी फ़ाइलें यहाँ खींचें और अपने पोस्ट में जोड़ने के लिए",
  "Edit Message": "मैसेज में बदलाव करे",
  "Edit message request failed": "संदेश संपादित करने का अनुरोध विफल रहा",
  Edited: "संपादित",
  "Emoji matching": "इमोजी मिलान",
  "Empty message...": "खाली संदेश ...",
  End: "समाप्त",
  "End vote": "मत समाप्त करें",
  "Error adding flag": "ध्वज जोड़ने में त्रुटि",
  "Error connecting to chat, refresh the page to try again.": "चैट से कनेक्ट करने में त्रुटि, पेज को रिफ्रेश करें",
  "Error deleting message": "संदेश हटाने में त्रुटि",
  "Error fetching reactions": "प्रतिक्रियाएँ लोड करने में त्रुटि",
  "Error marking message unread": "संदेश को अपठित चिह्नित करने में त्रुटि",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "संदेश को अपठित मार्क करने में त्रुटि। सबसे नए 100 चैनल संदेश से पहले के सभी अपठित संदेशों को अपठित मार्क नहीं किया जा सकता है।",
  "Error muting a user ...": "यूजर को म्यूट करने का प्रयास फेल हुआ",
  "Error pinning message": "संदेश को पिन करने में त्रुटि",
  "Error removing message pin": "संदेश पिन निकालने में त्रुटि",
  "Error reproducing the recording": "रिकॉर्डिंग पुन: उत्पन्न करने में त्रुटि",
  "Error starting recording": "रेकॉर्डिंग शुरू करने में त्रुटि",
  "Error unmuting a user ...": "यूजर को अनम्यूट करने का प्रयास फेल हुआ",
  "Error uploading attachment": "अटैचमेंट अपलोड करते समय त्रुटि",
  "Error uploading file": "फ़ाइल अपलोड करने में त्रुटि",
  "Error uploading image": "छवि अपलोड करने में त्रुटि",
  "Error · Unsent": "फेल",
  "Error: {{ errorMessage }}": "फेल: {{ errorMessage }}",
  "Failed to jump to the first unread message": "पहले अपठित संदेश पर जाने में विफल",
  "Failed to mark channel as read": "चैनल को पढ़ा हुआ चिह्नित करने में विफल।",
  "Failed to play the recording": "रेकॉर्डिंग प्ले करने में विफल",
  File: "फ़ाइल",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "फ़ाइल बहुत बड़ी है: {{ size }}, अधिकतम अपलोड साइज़ {{ limit }} है",
  Flag: "फ्लैग करे",
  "Generating...": "बना रहा है...",
  "Latest Messages": "नवीनतम संदेश",
  "Load more": "और लोड करें",
  "Mark as unread": "अपठित चिह्नित करें",
  "Maximum number of votes (from 2 to 10)": "अधिकतम वोटों की संख्या (2 से 10)",
  Menu: "मेन्यू",
  "Message Failed · Click to try again": "मैसेज फ़ैल - पुनः कोशिश करें",
  "Message Failed · Unauthorized": "मैसेज फ़ैल - अनधिकृत",
  "Message deleted": "मैसेज हटा दिया गया",
  "Message has been successfully flagged": "मैसेज को फ्लैग कर दिया गया है",
  "Message pinned": "संदेश पिन किया गया",
  "Message was blocked by moderation policies": "संदेश को मॉडरेशन नीतियों द्वारा ब्लॉक कर दिया गया है",
  "Messages have been marked unread.": "संदेशों को अपठित चिह्नित किया गया है।",
  "Missing permissions to upload the attachment": "अटैचमेंट अपलोड करने के लिए अनुमतियां गायब",
  "Multiple answers": "कई उत्तर",
  Mute: "म्यूट करे",
  New: "नए",
  "New Messages!": "नए मैसेज!",
  "No chats here yet…": "यहां अभी तक कोई चैट नहीं...",
  "No results found": "कोई परिणाम नहीं मिला",
  "Nobody will be able to vote in this poll anymore.": "अब कोई भी इस मतदान में मतदान नहीं कर सकेगा।",
  "Nothing yet...": "कोई मैसेज नहीं है",
  Ok: "ठीक है",
  "Open emoji picker": "इमोजी पिकर खोलिये",
  "Option already exists": "विकल्प पहले से मौजूद है",
  Options: "विकल्प",
  "People matching": "मेल खाते लोग",
  Pin: "पिन",
  "Pinned by": "द्वारा पिन किया गया",
  Poll: "मतदान",
  "Poll comments": "मतदान टिप्पणियाँ",
  "Poll options": "मतदान विकल्प",
  "Poll results": "मतदान परिणाम",
  Question: "प्रश्न",
  Quote: "उद्धरण",
  "Recording format is not supported and cannot be reproduced": "रेकॉर्डिंग फ़ॉर्मेट समर्थित नहीं है और पुनः उत्पन्न नहीं किया जा सकता",
  Reply: "जवाब दे दो",
  "Reply to Message": "संदेश का जवाब दें",
  Search: "खोज",
  "Searching...": "खोज कर...",
  "See all options ({{count}})_one": "सभी विकल्प देखें ({{count}})",
  "See all options ({{count}})_other": "सभी विकल्प देखें ({{count}})",
  "Select one": "एक चुनें",
  "Select one or more": "एक या अधिक चुनें",
  "Select up to {{count}}_one": "अधिकतम {{count}} तक चुनें",
  "Select up to {{count}}_other": "अधिकतम {{count}} तक चुनें",
  Send: "भेजे",
  "Send Anyway": "वैसे भी भेजें",
  "Send message request failed": "संदेश भेजने का अनुरोध विफल रहा",
  "Sending...": "भेजा जा रहा है",
  "Show all": "सभी दिखाएँ",
  Shuffle: "मिश्रित करें",
  "Slow Mode ON": "स्लो मोड ऑन",
  "Some of the files will not be accepted": "कुछ फ़ाइलें स्वीकार नहीं की जाएंगी",
  "Start typing to search": "खोजने के लिए टाइप करना शुरू करें",
  Submit: "जमा करें",
  "Suggest an option": "एक विकल्प सुझाव दें",
  "Thinking...": "सोच रहा है...",
  "This message did not meet our content guidelines": "यह संदेश हमारे सामग्री दिशानिर्देशों के अनुरूप नहीं था",
  "This message was deleted...": "मैसेज हटा दिया गया",
  Thread: "रिप्लाई थ्रेड",
  "To start recording, allow the camera access in your browser": "रिकॉर्डिंग शुरू करने के लिए, अपने ब्राउज़र में कैमरा तक पहुँच दें",
  "To start recording, allow the microphone access in your browser": "रिकॉर्डिंग शुरू करने के लिए, अपने ब्राउज़र में माइक्रोफ़ोन तक पहुँच दें",
  "Type a number from 2 to 10": "2 से 10 तक का एक नंबर टाइप करें",
  "Type your message": "अपना मैसेज लिखे",
  Unarchive: "अनआर्काइव",
  Unmute: "अनम्यूट",
  Unpin: "अनपिन",
  "Unread messages": "अपठित संदेश",
  "Unsupported attachment": "असमर्थित अटैचमेंट",
  "Update your comment": "अपने टिप्पणी को अपडेट करें",
  'Upload type: "{{ type }}" is not allowed': 'अपलोड प्रकार: "{{ type }}" की अनुमति नहीं है',
  "User uploaded content": "उपयोगकर्ता अपलोड की गई सामग्री",
  "View results": "परिणाम देखें",
  "View {{count}} comments_one": "देखें {{count}} टिप्पणी",
  "View {{count}} comments_other": "देखें {{count}} टिप्पणियाँ",
  "Voice message": "आवाज संदेश",
  "Vote ended": "मतदान समाप्त",
  "Wait until all attachments have uploaded": "सभी अटैचमेंट अपलोड होने तक प्रतीक्षा करें",
  You: "आप",
  "You have no channels currently": "आपके पास कोई चैनल नहीं है",
  "You've reached the maximum number of files": "आप अधिकतम फ़ाइलों तक पहुँच गए हैं",
  "aria/Attachment": "अनुलग्नक",
  "aria/Cancel Reply": "उत्तर रद्द करें",
  "aria/Cancel upload": "अपलोड रद्द करें",
  "aria/Channel list": "चैनल सूची",
  "aria/Channel search results": "चैनल खोज परिणाम",
  "aria/Close thread": "थ्रेड बंद करें",
  "aria/Download attachment": "अनुलग्नक डाउनलोड करें",
  "aria/Emoji picker": "इमोजी चुनने वाला",
  "aria/File input": "फ़ाइल इनपुट",
  "aria/File upload": "फ़ाइल अपलोड",
  "aria/Image input": "छवि इनपुट",
  "aria/Load More Channels": "और चैनल लोड करें",
  "aria/Menu": "मेन्यू",
  "aria/Message Options": "संदेश विकल्प",
  "aria/Open Attachment Selector": "अटैचमेंट चयनकर्ता खोलें",
  "aria/Open Message Actions Menu": "संदेश क्रिया मेन्यू खोलें",
  "aria/Open Reaction Selector": "प्रतिक्रिया चयनकर्ता खोलें",
  "aria/Open Thread": "थ्रेड खोलें",
  "aria/Reaction list": "प्रतिक्रिया सूची",
  "aria/Remove attachment": "संलग्नक हटाएं",
  "aria/Retry upload": "अपलोड पुनः प्रयास करें",
  "aria/Search results": "खोज परिणाम",
  "aria/Search results header filter button": "खोज परिणाम हेडर फ़िल्टर बटन",
  "aria/Send": "भेजें",
  "aria/Stop AI Generation": "एआई जनरेशन रोकें",
  "ban-command-args": "[@उपयोगकर्तनाम] [पाठ]",
  "ban-command-description": "एक उपयोगकर्ता को प्रतिषेधित करें",
  "giphy-command-args": "[पाठ]",
  "giphy-command-description": "चैनल पर एक क्रॉफिल जीआइएफ पोस्ट करें",
  live: "लाइव",
  "mute-command-args": "[@उपयोगकर्तनाम]",
  "mute-command-description": "एक उपयोगकर्ता को म्यूट करें",
  replyCount_one: "1 रिप्लाई",
  replyCount_other: "{{ count }} रिप्लाई",
  "search-results-header-filter-source-button-label--channels": "चैनल्स",
  "search-results-header-filter-source-button-label--messages": "संदेश",
  "search-results-header-filter-source-button-label--users": "उपयोगकर्ता",
  searchResultsCount_one: "1 परिणाम",
  searchResultsCount_other: "{{ count }} परिणाम",
  "this content could not be displayed": "यह कॉन्टेंट लोड नहीं हो पाया",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/PollVote": "{{ timestamp | timestampFormatter(format: MMM D [at] HH:mm) }}",
  "timestamp/PollVoteTooltip": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "unban-command-args": "[@उपयोगकर्तनाम]",
  "unban-command-description": "एक उपयोगकर्ता को प्रतिषेध से मुक्त करें",
  "unmute-command-args": "[@उपयोगकर्तनाम]",
  "unmute-command-description": "एक उपयोगकर्ता को अनम्यूट करें",
  unreadMessagesSeparatorText_one: "1 अपठित संदेश",
  unreadMessagesSeparatorText_other: "{{count}} अपठित संदेश",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} और {{ moreCount }} और",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} और {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} और {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }} और",
  "{{ memberCount }} members": "{{ memberCount }} मेंबर्स",
  "{{ user }} has been muted": "{{ user }} को म्यूट कर दिया गया है",
  "{{ user }} has been unmuted": "{{ user }} को अनम्यूट कर दिया गया है",
  "{{ user }} is typing...": "{{ user }} टाइप कर रहा है...",
  "{{ users }} and more are typing...": "{{ users }} और अधिक टाइप कर रहे हैं...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} और {{ user }} टाइप कर रहे हैं...",
  "{{ watcherCount }} online": "{{ watcherCount }} ऑनलाइन",
  "{{count}} unread_one": "{{count}} अपठित",
  "{{count}} unread_other": "{{count}} अपठित",
  "{{count}} votes_one": "{{count}} वोट",
  "{{count}} votes_other": "{{count}} वोट",
  "🏙 Attachment...": "🏙 अटैचमेंट",
  "📊 {{createdBy}} created: {{ pollName}}": "📊 {{createdBy}} ने बनाया: {{ pollName}}",
  "📊 {{votedBy}} voted: {{pollOptionText}}": "📊 {{votedBy}} ने वोट दिया: {{pollOptionText}}"
};

// node_modules/stream-chat-react/dist/i18n/it.json
var it_default = {
  "Add a comment": "Aggiungi un commento",
  "Add an option": "Aggiungi un'opzione",
  "All results loaded": "Tutti i risultati caricati",
  "Allow access to camera": "Consenti l'accesso alla fotocamera",
  "Allow access to microphone": "Consenti l'accesso al microfono",
  "Allow comments": "Consenti i commenti",
  "Allow option suggestion": "Consenti il suggerimento di opzioni",
  "An error has occurred during recording": "Si è verificato un errore durante la registrazione",
  "An error has occurred during the recording processing": "Si è verificato un errore durante l'elaborazione della registrazione",
  Anonymous: "Anonimo",
  "Anonymous poll": "Sondaggio anonimo",
  Archive: "Archivia",
  "Ask a question": "Fai una domanda",
  "Attach files": "Allega file",
  Cancel: "Annulla",
  "Cannot seek in the recording": "Impossibile cercare nella registrazione",
  "Channel Missing": "Il canale non esiste",
  Close: "Chiudi",
  "Close emoji picker": "Chiudi il selettore di emoji",
  "Commands matching": "Comandi corrispondenti",
  "Connection failure, reconnecting now...": "Errore di connessione, riconnessione in corso...",
  Create: "Crea",
  "Create poll": "Crea sondaggio",
  Delete: "Elimina",
  Delivered: "Consegnato",
  "Download attachment {{ name }}": "Scarica l'allegato {{ name }}",
  "Drag your files here": "Trascina i tuoi file qui",
  "Drag your files here to add to your post": "Trascina i tuoi file qui per aggiungerli al tuo post",
  "Edit Message": "Modifica messaggio",
  "Edit message request failed": "Richiesta di modifica del messaggio non riuscita",
  Edited: "Modificato",
  "Emoji matching": "Abbinamento emoji",
  "Empty message...": "Messaggio vuoto...",
  End: "Fine",
  "End vote": "Termina il voto",
  "Error adding flag": "Errore durante l'aggiunta del flag",
  "Error connecting to chat, refresh the page to try again.": "Errore di connessione alla chat, aggiorna la pagina per riprovare.",
  "Error deleting message": "Errore durante l'eliminazione del messaggio",
  "Error fetching reactions": "Errore nel caricamento delle reazioni",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "Errore durante la marcatura del messaggio come non letto. Impossibile marcare messaggi non letti più vecchi dei più recenti 100 messaggi del canale.",
  "Error muting a user ...": "Errore nel silenziare un utente ...",
  "Error pinning message": "Errore durante il blocco del messaggio",
  "Error removing message pin": "Errore durante la rimozione del PIN del messaggio",
  "Error reproducing the recording": "Errore durante la riproduzione della registrazione",
  "Error starting recording": "Errore durante l'avvio della registrazione",
  "Error unmuting a user ...": "Errore nel riattivare un utente ...",
  "Error uploading attachment": "Errore durante il caricamento dell'allegato",
  "Error uploading file": "Errore durante il caricamento del file",
  "Error uploading image": "Errore durante il caricamento dell'immagine",
  "Error · Unsent": "Errore · Non inviato",
  "Error: {{ errorMessage }}": "Errore: {{ errorMessage }}",
  "Failed to jump to the first unread message": "Impossibile passare al primo messaggio non letto",
  "Failed to mark channel as read": "Impossibile contrassegnare il canale come letto",
  "Failed to play the recording": "Impossibile riprodurre la registrazione",
  File: "File",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "Il file è troppo grande: {{ size }}, la dimensione massima di caricamento è {{ limit }}",
  Flag: "Segnala",
  "Generating...": "Generando...",
  "Latest Messages": "Ultimi messaggi",
  "Load more": "Carica di più",
  "Mark as unread": "Contrassegna come non letto",
  "Maximum number of votes (from 2 to 10)": "Numero massimo di voti (da 2 a 10)",
  Menu: "Menù",
  "Message Failed · Click to try again": "Invio messaggio fallito · Clicca per riprovare",
  "Message Failed · Unauthorized": "Invio messaggio fallito · Non autorizzato",
  "Message deleted": "Messaggio cancellato",
  "Message has been successfully flagged": "Il messaggio è stato segnalato con successo",
  "Message pinned": "Messaggio bloccato",
  "Message was blocked by moderation policies": "Il messaggio è stato bloccato dalle politiche di moderazione",
  "Messages have been marked unread.": "I messaggi sono stati contrassegnati come non letti.",
  "Missing permissions to upload the attachment": "Autorizzazioni mancanti per caricare l'allegato",
  "Multiple answers": "Risposte multiple",
  Mute: "Silenzia",
  New: "Nuovo",
  "New Messages!": "Nuovi messaggi!",
  "No chats here yet…": "Non ci sono ancora messaggi qui...",
  "No results found": "Nessun risultato trovato",
  "Nobody will be able to vote in this poll anymore.": "Nessuno potrà più votare in questo sondaggio.",
  "Nothing yet...": "Ancora niente...",
  Ok: "Ok",
  "Open emoji picker": "Apri il selettore di emoji",
  "Option already exists": "L'opzione esiste già",
  Options: "Opzioni",
  "People matching": "Persone che corrispondono",
  Pin: "Pin",
  "Pinned by": "Appuntato da",
  Poll: "Sondaggio",
  "Poll comments": "Commenti del sondaggio",
  "Poll options": "Opzioni del sondaggio",
  "Poll results": "Risultati del sondaggio",
  Question: "Domanda",
  Quote: "Citazione",
  "Recording format is not supported and cannot be reproduced": "Il formato di registrazione non è supportato e non può essere riprodotto",
  Reply: "Rispondi",
  "Reply to Message": "Rispondi al messaggio",
  Search: "Cerca",
  "Searching...": "Ricerca in corso...",
  "See all options ({{count}})_many": "Vedi tutte le opzioni ({{count}})",
  "See all options ({{count}})_one": "Vedi tutte le opzioni ({{count}})",
  "See all options ({{count}})_other": "Vedi tutte le opzioni ({{count}})",
  "Select one": "Seleziona uno",
  "Select one or more": "Seleziona uno o più",
  "Select up to {{count}}_many": "Seleziona fino a {{count}}",
  "Select up to {{count}}_one": "Seleziona fino a {{count}}",
  "Select up to {{count}}_other": "Seleziona fino a {{count}}",
  Send: "Invia",
  "Send Anyway": "Invia comunque",
  "Send message request failed": "Richiesta di invio messaggio non riuscita",
  "Sending...": "Invio in corso...",
  "Show all": "Mostra tutto",
  Shuffle: "Mescolare",
  "Slow Mode ON": "Modalità lenta attivata",
  "Some of the files will not be accepted": "Alcuni dei file non saranno accettati",
  "Start typing to search": "Inizia a digitare per cercare",
  Submit: "Invia",
  "Suggest an option": "Suggerisci un'opzione",
  "Thinking...": "Pensando...",
  "This message did not meet our content guidelines": "Questo messaggio non soddisfa le nostre linee guida sui contenuti",
  "This message was deleted...": "Questo messaggio è stato cancellato...",
  Thread: "Discussione",
  "To start recording, allow the camera access in your browser": "Per iniziare a registrare, consenti l'accesso alla fotocamera nel tuo browser",
  "To start recording, allow the microphone access in your browser": "Per iniziare a registrare, consenti l'accesso al microfono nel tuo browser",
  "Type a number from 2 to 10": "Digita un numero da 2 a 10",
  "Type your message": "Scrivi il tuo messaggio",
  Unarchive: "Ripristina",
  Unmute: "Riattiva il notifiche",
  Unpin: "Sblocca",
  "Unread messages": "Messaggi non letti",
  "Unsupported attachment": "Allegato non supportato",
  "Update your comment": "Aggiorna il tuo commento",
  'Upload type: "{{ type }}" is not allowed': 'Tipo di caricamento: "{{ type }}" non è consentito',
  "User uploaded content": "Contenuto caricato dall'utente",
  "View results": "Vedi risultati",
  "View {{count}} comments_many": "Visualizza {{count}} commenti",
  "View {{count}} comments_one": "Visualizza {{count}} commento",
  "View {{count}} comments_other": "Visualizza {{count}} commenti",
  "Voice message": "Messaggio vocale",
  "Vote ended": "Voto terminato",
  "Wait until all attachments have uploaded": "Attendi il caricamento di tutti gli allegati",
  You: "Tu",
  "You have no channels currently": "Al momento non sono presenti canali",
  "You've reached the maximum number of files": "Hai raggiunto il numero massimo di file",
  "aria/Attachment": "Allegato",
  "aria/Cancel Reply": "Annulla risposta",
  "aria/Cancel upload": "Annulla caricamento",
  "aria/Channel list": "Elenco dei canali",
  "aria/Channel search results": "Risultati della ricerca dei canali",
  "aria/Close thread": "Chiudi discussione",
  "aria/Download attachment": "Scarica l'allegato",
  "aria/Emoji picker": "Selettore di emoji",
  "aria/File input": "Input di file",
  "aria/File upload": "Caricamento di file",
  "aria/Image input": "Input di immagine",
  "aria/Load More Channels": "Carica altri canali",
  "aria/Menu": "Menu",
  "aria/Message Options": "Opzioni di messaggio",
  "aria/Open Attachment Selector": "Apri selettore allegati",
  "aria/Open Message Actions Menu": "Apri il menu delle azioni di messaggio",
  "aria/Open Reaction Selector": "Apri il selettore di reazione",
  "aria/Open Thread": "Apri discussione",
  "aria/Reaction list": "Elenco delle reazioni",
  "aria/Remove attachment": "Rimuovi allegato",
  "aria/Retry upload": "Riprova caricamento",
  "aria/Search results": "Risultati della ricerca",
  "aria/Search results header filter button": "Pulsante filtro intestazione risultati ricerca",
  "aria/Send": "Invia",
  "aria/Stop AI Generation": "Interrompi generazione IA",
  "ban-command-args": "[@nomeutente] [testo]",
  "ban-command-description": "Vietare un utente",
  "giphy-command-args": "[testo]",
  "giphy-command-description": "Pubblica un gif casuale sul canale",
  live: "live",
  "mute-command-args": "[@nomeutente]",
  "mute-command-description": "Silenzia un utente",
  replyCount_many: "{{ count }} risposte",
  replyCount_one: "Una risposta",
  replyCount_other: "{{ count }} risposte",
  "search-results-header-filter-source-button-label--channels": "canali",
  "search-results-header-filter-source-button-label--messages": "messaggi",
  "search-results-header-filter-source-button-label--users": "utenti",
  searchResultsCount_many: "{{ count }} risultati",
  searchResultsCount_one: "1 risultato",
  searchResultsCount_other: "{{ count }} risultati",
  "this content could not be displayed": "questo contenuto non può essere mostrato",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/PollVote": "{{ timestamp | timestampFormatter(format: MMM D [at] HH:mm) }}",
  "timestamp/PollVoteTooltip": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "unban-command-args": "[@nomeutente]",
  "unban-command-description": "Togliere il divieto a un utente",
  "unmute-command-args": "[@nomeutente]",
  "unmute-command-description": "Togliere il silenzio a un utente",
  unreadMessagesSeparatorText_many: "{{count}} messaggi non letti",
  unreadMessagesSeparatorText_one: "1 messaggio non letto",
  unreadMessagesSeparatorText_other: "{{count}} messaggi non letti",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} e altri {{ moreCount }}",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} e {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} e {{ secondUser }}",
  "{{ imageCount }} more": "+ {{ imageCount }}",
  "{{ memberCount }} members": "{{ memberCount }} membri",
  "{{ user }} has been muted": "{{ user }} è stato silenziato",
  "{{ user }} has been unmuted": "Notifiche riattivate per {{ user }}",
  "{{ user }} is typing...": "{{ user }} sta digitando...",
  "{{ users }} and more are typing...": "{{ users }} e altri stanno digitando...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} e {{ user }} stanno digitando...",
  "{{ watcherCount }} online": "{{ watcherCount }} online",
  "{{count}} unread_many": "{{count}} non letti",
  "{{count}} unread_one": "{{count}} non letto",
  "{{count}} unread_other": "{{count}} non letti",
  "{{count}} votes_many": "{{count}} voti",
  "{{count}} votes_one": "{{count}} voto",
  "{{count}} votes_other": "{{count}} voti",
  "🏙 Attachment...": "🏙 Allegato...",
  "📊 {{createdBy}} created: {{ pollName}}": "📊 {{createdBy}} ha creato: {{ pollName}}",
  "📊 {{votedBy}} voted: {{pollOptionText}}": "📊 {{votedBy}} ha votato: {{pollOptionText}}"
};

// node_modules/stream-chat-react/dist/i18n/ja.json
var ja_default = {
  "Add a comment": "コメントを追加",
  "Add an option": "オプションを追加",
  "All results loaded": "すべての結果が読み込まれました",
  "Allow access to camera": "カメラへのアクセスを許可する",
  "Allow access to microphone": "マイクロフォンへのアクセスを許可する",
  "Allow comments": "コメントを許可",
  "Allow option suggestion": "オプションの提案を許可",
  "An error has occurred during recording": "録音中にエラーが発生しました",
  "An error has occurred during the recording processing": "録音処理中にエラーが発生しました",
  Anonymous: "匿名",
  "Anonymous poll": "匿名投票",
  Archive: "アーカイブ",
  "Ask a question": "質問する",
  "Attach files": "ファイルを添付する",
  Cancel: "キャンセル",
  "Cannot seek in the recording": "録音中にシークできません",
  "Channel Missing": "チャネルがありません",
  Close: "閉める",
  "Close emoji picker": "絵文字ピッカーを閉める",
  "Commands matching": "一致するコマンド",
  "Connection failure, reconnecting now...": "接続が失敗しました。再接続中...",
  Create: "作成",
  "Create poll": "投票を作成",
  Delete: "消去",
  Delivered: "配信しました",
  "Download attachment {{ name }}": "添付ファイル {{ name }} をダウンロード",
  "Drag your files here": "ここにファイルをドラッグ",
  "Drag your files here to add to your post": "投稿に追加するためにここにファイルをドラッグ",
  "Edit Message": "メッセージを編集",
  "Edit message request failed": "メッセージの編集要求が失敗しました",
  Edited: "編集済み",
  "Emoji matching": "絵文字マッチング",
  "Empty message...": "空のメッセージ...",
  End: "終了",
  "End vote": "投票を終了",
  "Error adding flag": "フラグを追加のエラーが発生しました",
  "Error connecting to chat, refresh the page to try again.": "チャットへの接続ができませんでした。ページを更新してください。",
  "Error deleting message": "メッセージを削除するエラーが発生しました",
  "Error fetching reactions": "反応の読み込みエラー",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "メッセージを未読にする際にエラーが発生しました。最新の100件のチャンネルメッセージより古い未読メッセージはマークできません。",
  "Error muting a user ...": "ユーザーを無音するエラーが発生しました...",
  "Error pinning message": "メッセージをピンのエラーが発生しました",
  "Error removing message pin": "メッセージのピンを削除のエラーが発生しました",
  "Error reproducing the recording": "録音の再生中にエラーが発生しました",
  "Error starting recording": "録音の開始時にエラーが発生しました",
  "Error unmuting a user ...": "ユーザーの無音解除のエラーが発生しました...",
  "Error uploading attachment": "添付ファイルのアップロード中にエラーが発生しました",
  "Error uploading file": "ファイルをアップロードのエラーが発生しました",
  "Error uploading image": "画像をアップロードのエラーが発生しました",
  "Error · Unsent": "エラー・未送信",
  "Error: {{ errorMessage }}": "エラー: {{ errorMessage }}",
  "Failed to jump to the first unread message": "最初の未読メッセージにジャンプできませんでした",
  "Failed to mark channel as read": "チャンネルを既読にすることができませんでした",
  "Failed to play the recording": "録音の再生に失敗しました",
  File: "ファイル",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "ファイルが大きすぎます：{{ size }}、最大アップロードサイズは{{ limit }}です",
  Flag: "フラグ",
  "Generating...": "生成中...",
  "Latest Messages": "最新のメッセージ",
  "Load more": "もっと読み込む",
  "Mark as unread": "未読としてマーク",
  "Maximum number of votes (from 2 to 10)": "最大投票数（2から10まで）",
  Menu: "メニュー",
  "Message Failed · Click to try again": "メッセージが失敗しました · クリックして再試行してください",
  "Message Failed · Unauthorized": "メッセージが失敗しました · 許可されていません",
  "Message deleted": "メッセージが削除されました",
  "Message has been successfully flagged": "メッセージに正常にフラグが付けられました",
  "Message pinned": "メッセージにピンが付けられました",
  "Message was blocked by moderation policies": "メッセージはモデレーションポリシーによってブロックされました",
  "Messages have been marked unread.": "メッセージは未読としてマークされました。",
  "Missing permissions to upload the attachment": "添付ファイルをアップロードするための許可がありません",
  "Multiple answers": "複数回答",
  Mute: "無音",
  New: "新しい",
  "New Messages!": "新しいメッセージ!",
  "No chats here yet…": "ここにはまだチャットはありません…",
  "No results found": "結果が見つかりません",
  "Nobody will be able to vote in this poll anymore.": "この投票では、誰も投票できなくなります。",
  "Nothing yet...": "まだ何もありません...",
  Ok: "OK",
  "Open emoji picker": "絵文字ピッカーを開く",
  "Option already exists": "オプションは既に存在します",
  Options: "オプション",
  "People matching": "一致する人",
  Pin: "ピン",
  "Pinned by": "ピンした方",
  Poll: "投票",
  "Poll comments": "投票コメント",
  "Poll options": "投票オプション",
  "Poll results": "投票結果",
  Question: "質問",
  Quote: "引用",
  "Recording format is not supported and cannot be reproduced": "録音形式はサポートされておらず、再生できません",
  Reply: "返事",
  "Reply to Message": "メッセージに返信",
  Search: "探す",
  "Searching...": "検索中...",
  "See all options ({{count}})_other": "すべてのオプションを見る ({{count}})",
  "Select one": "1つ選択",
  "Select one or more": "1つ以上選択",
  "Select up to {{count}}_other": "最大{{count}}まで選択",
  Send: "送信",
  "Send Anyway": "とにかく送信する",
  "Send message request failed": "メッセージ送信リクエストが失敗しました",
  "Sending...": "送信中...",
  "Show all": "すべて表示",
  Shuffle: "シャッフル",
  "Slow Mode ON": "スローモードオン",
  "Some of the files will not be accepted": "一部のファイルは受け付けられません",
  "Start typing to search": "検索するには入力を開始してください",
  Submit: "送信",
  "Suggest an option": "オプションを提案",
  "Thinking...": "考え中...",
  "This message did not meet our content guidelines": "このメッセージはコンテンツガイドラインに適合していません",
  "This message was deleted...": "このメッセージは削除されました...",
  Thread: "スレッド",
  "To start recording, allow the camera access in your browser": "録音を開始するには、ブラウザーでカメラへのアクセスを許可してください",
  "To start recording, allow the microphone access in your browser": "録音を開始するには、ブラウザーでマイクロフォンへのアクセスを許可してください",
  "Type a number from 2 to 10": "2から10までの数字を入力してください",
  "Type your message": "メッセージを入力してください",
  Unarchive: "アーカイブ解除",
  Unmute: "無音を解除する",
  Unpin: "ピンを解除する",
  "Unread messages": "未読メッセージ",
  "Unsupported attachment": "サポートされていない添付ファイル",
  "Update your comment": "コメントを更新",
  'Upload type: "{{ type }}" is not allowed': 'アップロードタイプ："{{ type }}"は許可されていません',
  "User uploaded content": "ユーザーがアップロードしたコンテンツ",
  "View results": "結果を表示",
  "View {{count}} comments_other": "{{count}} コメントを表示",
  "Voice message": "ボイスメッセージ",
  "Vote ended": "投票が終了しました",
  "Wait until all attachments have uploaded": "すべての添付ファイルがアップロードされるまでお待ちください",
  You: "あなた",
  "You have no channels currently": "現在チャンネルはありません",
  "You've reached the maximum number of files": "ファイルの最大数に達しました",
  "aria/Attachment": "添付ファイル",
  "aria/Cancel Reply": "返信をキャンセル",
  "aria/Cancel upload": "アップロードをキャンセル",
  "aria/Channel list": "チャンネル一覧",
  "aria/Channel search results": "チャンネル検索結果",
  "aria/Close thread": "スレッドを閉じる",
  "aria/Download attachment": "添付ファイルをダウンロード",
  "aria/Emoji picker": "絵文字ピッカー",
  "aria/File input": "ファイル入力",
  "aria/File upload": "ファイルアップロード",
  "aria/Image input": "画像入力",
  "aria/Load More Channels": "さらにチャンネルを読み込む",
  "aria/Menu": "メニュー",
  "aria/Message Options": "メッセージオプション",
  "aria/Open Attachment Selector": "添付ファイル選択を開く",
  "aria/Open Message Actions Menu": "メッセージアクションメニューを開く",
  "aria/Open Reaction Selector": "リアクションセレクターを開く",
  "aria/Open Thread": "スレッドを開く",
  "aria/Reaction list": "リアクション一覧",
  "aria/Remove attachment": "添付ファイルを削除",
  "aria/Retry upload": "アップロードを再試行",
  "aria/Search results": "検索結果",
  "aria/Search results header filter button": "検索結果ヘッダーフィルターボタン",
  "aria/Send": "送信",
  "aria/Stop AI Generation": "AI生成を停止",
  "ban-command-args": "[@ユーザ名] [テキスト]",
  "ban-command-description": "ユーザーを禁止する",
  "giphy-command-args": "[テキスト]",
  "giphy-command-description": "チャンネルにランダムなGIFを投稿する",
  live: "ライブ",
  "mute-command-args": "[@ユーザ名]",
  "mute-command-description": "ユーザーをミュートする",
  replyCount_one: "1件の返信",
  replyCount_other: "{{ count }} 返信",
  "search-results-header-filter-source-button-label--channels": "チャンネル",
  "search-results-header-filter-source-button-label--messages": "メッセージ",
  "search-results-header-filter-source-button-label--users": "ユーザー",
  searchResultsCount_one: "1件の結果",
  searchResultsCount_other: "{{ count }}件の結果",
  "this content could not be displayed": "このコンテンツは表示できませんでした",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/PollVote": "{{ timestamp | timestampFormatter(format: MMM D [at] HH:mm) }}",
  "timestamp/PollVoteTooltip": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "unban-command-args": "[@ユーザ名]",
  "unban-command-description": "ユーザーの禁止を解除する",
  "unmute-command-args": "[@ユーザ名]",
  "unmute-command-description": "ユーザーのミュートを解除する",
  unreadMessagesSeparatorText_other: "未読メッセージ {{count}} 件",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} と {{ moreCount }} 他人",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} と {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} と {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }} イメージ",
  "{{ memberCount }} members": "{{ memberCount }} メンバー",
  "{{ user }} has been muted": "{{ user }} 無音されています",
  "{{ user }} has been unmuted": "{{ user }} 無音されていません",
  "{{ user }} is typing...": "{{ user }} が入力中...",
  "{{ users }} and more are typing...": "{{ users }} とその他が入力中...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} と {{ user }} が入力中...",
  "{{ watcherCount }} online": "{{ watcherCount }} オンライン",
  "{{count}} unread_other": "{{count}} 未読",
  "{{count}} votes_other": "{{count}} 票",
  "🏙 Attachment...": "🏙 アタッチメント...",
  "📊 {{createdBy}} created: {{ pollName}}": "📊 {{createdBy}} が作成: {{ pollName}}",
  "📊 {{votedBy}} voted: {{pollOptionText}}": "📊 {{votedBy}} が投票: {{pollOptionText}}"
};

// node_modules/stream-chat-react/dist/i18n/ko.json
var ko_default = {
  "Add a comment": "댓글 추가",
  "Add an option": "옵션 추가",
  "All results loaded": "모든 결과가 로드되었습니다",
  "Allow access to camera": "카메라에 대한 액세스 허용",
  "Allow access to microphone": "마이크로폰에 대한 액세스 허용",
  "Allow comments": "댓글 허용",
  "Allow option suggestion": "옵션 제안 허용",
  "An error has occurred during recording": "녹음 중 오류가 발생했습니다",
  "An error has occurred during the recording processing": "녹음 처리 중 오류가 발생했습니다",
  Anonymous: "익명",
  "Anonymous poll": "익명 투표",
  Archive: "아카이브",
  "Ask a question": "질문하기",
  "Attach files": "파일 첨부",
  Cancel: "취소",
  "Cannot seek in the recording": "녹음에서 찾을 수 없습니다",
  "Channel Missing": "채널 누락",
  Close: "닫기",
  "Close emoji picker": "이모티콘 선택기 닫기",
  "Commands matching": "일치하는 명령",
  "Connection failure, reconnecting now...": "연결 실패, 지금 다시 연결 중...",
  Create: "생성",
  "Create poll": "투표 생성",
  Delete: "삭제",
  Delivered: "배달됨",
  "Download attachment {{ name }}": "첨부 파일 {{ name }} 다운로드",
  "Drag your files here": "여기로 파일을 끌어다 놓으세요",
  "Drag your files here to add to your post": "게시물에 추가하려면 파일을 여기로 끌어다 놓으세요",
  "Edit Message": "메시지 수정",
  "Edit message request failed": "메시지 수정 요청 실패",
  Edited: "편집됨",
  "Emoji matching": "이모티콘 매칭",
  "Empty message...": "빈 메시지...",
  End: "종료",
  "End vote": "투표 종료",
  "Error adding flag": "플래그를 추가하는 동안 오류가 발생했습니다.",
  "Error connecting to chat, refresh the page to try again.": "채팅에 연결하는 동안 오류가 발생했습니다. 페이지를 새로고침하여 다시 시도하세요.",
  "Error deleting message": "메시지를 삭제하는 중에 오류가 발생했습니다.",
  "Error fetching reactions": "반응 로딩 오류.",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "메시지를 읽지 않음으로 표시하는 중 오류가 발생했습니다. 가장 최근 100개의 채널 메시지보다 오래된 읽지 않은 메시지는 표시할 수 없습니다.",
  "Error muting a user ...": "사용자를 음소거하는 중에 오류가 발생했습니다...",
  "Error pinning message": "메시지를 핀하는 중에 오류가 발생했습니다.",
  "Error removing message pin": "메시지 핀을 제거하는 중에 오류가 발생했습니다.",
  "Error reproducing the recording": "녹음 재생 중 오류 발생",
  "Error starting recording": "녹음 시작 중 오류가 발생했습니다",
  "Error unmuting a user ...": "사용자 음소거 해제 중 오류 발생...",
  "Error uploading attachment": "첨부 파일 업로드 중 오류가 발생했습니다",
  "Error uploading file": "파일 업로드 오류",
  "Error uploading image": "이미지를 업로드하는 동안 오류가 발생했습니다.",
  "Error · Unsent": "오류 · 전송되지 않음",
  "Error: {{ errorMessage }}": "오류: {{ errorMessage }}",
  "Failed to jump to the first unread message": "첫 번째 읽지 않은 메시지로 이동하지 못했습니다",
  "Failed to mark channel as read": "채널을 읽음으로 표시하는 데 실패했습니다",
  "Failed to play the recording": "녹음을 재생하지 못했습니다",
  File: "파일",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "파일이 너무 큽니다: {{ size }}, 최대 업로드 크기는 {{ limit }}입니다",
  Flag: "플래그",
  "Generating...": "생성 중...",
  "Latest Messages": "최신 메시지",
  "Load more": "더 불러오기",
  "Mark as unread": "읽지 않음으로 표시",
  "Maximum number of votes (from 2 to 10)": "최대 투표 수 (2에서 10까지)",
  Menu: "메뉴",
  "Message Failed · Click to try again": "메시지 실패 · 다시 시도하려면 클릭하세요.",
  "Message Failed · Unauthorized": "메시지 실패 · 승인되지 않음",
  "Message deleted": "메시지가 삭제되었습니다.",
  "Message has been successfully flagged": "메시지에 플래그가 지정되었습니다.",
  "Message pinned": "메시지 핀했습니다",
  "Message was blocked by moderation policies": "메시지가 관리 정책에 의해 차단되었습니다.",
  "Messages have been marked unread.": "메시지가 읽지 않음으로 표시되었습니다.",
  "Missing permissions to upload the attachment": "첨부 파일을 업로드하려면 권한이 필요합니다",
  "Multiple answers": "복수 응답",
  Mute: "무음",
  New: "새로운",
  "New Messages!": "새 메시지!",
  "No chats here yet…": "아직 채팅이 없습니다...",
  "No results found": "검색 결과가 없습니다",
  "Nobody will be able to vote in this poll anymore.": "이 투표에 더 이상 아무도 투표할 수 없습니다.",
  "Nothing yet...": "아직 아무것도...",
  Ok: "확인",
  "Open emoji picker": "이모티콘 선택기 열기",
  "Option already exists": "옵션이 이미 존재합니다",
  Options: "옵션",
  "People matching": "일치하는 사람",
  Pin: "핀",
  "Pinned by": "핀했던 분:",
  Poll: "투표",
  "Poll comments": "투표 댓글",
  "Poll options": "투표 옵션",
  "Poll results": "투표 결과",
  Question: "질문",
  Quote: "인용",
  "Recording format is not supported and cannot be reproduced": "녹음 형식이 지원되지 않으므로 재생할 수 없습니다",
  Reply: "답장",
  "Reply to Message": "메시지에 답장",
  Search: "찾다",
  "Searching...": "수색...",
  "See all options ({{count}})_other": "모든 옵션 보기 ({{count}})",
  "Select one": "하나 선택",
  "Select one or more": "하나 이상 선택",
  "Select up to {{count}}_other": "{{count}}개까지 선택",
  Send: "보내다",
  "Send Anyway": "어쨌든 보내기",
  "Send message request failed": "메시지 보내기 요청 실패",
  "Sending...": "배상중...",
  "Show all": "모두 보기",
  Shuffle: "셔플",
  "Slow Mode ON": "슬로우 모드 켜짐",
  "Some of the files will not be accepted": "일부 파일은 허용되지 않을 수 있습니다",
  "Start typing to search": "검색하려면 입력을 시작하세요",
  Submit: "제출",
  "Suggest an option": "옵션 제안",
  "Thinking...": "생각 중...",
  "This message did not meet our content guidelines": "이 메시지는 콘텐츠 가이드라인을 충족하지 않습니다.",
  "This message was deleted...": "이 메시지는 삭제되었습니다...",
  Thread: "스레드",
  "To start recording, allow the camera access in your browser": "브라우저에서 카메라 액세스를 허용하여 녹음을 시작합니다",
  "To start recording, allow the microphone access in your browser": "브라우저에서 마이크로폰 액세스를 허용하여 녹음을 시작합니다",
  "Type a number from 2 to 10": "2에서 10 사이의 숫자를 입력하세요",
  "Type your message": "메시지 입력",
  Unarchive: "아카이브 해제",
  Unmute: "음소거 해제",
  Unpin: "핀 해제",
  "Unread messages": "읽지 않은 메시지",
  "Unsupported attachment": "지원되지 않는 첨부 파일",
  "Update your comment": "댓글 업데이트",
  'Upload type: "{{ type }}" is not allowed': '업로드 유형: "{{ type }}"은(는) 허용되지 않습니다.',
  "User uploaded content": "사용자 업로드 콘텐츠",
  "View results": "결과 보기",
  "View {{count}} comments_other": "{{count}}개의 댓글 보기",
  "Voice message": "음성 메시지",
  "Vote ended": "투표 종료",
  "Wait until all attachments have uploaded": "모든 첨부 파일이 업로드될 때까지 기다립니다.",
  You: "당신",
  "You have no channels currently": "현재 채널이 없습니다.",
  "You've reached the maximum number of files": "최대 파일 수에 도달했습니다.",
  "aria/Attachment": "첨부 파일",
  "aria/Cancel Reply": "답장 취소",
  "aria/Cancel upload": "업로드 취소",
  "aria/Channel list": "채널 목록",
  "aria/Channel search results": "채널 검색 결과",
  "aria/Close thread": "스레드 닫기",
  "aria/Download attachment": "첨부 파일 다운로드",
  "aria/Emoji picker": "이모지 선택기",
  "aria/File input": "파일 입력",
  "aria/File upload": "파일 업로드",
  "aria/Image input": "이미지 입력",
  "aria/Load More Channels": "더 많은 채널 불러오기",
  "aria/Menu": "메뉴",
  "aria/Message Options": "메시지 옵션",
  "aria/Open Attachment Selector": "첨부 파일 선택기 열기",
  "aria/Open Message Actions Menu": "메시지 액션 메뉴 열기",
  "aria/Open Reaction Selector": "반응 선택기 열기",
  "aria/Open Thread": "스레드 열기",
  "aria/Reaction list": "반응 목록",
  "aria/Remove attachment": "첨부 파일 제거",
  "aria/Retry upload": "업로드 다시 시도",
  "aria/Search results": "검색 결과",
  "aria/Search results header filter button": "검색 결과 헤더 필터 버튼",
  "aria/Send": "보내기",
  "aria/Stop AI Generation": "AI 생성 중지",
  "ban-command-args": "[@사용자이름] [텍스트]",
  "ban-command-description": "사용자를 차단",
  "giphy-command-args": "[텍스트]",
  "giphy-command-description": "채널에 무작위 GIF 게시",
  live: "라이브",
  "mute-command-args": "[@사용자이름]",
  "mute-command-description": "사용자 음소거",
  replyCount_one: "답장 1개",
  replyCount_other: "{{ count }} 답장",
  "search-results-header-filter-source-button-label--channels": "채널",
  "search-results-header-filter-source-button-label--messages": "메시지",
  "search-results-header-filter-source-button-label--users": "사용자",
  searchResultsCount_one: "1개의 결과",
  searchResultsCount_other: "{{ count }}개 결과",
  "this content could not be displayed": "이 콘텐츠를 표시할 수 없습니다",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/PollVote": "{{ timestamp | timestampFormatter(format: MMM D [at] HH:mm) }}",
  "timestamp/PollVoteTooltip": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "unban-command-args": "[@사용자이름]",
  "unban-command-description": "사용자 차단 해제",
  "unmute-command-args": "[@사용자이름]",
  "unmute-command-description": "사용자 음소거 해제",
  unreadMessagesSeparatorText_other: "읽지 않은 메시지 {{count}}개",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} 그리고 {{ moreCount }}명 더",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} 그리고 {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} 그리고 {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }}개 더",
  "{{ memberCount }} members": "{{ memberCount }}명",
  "{{ user }} has been muted": "{{ user }} 음소거되었습니다",
  "{{ user }} has been unmuted": "{{ user }} 음소거가 해제되었습니다",
  "{{ user }} is typing...": "{{ user }}이(가) 입력 중입니다...",
  "{{ users }} and more are typing...": "{{ users }}와(과) 더 많은 사람들이 입력 중입니다...",
  "{{ users }} and {{ user }} are typing...": "{{ users }}와(과) {{ user }}이(가) 입력 중입니다...",
  "{{ watcherCount }} online": "{{ watcherCount }} 온라인",
  "{{count}} unread_other": "{{count}} 읽지 않음",
  "{{count}} votes_other": "{{count}} 투표",
  "🏙 Attachment...": "🏙 부착...",
  "📊 {{createdBy}} created: {{ pollName}}": "📊 {{createdBy}}이(가) 생성함: {{ pollName}}",
  "📊 {{votedBy}} voted: {{pollOptionText}}": "📊 {{votedBy}}이(가) 투표함: {{pollOptionText}}"
};

// node_modules/stream-chat-react/dist/i18n/nl.json
var nl_default = {
  "Add a comment": "Voeg een opmerking toe",
  "Add an option": "Voeg een optie toe",
  "All results loaded": "Alle resultaten geladen",
  "Allow access to camera": "Toegang tot camera toestaan",
  "Allow access to microphone": "Toegang tot microfoon toestaan",
  "Allow comments": "Sta opmerkingen toe",
  "Allow option suggestion": "Sta optie-suggesties toe",
  "An error has occurred during recording": "Er is een fout opgetreden tijdens het opnemen",
  "An error has occurred during the recording processing": "Er is een fout opgetreden tijdens de verwerking van de opname",
  Anonymous: "Anoniem",
  "Anonymous poll": "Anonieme peiling",
  Archive: "Archief",
  "Ask a question": "Stel een vraag",
  "Attach files": "Bijlage toevoegen",
  Cancel: "Annuleer",
  "Cannot seek in the recording": "Kan niet zoeken in de opname",
  "Channel Missing": "Kanaal niet gevonden",
  Close: "Sluit",
  "Close emoji picker": "Sluit de emoji-kiezer",
  "Commands matching": "Bijpassende opdrachten",
  "Connection failure, reconnecting now...": "Verbindingsfout, opnieuw verbinden...",
  Create: "Maak",
  "Create poll": "Maak peiling",
  Delete: "Verwijder",
  Delivered: "Afgeleverd",
  "Download attachment {{ name }}": "Bijlage {{ name }} downloaden",
  "Drag your files here": "Sleep je bestanden hier naartoe",
  "Drag your files here to add to your post": "Sleep je bestanden hier naartoe om aan je bericht toe te voegen",
  "Edit Message": "Bericht bewerken",
  "Edit message request failed": "Verzoek om bericht bewerken mislukt",
  Edited: "Bewerkt",
  "Emoji matching": "Emoji-overeenkomsten",
  "Empty message...": "Leeg bericht...",
  End: "Einde",
  "End vote": "Einde stem",
  "Error adding flag": "Fout bij toevoegen van vlag",
  "Error connecting to chat, refresh the page to try again.": "Fout bij het verbinden, ververs de pagina om nogmaals te proberen",
  "Error deleting message": "Fout bij verwijderen van bericht",
  "Error fetching reactions": "Fout bij het laden van reacties",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "Fout bij markeren van bericht als ongelezen. Kan geen oudere ongelezen berichten markeren dan de nieuwste 100 kanaalberichten.",
  "Error muting a user ...": "Fout bij het muten van de gebruiker",
  "Error pinning message": "Fout bij vastzetten van bericht",
  "Error removing message pin": "Fout bij verwijderen van berichtpin",
  "Error reproducing the recording": "Fout bij het afspelen van de opname",
  "Error starting recording": "Fout bij het starten van de opname",
  "Error unmuting a user ...": "Fout bij het unmuten van de gebruiker",
  "Error uploading attachment": "Fout bij het uploaden van de bijlage",
  "Error uploading file": "Fout bij uploaden bestand",
  "Error uploading image": "Fout bij uploaden afbeelding",
  "Error · Unsent": "Fout · niet verzonden",
  "Error: {{ errorMessage }}": "Fout: {{ errorMessage }}",
  "Failed to jump to the first unread message": "Niet gelukt om naar het eerste ongelezen bericht te springen",
  "Failed to mark channel as read": "Kanaal kon niet als gelezen worden gemarkeerd",
  "Failed to play the recording": "Kan de opname niet afspelen",
  File: "Bestand",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "Bestand is te groot: {{ size }}, maximale uploadgrootte is {{ limit }}",
  Flag: "Markeer",
  "Generating...": "Genereren...",
  "Latest Messages": "Laatste berichten",
  "Load more": "Meer laden",
  "Mark as unread": "Markeren als ongelezen",
  "Maximum number of votes (from 2 to 10)": "Maximaal aantal stemmen (van 2 tot 10)",
  Menu: "Menu",
  "Message Failed · Click to try again": "Bericht mislukt, klik om het nogmaals te proberen",
  "Message Failed · Unauthorized": "Bericht mislukt, ongeautoriseerd",
  "Message deleted": "Bericht verwijderd",
  "Message has been successfully flagged": "Bericht is succesvol gemarkeerd",
  "Message pinned": "Bericht vastgezet",
  "Message was blocked by moderation policies": "Bericht is geblokkeerd door moderatiebeleid",
  "Messages have been marked unread.": "Berichten zijn gemarkeerd als ongelezen.",
  "Missing permissions to upload the attachment": "Missende toestemmingen om de bijlage te uploaden",
  "Multiple answers": "Meerdere antwoorden",
  Mute: "Dempen",
  New: "Nieuwe",
  "New Messages!": "Nieuwe Berichten!",
  "No chats here yet…": "Nog geen chats hier...",
  "No results found": "Geen resultaten gevonden",
  "Nobody will be able to vote in this poll anymore.": "Niemand kan meer stemmen in deze peiling.",
  "Nothing yet...": "Nog niets ...",
  Ok: "Oké",
  "Open emoji picker": "Open emojipicker",
  "Option already exists": "Optie bestaat al",
  Options: "Opties",
  "People matching": "Mensen die matchen",
  Pin: "Pin",
  "Pinned by": "Vastgemaakt door",
  Poll: "Peiling",
  "Poll comments": "Peiling opmerkingen",
  "Poll options": "Peiling opties",
  "Poll results": "Peiling resultaten",
  Question: "Vraag",
  Quote: "Citeer",
  "Recording format is not supported and cannot be reproduced": "Opnameformaat wordt niet ondersteund en kan niet worden gereproduceerd",
  Reply: "Antwoord",
  "Reply to Message": "Antwoord op bericht",
  Search: "Zoeken",
  "Searching...": "Zoeken...",
  "See all options ({{count}})_one": "Bekijk alle opties ({{count}})",
  "See all options ({{count}})_other": "Bekijk alle opties ({{count}})",
  "Select one": "Selecteer er een",
  "Select one or more": "Selecteer een of meer",
  "Select up to {{count}}_one": "Selecteer tot {{count}}",
  "Select up to {{count}}_other": "Selecteer tot {{count}}",
  Send: "Verstuur",
  "Send Anyway": "Toch versturen",
  "Send message request failed": "Verzoek om bericht te verzenden mislukt",
  "Sending...": "Aan het verzenden...",
  "Show all": "Toon alles",
  Shuffle: "Schudden",
  "Slow Mode ON": "Langzame modus aan",
  "Some of the files will not be accepted": "Sommige bestanden zullen niet worden geaccepteerd",
  "Start typing to search": "Begin met typen om te zoeken",
  Submit: "Versturen",
  "Suggest an option": "Stel een optie voor",
  "Thinking...": "Denken...",
  "This message did not meet our content guidelines": "Dit bericht voldeed niet aan onze inhoudsrichtlijnen",
  "This message was deleted...": "Dit bericht was verwijderd",
  Thread: "Draadje",
  "To start recording, allow the camera access in your browser": "Om te beginnen met opnemen, sta toegang tot de camera toe in uw browser",
  "To start recording, allow the microphone access in your browser": "Om te beginnen met opnemen, sta toegang tot de microfoon toe in uw browser",
  "Type a number from 2 to 10": "Typ een getal van 2 tot 10",
  "Type your message": "Type je bericht",
  Unarchive: "Uit archief halen",
  Unmute: "Dempen opheffen",
  Unpin: "Losmaken",
  "Unread messages": "Ongelezen berichten",
  "Unsupported attachment": "Niet-ondersteunde bijlage",
  "Update your comment": "Werk je opmerking bij",
  'Upload type: "{{ type }}" is not allowed': 'Uploadtype: "{{ type }}" is niet toegestaan',
  "User uploaded content": "Gebruikersgeüploade inhoud",
  "View results": "Bekijk resultaten",
  "View {{count}} comments_one": "Bekijk {{count}} opmerkingen",
  "View {{count}} comments_other": "Bekijk {{count}} opmerkingen",
  "Voice message": "Spraakbericht",
  "Vote ended": "Stemmen beëindigd",
  "Wait until all attachments have uploaded": "Wacht tot alle bijlagen zijn geüpload",
  You: "Jij",
  "You have no channels currently": "Er zijn geen chats beschikbaar",
  "You've reached the maximum number of files": "Je hebt het maximale aantal bestanden bereikt",
  "aria/Attachment": "Bijlage",
  "aria/Cancel Reply": "Antwoord annuleren",
  "aria/Cancel upload": "Upload annuleren",
  "aria/Channel list": "Kanaallijst",
  "aria/Channel search results": "Zoekresultaten voor kanalen",
  "aria/Close thread": "Draad sluiten",
  "aria/Download attachment": "Bijlage downloaden",
  "aria/Emoji picker": "Emoji kiezer",
  "aria/File input": "Bestandsinvoer",
  "aria/File upload": "Bestand uploaden",
  "aria/Image input": "Afbeelding invoeren",
  "aria/Load More Channels": "Meer kanalen laden",
  "aria/Menu": "Menu",
  "aria/Message Options": "Berichtopties",
  "aria/Open Attachment Selector": "Open bijlage selector",
  "aria/Open Message Actions Menu": "Menu voor berichtacties openen",
  "aria/Open Reaction Selector": "Reactiekiezer openen",
  "aria/Open Thread": "Draad openen",
  "aria/Reaction list": "Reactielijst",
  "aria/Remove attachment": "Bijlage verwijderen",
  "aria/Retry upload": "Upload opnieuw proberen",
  "aria/Search results": "Zoekresultaten",
  "aria/Search results header filter button": "Zoekresultaten header filter knop",
  "aria/Send": "Verzenden",
  "aria/Stop AI Generation": "AI-generatie stoppen",
  "ban-command-args": "[@gebruikersnaam] [tekst]",
  "ban-command-description": "Een gebruiker verbannen",
  "giphy-command-args": "[tekst]",
  "giphy-command-description": "Plaats een willekeurige gif in het kanaal",
  live: "live",
  "mute-command-args": "[@gebruikersnaam]",
  "mute-command-description": "Een gebruiker dempen",
  replyCount_one: "1 antwoord",
  replyCount_other: "{{ count }} antwoorden",
  "search-results-header-filter-source-button-label--channels": "kanalen",
  "search-results-header-filter-source-button-label--messages": "berichten",
  "search-results-header-filter-source-button-label--users": "gebruikers",
  searchResultsCount_one: "1 resultaat",
  searchResultsCount_other: "{{ count }} resultaten",
  "this content could not be displayed": "Deze inhoud kan niet weergegeven worden",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/PollVote": "{{ timestamp | timestampFormatter(format: MMM D [at] HH:mm) }}",
  "timestamp/PollVoteTooltip": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "unban-command-args": "[@gebruikersnaam]",
  "unban-command-description": "Een gebruiker debannen",
  "unmute-command-args": "[@gebruikersnaam]",
  "unmute-command-description": "Een gebruiker niet meer dempen",
  unreadMessagesSeparatorText_one: "1 ongelezen bericht",
  unreadMessagesSeparatorText_other: "{{count}} ongelezen berichten",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} en {{ moreCount }} meer",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} en {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} en {{ secondUser }}",
  "{{ imageCount }} more": "+{{ imageCount }}",
  "{{ memberCount }} members": "{{ memberCount }} deelnemers",
  "{{ user }} has been muted": "{{ user }} is gedempt",
  "{{ user }} has been unmuted": "{{ user }} is niet meer gedempt",
  "{{ user }} is typing...": "{{ user }} is aan het typen...",
  "{{ users }} and more are typing...": "{{ users }} en meer zijn aan het typen...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} en {{ user }} zijn aan het typen...",
  "{{ watcherCount }} online": "{{ watcherCount }} online",
  "{{count}} unread_one": "{{count}} ongelezen",
  "{{count}} unread_other": "{{count}} ongelezen",
  "{{count}} votes_one": "{{count}} stem",
  "{{count}} votes_other": "{{count}} stemmen",
  "🏙 Attachment...": "🏙 Bijlage...",
  "📊 {{createdBy}} created: {{ pollName}}": "📊 {{createdBy}} heeft gemaakt: {{ pollName}}",
  "📊 {{votedBy}} voted: {{pollOptionText}}": "📊 {{votedBy}} heeft gestemd: {{pollOptionText}}"
};

// node_modules/stream-chat-react/dist/i18n/pt.json
var pt_default = {
  "Add a comment": "Adicionar um comentário",
  "Add an option": "Adicionar uma opção",
  "All results loaded": "Todos os resultados carregados",
  "Allow access to camera": "Permitir acesso à câmera",
  "Allow access to microphone": "Permitir acesso ao microfone",
  "Allow comments": "Permitir comentários",
  "Allow option suggestion": "Permitir sugestão de opção",
  "An error has occurred during recording": "Ocorreu um erro durante a gravação",
  "An error has occurred during the recording processing": "Ocorreu um erro durante o processamento da gravação",
  Anonymous: "Anônimo",
  "Anonymous poll": "Enquete anônima",
  Archive: "Arquivar",
  "Ask a question": "Faça uma pergunta",
  "Attach files": "Anexar arquivos",
  Cancel: "Cancelar",
  "Cannot seek in the recording": "Não é possível buscar na gravação",
  "Channel Missing": "Canal ausente",
  Close: "Fechar",
  "Close emoji picker": "Fechar seletor de emoji",
  "Commands matching": "Comandos correspondentes",
  "Connection failure, reconnecting now...": "Falha de conexão, reconectando agora...",
  Create: "Criar",
  "Create poll": "Criar enquete",
  Delete: "Excluir",
  Delivered: "Entregue",
  "Download attachment {{ name }}": "Baixar anexo {{ name }}",
  "Drag your files here": "Arraste seus arquivos aqui",
  "Drag your files here to add to your post": "Arraste seus arquivos aqui para adicionar ao seu post",
  "Edit Message": "Editar Mensagem",
  "Edit message request failed": "O pedido de edição da mensagem falhou",
  Edited: "Editada",
  "Emoji matching": "Emoji correspondente",
  "Empty message...": "Mensagem vazia...",
  End: "Fim",
  "End vote": "Encerrar votação",
  "Error adding flag": "Erro ao reportar",
  "Error connecting to chat, refresh the page to try again.": "Erro ao conectar ao bate-papo, atualize a página para tentar novamente.",
  "Error deleting message": "Erro ao deletar mensagem",
  "Error fetching reactions": "Erro ao carregar reações",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "Erro ao marcar a mensagem como não lida. Não é possível marcar mensagens não lidas mais antigas do que as 100 mensagens mais recentes do canal.",
  "Error muting a user ...": "Erro ao silenciar um usuário...",
  "Error pinning message": "Erro ao fixar mensagem",
  "Error removing message pin": "Erro ao remover o PIN da mensagem",
  "Error reproducing the recording": "Erro ao reproduzir a gravação",
  "Error starting recording": "Erro ao iniciar a gravação",
  "Error unmuting a user ...": "Erro ao ativar o som de um usuário...",
  "Error uploading attachment": "Erro ao carregar o anexo",
  "Error uploading file": "Erro ao enviar arquivo",
  "Error uploading image": "Erro ao carregar a imagem",
  "Error · Unsent": "Erro · Não enviado",
  "Error: {{ errorMessage }}": "Erro: {{ errorMessage }}",
  "Failed to jump to the first unread message": "Falha ao pular para a primeira mensagem não lida",
  "Failed to mark channel as read": "Falha ao marcar o canal como lido",
  "Failed to play the recording": "Falha ao reproduzir a gravação",
  File: "Arquivo",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "O arquivo é muito grande: {{ size }}, o tamanho máximo de upload é {{ limit }}",
  Flag: "Reportar",
  "Generating...": "Gerando...",
  "Latest Messages": "Mensagens mais recentes",
  "Load more": "Carregar mais",
  "Mark as unread": "Marcar como não lida",
  "Maximum number of votes (from 2 to 10)": "Número máximo de votos (de 2 a 10)",
  Menu: "Menu",
  "Message Failed · Click to try again": "A mensagem falhou · Clique para tentar novamente",
  "Message Failed · Unauthorized": "A mensagem falhou · não autorizado",
  "Message deleted": "Mensagem apagada",
  "Message has been successfully flagged": "A mensagem foi reportada com sucesso",
  "Message pinned": "Mensagem fixada",
  "Message was blocked by moderation policies": "A mensagem foi bloqueada pelas políticas de moderação",
  "Messages have been marked unread.": "Mensagens foram marcadas como não lidas.",
  "Missing permissions to upload the attachment": "Faltando permissões para enviar o anexo",
  "Multiple answers": "Múltiplas respostas",
  Mute: "Silenciar",
  New: "Novo",
  "New Messages!": "Novas Mensagens!",
  "No chats here yet…": "Ainda não há conversas aqui...",
  "No results found": "Nenhum resultado encontrado",
  "Nobody will be able to vote in this poll anymore.": "Ninguém mais poderá votar nesta pesquisa.",
  "Nothing yet...": "Nada ainda...",
  Ok: "Ok",
  "Open emoji picker": "Abrir seletor de emoji",
  "Option already exists": "Opção já existe",
  Options: "Opções",
  "People matching": "Pessoas correspondentes",
  Pin: "Fixar",
  "Pinned by": "Fixado por",
  Poll: "Enquete",
  "Poll comments": "Comentários da pesquisa",
  "Poll options": "Opções da pesquisa",
  "Poll results": "Resultados da pesquisa",
  Question: "Pergunta",
  Quote: "Citar",
  "Recording format is not supported and cannot be reproduced": "Formato de gravação não é suportado e não pode ser reproduzido",
  Reply: "Responder",
  "Reply to Message": "Responder à mensagem",
  Search: "Buscar",
  "Searching...": "Buscando...",
  "See all options ({{count}})_many": "Ver todas as opções ({{count}})",
  "See all options ({{count}})_one": "Ver todas as opções ({{count}})",
  "See all options ({{count}})_other": "Ver todas as opções ({{count}})",
  "Select one": "Selecionar um",
  "Select one or more": "Selecionar um ou mais",
  "Select up to {{count}}_many": "Selecionar até {{count}}",
  "Select up to {{count}}_one": "Selecionar até {{count}}",
  "Select up to {{count}}_other": "Selecionar até {{count}}",
  Send: "Enviar",
  "Send Anyway": "Enviar de qualquer forma",
  "Send message request failed": "O pedido de envio da mensagem falhou",
  "Sending...": "Enviando...",
  "Show all": "Mostrar tudo",
  Shuffle: "Embaralhar",
  "Slow Mode ON": "Modo lento LIGADO",
  "Some of the files will not be accepted": "Alguns arquivos não serão aceitos",
  "Start typing to search": "Comece a digitar para pesquisar",
  Submit: "Enviar",
  "Suggest an option": "Sugerir uma opção",
  "Thinking...": "Pensando...",
  "This message did not meet our content guidelines": "Esta mensagem não corresponde às nossas diretrizes de conteúdo",
  "This message was deleted...": "Esta mensagem foi excluída...",
  Thread: "Fio",
  "To start recording, allow the camera access in your browser": "Para começar a gravar, permita o acesso à câmera no seu navegador",
  "To start recording, allow the microphone access in your browser": "Para começar a gravar, permita o acesso ao microfone no seu navegador",
  "Type a number from 2 to 10": "Digite um número de 2 a 10",
  "Type your message": "Digite sua mensagem",
  Unarchive: "Desarquivar",
  Unmute: "Ativar som",
  Unpin: "Desfixar",
  "Unread messages": "Mensagens não lidas",
  "Unsupported attachment": "Anexo não suportado",
  "Update your comment": "Atualizar seu comentário",
  'Upload type: "{{ type }}" is not allowed': 'Tipo de upload: "{{ type }}" não é permitido',
  "User uploaded content": "Conteúdo enviado pelo usuário",
  "View results": "Ver resultados",
  "View {{count}} comments_many": "Ver {{count}} comentários",
  "View {{count}} comments_one": "Ver {{count}} comentário",
  "View {{count}} comments_other": "Ver {{count}} comentários",
  "Voice message": "Mensagem de voz",
  "Vote ended": "Votação encerrada",
  "Wait until all attachments have uploaded": "Espere até que todos os anexos tenham sido carregados",
  You: "Você",
  "You have no channels currently": "Você não tem canais atualmente",
  "You've reached the maximum number of files": "Você atingiu o número máximo de arquivos",
  "aria/Attachment": "Anexo",
  "aria/Cancel Reply": "Cancelar resposta",
  "aria/Cancel upload": "Cancelar upload",
  "aria/Channel list": "Lista de canais",
  "aria/Channel search results": "Resultados de pesquisa de canais",
  "aria/Close thread": "Fechar tópico",
  "aria/Download attachment": "Baixar anexo",
  "aria/Emoji picker": "Seletor de emojis",
  "aria/File input": "Entrada de arquivo",
  "aria/File upload": "Carregar arquivo",
  "aria/Image input": "Entrada de imagem",
  "aria/Load More Channels": "Carregar mais canais",
  "aria/Menu": "Menu",
  "aria/Message Options": "Opções de mensagem",
  "aria/Open Attachment Selector": "Abrir seletor de anexos",
  "aria/Open Message Actions Menu": "Abrir menu de ações de mensagem",
  "aria/Open Reaction Selector": "Abrir seletor de reações",
  "aria/Open Thread": "Abrir tópico",
  "aria/Reaction list": "Lista de reações",
  "aria/Remove attachment": "Remover anexo",
  "aria/Retry upload": "Tentar upload novamente",
  "aria/Search results": "Resultados da pesquisa",
  "aria/Search results header filter button": "Botão de filtro do cabeçalho dos resultados da pesquisa",
  "aria/Send": "Enviar",
  "aria/Stop AI Generation": "Parar geração de IA",
  "ban-command-args": "[@nomedeusuário] [texto]",
  "ban-command-description": "Banir um usuário",
  "giphy-command-args": "[texto]",
  "giphy-command-description": "Postar um gif aleatório no canal",
  live: "ao vivo",
  "mute-command-args": "[@nomedeusuário]",
  "mute-command-description": "Silenciar um usuário",
  replyCount_many: "{{ count }} respostas",
  replyCount_one: "1 resposta",
  replyCount_other: "{{ count }} respostas",
  "search-results-header-filter-source-button-label--channels": "canais",
  "search-results-header-filter-source-button-label--messages": "mensagens",
  "search-results-header-filter-source-button-label--users": "usuários",
  searchResultsCount_many: "{{ count }} resultados",
  searchResultsCount_one: "1 resultado",
  searchResultsCount_other: "{{ count }} resultados",
  "this content could not be displayed": "este conteúdo não pôde ser exibido",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/PollVote": "{{ timestamp | timestampFormatter(format: MMM D [at] HH:mm) }}",
  "timestamp/PollVoteTooltip": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "unban-command-args": "[@nomedeusuário]",
  "unban-command-description": "Desbanir um usuário",
  "unmute-command-args": "[@nomedeusuário]",
  "unmute-command-description": "Retirar o silenciamento de um usuário",
  unreadMessagesSeparatorText_many: "{{count}} mensagens não lidas",
  unreadMessagesSeparatorText_one: "1 mensagem não lida",
  unreadMessagesSeparatorText_other: "{{count}} mensagens não lidas",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} e mais {{ moreCount }}",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} e {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} e {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }} mais",
  "{{ memberCount }} members": "{{ memberCount }} membros",
  "{{ user }} has been muted": "{{ user }} foi silenciado",
  "{{ user }} has been unmuted": "{{ user }} foi reativado",
  "{{ user }} is typing...": "{{ user }} está digitando...",
  "{{ users }} and more are typing...": "{{ users }} e mais estão digitando...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} e {{ user }} estão digitando...",
  "{{ watcherCount }} online": "{{ watcherCount }} online",
  "{{count}} unread_many": "{{count}} não lidos",
  "{{count}} unread_one": "{{count}} não lido",
  "{{count}} unread_other": "{{count}} não lidos",
  "{{count}} votes_many": "{{count}} votos",
  "{{count}} votes_one": "{{count}} voto",
  "{{count}} votes_other": "{{count}} votos",
  "🏙 Attachment...": "🏙 Anexo...",
  "📊 {{createdBy}} created: {{ pollName}}": "📊 {{createdBy}} criou: {{ pollName}}",
  "📊 {{votedBy}} voted: {{pollOptionText}}": "📊 {{votedBy}} votou: {{pollOptionText}}"
};

// node_modules/stream-chat-react/dist/i18n/ru.json
var ru_default = {
  "Add a comment": "Добавить комментарий",
  "Add an option": "Добавить вариант",
  "All results loaded": "Все результаты загружены",
  "Allow access to camera": "Разрешить доступ к камере",
  "Allow access to microphone": "Разрешить доступ к микрофону",
  "Allow comments": "Разрешить комментарии",
  "Allow option suggestion": "Разрешить предложение вариантов",
  "An error has occurred during recording": "Произошла ошибка во время записи",
  "An error has occurred during the recording processing": "Произошла ошибка во время обработки записи",
  Anonymous: "Аноним",
  "Anonymous poll": "Анонимный опрос",
  Archive: "Aрхивировать",
  "Ask a question": "Задать вопрос",
  "Attach files": "Прикрепить файлы",
  Cancel: "Отмена",
  "Cannot seek in the recording": "Невозможно осуществить поиск в записи",
  "Channel Missing": "Канал не найден",
  Close: "Закрыть",
  "Close emoji picker": "Закрыть окно выбора смайлов",
  "Commands matching": "Соответствие команд",
  "Connection failure, reconnecting now...": "Ошибка соединения, переподключение...",
  Create: "Создать",
  "Create poll": "Создать опрос",
  Delete: "Удалить",
  Delivered: "Отправлено",
  "Download attachment {{ name }}": "Скачать вложение {{ name }}",
  "Drag your files here": "Перетащите ваши файлы сюда",
  "Drag your files here to add to your post": "Перетащите ваши файлы сюда, чтобы добавить их в ваш пост",
  "Edit Message": "Редактировать сообщение",
  "Edit message request failed": "Не удалось изменить запрос сообщения",
  Edited: "Отредактировано",
  "Emoji matching": "Соответствие эмодзи",
  "Empty message...": "Пустое сообщение...",
  End: "Конец",
  "End vote": "Закончить голосование",
  "Error adding flag": "Ошибка добавления флага",
  "Error connecting to chat, refresh the page to try again.": "Ошибка подключения к чату, обновите страницу чтобы попробовать снова.",
  "Error deleting message": "Ошибка при удалении сообщения",
  "Error fetching reactions": "Ошибка при загрузке реакций",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "Ошибка при отметке сообщения как непрочитанного. Невозможно отметить как непрочитанные сообщения старше последних 100 сообщений в канале.",
  "Error muting a user ...": "Ошибка отключения уведомлений от пользователя...",
  "Error pinning message": "Сообщение об ошибке при закреплении",
  "Error removing message pin": "Ошибка при удалении булавки сообщения",
  "Error reproducing the recording": "Ошибка воспроизведения записи",
  "Error starting recording": "Ошибка при запуске записи",
  "Error unmuting a user ...": "Ошибка включения уведомлений...",
  "Error uploading attachment": "Ошибка при загрузке вложения",
  "Error uploading file": "Ошибка при загрузке файла",
  "Error uploading image": "Ошибка загрузки изображения",
  "Error · Unsent": "Ошибка · Не отправлено",
  "Error: {{ errorMessage }}": "Ошибка: {{ errorMessage }}",
  "Failed to jump to the first unread message": "Не удалось перейти к первому непрочитанному сообщению",
  "Failed to mark channel as read": "Не удалось пометить канал как прочитанный",
  "Failed to play the recording": "Не удалось воспроизвести запись",
  File: "Файл",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "Файл слишком большой: {{ size }}, максимальный размер загрузки составляет {{ limit }}",
  Flag: "Пожаловаться",
  "Generating...": "Генерирую...",
  "Latest Messages": "Последние сообщения",
  "Load more": "Загрузить больше",
  "Mark as unread": "Отметить как непрочитанное",
  "Maximum number of votes (from 2 to 10)": "Максимальное количество голосов (от 2 до 10)",
  Menu: "Меню",
  "Message Failed · Click to try again": "Ошибка отправки сообщения · Нажмите чтобы повторить",
  "Message Failed · Unauthorized": "Ошибка отправки сообщения · Неавторизованный",
  "Message deleted": "Сообщение удалено",
  "Message has been successfully flagged": "Жалоба на сообщение была принята",
  "Message pinned": "Сообщение закреплено",
  "Message was blocked by moderation policies": "Сообщение было заблокировано модерацией",
  "Messages have been marked unread.": "Сообщения были отмечены как непрочитанные.",
  "Missing permissions to upload the attachment": "Отсутствуют разрешения для загрузки вложения",
  "Multiple answers": "Несколько ответов",
  Mute: "Отключить уведомления",
  New: "Новые",
  "New Messages!": "Новые сообщения!",
  "No chats here yet…": "Здесь еще нет чатов...",
  "No results found": "Результаты не найдены",
  "Nobody will be able to vote in this poll anymore.": "Никто больше не сможет голосовать в этом опросе.",
  "Nothing yet...": "Пока ничего нет...",
  Ok: "Ок",
  "Open emoji picker": "Открыть выбор смайлов",
  "Option already exists": "Вариант уже существует",
  Options: "Варианты",
  "People matching": "Совпадающие люди",
  Pin: "Закрепить",
  "Pinned by": "Закреплено",
  Poll: "Опрос",
  "Poll comments": "Комментарии к опросу",
  "Poll options": "Опции опроса",
  "Poll results": "Результаты опроса",
  Question: "Вопрос",
  Quote: "Цитировать",
  "Recording format is not supported and cannot be reproduced": "Формат записи не поддерживается и не может быть воспроизведен",
  Reply: "Ответить",
  "Reply to Message": "Ответить на сообщение",
  Search: "Поиск",
  "Searching...": "Ищем...",
  "See all options ({{count}})_few": "Посмотреть все варианты ({{count}})",
  "See all options ({{count}})_many": "Посмотреть все варианты ({{count}})",
  "See all options ({{count}})_one": "Посмотреть все варианты ({{count}})",
  "See all options ({{count}})_other": "Посмотреть все варианты ({{count}})",
  "Select one": "Выберите один",
  "Select one or more": "Выберите один или несколько",
  "Select up to {{count}}_few": "Выберите до {{count}}",
  "Select up to {{count}}_many": "Выберите до {{count}}",
  "Select up to {{count}}_one": "Выберите до {{count}}",
  "Select up to {{count}}_other": "Выберите до {{count}}",
  Send: "Отправить",
  "Send Anyway": "Мне всё равно, отправить",
  "Send message request failed": "Не удалось отправить запрос на отправку сообщения",
  "Sending...": "Отправка...",
  "Show all": "Показать все",
  Shuffle: "Перемешать",
  "Slow Mode ON": "Медленный режим включен",
  "Some of the files will not be accepted": "Некоторые файлы не будут приняты",
  "Start typing to search": "Начните вводить для поиска",
  Submit: "Отправить",
  "Suggest an option": "Предложить вариант",
  "Thinking...": "Думаю...",
  "This message did not meet our content guidelines": "Сообщение не соответствует правилам",
  "This message was deleted...": "Сообщение было удалено...",
  Thread: "Ветка",
  "To start recording, allow the camera access in your browser": "Для начала записи разрешите доступ к камере в вашем браузере",
  "To start recording, allow the microphone access in your browser": "Для начала записи разрешите доступ к микрофону в вашем браузере",
  "Type a number from 2 to 10": "Введите число от 2 до 10",
  "Type your message": "Ваше сообщение",
  Unarchive: "Удалить из архива",
  Unmute: "Включить уведомления",
  Unpin: "Открепить",
  "Unread messages": "Непрочитанные сообщения",
  "Unsupported attachment": "Неподдерживаемое вложение",
  "Update your comment": "Обновите ваш комментарий",
  'Upload type: "{{ type }}" is not allowed': 'Тип загрузки: "{{ type }}" не разрешен',
  "User uploaded content": "Пользователь загрузил контент",
  "View results": "Посмотреть результаты",
  "View {{count}} comments_few": "Просмотреть {{count}} комментариев",
  "View {{count}} comments_many": "Просмотреть {{count}} комментариев",
  "View {{count}} comments_one": "Просмотреть {{count}} комментарий",
  "View {{count}} comments_other": "Просмотреть {{count}} комментариев",
  "Voice message": "Голосовое сообщение",
  "Vote ended": "Голосование завершено",
  "Wait until all attachments have uploaded": "Подождите, пока все вложения загрузятся",
  You: "Вы",
  "You have no channels currently": "У вас нет каналов в данный момент",
  "You've reached the maximum number of files": "Вы достигли максимального количества файлов",
  "aria/Attachment": "Вложение",
  "aria/Cancel Reply": "Отменить ответ",
  "aria/Cancel upload": "Отменить загрузку",
  "aria/Channel list": "Список каналов",
  "aria/Channel search results": "Результаты поиска по каналам",
  "aria/Close thread": "Закрыть тему",
  "aria/Download attachment": "Скачать вложение",
  "aria/Emoji picker": "Выбор эмодзи",
  "aria/File input": "Ввод файла",
  "aria/File upload": "Загрузка файла",
  "aria/Image input": "Ввод изображения",
  "aria/Load More Channels": "Загрузить больше каналов",
  "aria/Menu": "Меню",
  "aria/Message Options": "Параметры сообщения",
  "aria/Open Attachment Selector": "Открыть выбор вложений",
  "aria/Open Message Actions Menu": "Открыть меню действий с сообщениями",
  "aria/Open Reaction Selector": "Открыть селектор реакций",
  "aria/Open Thread": "Открыть тему",
  "aria/Reaction list": "Список реакций",
  "aria/Remove attachment": "Удалить вложение",
  "aria/Retry upload": "Повторить загрузку",
  "aria/Search results": "Результаты поиска",
  "aria/Search results header filter button": "Кнопка фильтра заголовка результатов поиска",
  "aria/Send": "Отправить",
  "aria/Stop AI Generation": "Остановить генерацию ИИ",
  "ban-command-args": "[@имяпользователя] [текст]",
  "ban-command-description": "Заблокировать пользователя",
  "giphy-command-args": "[текст]",
  "giphy-command-description": "Опубликовать случайную GIF-анимацию в канале",
  live: "В прямом эфире",
  "mute-command-args": "[@имяпользователя]",
  "mute-command-description": "Выключить микрофон у пользователя",
  replyCount_few: "{{ count }} ответов",
  replyCount_many: "{{ count }} ответов",
  replyCount_one: "1 ответ",
  replyCount_other: "{{ count }} ответов",
  "search-results-header-filter-source-button-label--channels": "каналы",
  "search-results-header-filter-source-button-label--messages": "сообщения",
  "search-results-header-filter-source-button-label--users": "пользователи",
  searchResultsCount_few: "{{ count }} результата",
  searchResultsCount_many: "{{ count }} результатов",
  searchResultsCount_one: "1 результат",
  searchResultsCount_other: "{{ count }} результатов",
  "this content could not be displayed": "Этот контент не может быть отображен в данный момент",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/PollVote": "{{ timestamp | timestampFormatter(format: MMM D [at] HH:mm) }}",
  "timestamp/PollVoteTooltip": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "unban-command-args": "[@имяпользователя]",
  "unban-command-description": "Разблокировать пользователя",
  "unmute-command-args": "[@имяпользователя]",
  "unmute-command-description": "Включить микрофон у пользователя",
  unreadMessagesSeparatorText_few: "1 непрочитанное сообщения",
  unreadMessagesSeparatorText_many: "{{count}} непрочитанных сообщений",
  unreadMessagesSeparatorText_one: "1 непрочитанное сообщение",
  unreadMessagesSeparatorText_other: "{{count}} непрочитанных сообщений",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} и {{ moreCount }} еще",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} и {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} и {{ secondUser }}",
  "{{ imageCount }} more": "Ещё {{ imageCount }}",
  "{{ memberCount }} members": "{{ memberCount }} участников",
  "{{ user }} has been muted": "Вы отписались от уведомлений от {{ user }}",
  "{{ user }} has been unmuted": "Уведомления от {{ user }} были включены",
  "{{ user }} is typing...": "{{ user }} печатает...",
  "{{ users }} and more are typing...": "{{ users }} и другие печатают...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} и {{ user }} печатают...",
  "{{ watcherCount }} online": "{{ watcherCount }} в сети",
  "{{count}} unread_few": "{{count}} непрочитанных",
  "{{count}} unread_many": "{{count}} непрочитанных",
  "{{count}} unread_one": "{{count}} непрочитанное",
  "{{count}} unread_other": "{{count}} непрочитанных",
  "{{count}} votes_few": "{{count}} голоса",
  "{{count}} votes_many": "{{count}} голосов",
  "{{count}} votes_one": "{{count}} голос",
  "{{count}} votes_other": "{{count}} голосов",
  "🏙 Attachment...": "🏙 Вложение...",
  "📊 {{createdBy}} created: {{ pollName}}": "📊 {{createdBy}} создал(а): {{ pollName}}",
  "📊 {{votedBy}} voted: {{pollOptionText}}": "📊 {{votedBy}} проголосовал(а): {{pollOptionText}}"
};

// node_modules/stream-chat-react/dist/i18n/tr.json
var tr_default = {
  "Add a comment": "Yorum ekle",
  "Add an option": "Bir seçenek ekle",
  "All results loaded": "Tüm sonuçlar yüklendi",
  "Allow access to camera": "Kameraya erişime izin ver",
  "Allow access to microphone": "Mikrofona erişime izin ver",
  "Allow comments": "Yorumlara izin ver",
  "Allow option suggestion": "Seçenek önerisine izin ver",
  "An error has occurred during recording": "Kayıt sırasında bir hata oluştu",
  "An error has occurred during the recording processing": "Kayıt işlemi sırasında bir hata oluştu",
  Anonymous: "Anonim",
  "Anonymous poll": "Anonim anket",
  Archive: "Arşivle",
  "Ask a question": "Bir soru sor",
  "Attach files": "Dosya ekle",
  Cancel: "İptal",
  "Cannot seek in the recording": "Kayıtta arama yapılamıyor",
  "Channel Missing": "Kanal bulunamıyor",
  Close: "Kapat",
  "Close emoji picker": "Emoji seçiciyi kapat",
  "Commands matching": "Eşleşen komutlar",
  "Connection failure, reconnecting now...": "Bağlantı hatası, tekrar bağlanılıyor...",
  Create: "Oluştur",
  "Create poll": "Anket oluştur",
  Delete: "Sil",
  Delivered: "İletildi",
  "Download attachment {{ name }}": "Ek {{ name }}'i indir",
  "Drag your files here": "Dosyalarınızı buraya sürükleyin",
  "Drag your files here to add to your post": "Gönderinize eklemek için dosyalarınızı buraya sürükleyin",
  "Edit Message": "Mesajı Düzenle",
  "Edit message request failed": "Mesaj düzenleme isteği başarısız oldu",
  Edited: "Düzenlendi",
  "Emoji matching": "Emoji eşleştirme",
  "Empty message...": "Boş mesaj...",
  End: "Son",
  "End vote": "Oyu bitir",
  "Error adding flag": "Bayrak eklenirken hata oluştu",
  "Error connecting to chat, refresh the page to try again.": "Bağlantı hatası, sayfayı yenileyip tekrar deneyin.",
  "Error deleting message": "Mesaj silinirken hata oluştu",
  "Error fetching reactions": "Reaksiyonlar alınırken hata oluştu",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "Mesajı okunmamış olarak işaretleme hatası. En yeni 100 kanal mesajından daha eski okunmamış mesajları işaretleme yapılamaz.",
  "Error muting a user ...": "Kullanıcıyı sessize alırken hata oluştu ...",
  "Error pinning message": "Mesaj sabitlenirken hata oluştu",
  "Error removing message pin": "Mesaj PIN'i kaldırılırken hata oluştu",
  "Error reproducing the recording": "Kaydı yeniden üretme hatası",
  "Error starting recording": "Kayıt başlatılırken hata oluştu",
  "Error unmuting a user ...": "Kullanıcının sesini açarken hata oluştu ...",
  "Error uploading attachment": "Ek yüklenirken hata oluştu",
  "Error uploading file": "Dosya yüklenirken hata oluştu",
  "Error uploading image": "Resmi yüklerken hata",
  "Error · Unsent": "Hata · Gönderilemedi",
  "Error: {{ errorMessage }}": "Hata: {{ errorMessage }}",
  "Failed to jump to the first unread message": "İlk okunmamış mesaja atlamada hata oluştu",
  "Failed to mark channel as read": "Kanalı okundu olarak işaretleme başarısız oldu",
  "Failed to play the recording": "Kayıt oynatılamadı",
  File: "Dosya",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "Dosya çok büyük: {{ size }}, maksimum yükleme boyutu {{ limit }}",
  Flag: "Bayrak",
  "Generating...": "Oluşturuluyor...",
  "Latest Messages": "Son Mesajlar",
  "Load more": "Daha fazla yükle",
  "Mark as unread": "Okunmamış olarak işaretle",
  "Maximum number of votes (from 2 to 10)": "Maksimum oy sayısı (2 ile 10 arası)",
  Menu: "Menü",
  "Message Failed · Click to try again": "Mesaj Başarısız · Tekrar denemek için tıklayın",
  "Message Failed · Unauthorized": "Mesaj Başarısız · Yetkisiz",
  "Message deleted": "Mesaj silindi",
  "Message has been successfully flagged": "Mesaj başarıyla bayraklandı",
  "Message pinned": "Mesaj sabitlendi",
  "Message was blocked by moderation policies": "Mesaj moderasyon politikaları tarafından engellendi",
  "Messages have been marked unread.": "Mesajlar okunmamış olarak işaretlendi.",
  "Missing permissions to upload the attachment": "Ek yüklemek için izinler eksik",
  "Multiple answers": "Çoklu cevaplar",
  Mute: "Sessiz",
  New: "Yeni",
  "New Messages!": "Yeni Mesajlar!",
  "No chats here yet…": "Henüz burada sohbet yok...",
  "No results found": "Sonuç bulunamadı",
  "Nobody will be able to vote in this poll anymore.": "Artık bu ankette kimse oy kullanamayacak.",
  "Nothing yet...": "Şimdilik hiçbir şey...",
  Ok: "Tamam",
  "Open emoji picker": "Emoji klavyesini aç",
  "Option already exists": "Seçenek zaten mevcut",
  Options: "Seçenekler",
  "People matching": "Eşleşen kişiler",
  Pin: "Sabitle",
  "Pinned by": "Sabitleyen",
  Poll: "Anket",
  "Poll comments": "Anket yorumları",
  "Poll options": "Anket seçenekleri",
  "Poll results": "Anket sonuçları",
  Question: "Soru",
  Quote: "Alıntı",
  "Recording format is not supported and cannot be reproduced": "Kayıt formatı desteklenmiyor ve çoğaltılamıyor",
  Reply: "Cevapla",
  "Reply to Message": "Mesaja Cevapla",
  Search: "Arama",
  "Searching...": "Aranıyor...",
  "See all options ({{count}})_one": "Tüm seçenekleri göster ({{count}})",
  "See all options ({{count}})_other": "Tüm seçenekleri göster ({{count}})",
  "Select one": "Birini seçin",
  "Select one or more": "Bir veya daha fazlasını seçin",
  "Select up to {{count}}_one": "En fazla {{count}}'yi seçin",
  "Select up to {{count}}_other": "En fazla {{count}}'yi seçin",
  Send: "Gönder",
  "Send Anyway": "Yine de gönder",
  "Send message request failed": "Mesaj gönderme isteği başarısız oldu",
  "Sending...": "Gönderiliyor...",
  "Show all": "Tümünü göster",
  Shuffle: "Karıştır",
  "Slow Mode ON": "Yavaş Mod Açık",
  "Some of the files will not be accepted": "Bazı dosyalar kabul edilmeyecek",
  "Start typing to search": "Aramak için yazmaya başlayın",
  Submit: "Gönder",
  "Suggest an option": "Bir seçenek önerin",
  "Thinking...": "Düşünüyor...",
  "This message did not meet our content guidelines": "Bu mesaj içerik yönergelerimize uygun değil",
  "This message was deleted...": "Bu mesaj silindi...",
  Thread: "Konu",
  "To start recording, allow the camera access in your browser": "Kayıt yapmaya başlamak için tarayıcınızda kameraya erişime izin verin",
  "To start recording, allow the microphone access in your browser": "Kayıt yapmaya başlamak için tarayıcınızda mikrofona erişime izin verin",
  "Type a number from 2 to 10": "2 ile 10 arasında bir sayı yazın",
  "Type your message": "Mesajınızı yazın",
  Unarchive: "Arşivden çıkar",
  Unmute: "Sesini aç",
  Unpin: "Sabitlemeyi kaldır",
  "Unread messages": "Okunmamış mesajlar",
  "Unsupported attachment": "Desteklenmeyen ek",
  "Update your comment": "Yorumunuzu güncelleyin",
  'Upload type: "{{ type }}" is not allowed': 'Yükleme türü: "{{ type }}" izin verilmez',
  "User uploaded content": "Kullanıcı tarafından yüklenen içerik",
  "View results": "Sonuçları görüntüle",
  "View {{count}} comments_one": "{{count}} yorumu görüntüle",
  "View {{count}} comments_other": "{{count}} yorumu görüntüle",
  "Voice message": "Sesli mesaj",
  "Vote ended": "Oylama sona erdi",
  "Wait until all attachments have uploaded": "Tüm ekler yüklenene kadar bekleyin",
  You: "Sen",
  "You have no channels currently": "Henüz kanalınız yok",
  "You've reached the maximum number of files": "Maksimum dosya sayısına ulaştınız",
  "aria/Attachment": "Ek",
  "aria/Cancel Reply": "Cevabı İptal Et",
  "aria/Cancel upload": "Yüklemeyi İptal Et",
  "aria/Channel list": "Kanal listesi",
  "aria/Channel search results": "Kanal arama sonuçları",
  "aria/Close thread": "Konuyu kapat",
  "aria/Download attachment": "Ek indir",
  "aria/Emoji picker": "Emoji seçici",
  "aria/File input": "Dosya girişi",
  "aria/File upload": "Dosya yükleme",
  "aria/Image input": "Resim girişi",
  "aria/Load More Channels": "Daha Fazla Kanal Yükle",
  "aria/Menu": "Menü",
  "aria/Message Options": "Mesaj Seçenekleri",
  "aria/Open Attachment Selector": "Ek Seçiciyi Aç",
  "aria/Open Message Actions Menu": "Mesaj İşlemleri Menüsünü Aç",
  "aria/Open Reaction Selector": "Tepki Seçiciyi Aç",
  "aria/Open Thread": "Konuyu Aç",
  "aria/Reaction list": "Tepki listesi",
  "aria/Remove attachment": "Eki kaldır",
  "aria/Retry upload": "Yüklemeyi Tekrar Dene",
  "aria/Search results": "Arama sonuçları",
  "aria/Search results header filter button": "Arama sonuçları başlık filtre düğmesi",
  "aria/Send": "Gönder",
  "aria/Stop AI Generation": "Yapay Zeka Üretimini Durdur",
  "ban-command-args": "[@kullanıcıadı] [metin]",
  "ban-command-description": "Bir kullanıcıyı yasakla",
  "giphy-command-args": "[metin]",
  "giphy-command-description": "Rastgele bir gif'i kanala gönder",
  live: "canlı",
  "mute-command-args": "[@kullanıcıadı]",
  "mute-command-description": "Bir kullanıcının sesini kapat",
  replyCount_one: "1 cevap",
  replyCount_other: "{{ count }} cevap",
  "search-results-header-filter-source-button-label--channels": "kanallar",
  "search-results-header-filter-source-button-label--messages": "mesajlar",
  "search-results-header-filter-source-button-label--users": "kullanıcılar",
  searchResultsCount_one: "1 sonuç",
  searchResultsCount_other: "{{ count }} sonuç",
  "this content could not be displayed": "bu içerik gösterilemiyor",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/PollVote": "{{ timestamp | timestampFormatter(format: MMM D [at] HH:mm) }}",
  "timestamp/PollVoteTooltip": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "unban-command-args": "[@kullanıcıadı]",
  "unban-command-description": "Bir kullanıcının yasağını kaldır",
  "unmute-command-args": "[@kullanıcıadı]",
  "unmute-command-description": "Bir kullanıcının sesini aç",
  unreadMessagesSeparatorText_one: "1 okunmamış mesaj",
  unreadMessagesSeparatorText_other: "{{count}} okunmamış mesaj",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} ve {{ moreCount }} daha",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} ve {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} ve {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }} adet daha",
  "{{ memberCount }} members": "{{ memberCount }} üye",
  "{{ user }} has been muted": "{{ user }} sessize alındı",
  "{{ user }} has been unmuted": "{{ user }} sesi açıldı",
  "{{ user }} is typing...": "{{ user }} yazıyor...",
  "{{ users }} and more are typing...": "{{ users }} ve diğerleri yazıyor...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} ve {{ user }} yazıyor...",
  "{{ watcherCount }} online": "{{ watcherCount }} çevrimiçi",
  "{{count}} unread_one": "{{count}} okunmamış",
  "{{count}} unread_other": "{{count}} okunmamış",
  "{{count}} votes_one": "{{count}} oy",
  "{{count}} votes_other": "{{count}} oy",
  "🏙 Attachment...": "🏙 Ek...",
  "📊 {{createdBy}} created: {{ pollName}}": "📊 {{createdBy}} oluşturdu: {{ pollName}}",
  "📊 {{votedBy}} voted: {{pollOptionText}}": "📊 {{votedBy}} oy verdi: {{pollOptionText}}"
};

// node_modules/@babel/runtime/helpers/esm/toArray.js
function _toArray(r) {
  return _arrayWithHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableRest();
}

// node_modules/i18next/dist/esm/i18next.js
function ownKeys3(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread3(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys3(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys3(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
var consoleLogger = {
  type: "logger",
  log: function log(args) {
    this.output("log", args);
  },
  warn: function warn(args) {
    this.output("warn", args);
  },
  error: function error(args) {
    this.output("error", args);
  },
  output: function output(type, args) {
    if (console && console[type]) console[type].apply(console, args);
  }
};
var Logger = function() {
  function Logger2(concreteLogger) {
    var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    _classCallCheck(this, Logger2);
    this.init(concreteLogger, options2);
  }
  _createClass(Logger2, [{
    key: "init",
    value: function init3(concreteLogger) {
      var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      this.prefix = options2.prefix || "i18next:";
      this.logger = concreteLogger || consoleLogger;
      this.options = options2;
      this.debug = options2.debug;
    }
  }, {
    key: "setDebug",
    value: function setDebug(bool) {
      this.debug = bool;
    }
  }, {
    key: "log",
    value: function log2() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return this.forward(args, "log", "", true);
    }
  }, {
    key: "warn",
    value: function warn2() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return this.forward(args, "warn", "", true);
    }
  }, {
    key: "error",
    value: function error2() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      return this.forward(args, "error", "");
    }
  }, {
    key: "deprecate",
    value: function deprecate() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }
      return this.forward(args, "warn", "WARNING DEPRECATED: ", true);
    }
  }, {
    key: "forward",
    value: function forward(args, lvl, prefix, debugOnly) {
      if (debugOnly && !this.debug) return null;
      if (typeof args[0] === "string") args[0] = "".concat(prefix).concat(this.prefix, " ").concat(args[0]);
      return this.logger[lvl](args);
    }
  }, {
    key: "create",
    value: function create(moduleName) {
      return new Logger2(this.logger, _objectSpread3(_objectSpread3({}, {
        prefix: "".concat(this.prefix, ":").concat(moduleName, ":")
      }), this.options));
    }
  }, {
    key: "clone",
    value: function clone(options2) {
      options2 = options2 || this.options;
      options2.prefix = options2.prefix || this.prefix;
      return new Logger2(this.logger, options2);
    }
  }]);
  return Logger2;
}();
var baseLogger = new Logger();
var EventEmitter = function() {
  function EventEmitter2() {
    _classCallCheck(this, EventEmitter2);
    this.observers = {};
  }
  _createClass(EventEmitter2, [{
    key: "on",
    value: function on(events, listener) {
      var _this = this;
      events.split(" ").forEach(function(event) {
        _this.observers[event] = _this.observers[event] || [];
        _this.observers[event].push(listener);
      });
      return this;
    }
  }, {
    key: "off",
    value: function off(event, listener) {
      if (!this.observers[event]) return;
      if (!listener) {
        delete this.observers[event];
        return;
      }
      this.observers[event] = this.observers[event].filter(function(l) {
        return l !== listener;
      });
    }
  }, {
    key: "emit",
    value: function emit(event) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      if (this.observers[event]) {
        var cloned = [].concat(this.observers[event]);
        cloned.forEach(function(observer) {
          observer.apply(void 0, args);
        });
      }
      if (this.observers["*"]) {
        var _cloned = [].concat(this.observers["*"]);
        _cloned.forEach(function(observer) {
          observer.apply(observer, [event].concat(args));
        });
      }
    }
  }]);
  return EventEmitter2;
}();
function defer() {
  var res;
  var rej;
  var promise = new Promise(function(resolve, reject) {
    res = resolve;
    rej = reject;
  });
  promise.resolve = res;
  promise.reject = rej;
  return promise;
}
function makeString(object) {
  if (object == null) return "";
  return "" + object;
}
function copy(a, s, t2) {
  a.forEach(function(m) {
    if (s[m]) t2[m] = s[m];
  });
}
function getLastOfPath(object, path2, Empty) {
  function cleanKey(key2) {
    return key2 && key2.indexOf("###") > -1 ? key2.replace(/###/g, ".") : key2;
  }
  function canNotTraverseDeeper() {
    return !object || typeof object === "string";
  }
  var stack = typeof path2 !== "string" ? [].concat(path2) : path2.split(".");
  while (stack.length > 1) {
    if (canNotTraverseDeeper()) return {};
    var key = cleanKey(stack.shift());
    if (!object[key] && Empty) object[key] = new Empty();
    if (Object.prototype.hasOwnProperty.call(object, key)) {
      object = object[key];
    } else {
      object = {};
    }
  }
  if (canNotTraverseDeeper()) return {};
  return {
    obj: object,
    k: cleanKey(stack.shift())
  };
}
function setPath(object, path2, newValue) {
  var _getLastOfPath = getLastOfPath(object, path2, Object), obj = _getLastOfPath.obj, k = _getLastOfPath.k;
  obj[k] = newValue;
}
function pushPath(object, path2, newValue, concat) {
  var _getLastOfPath2 = getLastOfPath(object, path2, Object), obj = _getLastOfPath2.obj, k = _getLastOfPath2.k;
  obj[k] = obj[k] || [];
  if (concat) obj[k] = obj[k].concat(newValue);
  if (!concat) obj[k].push(newValue);
}
function getPath(object, path2) {
  var _getLastOfPath3 = getLastOfPath(object, path2), obj = _getLastOfPath3.obj, k = _getLastOfPath3.k;
  if (!obj) return void 0;
  return obj[k];
}
function getPathWithDefaults(data, defaultData, key) {
  var value = getPath(data, key);
  if (value !== void 0) {
    return value;
  }
  return getPath(defaultData, key);
}
function deepExtend(target, source, overwrite) {
  for (var prop in source) {
    if (prop !== "__proto__" && prop !== "constructor") {
      if (prop in target) {
        if (typeof target[prop] === "string" || target[prop] instanceof String || typeof source[prop] === "string" || source[prop] instanceof String) {
          if (overwrite) target[prop] = source[prop];
        } else {
          deepExtend(target[prop], source[prop], overwrite);
        }
      } else {
        target[prop] = source[prop];
      }
    }
  }
  return target;
}
function regexEscape(str) {
  return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
}
var _entityMap = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;",
  "/": "&#x2F;"
};
function escape(data) {
  if (typeof data === "string") {
    return data.replace(/[&<>"'\/]/g, function(s) {
      return _entityMap[s];
    });
  }
  return data;
}
var isIE10 = typeof window !== "undefined" && window.navigator && typeof window.navigator.userAgentData === "undefined" && window.navigator.userAgent && window.navigator.userAgent.indexOf("MSIE") > -1;
var chars = [" ", ",", "?", "!", ";"];
function looksLikeObjectPath(key, nsSeparator, keySeparator) {
  nsSeparator = nsSeparator || "";
  keySeparator = keySeparator || "";
  var possibleChars = chars.filter(function(c) {
    return nsSeparator.indexOf(c) < 0 && keySeparator.indexOf(c) < 0;
  });
  if (possibleChars.length === 0) return true;
  var r = new RegExp("(".concat(possibleChars.map(function(c) {
    return c === "?" ? "\\?" : c;
  }).join("|"), ")"));
  var matched = !r.test(key);
  if (!matched) {
    var ki = key.indexOf(keySeparator);
    if (ki > 0 && !r.test(key.substring(0, ki))) {
      matched = true;
    }
  }
  return matched;
}
function ownKeys$1(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys$1(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$1(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function deepFind(obj, path2) {
  var keySeparator = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : ".";
  if (!obj) return void 0;
  if (obj[path2]) return obj[path2];
  var paths = path2.split(keySeparator);
  var current = obj;
  for (var i = 0; i < paths.length; ++i) {
    if (!current) return void 0;
    if (typeof current[paths[i]] === "string" && i + 1 < paths.length) {
      return void 0;
    }
    if (current[paths[i]] === void 0) {
      var j = 2;
      var p = paths.slice(i, i + j).join(keySeparator);
      var mix = current[p];
      while (mix === void 0 && paths.length > i + j) {
        j++;
        p = paths.slice(i, i + j).join(keySeparator);
        mix = current[p];
      }
      if (mix === void 0) return void 0;
      if (mix === null) return null;
      if (path2.endsWith(p)) {
        if (typeof mix === "string") return mix;
        if (p && typeof mix[p] === "string") return mix[p];
      }
      var joinedPath = paths.slice(i + j).join(keySeparator);
      if (joinedPath) return deepFind(mix, joinedPath, keySeparator);
      return void 0;
    }
    current = current[paths[i]];
  }
  return current;
}
var ResourceStore = function(_EventEmitter) {
  _inherits(ResourceStore2, _EventEmitter);
  var _super = _createSuper(ResourceStore2);
  function ResourceStore2(data) {
    var _this;
    var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      ns: ["translation"],
      defaultNS: "translation"
    };
    _classCallCheck(this, ResourceStore2);
    _this = _super.call(this);
    if (isIE10) {
      EventEmitter.call(_assertThisInitialized(_this));
    }
    _this.data = data || {};
    _this.options = options2;
    if (_this.options.keySeparator === void 0) {
      _this.options.keySeparator = ".";
    }
    if (_this.options.ignoreJSONStructure === void 0) {
      _this.options.ignoreJSONStructure = true;
    }
    return _this;
  }
  _createClass(ResourceStore2, [{
    key: "addNamespaces",
    value: function addNamespaces(ns) {
      if (this.options.ns.indexOf(ns) < 0) {
        this.options.ns.push(ns);
      }
    }
  }, {
    key: "removeNamespaces",
    value: function removeNamespaces(ns) {
      var index3 = this.options.ns.indexOf(ns);
      if (index3 > -1) {
        this.options.ns.splice(index3, 1);
      }
    }
  }, {
    key: "getResource",
    value: function getResource(lng, ns, key) {
      var options2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
      var keySeparator = options2.keySeparator !== void 0 ? options2.keySeparator : this.options.keySeparator;
      var ignoreJSONStructure = options2.ignoreJSONStructure !== void 0 ? options2.ignoreJSONStructure : this.options.ignoreJSONStructure;
      var path2 = [lng, ns];
      if (key && typeof key !== "string") path2 = path2.concat(key);
      if (key && typeof key === "string") path2 = path2.concat(keySeparator ? key.split(keySeparator) : key);
      if (lng.indexOf(".") > -1) {
        path2 = lng.split(".");
      }
      var result = getPath(this.data, path2);
      if (result || !ignoreJSONStructure || typeof key !== "string") return result;
      return deepFind(this.data && this.data[lng] && this.data[lng][ns], key, keySeparator);
    }
  }, {
    key: "addResource",
    value: function addResource(lng, ns, key, value) {
      var options2 = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {
        silent: false
      };
      var keySeparator = this.options.keySeparator;
      if (keySeparator === void 0) keySeparator = ".";
      var path2 = [lng, ns];
      if (key) path2 = path2.concat(keySeparator ? key.split(keySeparator) : key);
      if (lng.indexOf(".") > -1) {
        path2 = lng.split(".");
        value = ns;
        ns = path2[1];
      }
      this.addNamespaces(ns);
      setPath(this.data, path2, value);
      if (!options2.silent) this.emit("added", lng, ns, key, value);
    }
  }, {
    key: "addResources",
    value: function addResources(lng, ns, resources) {
      var options2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {
        silent: false
      };
      for (var m in resources) {
        if (typeof resources[m] === "string" || Object.prototype.toString.apply(resources[m]) === "[object Array]") this.addResource(lng, ns, m, resources[m], {
          silent: true
        });
      }
      if (!options2.silent) this.emit("added", lng, ns, resources);
    }
  }, {
    key: "addResourceBundle",
    value: function addResourceBundle(lng, ns, resources, deep, overwrite) {
      var options2 = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {
        silent: false
      };
      var path2 = [lng, ns];
      if (lng.indexOf(".") > -1) {
        path2 = lng.split(".");
        deep = resources;
        resources = ns;
        ns = path2[1];
      }
      this.addNamespaces(ns);
      var pack = getPath(this.data, path2) || {};
      if (deep) {
        deepExtend(pack, resources, overwrite);
      } else {
        pack = _objectSpread$1(_objectSpread$1({}, pack), resources);
      }
      setPath(this.data, path2, pack);
      if (!options2.silent) this.emit("added", lng, ns, resources);
    }
  }, {
    key: "removeResourceBundle",
    value: function removeResourceBundle(lng, ns) {
      if (this.hasResourceBundle(lng, ns)) {
        delete this.data[lng][ns];
      }
      this.removeNamespaces(ns);
      this.emit("removed", lng, ns);
    }
  }, {
    key: "hasResourceBundle",
    value: function hasResourceBundle(lng, ns) {
      return this.getResource(lng, ns) !== void 0;
    }
  }, {
    key: "getResourceBundle",
    value: function getResourceBundle(lng, ns) {
      if (!ns) ns = this.options.defaultNS;
      if (this.options.compatibilityAPI === "v1") return _objectSpread$1(_objectSpread$1({}, {}), this.getResource(lng, ns));
      return this.getResource(lng, ns);
    }
  }, {
    key: "getDataByLanguage",
    value: function getDataByLanguage(lng) {
      return this.data[lng];
    }
  }, {
    key: "hasLanguageSomeTranslations",
    value: function hasLanguageSomeTranslations(lng) {
      var data = this.getDataByLanguage(lng);
      var n = data && Object.keys(data) || [];
      return !!n.find(function(v) {
        return data[v] && Object.keys(data[v]).length > 0;
      });
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return this.data;
    }
  }]);
  return ResourceStore2;
}(EventEmitter);
var postProcessor = {
  processors: {},
  addPostProcessor: function addPostProcessor(module) {
    this.processors[module.name] = module;
  },
  handle: function handle2(processors, value, key, options2, translator) {
    var _this = this;
    processors.forEach(function(processor) {
      if (_this.processors[processor]) value = _this.processors[processor].process(value, key, options2, translator);
    });
    return value;
  }
};
function ownKeys$2(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys$2(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _createSuper$1(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$1();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$1() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var checkedLoadedFor = {};
var Translator = function(_EventEmitter) {
  _inherits(Translator2, _EventEmitter);
  var _super = _createSuper$1(Translator2);
  function Translator2(services) {
    var _this;
    var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    _classCallCheck(this, Translator2);
    _this = _super.call(this);
    if (isIE10) {
      EventEmitter.call(_assertThisInitialized(_this));
    }
    copy(["resourceStore", "languageUtils", "pluralResolver", "interpolator", "backendConnector", "i18nFormat", "utils"], services, _assertThisInitialized(_this));
    _this.options = options2;
    if (_this.options.keySeparator === void 0) {
      _this.options.keySeparator = ".";
    }
    _this.logger = baseLogger.create("translator");
    return _this;
  }
  _createClass(Translator2, [{
    key: "changeLanguage",
    value: function changeLanguage2(lng) {
      if (lng) this.language = lng;
    }
  }, {
    key: "exists",
    value: function exists2(key) {
      var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
        interpolation: {}
      };
      if (key === void 0 || key === null) {
        return false;
      }
      var resolved = this.resolve(key, options2);
      return resolved && resolved.res !== void 0;
    }
  }, {
    key: "extractFromKey",
    value: function extractFromKey(key, options2) {
      var nsSeparator = options2.nsSeparator !== void 0 ? options2.nsSeparator : this.options.nsSeparator;
      if (nsSeparator === void 0) nsSeparator = ":";
      var keySeparator = options2.keySeparator !== void 0 ? options2.keySeparator : this.options.keySeparator;
      var namespaces = options2.ns || this.options.defaultNS || [];
      var wouldCheckForNsInKey = nsSeparator && key.indexOf(nsSeparator) > -1;
      var seemsNaturalLanguage = !this.options.userDefinedKeySeparator && !options2.keySeparator && !this.options.userDefinedNsSeparator && !options2.nsSeparator && !looksLikeObjectPath(key, nsSeparator, keySeparator);
      if (wouldCheckForNsInKey && !seemsNaturalLanguage) {
        var m = key.match(this.interpolator.nestingRegexp);
        if (m && m.length > 0) {
          return {
            key,
            namespaces
          };
        }
        var parts = key.split(nsSeparator);
        if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1) namespaces = parts.shift();
        key = parts.join(keySeparator);
      }
      if (typeof namespaces === "string") namespaces = [namespaces];
      return {
        key,
        namespaces
      };
    }
  }, {
    key: "translate",
    value: function translate(keys2, options2, lastKey) {
      var _this2 = this;
      if (_typeof(options2) !== "object" && this.options.overloadTranslationOptionHandler) {
        options2 = this.options.overloadTranslationOptionHandler(arguments);
      }
      if (!options2) options2 = {};
      if (keys2 === void 0 || keys2 === null) return "";
      if (!Array.isArray(keys2)) keys2 = [String(keys2)];
      var returnDetails = options2.returnDetails !== void 0 ? options2.returnDetails : this.options.returnDetails;
      var keySeparator = options2.keySeparator !== void 0 ? options2.keySeparator : this.options.keySeparator;
      var _this$extractFromKey = this.extractFromKey(keys2[keys2.length - 1], options2), key = _this$extractFromKey.key, namespaces = _this$extractFromKey.namespaces;
      var namespace = namespaces[namespaces.length - 1];
      var lng = options2.lng || this.language;
      var appendNamespaceToCIMode = options2.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;
      if (lng && lng.toLowerCase() === "cimode") {
        if (appendNamespaceToCIMode) {
          var nsSeparator = options2.nsSeparator || this.options.nsSeparator;
          if (returnDetails) {
            resolved.res = "".concat(namespace).concat(nsSeparator).concat(key);
            return resolved;
          }
          return "".concat(namespace).concat(nsSeparator).concat(key);
        }
        if (returnDetails) {
          resolved.res = key;
          return resolved;
        }
        return key;
      }
      var resolved = this.resolve(keys2, options2);
      var res = resolved && resolved.res;
      var resUsedKey = resolved && resolved.usedKey || key;
      var resExactUsedKey = resolved && resolved.exactUsedKey || key;
      var resType = Object.prototype.toString.apply(res);
      var noObject = ["[object Number]", "[object Function]", "[object RegExp]"];
      var joinArrays = options2.joinArrays !== void 0 ? options2.joinArrays : this.options.joinArrays;
      var handleAsObjectInI18nFormat = !this.i18nFormat || this.i18nFormat.handleAsObject;
      var handleAsObject = typeof res !== "string" && typeof res !== "boolean" && typeof res !== "number";
      if (handleAsObjectInI18nFormat && res && handleAsObject && noObject.indexOf(resType) < 0 && !(typeof joinArrays === "string" && resType === "[object Array]")) {
        if (!options2.returnObjects && !this.options.returnObjects) {
          if (!this.options.returnedObjectHandler) {
            this.logger.warn("accessing an object - but returnObjects options is not enabled!");
          }
          var r = this.options.returnedObjectHandler ? this.options.returnedObjectHandler(resUsedKey, res, _objectSpread$2(_objectSpread$2({}, options2), {}, {
            ns: namespaces
          })) : "key '".concat(key, " (").concat(this.language, ")' returned an object instead of string.");
          if (returnDetails) {
            resolved.res = r;
            return resolved;
          }
          return r;
        }
        if (keySeparator) {
          var resTypeIsArray = resType === "[object Array]";
          var copy2 = resTypeIsArray ? [] : {};
          var newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;
          for (var m in res) {
            if (Object.prototype.hasOwnProperty.call(res, m)) {
              var deepKey = "".concat(newKeyToUse).concat(keySeparator).concat(m);
              copy2[m] = this.translate(deepKey, _objectSpread$2(_objectSpread$2({}, options2), {
                joinArrays: false,
                ns: namespaces
              }));
              if (copy2[m] === deepKey) copy2[m] = res[m];
            }
          }
          res = copy2;
        }
      } else if (handleAsObjectInI18nFormat && typeof joinArrays === "string" && resType === "[object Array]") {
        res = res.join(joinArrays);
        if (res) res = this.extendTranslation(res, keys2, options2, lastKey);
      } else {
        var usedDefault = false;
        var usedKey = false;
        var needsPluralHandling = options2.count !== void 0 && typeof options2.count !== "string";
        var hasDefaultValue = Translator2.hasDefaultValue(options2);
        var defaultValueSuffix = needsPluralHandling ? this.pluralResolver.getSuffix(lng, options2.count, options2) : "";
        var defaultValue = options2["defaultValue".concat(defaultValueSuffix)] || options2.defaultValue;
        if (!this.isValidLookup(res) && hasDefaultValue) {
          usedDefault = true;
          res = defaultValue;
        }
        if (!this.isValidLookup(res)) {
          usedKey = true;
          res = key;
        }
        var missingKeyNoValueFallbackToKey = options2.missingKeyNoValueFallbackToKey || this.options.missingKeyNoValueFallbackToKey;
        var resForMissing = missingKeyNoValueFallbackToKey && usedKey ? void 0 : res;
        var updateMissing = hasDefaultValue && defaultValue !== res && this.options.updateMissing;
        if (usedKey || usedDefault || updateMissing) {
          this.logger.log(updateMissing ? "updateKey" : "missingKey", lng, namespace, key, updateMissing ? defaultValue : res);
          if (keySeparator) {
            var fk = this.resolve(key, _objectSpread$2(_objectSpread$2({}, options2), {}, {
              keySeparator: false
            }));
            if (fk && fk.res) this.logger.warn("Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.");
          }
          var lngs = [];
          var fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, options2.lng || this.language);
          if (this.options.saveMissingTo === "fallback" && fallbackLngs && fallbackLngs[0]) {
            for (var i = 0; i < fallbackLngs.length; i++) {
              lngs.push(fallbackLngs[i]);
            }
          } else if (this.options.saveMissingTo === "all") {
            lngs = this.languageUtils.toResolveHierarchy(options2.lng || this.language);
          } else {
            lngs.push(options2.lng || this.language);
          }
          var send = function send2(l, k, specificDefaultValue) {
            var defaultForMissing = hasDefaultValue && specificDefaultValue !== res ? specificDefaultValue : resForMissing;
            if (_this2.options.missingKeyHandler) {
              _this2.options.missingKeyHandler(l, namespace, k, defaultForMissing, updateMissing, options2);
            } else if (_this2.backendConnector && _this2.backendConnector.saveMissing) {
              _this2.backendConnector.saveMissing(l, namespace, k, defaultForMissing, updateMissing, options2);
            }
            _this2.emit("missingKey", l, namespace, k, res);
          };
          if (this.options.saveMissing) {
            if (this.options.saveMissingPlurals && needsPluralHandling) {
              lngs.forEach(function(language) {
                _this2.pluralResolver.getSuffixes(language, options2).forEach(function(suffix) {
                  send([language], key + suffix, options2["defaultValue".concat(suffix)] || defaultValue);
                });
              });
            } else {
              send(lngs, key, defaultValue);
            }
          }
        }
        res = this.extendTranslation(res, keys2, options2, resolved, lastKey);
        if (usedKey && res === key && this.options.appendNamespaceToMissingKey) res = "".concat(namespace, ":").concat(key);
        if ((usedKey || usedDefault) && this.options.parseMissingKeyHandler) {
          if (this.options.compatibilityAPI !== "v1") {
            res = this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey ? "".concat(namespace, ":").concat(key) : key, usedDefault ? res : void 0);
          } else {
            res = this.options.parseMissingKeyHandler(res);
          }
        }
      }
      if (returnDetails) {
        resolved.res = res;
        return resolved;
      }
      return res;
    }
  }, {
    key: "extendTranslation",
    value: function extendTranslation(res, key, options2, resolved, lastKey) {
      var _this3 = this;
      if (this.i18nFormat && this.i18nFormat.parse) {
        res = this.i18nFormat.parse(res, _objectSpread$2(_objectSpread$2({}, this.options.interpolation.defaultVariables), options2), resolved.usedLng, resolved.usedNS, resolved.usedKey, {
          resolved
        });
      } else if (!options2.skipInterpolation) {
        if (options2.interpolation) this.interpolator.init(_objectSpread$2(_objectSpread$2({}, options2), {
          interpolation: _objectSpread$2(_objectSpread$2({}, this.options.interpolation), options2.interpolation)
        }));
        var skipOnVariables = typeof res === "string" && (options2 && options2.interpolation && options2.interpolation.skipOnVariables !== void 0 ? options2.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables);
        var nestBef;
        if (skipOnVariables) {
          var nb = res.match(this.interpolator.nestingRegexp);
          nestBef = nb && nb.length;
        }
        var data = options2.replace && typeof options2.replace !== "string" ? options2.replace : options2;
        if (this.options.interpolation.defaultVariables) data = _objectSpread$2(_objectSpread$2({}, this.options.interpolation.defaultVariables), data);
        res = this.interpolator.interpolate(res, data, options2.lng || this.language, options2);
        if (skipOnVariables) {
          var na = res.match(this.interpolator.nestingRegexp);
          var nestAft = na && na.length;
          if (nestBef < nestAft) options2.nest = false;
        }
        if (options2.nest !== false) res = this.interpolator.nest(res, function() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          if (lastKey && lastKey[0] === args[0] && !options2.context) {
            _this3.logger.warn("It seems you are nesting recursively key: ".concat(args[0], " in key: ").concat(key[0]));
            return null;
          }
          return _this3.translate.apply(_this3, args.concat([key]));
        }, options2);
        if (options2.interpolation) this.interpolator.reset();
      }
      var postProcess = options2.postProcess || this.options.postProcess;
      var postProcessorNames = typeof postProcess === "string" ? [postProcess] : postProcess;
      if (res !== void 0 && res !== null && postProcessorNames && postProcessorNames.length && options2.applyPostProcessor !== false) {
        res = postProcessor.handle(postProcessorNames, res, key, this.options && this.options.postProcessPassResolved ? _objectSpread$2({
          i18nResolved: resolved
        }, options2) : options2, this);
      }
      return res;
    }
  }, {
    key: "resolve",
    value: function resolve(keys2) {
      var _this4 = this;
      var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var found;
      var usedKey;
      var exactUsedKey;
      var usedLng;
      var usedNS;
      if (typeof keys2 === "string") keys2 = [keys2];
      keys2.forEach(function(k) {
        if (_this4.isValidLookup(found)) return;
        var extracted = _this4.extractFromKey(k, options2);
        var key = extracted.key;
        usedKey = key;
        var namespaces = extracted.namespaces;
        if (_this4.options.fallbackNS) namespaces = namespaces.concat(_this4.options.fallbackNS);
        var needsPluralHandling = options2.count !== void 0 && typeof options2.count !== "string";
        var needsZeroSuffixLookup = needsPluralHandling && !options2.ordinal && options2.count === 0 && _this4.pluralResolver.shouldUseIntlApi();
        var needsContextHandling = options2.context !== void 0 && (typeof options2.context === "string" || typeof options2.context === "number") && options2.context !== "";
        var codes2 = options2.lngs ? options2.lngs : _this4.languageUtils.toResolveHierarchy(options2.lng || _this4.language, options2.fallbackLng);
        namespaces.forEach(function(ns) {
          if (_this4.isValidLookup(found)) return;
          usedNS = ns;
          if (!checkedLoadedFor["".concat(codes2[0], "-").concat(ns)] && _this4.utils && _this4.utils.hasLoadedNamespace && !_this4.utils.hasLoadedNamespace(usedNS)) {
            checkedLoadedFor["".concat(codes2[0], "-").concat(ns)] = true;
            _this4.logger.warn('key "'.concat(usedKey, '" for languages "').concat(codes2.join(", "), `" won't get resolved as namespace "`).concat(usedNS, '" was not yet loaded'), "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");
          }
          codes2.forEach(function(code3) {
            if (_this4.isValidLookup(found)) return;
            usedLng = code3;
            var finalKeys = [key];
            if (_this4.i18nFormat && _this4.i18nFormat.addLookupKeys) {
              _this4.i18nFormat.addLookupKeys(finalKeys, key, code3, ns, options2);
            } else {
              var pluralSuffix;
              if (needsPluralHandling) pluralSuffix = _this4.pluralResolver.getSuffix(code3, options2.count, options2);
              var zeroSuffix = "".concat(_this4.options.pluralSeparator, "zero");
              if (needsPluralHandling) {
                finalKeys.push(key + pluralSuffix);
                if (needsZeroSuffixLookup) {
                  finalKeys.push(key + zeroSuffix);
                }
              }
              if (needsContextHandling) {
                var contextKey = "".concat(key).concat(_this4.options.contextSeparator).concat(options2.context);
                finalKeys.push(contextKey);
                if (needsPluralHandling) {
                  finalKeys.push(contextKey + pluralSuffix);
                  if (needsZeroSuffixLookup) {
                    finalKeys.push(contextKey + zeroSuffix);
                  }
                }
              }
            }
            var possibleKey;
            while (possibleKey = finalKeys.pop()) {
              if (!_this4.isValidLookup(found)) {
                exactUsedKey = possibleKey;
                found = _this4.getResource(code3, ns, possibleKey, options2);
              }
            }
          });
        });
      });
      return {
        res: found,
        usedKey,
        exactUsedKey,
        usedLng,
        usedNS
      };
    }
  }, {
    key: "isValidLookup",
    value: function isValidLookup(res) {
      return res !== void 0 && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === "");
    }
  }, {
    key: "getResource",
    value: function getResource(code3, ns, key) {
      var options2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
      if (this.i18nFormat && this.i18nFormat.getResource) return this.i18nFormat.getResource(code3, ns, key, options2);
      return this.resourceStore.getResource(code3, ns, key, options2);
    }
  }], [{
    key: "hasDefaultValue",
    value: function hasDefaultValue(options2) {
      var prefix = "defaultValue";
      for (var option in options2) {
        if (Object.prototype.hasOwnProperty.call(options2, option) && prefix === option.substring(0, prefix.length) && void 0 !== options2[option]) {
          return true;
        }
      }
      return false;
    }
  }]);
  return Translator2;
}(EventEmitter);
function capitalize(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}
var LanguageUtil = function() {
  function LanguageUtil2(options2) {
    _classCallCheck(this, LanguageUtil2);
    this.options = options2;
    this.supportedLngs = this.options.supportedLngs || false;
    this.logger = baseLogger.create("languageUtils");
  }
  _createClass(LanguageUtil2, [{
    key: "getScriptPartFromCode",
    value: function getScriptPartFromCode(code3) {
      if (!code3 || code3.indexOf("-") < 0) return null;
      var p = code3.split("-");
      if (p.length === 2) return null;
      p.pop();
      if (p[p.length - 1].toLowerCase() === "x") return null;
      return this.formatLanguageCode(p.join("-"));
    }
  }, {
    key: "getLanguagePartFromCode",
    value: function getLanguagePartFromCode(code3) {
      if (!code3 || code3.indexOf("-") < 0) return code3;
      var p = code3.split("-");
      return this.formatLanguageCode(p[0]);
    }
  }, {
    key: "formatLanguageCode",
    value: function formatLanguageCode(code3) {
      if (typeof code3 === "string" && code3.indexOf("-") > -1) {
        var specialCases = ["hans", "hant", "latn", "cyrl", "cans", "mong", "arab"];
        var p = code3.split("-");
        if (this.options.lowerCaseLng) {
          p = p.map(function(part) {
            return part.toLowerCase();
          });
        } else if (p.length === 2) {
          p[0] = p[0].toLowerCase();
          p[1] = p[1].toUpperCase();
          if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());
        } else if (p.length === 3) {
          p[0] = p[0].toLowerCase();
          if (p[1].length === 2) p[1] = p[1].toUpperCase();
          if (p[0] !== "sgn" && p[2].length === 2) p[2] = p[2].toUpperCase();
          if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());
          if (specialCases.indexOf(p[2].toLowerCase()) > -1) p[2] = capitalize(p[2].toLowerCase());
        }
        return p.join("-");
      }
      return this.options.cleanCode || this.options.lowerCaseLng ? code3.toLowerCase() : code3;
    }
  }, {
    key: "isSupportedCode",
    value: function isSupportedCode(code3) {
      if (this.options.load === "languageOnly" || this.options.nonExplicitSupportedLngs) {
        code3 = this.getLanguagePartFromCode(code3);
      }
      return !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(code3) > -1;
    }
  }, {
    key: "getBestMatchFromCodes",
    value: function getBestMatchFromCodes(codes2) {
      var _this = this;
      if (!codes2) return null;
      var found;
      codes2.forEach(function(code3) {
        if (found) return;
        var cleanedLng = _this.formatLanguageCode(code3);
        if (!_this.options.supportedLngs || _this.isSupportedCode(cleanedLng)) found = cleanedLng;
      });
      if (!found && this.options.supportedLngs) {
        codes2.forEach(function(code3) {
          if (found) return;
          var lngOnly = _this.getLanguagePartFromCode(code3);
          if (_this.isSupportedCode(lngOnly)) return found = lngOnly;
          found = _this.options.supportedLngs.find(function(supportedLng) {
            if (supportedLng.indexOf(lngOnly) === 0) return supportedLng;
          });
        });
      }
      if (!found) found = this.getFallbackCodes(this.options.fallbackLng)[0];
      return found;
    }
  }, {
    key: "getFallbackCodes",
    value: function getFallbackCodes(fallbacks, code3) {
      if (!fallbacks) return [];
      if (typeof fallbacks === "function") fallbacks = fallbacks(code3);
      if (typeof fallbacks === "string") fallbacks = [fallbacks];
      if (Object.prototype.toString.apply(fallbacks) === "[object Array]") return fallbacks;
      if (!code3) return fallbacks["default"] || [];
      var found = fallbacks[code3];
      if (!found) found = fallbacks[this.getScriptPartFromCode(code3)];
      if (!found) found = fallbacks[this.formatLanguageCode(code3)];
      if (!found) found = fallbacks[this.getLanguagePartFromCode(code3)];
      if (!found) found = fallbacks["default"];
      return found || [];
    }
  }, {
    key: "toResolveHierarchy",
    value: function toResolveHierarchy(code3, fallbackCode) {
      var _this2 = this;
      var fallbackCodes = this.getFallbackCodes(fallbackCode || this.options.fallbackLng || [], code3);
      var codes2 = [];
      var addCode = function addCode2(c) {
        if (!c) return;
        if (_this2.isSupportedCode(c)) {
          codes2.push(c);
        } else {
          _this2.logger.warn("rejecting language code not found in supportedLngs: ".concat(c));
        }
      };
      if (typeof code3 === "string" && code3.indexOf("-") > -1) {
        if (this.options.load !== "languageOnly") addCode(this.formatLanguageCode(code3));
        if (this.options.load !== "languageOnly" && this.options.load !== "currentOnly") addCode(this.getScriptPartFromCode(code3));
        if (this.options.load !== "currentOnly") addCode(this.getLanguagePartFromCode(code3));
      } else if (typeof code3 === "string") {
        addCode(this.formatLanguageCode(code3));
      }
      fallbackCodes.forEach(function(fc) {
        if (codes2.indexOf(fc) < 0) addCode(_this2.formatLanguageCode(fc));
      });
      return codes2;
    }
  }]);
  return LanguageUtil2;
}();
var sets = [{
  lngs: ["ach", "ak", "am", "arn", "br", "fil", "gun", "ln", "mfe", "mg", "mi", "oc", "pt", "pt-BR", "tg", "tl", "ti", "tr", "uz", "wa"],
  nr: [1, 2],
  fc: 1
}, {
  lngs: ["af", "an", "ast", "az", "bg", "bn", "ca", "da", "de", "dev", "el", "en", "eo", "es", "et", "eu", "fi", "fo", "fur", "fy", "gl", "gu", "ha", "hi", "hu", "hy", "ia", "it", "kk", "kn", "ku", "lb", "mai", "ml", "mn", "mr", "nah", "nap", "nb", "ne", "nl", "nn", "no", "nso", "pa", "pap", "pms", "ps", "pt-PT", "rm", "sco", "se", "si", "so", "son", "sq", "sv", "sw", "ta", "te", "tk", "ur", "yo"],
  nr: [1, 2],
  fc: 2
}, {
  lngs: ["ay", "bo", "cgg", "fa", "ht", "id", "ja", "jbo", "ka", "km", "ko", "ky", "lo", "ms", "sah", "su", "th", "tt", "ug", "vi", "wo", "zh"],
  nr: [1],
  fc: 3
}, {
  lngs: ["be", "bs", "cnr", "dz", "hr", "ru", "sr", "uk"],
  nr: [1, 2, 5],
  fc: 4
}, {
  lngs: ["ar"],
  nr: [0, 1, 2, 3, 11, 100],
  fc: 5
}, {
  lngs: ["cs", "sk"],
  nr: [1, 2, 5],
  fc: 6
}, {
  lngs: ["csb", "pl"],
  nr: [1, 2, 5],
  fc: 7
}, {
  lngs: ["cy"],
  nr: [1, 2, 3, 8],
  fc: 8
}, {
  lngs: ["fr"],
  nr: [1, 2],
  fc: 9
}, {
  lngs: ["ga"],
  nr: [1, 2, 3, 7, 11],
  fc: 10
}, {
  lngs: ["gd"],
  nr: [1, 2, 3, 20],
  fc: 11
}, {
  lngs: ["is"],
  nr: [1, 2],
  fc: 12
}, {
  lngs: ["jv"],
  nr: [0, 1],
  fc: 13
}, {
  lngs: ["kw"],
  nr: [1, 2, 3, 4],
  fc: 14
}, {
  lngs: ["lt"],
  nr: [1, 2, 10],
  fc: 15
}, {
  lngs: ["lv"],
  nr: [1, 2, 0],
  fc: 16
}, {
  lngs: ["mk"],
  nr: [1, 2],
  fc: 17
}, {
  lngs: ["mnk"],
  nr: [0, 1, 2],
  fc: 18
}, {
  lngs: ["mt"],
  nr: [1, 2, 11, 20],
  fc: 19
}, {
  lngs: ["or"],
  nr: [2, 1],
  fc: 2
}, {
  lngs: ["ro"],
  nr: [1, 2, 20],
  fc: 20
}, {
  lngs: ["sl"],
  nr: [5, 1, 2, 3],
  fc: 21
}, {
  lngs: ["he", "iw"],
  nr: [1, 2, 20, 21],
  fc: 22
}];
var _rulesPluralsTypes = {
  1: function _(n) {
    return Number(n > 1);
  },
  2: function _2(n) {
    return Number(n != 1);
  },
  3: function _3(n) {
    return 0;
  },
  4: function _4(n) {
    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
  },
  5: function _5(n) {
    return Number(n == 0 ? 0 : n == 1 ? 1 : n == 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5);
  },
  6: function _6(n) {
    return Number(n == 1 ? 0 : n >= 2 && n <= 4 ? 1 : 2);
  },
  7: function _7(n) {
    return Number(n == 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
  },
  8: function _8(n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : n != 8 && n != 11 ? 2 : 3);
  },
  9: function _9(n) {
    return Number(n >= 2);
  },
  10: function _10(n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : n < 7 ? 2 : n < 11 ? 3 : 4);
  },
  11: function _11(n) {
    return Number(n == 1 || n == 11 ? 0 : n == 2 || n == 12 ? 1 : n > 2 && n < 20 ? 2 : 3);
  },
  12: function _12(n) {
    return Number(n % 10 != 1 || n % 100 == 11);
  },
  13: function _13(n) {
    return Number(n !== 0);
  },
  14: function _14(n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : n == 3 ? 2 : 3);
  },
  15: function _15(n) {
    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
  },
  16: function _16(n) {
    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n !== 0 ? 1 : 2);
  },
  17: function _17(n) {
    return Number(n == 1 || n % 10 == 1 && n % 100 != 11 ? 0 : 1);
  },
  18: function _18(n) {
    return Number(n == 0 ? 0 : n == 1 ? 1 : 2);
  },
  19: function _19(n) {
    return Number(n == 1 ? 0 : n == 0 || n % 100 > 1 && n % 100 < 11 ? 1 : n % 100 > 10 && n % 100 < 20 ? 2 : 3);
  },
  20: function _20(n) {
    return Number(n == 1 ? 0 : n == 0 || n % 100 > 0 && n % 100 < 20 ? 1 : 2);
  },
  21: function _21(n) {
    return Number(n % 100 == 1 ? 1 : n % 100 == 2 ? 2 : n % 100 == 3 || n % 100 == 4 ? 3 : 0);
  },
  22: function _22(n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : (n < 0 || n > 10) && n % 10 == 0 ? 2 : 3);
  }
};
var deprecatedJsonVersions = ["v1", "v2", "v3"];
var suffixesOrder = {
  zero: 0,
  one: 1,
  two: 2,
  few: 3,
  many: 4,
  other: 5
};
function createRules() {
  var rules = {};
  sets.forEach(function(set) {
    set.lngs.forEach(function(l) {
      rules[l] = {
        numbers: set.nr,
        plurals: _rulesPluralsTypes[set.fc]
      };
    });
  });
  return rules;
}
var PluralResolver = function() {
  function PluralResolver2(languageUtils) {
    var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    _classCallCheck(this, PluralResolver2);
    this.languageUtils = languageUtils;
    this.options = options2;
    this.logger = baseLogger.create("pluralResolver");
    if ((!this.options.compatibilityJSON || this.options.compatibilityJSON === "v4") && (typeof Intl === "undefined" || !Intl.PluralRules)) {
      this.options.compatibilityJSON = "v3";
      this.logger.error("Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.");
    }
    this.rules = createRules();
  }
  _createClass(PluralResolver2, [{
    key: "addRule",
    value: function addRule(lng, obj) {
      this.rules[lng] = obj;
    }
  }, {
    key: "getRule",
    value: function getRule(code3) {
      var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      if (this.shouldUseIntlApi()) {
        try {
          return new Intl.PluralRules(code3, {
            type: options2.ordinal ? "ordinal" : "cardinal"
          });
        } catch (_unused) {
          return;
        }
      }
      return this.rules[code3] || this.rules[this.languageUtils.getLanguagePartFromCode(code3)];
    }
  }, {
    key: "needsPlural",
    value: function needsPlural(code3) {
      var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var rule = this.getRule(code3, options2);
      if (this.shouldUseIntlApi()) {
        return rule && rule.resolvedOptions().pluralCategories.length > 1;
      }
      return rule && rule.numbers.length > 1;
    }
  }, {
    key: "getPluralFormsOfKey",
    value: function getPluralFormsOfKey(code3, key) {
      var options2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      return this.getSuffixes(code3, options2).map(function(suffix) {
        return "".concat(key).concat(suffix);
      });
    }
  }, {
    key: "getSuffixes",
    value: function getSuffixes(code3) {
      var _this = this;
      var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var rule = this.getRule(code3, options2);
      if (!rule) {
        return [];
      }
      if (this.shouldUseIntlApi()) {
        return rule.resolvedOptions().pluralCategories.sort(function(pluralCategory1, pluralCategory2) {
          return suffixesOrder[pluralCategory1] - suffixesOrder[pluralCategory2];
        }).map(function(pluralCategory) {
          return "".concat(_this.options.prepend).concat(pluralCategory);
        });
      }
      return rule.numbers.map(function(number) {
        return _this.getSuffix(code3, number, options2);
      });
    }
  }, {
    key: "getSuffix",
    value: function getSuffix(code3, count) {
      var options2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      var rule = this.getRule(code3, options2);
      if (rule) {
        if (this.shouldUseIntlApi()) {
          return "".concat(this.options.prepend).concat(rule.select(count));
        }
        return this.getSuffixRetroCompatible(rule, count);
      }
      this.logger.warn("no plural rule found for: ".concat(code3));
      return "";
    }
  }, {
    key: "getSuffixRetroCompatible",
    value: function getSuffixRetroCompatible(rule, count) {
      var _this2 = this;
      var idx = rule.noAbs ? rule.plurals(count) : rule.plurals(Math.abs(count));
      var suffix = rule.numbers[idx];
      if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
        if (suffix === 2) {
          suffix = "plural";
        } else if (suffix === 1) {
          suffix = "";
        }
      }
      var returnSuffix = function returnSuffix2() {
        return _this2.options.prepend && suffix.toString() ? _this2.options.prepend + suffix.toString() : suffix.toString();
      };
      if (this.options.compatibilityJSON === "v1") {
        if (suffix === 1) return "";
        if (typeof suffix === "number") return "_plural_".concat(suffix.toString());
        return returnSuffix();
      } else if (this.options.compatibilityJSON === "v2") {
        return returnSuffix();
      } else if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
        return returnSuffix();
      }
      return this.options.prepend && idx.toString() ? this.options.prepend + idx.toString() : idx.toString();
    }
  }, {
    key: "shouldUseIntlApi",
    value: function shouldUseIntlApi() {
      return !deprecatedJsonVersions.includes(this.options.compatibilityJSON);
    }
  }]);
  return PluralResolver2;
}();
function ownKeys$3(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$3(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys$3(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$3(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
var Interpolator = function() {
  function Interpolator2() {
    var options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    _classCallCheck(this, Interpolator2);
    this.logger = baseLogger.create("interpolator");
    this.options = options2;
    this.format = options2.interpolation && options2.interpolation.format || function(value) {
      return value;
    };
    this.init(options2);
  }
  _createClass(Interpolator2, [{
    key: "init",
    value: function init3() {
      var options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      if (!options2.interpolation) options2.interpolation = {
        escapeValue: true
      };
      var iOpts = options2.interpolation;
      this.escape = iOpts.escape !== void 0 ? iOpts.escape : escape;
      this.escapeValue = iOpts.escapeValue !== void 0 ? iOpts.escapeValue : true;
      this.useRawValueToEscape = iOpts.useRawValueToEscape !== void 0 ? iOpts.useRawValueToEscape : false;
      this.prefix = iOpts.prefix ? regexEscape(iOpts.prefix) : iOpts.prefixEscaped || "{{";
      this.suffix = iOpts.suffix ? regexEscape(iOpts.suffix) : iOpts.suffixEscaped || "}}";
      this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ",";
      this.unescapePrefix = iOpts.unescapeSuffix ? "" : iOpts.unescapePrefix || "-";
      this.unescapeSuffix = this.unescapePrefix ? "" : iOpts.unescapeSuffix || "";
      this.nestingPrefix = iOpts.nestingPrefix ? regexEscape(iOpts.nestingPrefix) : iOpts.nestingPrefixEscaped || regexEscape("$t(");
      this.nestingSuffix = iOpts.nestingSuffix ? regexEscape(iOpts.nestingSuffix) : iOpts.nestingSuffixEscaped || regexEscape(")");
      this.nestingOptionsSeparator = iOpts.nestingOptionsSeparator ? iOpts.nestingOptionsSeparator : iOpts.nestingOptionsSeparator || ",";
      this.maxReplaces = iOpts.maxReplaces ? iOpts.maxReplaces : 1e3;
      this.alwaysFormat = iOpts.alwaysFormat !== void 0 ? iOpts.alwaysFormat : false;
      this.resetRegExp();
    }
  }, {
    key: "reset",
    value: function reset() {
      if (this.options) this.init(this.options);
    }
  }, {
    key: "resetRegExp",
    value: function resetRegExp() {
      var regexpStr = "".concat(this.prefix, "(.+?)").concat(this.suffix);
      this.regexp = new RegExp(regexpStr, "g");
      var regexpUnescapeStr = "".concat(this.prefix).concat(this.unescapePrefix, "(.+?)").concat(this.unescapeSuffix).concat(this.suffix);
      this.regexpUnescape = new RegExp(regexpUnescapeStr, "g");
      var nestingRegexpStr = "".concat(this.nestingPrefix, "(.+?)").concat(this.nestingSuffix);
      this.nestingRegexp = new RegExp(nestingRegexpStr, "g");
    }
  }, {
    key: "interpolate",
    value: function interpolate(str, data, lng, options2) {
      var _this = this;
      var match;
      var value;
      var replaces;
      var defaultData = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};
      function regexSafe(val) {
        return val.replace(/\$/g, "$$$$");
      }
      var handleFormat = function handleFormat2(key) {
        if (key.indexOf(_this.formatSeparator) < 0) {
          var path2 = getPathWithDefaults(data, defaultData, key);
          return _this.alwaysFormat ? _this.format(path2, void 0, lng, _objectSpread$3(_objectSpread$3(_objectSpread$3({}, options2), data), {}, {
            interpolationkey: key
          })) : path2;
        }
        var p = key.split(_this.formatSeparator);
        var k = p.shift().trim();
        var f = p.join(_this.formatSeparator).trim();
        return _this.format(getPathWithDefaults(data, defaultData, k), f, lng, _objectSpread$3(_objectSpread$3(_objectSpread$3({}, options2), data), {}, {
          interpolationkey: k
        }));
      };
      this.resetRegExp();
      var missingInterpolationHandler = options2 && options2.missingInterpolationHandler || this.options.missingInterpolationHandler;
      var skipOnVariables = options2 && options2.interpolation && options2.interpolation.skipOnVariables !== void 0 ? options2.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables;
      var todos = [{
        regex: this.regexpUnescape,
        safeValue: function safeValue(val) {
          return regexSafe(val);
        }
      }, {
        regex: this.regexp,
        safeValue: function safeValue(val) {
          return _this.escapeValue ? regexSafe(_this.escape(val)) : regexSafe(val);
        }
      }];
      todos.forEach(function(todo) {
        replaces = 0;
        while (match = todo.regex.exec(str)) {
          var matchedVar = match[1].trim();
          value = handleFormat(matchedVar);
          if (value === void 0) {
            if (typeof missingInterpolationHandler === "function") {
              var temp = missingInterpolationHandler(str, match, options2);
              value = typeof temp === "string" ? temp : "";
            } else if (options2 && options2.hasOwnProperty(matchedVar)) {
              value = "";
            } else if (skipOnVariables) {
              value = match[0];
              continue;
            } else {
              _this.logger.warn("missed to pass in variable ".concat(matchedVar, " for interpolating ").concat(str));
              value = "";
            }
          } else if (typeof value !== "string" && !_this.useRawValueToEscape) {
            value = makeString(value);
          }
          var safeValue = todo.safeValue(value);
          str = str.replace(match[0], safeValue);
          if (skipOnVariables) {
            todo.regex.lastIndex += value.length;
            todo.regex.lastIndex -= match[0].length;
          } else {
            todo.regex.lastIndex = 0;
          }
          replaces++;
          if (replaces >= _this.maxReplaces) {
            break;
          }
        }
      });
      return str;
    }
  }, {
    key: "nest",
    value: function nest(str, fc) {
      var _this2 = this;
      var options2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      var match;
      var value;
      var clonedOptions = _objectSpread$3({}, options2);
      clonedOptions.applyPostProcessor = false;
      delete clonedOptions.defaultValue;
      function handleHasOptions(key, inheritedOptions) {
        var sep = this.nestingOptionsSeparator;
        if (key.indexOf(sep) < 0) return key;
        var c = key.split(new RegExp("".concat(sep, "[ ]*{")));
        var optionsString = "{".concat(c[1]);
        key = c[0];
        optionsString = this.interpolate(optionsString, clonedOptions);
        var matchedSingleQuotes = optionsString.match(/'/g);
        var matchedDoubleQuotes = optionsString.match(/"/g);
        if (matchedSingleQuotes && matchedSingleQuotes.length % 2 === 0 && !matchedDoubleQuotes || matchedDoubleQuotes.length % 2 !== 0) {
          optionsString = optionsString.replace(/'/g, '"');
        }
        try {
          clonedOptions = JSON.parse(optionsString);
          if (inheritedOptions) clonedOptions = _objectSpread$3(_objectSpread$3({}, inheritedOptions), clonedOptions);
        } catch (e) {
          this.logger.warn("failed parsing options string in nesting for key ".concat(key), e);
          return "".concat(key).concat(sep).concat(optionsString);
        }
        delete clonedOptions.defaultValue;
        return key;
      }
      while (match = this.nestingRegexp.exec(str)) {
        var formatters = [];
        var doReduce = false;
        if (match[0].indexOf(this.formatSeparator) !== -1 && !/{.*}/.test(match[1])) {
          var r = match[1].split(this.formatSeparator).map(function(elem) {
            return elem.trim();
          });
          match[1] = r.shift();
          formatters = r;
          doReduce = true;
        }
        value = fc(handleHasOptions.call(this, match[1].trim(), clonedOptions), clonedOptions);
        if (value && match[0] === str && typeof value !== "string") return value;
        if (typeof value !== "string") value = makeString(value);
        if (!value) {
          this.logger.warn("missed to resolve ".concat(match[1], " for nesting ").concat(str));
          value = "";
        }
        if (doReduce) {
          value = formatters.reduce(function(v, f) {
            return _this2.format(v, f, options2.lng, _objectSpread$3(_objectSpread$3({}, options2), {}, {
              interpolationkey: match[1].trim()
            }));
          }, value.trim());
        }
        str = str.replace(match[0], value);
        this.regexp.lastIndex = 0;
      }
      return str;
    }
  }]);
  return Interpolator2;
}();
function ownKeys$4(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$4(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys$4(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$4(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function parseFormatStr(formatStr) {
  var formatName = formatStr.toLowerCase().trim();
  var formatOptions = {};
  if (formatStr.indexOf("(") > -1) {
    var p = formatStr.split("(");
    formatName = p[0].toLowerCase().trim();
    var optStr = p[1].substring(0, p[1].length - 1);
    if (formatName === "currency" && optStr.indexOf(":") < 0) {
      if (!formatOptions.currency) formatOptions.currency = optStr.trim();
    } else if (formatName === "relativetime" && optStr.indexOf(":") < 0) {
      if (!formatOptions.range) formatOptions.range = optStr.trim();
    } else {
      var opts = optStr.split(";");
      opts.forEach(function(opt) {
        if (!opt) return;
        var _opt$split = opt.split(":"), _opt$split2 = _toArray(_opt$split), key = _opt$split2[0], rest = _opt$split2.slice(1);
        var val = rest.join(":").trim().replace(/^'+|'+$/g, "");
        if (!formatOptions[key.trim()]) formatOptions[key.trim()] = val;
        if (val === "false") formatOptions[key.trim()] = false;
        if (val === "true") formatOptions[key.trim()] = true;
        if (!isNaN(val)) formatOptions[key.trim()] = parseInt(val, 10);
      });
    }
  }
  return {
    formatName,
    formatOptions
  };
}
function createCachedFormatter(fn2) {
  var cache = {};
  return function invokeFormatter(val, lng, options2) {
    var key = lng + JSON.stringify(options2);
    var formatter = cache[key];
    if (!formatter) {
      formatter = fn2(lng, options2);
      cache[key] = formatter;
    }
    return formatter(val);
  };
}
var Formatter = function() {
  function Formatter2() {
    var options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    _classCallCheck(this, Formatter2);
    this.logger = baseLogger.create("formatter");
    this.options = options2;
    this.formats = {
      number: createCachedFormatter(function(lng, options3) {
        var formatter = new Intl.NumberFormat(lng, options3);
        return function(val) {
          return formatter.format(val);
        };
      }),
      currency: createCachedFormatter(function(lng, options3) {
        var formatter = new Intl.NumberFormat(lng, _objectSpread$4(_objectSpread$4({}, options3), {}, {
          style: "currency"
        }));
        return function(val) {
          return formatter.format(val);
        };
      }),
      datetime: createCachedFormatter(function(lng, options3) {
        var formatter = new Intl.DateTimeFormat(lng, _objectSpread$4({}, options3));
        return function(val) {
          return formatter.format(val);
        };
      }),
      relativetime: createCachedFormatter(function(lng, options3) {
        var formatter = new Intl.RelativeTimeFormat(lng, _objectSpread$4({}, options3));
        return function(val) {
          return formatter.format(val, options3.range || "day");
        };
      }),
      list: createCachedFormatter(function(lng, options3) {
        var formatter = new Intl.ListFormat(lng, _objectSpread$4({}, options3));
        return function(val) {
          return formatter.format(val);
        };
      })
    };
    this.init(options2);
  }
  _createClass(Formatter2, [{
    key: "init",
    value: function init3(services) {
      var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
        interpolation: {}
      };
      var iOpts = options2.interpolation;
      this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ",";
    }
  }, {
    key: "add",
    value: function add(name, fc) {
      this.formats[name.toLowerCase().trim()] = fc;
    }
  }, {
    key: "addCached",
    value: function addCached(name, fc) {
      this.formats[name.toLowerCase().trim()] = createCachedFormatter(fc);
    }
  }, {
    key: "format",
    value: function format(value, _format, lng, options2) {
      var _this = this;
      var formats = _format.split(this.formatSeparator);
      var result = formats.reduce(function(mem, f) {
        var _parseFormatStr = parseFormatStr(f), formatName = _parseFormatStr.formatName, formatOptions = _parseFormatStr.formatOptions;
        if (_this.formats[formatName]) {
          var formatted = mem;
          try {
            var valOptions = options2 && options2.formatParams && options2.formatParams[options2.interpolationkey] || {};
            var l = valOptions.locale || valOptions.lng || options2.locale || options2.lng || lng;
            formatted = _this.formats[formatName](mem, l, _objectSpread$4(_objectSpread$4(_objectSpread$4({}, formatOptions), options2), valOptions));
          } catch (error2) {
            _this.logger.warn(error2);
          }
          return formatted;
        } else {
          _this.logger.warn("there was no format function for ".concat(formatName));
        }
        return mem;
      }, value);
      return result;
    }
  }]);
  return Formatter2;
}();
function ownKeys$5(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$5(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys$5(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$5(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _createSuper$2(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$2();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$2() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function removePending(q, name) {
  if (q.pending[name] !== void 0) {
    delete q.pending[name];
    q.pendingCount--;
  }
}
var Connector = function(_EventEmitter) {
  _inherits(Connector2, _EventEmitter);
  var _super = _createSuper$2(Connector2);
  function Connector2(backend, store, services) {
    var _this;
    var options2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    _classCallCheck(this, Connector2);
    _this = _super.call(this);
    if (isIE10) {
      EventEmitter.call(_assertThisInitialized(_this));
    }
    _this.backend = backend;
    _this.store = store;
    _this.services = services;
    _this.languageUtils = services.languageUtils;
    _this.options = options2;
    _this.logger = baseLogger.create("backendConnector");
    _this.waitingReads = [];
    _this.maxParallelReads = options2.maxParallelReads || 10;
    _this.readingCalls = 0;
    _this.maxRetries = options2.maxRetries >= 0 ? options2.maxRetries : 5;
    _this.retryTimeout = options2.retryTimeout >= 1 ? options2.retryTimeout : 350;
    _this.state = {};
    _this.queue = [];
    if (_this.backend && _this.backend.init) {
      _this.backend.init(services, options2.backend, options2);
    }
    return _this;
  }
  _createClass(Connector2, [{
    key: "queueLoad",
    value: function queueLoad(languages, namespaces, options2, callback) {
      var _this2 = this;
      var toLoad = {};
      var pending = {};
      var toLoadLanguages = {};
      var toLoadNamespaces = {};
      languages.forEach(function(lng) {
        var hasAllNamespaces = true;
        namespaces.forEach(function(ns) {
          var name = "".concat(lng, "|").concat(ns);
          if (!options2.reload && _this2.store.hasResourceBundle(lng, ns)) {
            _this2.state[name] = 2;
          } else if (_this2.state[name] < 0) ;
          else if (_this2.state[name] === 1) {
            if (pending[name] === void 0) pending[name] = true;
          } else {
            _this2.state[name] = 1;
            hasAllNamespaces = false;
            if (pending[name] === void 0) pending[name] = true;
            if (toLoad[name] === void 0) toLoad[name] = true;
            if (toLoadNamespaces[ns] === void 0) toLoadNamespaces[ns] = true;
          }
        });
        if (!hasAllNamespaces) toLoadLanguages[lng] = true;
      });
      if (Object.keys(toLoad).length || Object.keys(pending).length) {
        this.queue.push({
          pending,
          pendingCount: Object.keys(pending).length,
          loaded: {},
          errors: [],
          callback
        });
      }
      return {
        toLoad: Object.keys(toLoad),
        pending: Object.keys(pending),
        toLoadLanguages: Object.keys(toLoadLanguages),
        toLoadNamespaces: Object.keys(toLoadNamespaces)
      };
    }
  }, {
    key: "loaded",
    value: function loaded(name, err, data) {
      var s = name.split("|");
      var lng = s[0];
      var ns = s[1];
      if (err) this.emit("failedLoading", lng, ns, err);
      if (data) {
        this.store.addResourceBundle(lng, ns, data);
      }
      this.state[name] = err ? -1 : 2;
      var loaded2 = {};
      this.queue.forEach(function(q) {
        pushPath(q.loaded, [lng], ns);
        removePending(q, name);
        if (err) q.errors.push(err);
        if (q.pendingCount === 0 && !q.done) {
          Object.keys(q.loaded).forEach(function(l) {
            if (!loaded2[l]) loaded2[l] = {};
            var loadedKeys = q.loaded[l];
            if (loadedKeys.length) {
              loadedKeys.forEach(function(ns2) {
                if (loaded2[l][ns2] === void 0) loaded2[l][ns2] = true;
              });
            }
          });
          q.done = true;
          if (q.errors.length) {
            q.callback(q.errors);
          } else {
            q.callback();
          }
        }
      });
      this.emit("loaded", loaded2);
      this.queue = this.queue.filter(function(q) {
        return !q.done;
      });
    }
  }, {
    key: "read",
    value: function read2(lng, ns, fcName) {
      var _this3 = this;
      var tried = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
      var wait = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : this.retryTimeout;
      var callback = arguments.length > 5 ? arguments[5] : void 0;
      if (!lng.length) return callback(null, {});
      if (this.readingCalls >= this.maxParallelReads) {
        this.waitingReads.push({
          lng,
          ns,
          fcName,
          tried,
          wait,
          callback
        });
        return;
      }
      this.readingCalls++;
      return this.backend[fcName](lng, ns, function(err, data) {
        _this3.readingCalls--;
        if (_this3.waitingReads.length > 0) {
          var next = _this3.waitingReads.shift();
          _this3.read(next.lng, next.ns, next.fcName, next.tried, next.wait, next.callback);
        }
        if (err && data && tried < _this3.maxRetries) {
          setTimeout(function() {
            _this3.read.call(_this3, lng, ns, fcName, tried + 1, wait * 2, callback);
          }, wait);
          return;
        }
        callback(err, data);
      });
    }
  }, {
    key: "prepareLoading",
    value: function prepareLoading(languages, namespaces) {
      var _this4 = this;
      var options2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      var callback = arguments.length > 3 ? arguments[3] : void 0;
      if (!this.backend) {
        this.logger.warn("No backend was added via i18next.use. Will not load resources.");
        return callback && callback();
      }
      if (typeof languages === "string") languages = this.languageUtils.toResolveHierarchy(languages);
      if (typeof namespaces === "string") namespaces = [namespaces];
      var toLoad = this.queueLoad(languages, namespaces, options2, callback);
      if (!toLoad.toLoad.length) {
        if (!toLoad.pending.length) callback();
        return null;
      }
      toLoad.toLoad.forEach(function(name) {
        _this4.loadOne(name);
      });
    }
  }, {
    key: "load",
    value: function load(languages, namespaces, callback) {
      this.prepareLoading(languages, namespaces, {}, callback);
    }
  }, {
    key: "reload",
    value: function reload(languages, namespaces, callback) {
      this.prepareLoading(languages, namespaces, {
        reload: true
      }, callback);
    }
  }, {
    key: "loadOne",
    value: function loadOne(name) {
      var _this5 = this;
      var prefix = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
      var s = name.split("|");
      var lng = s[0];
      var ns = s[1];
      this.read(lng, ns, "read", void 0, void 0, function(err, data) {
        if (err) _this5.logger.warn("".concat(prefix, "loading namespace ").concat(ns, " for language ").concat(lng, " failed"), err);
        if (!err && data) _this5.logger.log("".concat(prefix, "loaded namespace ").concat(ns, " for language ").concat(lng), data);
        _this5.loaded(name, err, data);
      });
    }
  }, {
    key: "saveMissing",
    value: function saveMissing(languages, namespace, key, fallbackValue, isUpdate) {
      var options2 = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {};
      if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(namespace)) {
        this.logger.warn('did not save key "'.concat(key, '" as the namespace "').concat(namespace, '" was not yet loaded'), "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");
        return;
      }
      if (key === void 0 || key === null || key === "") return;
      if (this.backend && this.backend.create) {
        this.backend.create(languages, namespace, key, fallbackValue, null, _objectSpread$5(_objectSpread$5({}, options2), {}, {
          isUpdate
        }));
      }
      if (!languages || !languages[0]) return;
      this.store.addResource(languages[0], namespace, key, fallbackValue);
    }
  }]);
  return Connector2;
}(EventEmitter);
function get() {
  return {
    debug: false,
    initImmediate: true,
    ns: ["translation"],
    defaultNS: ["translation"],
    fallbackLng: ["dev"],
    fallbackNS: false,
    supportedLngs: false,
    nonExplicitSupportedLngs: false,
    load: "all",
    preload: false,
    simplifyPluralSuffix: true,
    keySeparator: ".",
    nsSeparator: ":",
    pluralSeparator: "_",
    contextSeparator: "_",
    partialBundledLanguages: false,
    saveMissing: false,
    updateMissing: false,
    saveMissingTo: "fallback",
    saveMissingPlurals: true,
    missingKeyHandler: false,
    missingInterpolationHandler: false,
    postProcess: false,
    postProcessPassResolved: false,
    returnNull: true,
    returnEmptyString: true,
    returnObjects: false,
    joinArrays: false,
    returnedObjectHandler: false,
    parseMissingKeyHandler: false,
    appendNamespaceToMissingKey: false,
    appendNamespaceToCIMode: false,
    overloadTranslationOptionHandler: function handle3(args) {
      var ret = {};
      if (_typeof(args[1]) === "object") ret = args[1];
      if (typeof args[1] === "string") ret.defaultValue = args[1];
      if (typeof args[2] === "string") ret.tDescription = args[2];
      if (_typeof(args[2]) === "object" || _typeof(args[3]) === "object") {
        var options2 = args[3] || args[2];
        Object.keys(options2).forEach(function(key) {
          ret[key] = options2[key];
        });
      }
      return ret;
    },
    interpolation: {
      escapeValue: true,
      format: function format(value, _format, lng, options2) {
        return value;
      },
      prefix: "{{",
      suffix: "}}",
      formatSeparator: ",",
      unescapePrefix: "-",
      nestingPrefix: "$t(",
      nestingSuffix: ")",
      nestingOptionsSeparator: ",",
      maxReplaces: 1e3,
      skipOnVariables: true
    }
  };
}
function transformOptions(options2) {
  if (typeof options2.ns === "string") options2.ns = [options2.ns];
  if (typeof options2.fallbackLng === "string") options2.fallbackLng = [options2.fallbackLng];
  if (typeof options2.fallbackNS === "string") options2.fallbackNS = [options2.fallbackNS];
  if (options2.supportedLngs && options2.supportedLngs.indexOf("cimode") < 0) {
    options2.supportedLngs = options2.supportedLngs.concat(["cimode"]);
  }
  return options2;
}
function ownKeys$6(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$6(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys$6(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$6(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _createSuper$3(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$3();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$3() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function noop6() {
}
function bindMemberFunctions(inst) {
  var mems = Object.getOwnPropertyNames(Object.getPrototypeOf(inst));
  mems.forEach(function(mem) {
    if (typeof inst[mem] === "function") {
      inst[mem] = inst[mem].bind(inst);
    }
  });
}
var I18n = function(_EventEmitter) {
  _inherits(I18n2, _EventEmitter);
  var _super = _createSuper$3(I18n2);
  function I18n2() {
    var _this;
    var options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var callback = arguments.length > 1 ? arguments[1] : void 0;
    _classCallCheck(this, I18n2);
    _this = _super.call(this);
    if (isIE10) {
      EventEmitter.call(_assertThisInitialized(_this));
    }
    _this.options = transformOptions(options2);
    _this.services = {};
    _this.logger = baseLogger;
    _this.modules = {
      external: []
    };
    bindMemberFunctions(_assertThisInitialized(_this));
    if (callback && !_this.isInitialized && !options2.isClone) {
      if (!_this.options.initImmediate) {
        _this.init(options2, callback);
        return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
      }
      setTimeout(function() {
        _this.init(options2, callback);
      }, 0);
    }
    return _this;
  }
  _createClass(I18n2, [{
    key: "init",
    value: function init3() {
      var _this2 = this;
      var options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var callback = arguments.length > 1 ? arguments[1] : void 0;
      if (typeof options2 === "function") {
        callback = options2;
        options2 = {};
      }
      if (!options2.defaultNS && options2.defaultNS !== false && options2.ns) {
        if (typeof options2.ns === "string") {
          options2.defaultNS = options2.ns;
        } else if (options2.ns.indexOf("translation") < 0) {
          options2.defaultNS = options2.ns[0];
        }
      }
      var defOpts = get();
      this.options = _objectSpread$6(_objectSpread$6(_objectSpread$6({}, defOpts), this.options), transformOptions(options2));
      if (this.options.compatibilityAPI !== "v1") {
        this.options.interpolation = _objectSpread$6(_objectSpread$6({}, defOpts.interpolation), this.options.interpolation);
      }
      if (options2.keySeparator !== void 0) {
        this.options.userDefinedKeySeparator = options2.keySeparator;
      }
      if (options2.nsSeparator !== void 0) {
        this.options.userDefinedNsSeparator = options2.nsSeparator;
      }
      function createClassOnDemand(ClassOrObject) {
        if (!ClassOrObject) return null;
        if (typeof ClassOrObject === "function") return new ClassOrObject();
        return ClassOrObject;
      }
      if (!this.options.isClone) {
        if (this.modules.logger) {
          baseLogger.init(createClassOnDemand(this.modules.logger), this.options);
        } else {
          baseLogger.init(null, this.options);
        }
        var formatter;
        if (this.modules.formatter) {
          formatter = this.modules.formatter;
        } else if (typeof Intl !== "undefined") {
          formatter = Formatter;
        }
        var lu = new LanguageUtil(this.options);
        this.store = new ResourceStore(this.options.resources, this.options);
        var s = this.services;
        s.logger = baseLogger;
        s.resourceStore = this.store;
        s.languageUtils = lu;
        s.pluralResolver = new PluralResolver(lu, {
          prepend: this.options.pluralSeparator,
          compatibilityJSON: this.options.compatibilityJSON,
          simplifyPluralSuffix: this.options.simplifyPluralSuffix
        });
        if (formatter && (!this.options.interpolation.format || this.options.interpolation.format === defOpts.interpolation.format)) {
          s.formatter = createClassOnDemand(formatter);
          s.formatter.init(s, this.options);
          this.options.interpolation.format = s.formatter.format.bind(s.formatter);
        }
        s.interpolator = new Interpolator(this.options);
        s.utils = {
          hasLoadedNamespace: this.hasLoadedNamespace.bind(this)
        };
        s.backendConnector = new Connector(createClassOnDemand(this.modules.backend), s.resourceStore, s, this.options);
        s.backendConnector.on("*", function(event) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          _this2.emit.apply(_this2, [event].concat(args));
        });
        if (this.modules.languageDetector) {
          s.languageDetector = createClassOnDemand(this.modules.languageDetector);
          s.languageDetector.init(s, this.options.detection, this.options);
        }
        if (this.modules.i18nFormat) {
          s.i18nFormat = createClassOnDemand(this.modules.i18nFormat);
          if (s.i18nFormat.init) s.i18nFormat.init(this);
        }
        this.translator = new Translator(this.services, this.options);
        this.translator.on("*", function(event) {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }
          _this2.emit.apply(_this2, [event].concat(args));
        });
        this.modules.external.forEach(function(m) {
          if (m.init) m.init(_this2);
        });
      }
      this.format = this.options.interpolation.format;
      if (!callback) callback = noop6;
      if (this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {
        var codes2 = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
        if (codes2.length > 0 && codes2[0] !== "dev") this.options.lng = codes2[0];
      }
      if (!this.services.languageDetector && !this.options.lng) {
        this.logger.warn("init: no languageDetector is used and no lng is defined");
      }
      var storeApi = ["getResource", "hasResourceBundle", "getResourceBundle", "getDataByLanguage"];
      storeApi.forEach(function(fcName) {
        _this2[fcName] = function() {
          var _this2$store;
          return (_this2$store = _this2.store)[fcName].apply(_this2$store, arguments);
        };
      });
      var storeApiChained = ["addResource", "addResources", "addResourceBundle", "removeResourceBundle"];
      storeApiChained.forEach(function(fcName) {
        _this2[fcName] = function() {
          var _this2$store2;
          (_this2$store2 = _this2.store)[fcName].apply(_this2$store2, arguments);
          return _this2;
        };
      });
      var deferred = defer();
      var load = function load2() {
        var finish = function finish2(err, t2) {
          if (_this2.isInitialized && !_this2.initializedStoreOnce) _this2.logger.warn("init: i18next is already initialized. You should call init just once!");
          _this2.isInitialized = true;
          if (!_this2.options.isClone) _this2.logger.log("initialized", _this2.options);
          _this2.emit("initialized", _this2.options);
          deferred.resolve(t2);
          callback(err, t2);
        };
        if (_this2.languages && _this2.options.compatibilityAPI !== "v1" && !_this2.isInitialized) return finish(null, _this2.t.bind(_this2));
        _this2.changeLanguage(_this2.options.lng, finish);
      };
      if (this.options.resources || !this.options.initImmediate) {
        load();
      } else {
        setTimeout(load, 0);
      }
      return deferred;
    }
  }, {
    key: "loadResources",
    value: function loadResources2(language) {
      var _this3 = this;
      var callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop6;
      var usedCallback = callback;
      var usedLng = typeof language === "string" ? language : this.language;
      if (typeof language === "function") usedCallback = language;
      if (!this.options.resources || this.options.partialBundledLanguages) {
        if (usedLng && usedLng.toLowerCase() === "cimode") return usedCallback();
        var toLoad = [];
        var append = function append2(lng) {
          if (!lng) return;
          var lngs = _this3.services.languageUtils.toResolveHierarchy(lng);
          lngs.forEach(function(l) {
            if (toLoad.indexOf(l) < 0) toLoad.push(l);
          });
        };
        if (!usedLng) {
          var fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
          fallbacks.forEach(function(l) {
            return append(l);
          });
        } else {
          append(usedLng);
        }
        if (this.options.preload) {
          this.options.preload.forEach(function(l) {
            return append(l);
          });
        }
        this.services.backendConnector.load(toLoad, this.options.ns, function(e) {
          if (!e && !_this3.resolvedLanguage && _this3.language) _this3.setResolvedLanguage(_this3.language);
          usedCallback(e);
        });
      } else {
        usedCallback(null);
      }
    }
  }, {
    key: "reloadResources",
    value: function reloadResources2(lngs, ns, callback) {
      var deferred = defer();
      if (!lngs) lngs = this.languages;
      if (!ns) ns = this.options.ns;
      if (!callback) callback = noop6;
      this.services.backendConnector.reload(lngs, ns, function(err) {
        deferred.resolve();
        callback(err);
      });
      return deferred;
    }
  }, {
    key: "use",
    value: function use2(module) {
      if (!module) throw new Error("You are passing an undefined module! Please check the object you are passing to i18next.use()");
      if (!module.type) throw new Error("You are passing a wrong module! Please check the object you are passing to i18next.use()");
      if (module.type === "backend") {
        this.modules.backend = module;
      }
      if (module.type === "logger" || module.log && module.warn && module.error) {
        this.modules.logger = module;
      }
      if (module.type === "languageDetector") {
        this.modules.languageDetector = module;
      }
      if (module.type === "i18nFormat") {
        this.modules.i18nFormat = module;
      }
      if (module.type === "postProcessor") {
        postProcessor.addPostProcessor(module);
      }
      if (module.type === "formatter") {
        this.modules.formatter = module;
      }
      if (module.type === "3rdParty") {
        this.modules.external.push(module);
      }
      return this;
    }
  }, {
    key: "setResolvedLanguage",
    value: function setResolvedLanguage(l) {
      if (!l || !this.languages) return;
      if (["cimode", "dev"].indexOf(l) > -1) return;
      for (var li = 0; li < this.languages.length; li++) {
        var lngInLngs = this.languages[li];
        if (["cimode", "dev"].indexOf(lngInLngs) > -1) continue;
        if (this.store.hasLanguageSomeTranslations(lngInLngs)) {
          this.resolvedLanguage = lngInLngs;
          break;
        }
      }
    }
  }, {
    key: "changeLanguage",
    value: function changeLanguage2(lng, callback) {
      var _this4 = this;
      this.isLanguageChangingTo = lng;
      var deferred = defer();
      this.emit("languageChanging", lng);
      var setLngProps = function setLngProps2(l) {
        _this4.language = l;
        _this4.languages = _this4.services.languageUtils.toResolveHierarchy(l);
        _this4.resolvedLanguage = void 0;
        _this4.setResolvedLanguage(l);
      };
      var done = function done2(err, l) {
        if (l) {
          setLngProps(l);
          _this4.translator.changeLanguage(l);
          _this4.isLanguageChangingTo = void 0;
          _this4.emit("languageChanged", l);
          _this4.logger.log("languageChanged", l);
        } else {
          _this4.isLanguageChangingTo = void 0;
        }
        deferred.resolve(function() {
          return _this4.t.apply(_this4, arguments);
        });
        if (callback) callback(err, function() {
          return _this4.t.apply(_this4, arguments);
        });
      };
      var setLng = function setLng2(lngs) {
        if (!lng && !lngs && _this4.services.languageDetector) lngs = [];
        var l = typeof lngs === "string" ? lngs : _this4.services.languageUtils.getBestMatchFromCodes(lngs);
        if (l) {
          if (!_this4.language) {
            setLngProps(l);
          }
          if (!_this4.translator.language) _this4.translator.changeLanguage(l);
          if (_this4.services.languageDetector) _this4.services.languageDetector.cacheUserLanguage(l);
        }
        _this4.loadResources(l, function(err) {
          done(err, l);
        });
      };
      if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {
        setLng(this.services.languageDetector.detect());
      } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {
        this.services.languageDetector.detect(setLng);
      } else {
        setLng(lng);
      }
      return deferred;
    }
  }, {
    key: "getFixedT",
    value: function getFixedT2(lng, ns, keyPrefix) {
      var _this5 = this;
      var fixedT = function fixedT2(key, opts) {
        var options2;
        if (_typeof(opts) !== "object") {
          for (var _len3 = arguments.length, rest = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
            rest[_key3 - 2] = arguments[_key3];
          }
          options2 = _this5.options.overloadTranslationOptionHandler([key, opts].concat(rest));
        } else {
          options2 = _objectSpread$6({}, opts);
        }
        options2.lng = options2.lng || fixedT2.lng;
        options2.lngs = options2.lngs || fixedT2.lngs;
        options2.ns = options2.ns || fixedT2.ns;
        options2.keyPrefix = options2.keyPrefix || keyPrefix || fixedT2.keyPrefix;
        var keySeparator = _this5.options.keySeparator || ".";
        var resultKey = options2.keyPrefix ? "".concat(options2.keyPrefix).concat(keySeparator).concat(key) : key;
        return _this5.t(resultKey, options2);
      };
      if (typeof lng === "string") {
        fixedT.lng = lng;
      } else {
        fixedT.lngs = lng;
      }
      fixedT.ns = ns;
      fixedT.keyPrefix = keyPrefix;
      return fixedT;
    }
  }, {
    key: "t",
    value: function t2() {
      var _this$translator;
      return this.translator && (_this$translator = this.translator).translate.apply(_this$translator, arguments);
    }
  }, {
    key: "exists",
    value: function exists2() {
      var _this$translator2;
      return this.translator && (_this$translator2 = this.translator).exists.apply(_this$translator2, arguments);
    }
  }, {
    key: "setDefaultNamespace",
    value: function setDefaultNamespace2(ns) {
      this.options.defaultNS = ns;
    }
  }, {
    key: "hasLoadedNamespace",
    value: function hasLoadedNamespace2(ns) {
      var _this6 = this;
      var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      if (!this.isInitialized) {
        this.logger.warn("hasLoadedNamespace: i18next was not initialized", this.languages);
        return false;
      }
      if (!this.languages || !this.languages.length) {
        this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty", this.languages);
        return false;
      }
      var lng = this.resolvedLanguage || this.languages[0];
      var fallbackLng = this.options ? this.options.fallbackLng : false;
      var lastLng = this.languages[this.languages.length - 1];
      if (lng.toLowerCase() === "cimode") return true;
      var loadNotPending = function loadNotPending2(l, n) {
        var loadState = _this6.services.backendConnector.state["".concat(l, "|").concat(n)];
        return loadState === -1 || loadState === 2;
      };
      if (options2.precheck) {
        var preResult = options2.precheck(this, loadNotPending);
        if (preResult !== void 0) return preResult;
      }
      if (this.hasResourceBundle(lng, ns)) return true;
      if (!this.services.backendConnector.backend || this.options.resources && !this.options.partialBundledLanguages) return true;
      if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns))) return true;
      return false;
    }
  }, {
    key: "loadNamespaces",
    value: function loadNamespaces2(ns, callback) {
      var _this7 = this;
      var deferred = defer();
      if (!this.options.ns) {
        callback && callback();
        return Promise.resolve();
      }
      if (typeof ns === "string") ns = [ns];
      ns.forEach(function(n) {
        if (_this7.options.ns.indexOf(n) < 0) _this7.options.ns.push(n);
      });
      this.loadResources(function(err) {
        deferred.resolve();
        if (callback) callback(err);
      });
      return deferred;
    }
  }, {
    key: "loadLanguages",
    value: function loadLanguages2(lngs, callback) {
      var deferred = defer();
      if (typeof lngs === "string") lngs = [lngs];
      var preloaded = this.options.preload || [];
      var newLngs = lngs.filter(function(lng) {
        return preloaded.indexOf(lng) < 0;
      });
      if (!newLngs.length) {
        if (callback) callback();
        return Promise.resolve();
      }
      this.options.preload = preloaded.concat(newLngs);
      this.loadResources(function(err) {
        deferred.resolve();
        if (callback) callback(err);
      });
      return deferred;
    }
  }, {
    key: "dir",
    value: function dir(lng) {
      if (!lng) lng = this.resolvedLanguage || (this.languages && this.languages.length > 0 ? this.languages[0] : this.language);
      if (!lng) return "rtl";
      var rtlLngs = ["ar", "shu", "sqr", "ssh", "xaa", "yhd", "yud", "aao", "abh", "abv", "acm", "acq", "acw", "acx", "acy", "adf", "ads", "aeb", "aec", "afb", "ajp", "apc", "apd", "arb", "arq", "ars", "ary", "arz", "auz", "avl", "ayh", "ayl", "ayn", "ayp", "bbz", "pga", "he", "iw", "ps", "pbt", "pbu", "pst", "prp", "prd", "ug", "ur", "ydd", "yds", "yih", "ji", "yi", "hbo", "men", "xmn", "fa", "jpr", "peo", "pes", "prs", "dv", "sam", "ckb"];
      return rtlLngs.indexOf(this.services.languageUtils.getLanguagePartFromCode(lng)) > -1 || lng.toLowerCase().indexOf("-arab") > 1 ? "rtl" : "ltr";
    }
  }, {
    key: "cloneInstance",
    value: function cloneInstance() {
      var _this8 = this;
      var options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop6;
      var mergedOptions = _objectSpread$6(_objectSpread$6(_objectSpread$6({}, this.options), options2), {
        isClone: true
      });
      var clone = new I18n2(mergedOptions);
      if (options2.debug !== void 0 || options2.prefix !== void 0) {
        clone.logger = clone.logger.clone(options2);
      }
      var membersToCopy = ["store", "services", "language"];
      membersToCopy.forEach(function(m) {
        clone[m] = _this8[m];
      });
      clone.services = _objectSpread$6({}, this.services);
      clone.services.utils = {
        hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
      };
      clone.translator = new Translator(clone.services, clone.options);
      clone.translator.on("*", function(event) {
        for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
          args[_key4 - 1] = arguments[_key4];
        }
        clone.emit.apply(clone, [event].concat(args));
      });
      clone.init(mergedOptions, callback);
      clone.translator.options = clone.options;
      clone.translator.backendConnector.services.utils = {
        hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
      };
      return clone;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return {
        options: this.options,
        store: this.store,
        language: this.language,
        languages: this.languages,
        resolvedLanguage: this.resolvedLanguage
      };
    }
  }]);
  return I18n2;
}(EventEmitter);
_defineProperty(I18n, "createInstance", function() {
  var options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  var callback = arguments.length > 1 ? arguments[1] : void 0;
  return new I18n(options2, callback);
});
var instance = I18n.createInstance();
instance.createInstance = I18n.createInstance;
var createInstance = instance.createInstance;
var init2 = instance.init;
var loadResources = instance.loadResources;
var reloadResources = instance.reloadResources;
var use = instance.use;
var changeLanguage = instance.changeLanguage;
var getFixedT = instance.getFixedT;
var t = instance.t;
var exists = instance.exists;
var setDefaultNamespace = instance.setDefaultNamespace;
var hasLoadedNamespace = instance.hasLoadedNamespace;
var loadNamespaces = instance.loadNamespaces;
var loadLanguages = instance.loadLanguages;
var i18next_default = instance;

// node_modules/stream-chat-react/dist/i18n/Streami18n.js
var import_dayjs3 = __toESM(require_dayjs_min());
var import_calendar2 = __toESM(require_calendar());
var import_updateLocale = __toESM(require_updateLocale());
var import_localizedFormat2 = __toESM(require_localizedFormat());
var import_localeData = __toESM(require_localeData());
var import_relativeTime = __toESM(require_relativeTime());
var import_utc = __toESM(require_utc());
var import_timezone = __toESM(require_timezone());
var import_de2 = __toESM(require_de());
var import_es2 = __toESM(require_es2());
var import_fr2 = __toESM(require_fr());
var import_hi2 = __toESM(require_hi());
var import_it2 = __toESM(require_it());
var import_ja2 = __toESM(require_ja());
var import_ko2 = __toESM(require_ko());
var import_nl2 = __toESM(require_nl());
var import_pt2 = __toESM(require_pt());
var import_ru2 = __toESM(require_ru());
var import_tr2 = __toESM(require_tr());
var import_en2 = __toESM(require_en());
var defaultNS = "translation";
var defaultLng = "en";
import_dayjs3.default.extend(import_updateLocale.default);
import_dayjs3.default.extend(import_utc.default);
import_dayjs3.default.extend(import_timezone.default);
import_dayjs3.default.updateLocale("de", {
  calendar: {
    lastDay: "[gestern um] LT",
    lastWeek: "[letzten] dddd [um] LT",
    nextDay: "[morgen um] LT",
    nextWeek: "dddd [um] LT",
    sameDay: "[heute um] LT",
    sameElse: "L"
  }
});
import_dayjs3.default.updateLocale("es", {
  calendar: {
    lastDay: "[ayer a las] LT",
    lastWeek: "[pasado] dddd [a] LT",
    nextDay: "[mañana a] LT",
    nextWeek: "dddd [a] LT",
    sameDay: "[hoy a las] LT",
    sameElse: "L"
  }
});
import_dayjs3.default.updateLocale("fr", {
  calendar: {
    lastDay: "[Hier à] LT",
    lastWeek: "dddd [dernier à] LT",
    nextDay: "[Demain à] LT",
    nextWeek: "dddd [à] LT",
    sameDay: "[Aujourd’hui à] LT",
    sameElse: "L"
  }
});
import_dayjs3.default.updateLocale("hi", {
  calendar: {
    lastDay: "[कल] LT",
    lastWeek: "[पिछले] dddd, LT",
    nextDay: "[कल] LT",
    nextWeek: "dddd, LT",
    sameDay: "[आज] LT",
    sameElse: "L"
  },
  // Hindi notation for meridiems are quite fuzzy in practice. While there exists
  // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
  meridiem(hour) {
    if (hour < 4) {
      return "रात";
    } else if (hour < 10) {
      return "सुबह";
    } else if (hour < 17) {
      return "दोपहर";
    } else if (hour < 20) {
      return "शाम";
    } else {
      return "रात";
    }
  },
  meridiemHour(hour, meridiem) {
    if (hour === 12) {
      hour = 0;
    }
    if (meridiem === "रात") {
      return hour < 4 ? hour : hour + 12;
    } else if (meridiem === "सुबह") {
      return hour;
    } else if (meridiem === "दोपहर") {
      return hour >= 10 ? hour : hour + 12;
    } else if (meridiem === "शाम") {
      return hour + 12;
    }
    return hour;
  },
  meridiemParse: /रात|सुबह|दोपहर|शाम/
});
import_dayjs3.default.updateLocale("it", {
  calendar: {
    lastDay: "[Ieri alle] LT",
    lastWeek: "[lo scorso] dddd [alle] LT",
    nextDay: "[Domani alle] LT",
    nextWeek: "dddd [alle] LT",
    sameDay: "[Oggi alle] LT",
    sameElse: "L"
  }
});
import_dayjs3.default.updateLocale("ja", {
  calendar: {
    lastDay: "[昨日] LT",
    lastWeek: "dddd LT",
    nextDay: "[明日] LT",
    nextWeek: "[次の] dddd LT",
    sameDay: "[今日] LT",
    sameElse: "L"
  }
});
import_dayjs3.default.updateLocale("ko", {
  calendar: {
    lastDay: "[어제] LT",
    lastWeek: "[지난] dddd LT",
    nextDay: "[내일] LT",
    nextWeek: "dddd LT",
    sameDay: "[오늘] LT",
    sameElse: "L"
  }
});
import_dayjs3.default.updateLocale("nl", {
  calendar: {
    lastDay: "[gisteren om] LT",
    lastWeek: "[afgelopen] dddd [om] LT",
    nextDay: "[morgen om] LT",
    nextWeek: "dddd [om] LT",
    sameDay: "[vandaag om] LT",
    sameElse: "L"
  }
});
import_dayjs3.default.updateLocale("pt", {
  calendar: {
    lastDay: "[ontem às] LT",
    lastWeek: "dddd [passada às] LT",
    nextDay: "[amanhã às] LT",
    nextWeek: "dddd [às] LT",
    sameDay: "[hoje às] LT",
    sameElse: "L"
  }
});
import_dayjs3.default.updateLocale("ru", {
  calendar: {
    lastDay: "[Вчера, в] LT",
    nextDay: "[Завтра, в] LT",
    sameDay: "[Сегодня, в] LT"
  }
});
import_dayjs3.default.updateLocale("tr", {
  calendar: {
    lastDay: "[dün] LT",
    lastWeek: "[geçen] dddd [saat] LT",
    nextDay: "[yarın saat] LT",
    nextWeek: "[gelecek] dddd [saat] LT",
    sameDay: "[bugün saat] LT",
    sameElse: "L"
  }
});
var en_locale = {
  formats: {},
  months: [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
  ],
  relativeTime: {},
  weekdays: [
    "Sunday",
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday"
  ]
};
var isDayJs = (dateTimeParser) => dateTimeParser.extend !== void 0;
var supportsTz = (dateTimeParser) => dateTimeParser.tz !== void 0;
var defaultStreami18nOptions = {
  DateTimeParser: import_dayjs3.default,
  dayjsLocaleConfigForLanguage: null,
  debug: false,
  disableDateTimeTranslations: false,
  language: "en",
  logger: (message) => console.warn(message)
};
var Streami18n = class {
  /**
   * Constructor accepts following options:
   *  - language (String) default: 'en'
   *    Language code e.g., en, tr
   *
   *  - translationsForLanguage (object)
   *    Translations object. Please check src/i18n/en.json for example.
   *
   *  - disableDateTimeTranslations (boolean) default: false
   *    Disable translations for date-times
   *
   *  - debug (boolean) default: false
   *    Enable debug mode in internal i18n class
   *
   *  - logger (function) default: () => {}
   *    Logger function to log warnings/errors from this class
   *
   *  - dayjsLocaleConfigForLanguage (object) default: 'enConfig'
   *    [Config object](https://momentjs.com/docs/#/i18n/changing-locale/) for internal moment object,
   *    corresponding to language (param)
   *
   *  - DateTimeParser (function) Moment or Dayjs instance/function.
   *    Make sure to load all the required locales in this Moment or Dayjs instance that you will be provide to Streami18n
   *
   * @param {*} options
   */
  constructor(options2 = {}) {
    this.i18nInstance = i18next_default.createInstance();
    this.Dayjs = null;
    this.setLanguageCallback = () => null;
    this.initialized = false;
    this.t = defaultTranslatorFunction;
    this.translations = {
      de: { [defaultNS]: de_default },
      en: { [defaultNS]: en_default },
      es: { [defaultNS]: es_default },
      fr: { [defaultNS]: fr_default },
      hi: { [defaultNS]: hi_default },
      it: { [defaultNS]: it_default },
      ja: { [defaultNS]: ja_default },
      ko: { [defaultNS]: ko_default },
      nl: { [defaultNS]: nl_default },
      pt: { [defaultNS]: pt_default },
      ru: { [defaultNS]: ru_default },
      tr: { [defaultNS]: tr_default }
    };
    this.dayjsLocales = {};
    this.formatters = predefinedFormatters;
    this.localeExists = (language) => {
      if (this.isCustomDateTimeParser)
        return true;
      return Object.keys(import_dayjs3.default.Ls).indexOf(language) > -1;
    };
    this.validateCurrentLanguage = () => {
      const availableLanguages = Object.keys(this.translations);
      if (availableLanguages.indexOf(this.currentLanguage) === -1) {
        this.logger(`Streami18n: '${this.currentLanguage}' language is not registered. Please make sure to call streami18n.registerTranslation('${this.currentLanguage}', {...}) or use one the built-in supported languages - ${this.getAvailableLanguages()}`);
        this.currentLanguage = defaultLng;
      }
    };
    this.geti18Instance = () => this.i18nInstance;
    this.getAvailableLanguages = () => Object.keys(this.translations);
    this.getTranslations = () => this.translations;
    const finalOptions = {
      ...defaultStreami18nOptions,
      ...options2
    };
    this.logger = finalOptions.logger;
    this.currentLanguage = finalOptions.language;
    this.DateTimeParser = finalOptions.DateTimeParser;
    this.timezone = finalOptions.timezone;
    this.formatters = { ...predefinedFormatters, ...options2 == null ? void 0 : options2.formatters };
    try {
      if (this.DateTimeParser && isDayJs(this.DateTimeParser)) {
        this.DateTimeParser.extend(import_localizedFormat2.default);
        this.DateTimeParser.extend(import_calendar2.default);
        this.DateTimeParser.extend(import_localeData.default);
        this.DateTimeParser.extend(import_relativeTime.default);
      }
    } catch (error2) {
      throw Error(`Streami18n: Looks like you wanted to provide Dayjs instance, but something went wrong while adding plugins ${error2}`);
    }
    this.isCustomDateTimeParser = !!options2.DateTimeParser;
    const translationsForLanguage = finalOptions.translationsForLanguage;
    if (translationsForLanguage) {
      this.translations[this.currentLanguage] = {
        [defaultNS]: this.translations[this.currentLanguage] && this.translations[this.currentLanguage][defaultNS] ? {
          ...this.translations[this.currentLanguage][defaultNS],
          ...translationsForLanguage
        } : translationsForLanguage
      };
    }
    if (!this.translations[this.currentLanguage]) {
      this.translations[this.currentLanguage] = {
        [defaultNS]: {}
      };
    }
    this.i18nextConfig = {
      debug: finalOptions.debug,
      fallbackLng: false,
      interpolation: { escapeValue: false, formatSeparator: "|" },
      keySeparator: false,
      lng: this.currentLanguage,
      nsSeparator: false
    };
    if (finalOptions.parseMissingKeyHandler) {
      this.i18nextConfig.parseMissingKeyHandler = finalOptions.parseMissingKeyHandler;
    }
    this.validateCurrentLanguage();
    const dayjsLocaleConfigForLanguage = finalOptions.dayjsLocaleConfigForLanguage;
    if (dayjsLocaleConfigForLanguage) {
      this.addOrUpdateLocale(this.currentLanguage, {
        ...dayjsLocaleConfigForLanguage
      });
    } else if (!this.localeExists(this.currentLanguage)) {
      this.logger(`Streami18n: Streami18n(...) - Locale config for ${this.currentLanguage} does not exist in momentjs.Please import the locale file using "import 'moment/locale/${this.currentLanguage}';" in your app or register the locale config with Streami18n using registerTranslation(language, translation, customDayjsLocale)`);
    }
    this.tDateTimeParser = (timestamp) => {
      const language = finalOptions.disableDateTimeTranslations || !this.localeExists(this.currentLanguage) ? defaultLng : this.currentLanguage;
      if (isDayJs(this.DateTimeParser)) {
        return supportsTz(this.DateTimeParser) ? this.DateTimeParser(timestamp).tz(this.timezone).locale(language) : this.DateTimeParser(timestamp).locale(language);
      }
      if (supportsTz(this.DateTimeParser) && this.timezone) {
        return this.DateTimeParser(timestamp).tz(this.timezone).locale(language);
      }
      return this.DateTimeParser(timestamp).locale(language);
    };
  }
  /**
   * Initializes the i18next instance with configuration (which enables natural language as default keys)
   */
  async init() {
    this.validateCurrentLanguage();
    try {
      this.t = await this.i18nInstance.init({
        ...this.i18nextConfig,
        lng: this.currentLanguage,
        resources: this.translations
      });
      this.initialized = true;
      if (this.formatters) {
        Object.entries(this.formatters).forEach(([name, formatterFactory]) => {
          var _a;
          if (!formatterFactory)
            return;
          (_a = this.i18nInstance.services.formatter) == null ? void 0 : _a.add(name, formatterFactory(this));
        });
      }
    } catch (error2) {
      this.logger(`Something went wrong with init: ${JSON.stringify(error2)}`);
    }
    return {
      t: this.t,
      tDateTimeParser: this.tDateTimeParser
    };
  }
  /**
   * Returns current version translator function.
   */
  async getTranslators() {
    if (!this.initialized) {
      if (this.dayjsLocales[this.currentLanguage]) {
        this.addOrUpdateLocale(this.currentLanguage, this.dayjsLocales[this.currentLanguage]);
      }
      return await this.init();
    } else {
      return {
        t: this.t,
        tDateTimeParser: this.tDateTimeParser
      };
    }
  }
  registerTranslation(language, translation, customDayjsLocale) {
    if (!translation) {
      this.logger(`Streami18n: registerTranslation(language, translation, customDayjsLocale) called without translation`);
      return;
    }
    if (!this.translations[language]) {
      this.translations[language] = { [defaultNS]: translation };
    } else {
      this.translations[language][defaultNS] = translation;
    }
    if (customDayjsLocale) {
      this.dayjsLocales[language] = { ...customDayjsLocale };
    } else if (!this.localeExists(language)) {
      this.logger(`Streami18n: registerTranslation(language, translation, customDayjsLocale) - Locale config for ${language} does not exist in Dayjs.Please import the locale file using "import 'dayjs/locale/${language}';" in your app or register the locale config with Streami18n using registerTranslation(language, translation, customDayjsLocale)`);
    }
    if (this.initialized) {
      this.i18nInstance.addResources(language, defaultNS, translation);
    }
  }
  addOrUpdateLocale(key, config) {
    if (this.localeExists(key)) {
      import_dayjs3.default.updateLocale(key, { ...config });
    } else {
      import_dayjs3.default.locale({ name: key, ...en_locale, ...config }, void 0, true);
    }
  }
  async setLanguage(language) {
    this.currentLanguage = language;
    if (!this.initialized)
      return;
    try {
      const t2 = await this.i18nInstance.changeLanguage(language);
      if (this.dayjsLocales[language]) {
        this.addOrUpdateLocale(this.currentLanguage, this.dayjsLocales[this.currentLanguage]);
      }
      this.setLanguageCallback(t2);
      return t2;
    } catch (error2) {
      this.logger(`Failed to set language: ${JSON.stringify(error2)}`);
      return this.t;
    }
  }
  registerSetLanguageCallback(callback) {
    this.setLanguageCallback = callback;
  }
};

// node_modules/stream-chat-react/dist/components/Channel/hooks/useCreateChannelStateContext.js
var useCreateChannelStateContext = (value) => {
  var _a, _b;
  const { acceptedFiles, channel, channelCapabilitiesArray = [], channelConfig, channelUnreadUiState, debounceURLEnrichmentMs, dragAndDropWindow, enrichURLForPreview, error: error2, findURLFn, giphyVersion, hasMore, hasMoreNewer, highlightedMessageId, imageAttachmentSizeHandler, loading, loadingMore, maxNumberOfFiles, members, messages = [], multipleUploads, mutes, notifications, onLinkPreviewDismissed, pinnedMessages, quotedMessage, read: read2 = {}, shouldGenerateVideoThumbnail, skipMessageDataMemoization, suppressAutoscroll, thread, threadHasMore, threadLoadingMore, threadMessages = [], videoAttachmentSizeHandler, watcher_count, watcherCount, watchers } = value;
  const channelId = channel.cid;
  const lastRead = channel.initialized && ((_a = channel.lastRead()) == null ? void 0 : _a.getTime());
  const membersLength = Object.keys(members || []).length;
  const notificationsLength = notifications.length;
  const readUsers = Object.values(read2);
  const readUsersLength = readUsers.length;
  const readUsersLastReads = readUsers.map(({ last_read }) => last_read.toISOString()).join();
  const threadMessagesLength = threadMessages == null ? void 0 : threadMessages.length;
  const channelCapabilities = {};
  channelCapabilitiesArray.forEach((capability) => {
    channelCapabilities[capability] = true;
  });
  const memoizedMessageData = skipMessageDataMemoization ? messages : messages.map(({ deleted_at, latest_reactions, pinned, reply_count, status, updated_at, user }) => `${deleted_at}${latest_reactions ? latest_reactions.map(({ type }) => type).join() : ""}${pinned}${reply_count}${status}${updated_at && (isDayOrMoment(updated_at) || isDate(updated_at)) ? updated_at.toISOString() : updated_at || ""}${user == null ? void 0 : user.updated_at}`).join();
  const memoizedThreadMessageData = threadMessages.map(({ deleted_at, latest_reactions, pinned, status, updated_at, user }) => `${deleted_at}${latest_reactions ? latest_reactions.map(({ type }) => type).join() : ""}${pinned}${status}${updated_at && (isDayOrMoment(updated_at) || isDate(updated_at)) ? updated_at.toISOString() : updated_at || ""}${user == null ? void 0 : user.updated_at}`).join();
  const channelStateContext = (0, import_react107.useMemo)(
    () => ({
      acceptedFiles,
      channel,
      channelCapabilities,
      channelConfig,
      channelUnreadUiState,
      debounceURLEnrichmentMs,
      dragAndDropWindow,
      enrichURLForPreview,
      error: error2,
      findURLFn,
      giphyVersion,
      hasMore,
      hasMoreNewer,
      highlightedMessageId,
      imageAttachmentSizeHandler,
      loading,
      loadingMore,
      maxNumberOfFiles,
      members,
      messages,
      multipleUploads,
      mutes,
      notifications,
      onLinkPreviewDismissed,
      pinnedMessages,
      quotedMessage,
      read: read2,
      shouldGenerateVideoThumbnail,
      suppressAutoscroll,
      thread,
      threadHasMore,
      threadLoadingMore,
      threadMessages,
      videoAttachmentSizeHandler,
      watcher_count,
      watcherCount,
      watchers
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      (_b = channel.data) == null ? void 0 : _b.name,
      // otherwise ChannelHeader will not be updated
      channelId,
      channelUnreadUiState,
      debounceURLEnrichmentMs,
      enrichURLForPreview,
      error2,
      findURLFn,
      hasMore,
      hasMoreNewer,
      highlightedMessageId,
      lastRead,
      loading,
      loadingMore,
      membersLength,
      memoizedMessageData,
      memoizedThreadMessageData,
      notificationsLength,
      onLinkPreviewDismissed,
      quotedMessage,
      readUsersLength,
      readUsersLastReads,
      shouldGenerateVideoThumbnail,
      skipMessageDataMemoization,
      suppressAutoscroll,
      thread,
      threadHasMore,
      threadLoadingMore,
      threadMessagesLength,
      watcherCount
    ]
  );
  return channelStateContext;
};

// node_modules/stream-chat-react/dist/components/Channel/hooks/useCreateTypingContext.js
var import_react108 = __toESM(require_react());
var useCreateTypingContext = (value) => {
  const { typing } = value;
  const typingValue = Object.keys(typing || {}).join();
  const typingContext = (0, import_react108.useMemo)(
    () => ({
      typing
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [typingValue]
  );
  return typingContext;
};

// node_modules/stream-chat-react/dist/components/Channel/hooks/useEditMessageHandler.js
var useEditMessageHandler = (doUpdateMessageRequest) => {
  const { channel, client } = useChatContext("useEditMessageHandler");
  return (updatedMessage, options2) => {
    if (doUpdateMessageRequest && channel) {
      return Promise.resolve(doUpdateMessageRequest(channel.cid, updatedMessage, options2));
    }
    return client.updateMessage(updatedMessage, void 0, options2);
  };
};

// node_modules/stream-chat-react/dist/components/Channel/hooks/useIsMounted.js
var import_react109 = __toESM(require_react());
var useIsMounted = () => {
  const isMounted = (0, import_react109.useRef)(false);
  (0, import_react109.useEffect)(() => {
    isMounted.current = true;
    return () => {
      isMounted.current = false;
    };
  }, []);
  return isMounted;
};

// node_modules/stream-chat-react/dist/components/Channel/hooks/useMentionsHandlers.js
var import_react110 = __toESM(require_react());
var useMentionsHandlers = (onMentionsHover, onMentionsClick) => (0, import_react110.useCallback)((event, mentioned_users) => {
  if (!onMentionsHover && !onMentionsClick || !(event.target instanceof HTMLElement)) {
    return;
  }
  const target = event.target;
  const textContent = target.innerHTML.replace("*", "");
  if (textContent[0] === "@") {
    const userName = textContent.replace("@", "");
    const user = mentioned_users == null ? void 0 : mentioned_users.find(({ id, name }) => name === userName || id === userName);
    if (onMentionsHover && typeof onMentionsHover === "function" && event.type === "mouseover") {
      onMentionsHover(event, user);
    }
    if (onMentionsClick && event.type === "click" && typeof onMentionsClick === "function") {
      onMentionsClick(event, user);
    }
  }
}, [onMentionsClick, onMentionsHover]);

// node_modules/stream-chat-react/dist/components/Loading/LoadingChannels.js
var import_react111 = __toESM(require_react());
var LoadingItems = () => import_react111.default.createElement(
  "div",
  { className: "str-chat__loading-channels-item str-chat__channel-preview-loading" },
  import_react111.default.createElement("div", { className: "str-chat__loading-channels-avatar" }),
  import_react111.default.createElement(
    "div",
    { className: "str-chat__loading-channels-meta str-chat__channel-preview-end-loading" },
    import_react111.default.createElement("div", { className: "str-chat__loading-channels-username" }),
    import_react111.default.createElement("div", { className: "str-chat__loading-channels-status" })
  )
);
var UnMemoizedLoadingChannels = () => import_react111.default.createElement(
  "div",
  { className: "str-chat__loading-channels" },
  import_react111.default.createElement(LoadingItems, null),
  import_react111.default.createElement(LoadingItems, null),
  import_react111.default.createElement(LoadingItems, null)
);
var LoadingChannels = import_react111.default.memo(UnMemoizedLoadingChannels);

// node_modules/stream-chat-react/dist/components/Loading/LoadingErrorIndicator.js
var import_react112 = __toESM(require_react());
var UnMemoizedLoadingErrorIndicator = ({ error: error2 }) => {
  const { t: t2 } = useTranslationContext("LoadingErrorIndicator");
  if (!error2)
    return null;
  return import_react112.default.createElement("div", null, t2("Error: {{ errorMessage }}", { errorMessage: error2.message }));
};
var LoadingErrorIndicator = import_react112.default.memo(UnMemoizedLoadingErrorIndicator, (prevProps, nextProps) => {
  var _a, _b;
  return ((_a = prevProps.error) == null ? void 0 : _a.message) === ((_b = nextProps.error) == null ? void 0 : _b.message);
});

// node_modules/stream-chat-react/dist/components/Loading/LoadingIndicator.js
var import_react113 = __toESM(require_react());
var UnMemoizedLoadingIndicator = (props) => {
  const { color = "#006CFF", size = 15 } = props;
  return import_react113.default.createElement(
    "div",
    { className: `str-chat__loading-indicator`, "data-testid": "loading-indicator-wrapper", style: { height: size, width: size } },
    import_react113.default.createElement(
      "svg",
      { height: size, viewBox: `0 0 30 30`, width: size, xmlns: "http://www.w3.org/2000/svg" },
      import_react113.default.createElement(
        "defs",
        null,
        import_react113.default.createElement(
          "linearGradient",
          { id: "a", x1: "50%", x2: "50%", y1: "0%", y2: "100%" },
          import_react113.default.createElement("stop", { offset: "0%", stopColor: "#FFF", stopOpacity: "0" }),
          import_react113.default.createElement("stop", { "data-testid": "loading-indicator-circle", offset: "100%", stopColor: color, stopOpacity: "1", style: { stopColor: color } })
        )
      ),
      import_react113.default.createElement("path", { d: "M2.518 23.321l1.664-1.11A12.988 12.988 0 0 0 15 28c7.18 0 13-5.82 13-13S22.18 2 15 2V0c8.284 0 15 6.716 15 15 0 8.284-6.716 15-15 15-5.206 0-9.792-2.652-12.482-6.679z", fill: "url(#a)", fillRule: "evenodd" })
    )
  );
};
var LoadingIndicator = import_react113.default.memo(UnMemoizedLoadingIndicator, (prevProps, nextProps) => prevProps.color === nextProps.color && prevProps.size === nextProps.size);

// node_modules/stream-chat-react/dist/components/Channel/LoadingChannel.js
var import_react114 = __toESM(require_react());
var LoadingMessage = () => import_react114.default.createElement(
  "div",
  { className: "str-chat__loading-channel-message" },
  import_react114.default.createElement("div", { className: "str-chat__loading-channel-message-avatar" }),
  import_react114.default.createElement(
    "div",
    { className: "str-chat__loading-channel-message-end" },
    import_react114.default.createElement("div", { className: "str-chat__loading-channel-message-sender" }),
    import_react114.default.createElement(
      "div",
      { className: "str-chat__loading-channel-message-last-row" },
      import_react114.default.createElement("div", { className: "str-chat__loading-channel-message-text" }),
      import_react114.default.createElement("div", { className: "str-chat__loading-channel-message-date" })
    )
  )
);
var LoadingMessageInput = () => import_react114.default.createElement(
  "div",
  { className: "str-chat__loading-channel-message-input-row" },
  import_react114.default.createElement("div", { className: "str-chat__loading-channel-message-input" }),
  import_react114.default.createElement("div", { className: "str-chat__loading-channel-message-send" })
);
var LoadingChannelHeader = () => import_react114.default.createElement(
  "div",
  { className: "str-chat__loading-channel-header" },
  import_react114.default.createElement("div", { className: "str-chat__loading-channel-header-avatar" }),
  import_react114.default.createElement(
    "div",
    { className: "str-chat__loading-channel-header-end" },
    import_react114.default.createElement("div", { className: "str-chat__loading-channel-header-name" }),
    import_react114.default.createElement("div", { className: "str-chat__loading-channel-header-info" })
  )
);
var LoadingChannel = () => import_react114.default.createElement(
  "div",
  { className: "str-chat__loading-channel" },
  import_react114.default.createElement(LoadingChannelHeader, null),
  import_react114.default.createElement("div", { className: "str-chat__loading-channel-message-list" }, Array.from(Array(3)).map((_23, i) => import_react114.default.createElement(LoadingMessage, { key: `loading-message-${i}` }))),
  import_react114.default.createElement(LoadingMessageInput, null)
);

// node_modules/stream-chat-react/dist/components/MessageInput/DropzoneProvider.js
var import_react124 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/useCooldownTimer.js
var import_react115 = __toESM(require_react());
var useCooldownTimer = () => {
  var _a;
  const { client, latestMessageDatesByChannels } = useChatContext("useCooldownTimer");
  const { channel, messages = [] } = useChannelStateContext("useCooldownTimer");
  const [cooldownRemaining, setCooldownRemaining] = (0, import_react115.useState)();
  const { cooldown: cooldownInterval = 0, own_capabilities } = channel.data || {};
  const skipCooldown = own_capabilities == null ? void 0 : own_capabilities.includes("skip-slow-mode");
  const ownLatestMessageDate = (0, import_react115.useMemo)(() => {
    var _a2;
    return latestMessageDatesByChannels[channel.cid] ?? ((_a2 = [...messages].sort((a, b) => {
      var _a3, _b;
      return ((_a3 = b.created_at) == null ? void 0 : _a3.getTime()) - ((_b = a.created_at) == null ? void 0 : _b.getTime());
    }).find((v) => {
      var _a3, _b;
      return ((_a3 = v.user) == null ? void 0 : _a3.id) === ((_b = client.user) == null ? void 0 : _b.id);
    })) == null ? void 0 : _a2.created_at);
  }, [messages, (_a = client.user) == null ? void 0 : _a.id, latestMessageDatesByChannels, channel.cid]);
  (0, import_react115.useEffect)(() => {
    const timeSinceOwnLastMessage = ownLatestMessageDate ? (
      // prevent negative values
      Math.max(0, ((/* @__PURE__ */ new Date()).getTime() - ownLatestMessageDate.getTime()) / 1e3)
    ) : void 0;
    const remaining = !skipCooldown && typeof timeSinceOwnLastMessage !== "undefined" && cooldownInterval > timeSinceOwnLastMessage ? Math.round(cooldownInterval - timeSinceOwnLastMessage) : 0;
    setCooldownRemaining(remaining);
    if (!remaining)
      return;
    const timeout = setTimeout(() => {
      setCooldownRemaining(0);
    }, remaining * 1e3);
    return () => {
      clearTimeout(timeout);
    };
  }, [cooldownInterval, ownLatestMessageDate, skipCooldown]);
  return {
    cooldownInterval,
    cooldownRemaining,
    setCooldownRemaining
  };
};

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/useCreateMessageInputContext.js
var import_react116 = __toESM(require_react());
var useCreateMessageInputContext = (value) => {
  const { additionalTextareaProps, asyncMessagesMultiSendEnabled, attachments, audioRecordingEnabled, autocompleteTriggers, cancelURLEnrichment, clearEditingState, closeCommandsList, closeMentionsList, cooldownInterval, cooldownRemaining, disabled, disableMentions, dismissLinkPreview, doFileUploadRequest, doImageUploadRequest, emojiSearchIndex, errorHandler, findAndEnqueueURLsToEnrich, focus, grow, handleChange, handleSubmit, hideSendButton, insertText, isThreadInput, isUploadEnabled, linkPreviews, maxFilesLeft, maxRows, mentionAllAppUsers, mentioned_users, mentionQueryParams, message, minRows, noFiles, numberOfUploads, onPaste, onSelectUser, openCommandsList, openMentionsList, overrideSubmitHandler, parent, publishTypingEvent, recordingController, removeAttachments, setCooldownRemaining, setText, shouldSubmit, showCommandsList, showMentionsList, text: text3, textareaRef, uploadAttachment, uploadNewFiles, upsertAttachments, useMentionsTransliteration } = value;
  const editing = message == null ? void 0 : message.editing;
  const linkPreviewsValue = Array.from(linkPreviews.values()).join();
  const mentionedUsersLength = mentioned_users.length;
  const parentId = parent == null ? void 0 : parent.id;
  const messageInputContext = (0, import_react116.useMemo)(
    () => ({
      additionalTextareaProps,
      asyncMessagesMultiSendEnabled,
      attachments,
      audioRecordingEnabled,
      autocompleteTriggers,
      cancelURLEnrichment,
      clearEditingState,
      closeCommandsList,
      closeMentionsList,
      cooldownInterval,
      cooldownRemaining,
      disabled,
      disableMentions,
      dismissLinkPreview,
      doFileUploadRequest,
      doImageUploadRequest,
      emojiSearchIndex,
      errorHandler,
      findAndEnqueueURLsToEnrich,
      focus,
      grow,
      handleChange,
      handleSubmit,
      hideSendButton,
      insertText,
      isThreadInput,
      isUploadEnabled,
      linkPreviews,
      maxFilesLeft,
      maxRows,
      mentionAllAppUsers,
      mentioned_users,
      mentionQueryParams,
      message,
      minRows,
      noFiles,
      numberOfUploads,
      onPaste,
      onSelectUser,
      openCommandsList,
      openMentionsList,
      overrideSubmitHandler,
      parent,
      publishTypingEvent,
      recordingController,
      removeAttachments,
      setCooldownRemaining,
      setText,
      shouldSubmit,
      showCommandsList,
      showMentionsList,
      text: text3,
      textareaRef,
      uploadAttachment,
      uploadNewFiles,
      upsertAttachments,
      useMentionsTransliteration
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      asyncMessagesMultiSendEnabled,
      attachments,
      audioRecordingEnabled,
      cancelURLEnrichment,
      cooldownInterval,
      cooldownRemaining,
      dismissLinkPreview,
      editing,
      emojiSearchIndex,
      findAndEnqueueURLsToEnrich,
      handleSubmit,
      hideSendButton,
      isUploadEnabled,
      isThreadInput,
      linkPreviewsValue,
      mentionedUsersLength,
      minRows,
      parentId,
      publishTypingEvent,
      recordingController,
      removeAttachments,
      showCommandsList,
      showMentionsList,
      text3,
      uploadAttachment,
      upsertAttachments
    ]
  );
  return messageInputContext;
};

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/useMessageInputState.js
var import_react123 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/useAttachments.js
var import_react117 = __toESM(require_react());
var apiMaxNumberOfFiles = 10;
var isImageFile = (file) => file.type.startsWith("image/") && !file.type.endsWith(".photoshop");
var getAttachmentTypeFromMime = (mimeType) => {
  if (mimeType.startsWith("image/") && !mimeType.endsWith(".photoshop"))
    return "image";
  if (mimeType.includes("video/"))
    return "video";
  if (mimeType.includes("audio/"))
    return "audio";
  return "file";
};
var ensureIsLocalAttachment = (attachment) => {
  if (isLocalAttachment(attachment)) {
    return attachment;
  }
  const { localMetadata, ...rest } = attachment;
  return {
    localMetadata: {
      ...localMetadata ?? {},
      id: (localMetadata == null ? void 0 : localMetadata.id) || nanoid()
    },
    ...rest
  };
};
var useAttachments = (props, state, dispatch, textareaRef) => {
  const { doFileUploadRequest, doImageUploadRequest, errorHandler, noFiles } = props;
  const { getAppSettings } = useChatContext("useAttachments");
  const { t: t2 } = useTranslationContext("useAttachments");
  const { addNotification } = useChannelActionContext("useAttachments");
  const { channel, maxNumberOfFiles, multipleUploads } = useChannelStateContext("useAttachments");
  const maxFilesAllowed = !multipleUploads ? 1 : maxNumberOfFiles || apiMaxNumberOfFiles;
  const numberOfUploads = Object.values(state.attachments).filter(({ localMetadata }) => localMetadata.uploadState && localMetadata.uploadState !== "failed").length;
  const maxFilesLeft = maxFilesAllowed - numberOfUploads;
  const removeAttachments = (0, import_react117.useCallback)((ids) => {
    if (!ids.length)
      return;
    dispatch({ ids, type: "removeAttachments" });
  }, [dispatch]);
  const upsertAttachments = (0, import_react117.useCallback)((attachments) => {
    if (!attachments.length)
      return;
    dispatch({
      attachments: attachments.map(ensureIsLocalAttachment),
      type: "upsertAttachments"
    });
  }, [dispatch]);
  const uploadAttachment = (0, import_react117.useCallback)(async (att) => {
    var _a;
    const { localMetadata, ...providedAttachmentData } = att;
    if (!(localMetadata == null ? void 0 : localMetadata.file))
      return att;
    const { file } = localMetadata;
    const isImage = isImageFile(file);
    if (noFiles && !isImage)
      return att;
    const canUpload = await checkUploadPermissions({
      addNotification,
      file,
      getAppSettings,
      t: t2,
      uploadType: isImage ? "image" : "file"
    });
    if (!canUpload)
      return att;
    localMetadata.id = (localMetadata == null ? void 0 : localMetadata.id) ?? nanoid();
    const finalAttachment = {
      type: getAttachmentTypeFromMime(file.type)
    };
    if (isImage) {
      localMetadata.previewUri = (_a = URL.createObjectURL) == null ? void 0 : _a.call(URL, file);
      if (file instanceof File) {
        finalAttachment.fallback = file.name;
      }
    } else {
      finalAttachment.file_size = file.size;
      finalAttachment.mime_type = file.type;
      if (file instanceof File) {
        finalAttachment.title = file.name;
      }
    }
    Object.assign(finalAttachment, providedAttachmentData);
    upsertAttachments([
      {
        ...finalAttachment,
        localMetadata: {
          ...localMetadata,
          uploadState: "uploading"
        }
      }
    ]);
    let response;
    try {
      const doUploadRequest = isImage ? doImageUploadRequest : doFileUploadRequest;
      if (doUploadRequest) {
        response = await doUploadRequest(file, channel);
      } else {
        response = await channel[isImage ? "sendImage" : "sendFile"](file);
      }
    } catch (error2) {
      let finalError = {
        message: t2("Error uploading attachment"),
        name: "Error"
      };
      if (typeof error2.message === "string") {
        finalError = error2;
      } else if (typeof error2 === "object") {
        finalError = Object.assign(finalError, error2);
      }
      console.error(finalError);
      addNotification(finalError.message, "error");
      const failedAttachment = {
        ...finalAttachment,
        localMetadata: {
          ...localMetadata,
          uploadState: "failed"
        }
      };
      upsertAttachments([failedAttachment]);
      if (errorHandler) {
        errorHandler(finalError, "upload-attachment", {
          ...file,
          id: localMetadata.id
        });
      }
      return failedAttachment;
    }
    if (!response) {
      removeAttachments([localMetadata.id]);
      return;
    }
    const uploadedAttachment = {
      ...finalAttachment,
      localMetadata: {
        ...localMetadata,
        uploadState: "finished"
      }
    };
    if (isLocalImageAttachment(uploadedAttachment)) {
      if (uploadedAttachment.localMetadata.previewUri) {
        URL.revokeObjectURL(uploadedAttachment.localMetadata.previewUri);
        delete uploadedAttachment.localMetadata.previewUri;
      }
      uploadedAttachment.image_url = response.file;
    } else {
      uploadedAttachment.asset_url = response.file;
    }
    if (response.thumb_url) {
      uploadedAttachment.thumb_url = response.thumb_url;
    }
    upsertAttachments([uploadedAttachment]);
    return uploadedAttachment;
  }, [
    addNotification,
    channel,
    doFileUploadRequest,
    doImageUploadRequest,
    errorHandler,
    getAppSettings,
    noFiles,
    removeAttachments,
    t2,
    upsertAttachments
  ]);
  const uploadNewFiles = (0, import_react117.useCallback)((files) => {
    var _a;
    const filesToBeUploaded = noFiles ? Array.from(files).filter(isImageFile) : Array.from(files);
    filesToBeUploaded.slice(0, maxFilesLeft).forEach((fileLike) => {
      uploadAttachment({
        localMetadata: {
          file: isBlobButNotFile(fileLike) ? createFileFromBlobs({
            blobsArray: [fileLike],
            fileName: generateFileName(fileLike.type),
            mimeType: fileLike.type
          }) : fileLike,
          id: nanoid()
        }
      });
    });
    (_a = textareaRef.current) == null ? void 0 : _a.focus();
  }, [maxFilesLeft, noFiles, textareaRef, uploadAttachment]);
  return {
    maxFilesLeft,
    numberOfUploads,
    removeAttachments,
    uploadAttachment,
    uploadNewFiles,
    upsertAttachments
  };
};

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/useLinkPreviews.js
var import_react118 = __toESM(require_react());
var import_lodash4 = __toESM(require_lodash3());

// node_modules/stream-chat-react/dist/components/MessageInput/types.js
var LinkPreviewState;
(function(LinkPreviewState2) {
  LinkPreviewState2["DISMISSED"] = "dismissed";
  LinkPreviewState2["FAILED"] = "failed";
  LinkPreviewState2["LOADED"] = "loaded";
  LinkPreviewState2["LOADING"] = "loading";
  LinkPreviewState2["QUEUED"] = "queued";
})(LinkPreviewState || (LinkPreviewState = {}));
var SetLinkPreviewMode;
(function(SetLinkPreviewMode2) {
  SetLinkPreviewMode2[SetLinkPreviewMode2["UPSERT"] = 0] = "UPSERT";
  SetLinkPreviewMode2[SetLinkPreviewMode2["SET"] = 1] = "SET";
  SetLinkPreviewMode2[SetLinkPreviewMode2["REMOVE"] = 2] = "REMOVE";
})(SetLinkPreviewMode || (SetLinkPreviewMode = {}));

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/useLinkPreviews.js
var useLinkPreviews = ({ debounceURLEnrichmentMs: debounceURLEnrichmentMsInputContext, dispatch, enrichURLForPreview = false, findURLFn: findURLFnInputContext, linkPreviews, onLinkPreviewDismissed: onLinkPreviewDismissedInputContext }) => {
  const { client } = useChatContext();
  const { channelConfig, debounceURLEnrichmentMs: debounceURLEnrichmentMsChannelContext, findURLFn: findURLFnChannelContext, onLinkPreviewDismissed: onLinkPreviewDismissedChannelContext } = useChannelStateContext();
  const shouldDiscardEnrichQueries = (0, import_react118.useRef)(false);
  const findURLFn = findURLFnInputContext ?? findURLFnChannelContext;
  const onLinkPreviewDismissed = onLinkPreviewDismissedInputContext ?? onLinkPreviewDismissedChannelContext;
  const debounceURLEnrichmentMs = debounceURLEnrichmentMsInputContext ?? debounceURLEnrichmentMsChannelContext ?? 1500;
  const dismissLinkPreview = (0, import_react118.useCallback)(
    (linkPreview) => {
      onLinkPreviewDismissed == null ? void 0 : onLinkPreviewDismissed(linkPreview);
      const previewToRemoveMap = /* @__PURE__ */ new Map();
      linkPreview.state = LinkPreviewState.DISMISSED;
      previewToRemoveMap.set(linkPreview.og_scrape_url, linkPreview);
      dispatch({
        linkPreviews: previewToRemoveMap,
        mode: SetLinkPreviewMode.UPSERT,
        type: "setLinkPreviews"
      });
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [onLinkPreviewDismissed]
  );
  const findAndEnqueueURLsToEnrich = (0, import_react118.useCallback)((0, import_lodash4.default)((text3, mode = SetLinkPreviewMode.SET) => {
    const urls = findURLFn ? findURLFn(text3) : find(text3, "url").reduce((acc, link2) => {
      if (link2.isLink)
        acc.push(link2.href);
      return acc;
    }, []);
    shouldDiscardEnrichQueries.current = urls.length === 0;
    dispatch({
      linkPreviews: urls.reduce((acc, url) => {
        acc.set(url, { og_scrape_url: url, state: LinkPreviewState.QUEUED });
        return acc;
      }, /* @__PURE__ */ new Map()),
      mode,
      type: "setLinkPreviews"
    });
  }, debounceURLEnrichmentMs, { leading: false, trailing: true }), [debounceURLEnrichmentMs, shouldDiscardEnrichQueries, findURLFn]);
  const cancelURLEnrichment = (0, import_react118.useCallback)(() => {
    findAndEnqueueURLsToEnrich.cancel();
    findAndEnqueueURLsToEnrich("");
    findAndEnqueueURLsToEnrich.flush();
  }, [findAndEnqueueURLsToEnrich]);
  (0, import_react118.useEffect)(() => {
    const enqueuedLinks = Array.from(linkPreviews.values()).reduce((acc, linkPreview) => {
      if (linkPreview.state === "queued") {
        const loadingLinkPreview = {
          ...linkPreview,
          state: LinkPreviewState.LOADING
        };
        acc.set(linkPreview.og_scrape_url, loadingLinkPreview);
      }
      return acc;
    }, /* @__PURE__ */ new Map());
    if (!enqueuedLinks.size)
      return;
    dispatch({
      linkPreviews: enqueuedLinks,
      mode: SetLinkPreviewMode.UPSERT,
      type: "setLinkPreviews"
    });
    enqueuedLinks.forEach((linkPreview) => {
      client.enrichURL(linkPreview.og_scrape_url).then(({ duration, ...ogAttachment }) => {
        if (shouldDiscardEnrichQueries.current)
          return;
        const linkPreviewsMap = /* @__PURE__ */ new Map();
        linkPreviewsMap.set(linkPreview.og_scrape_url, {
          ...ogAttachment,
          state: LinkPreviewState.LOADED
        });
        dispatch({
          linkPreviews: linkPreviewsMap,
          mode: SetLinkPreviewMode.UPSERT,
          type: "setLinkPreviews"
        });
      }).catch(() => {
        const linkPreviewsMap = /* @__PURE__ */ new Map();
        linkPreviewsMap.set(linkPreview.og_scrape_url, {
          ...linkPreview,
          state: LinkPreviewState.FAILED
        });
        dispatch({
          linkPreviews: linkPreviewsMap,
          mode: SetLinkPreviewMode.UPSERT,
          type: "setLinkPreviews"
        });
      });
    });
  }, [shouldDiscardEnrichQueries, linkPreviews]);
  return {
    cancelURLEnrichment,
    dismissLinkPreview,
    findAndEnqueueURLsToEnrich: (channelConfig == null ? void 0 : channelConfig.url_enrichment) && enrichURLForPreview ? findAndEnqueueURLsToEnrich : void 0
  };
};

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/useMessageInputText.js
var import_react119 = __toESM(require_react());
var useMessageInputText = (props, state, dispatch, findAndEnqueueURLsToEnrich) => {
  const { channel } = useChannelStateContext("useMessageInputText");
  const { additionalTextareaProps, focus, parent, publishTypingEvent = true } = props;
  const { text: text3 } = state;
  const textareaRef = (0, import_react119.useRef)(void 0);
  (0, import_react119.useEffect)(() => {
    if (focus && textareaRef.current) {
      textareaRef.current.focus();
    }
  }, [focus]);
  const newCursorPosition = (0, import_react119.useRef)(void 0);
  const insertText = (0, import_react119.useCallback)(
    (textToInsert) => {
      const { maxLength } = additionalTextareaProps || {};
      if (!textareaRef.current) {
        return dispatch({
          getNewText: (text4) => {
            const updatedText = text4 + textToInsert;
            if (maxLength && updatedText.length > maxLength) {
              return updatedText.slice(0, maxLength);
            }
            return updatedText;
          },
          type: "setText"
        });
      }
      const { selectionEnd, selectionStart } = textareaRef.current;
      newCursorPosition.current = selectionStart + textToInsert.length;
      dispatch({
        getNewText: (prevText) => {
          const updatedText = prevText.slice(0, selectionStart) + textToInsert + prevText.slice(selectionEnd);
          if (maxLength && updatedText.length > maxLength) {
            return updatedText.slice(0, maxLength);
          }
          return updatedText;
        },
        type: "setText"
      });
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [additionalTextareaProps, newCursorPosition, textareaRef]
  );
  (0, import_react119.useEffect)(() => {
    const textareaElement = textareaRef.current;
    if (textareaElement && newCursorPosition.current !== void 0) {
      textareaElement.selectionStart = newCursorPosition.current;
      textareaElement.selectionEnd = newCursorPosition.current;
      newCursorPosition.current = void 0;
    }
  }, [text3, newCursorPosition]);
  const handleChange = (0, import_react119.useCallback)(
    (event) => {
      event.preventDefault();
      if (!event || !event.target) {
        return;
      }
      const newText = event.target.value;
      dispatch({
        getNewText: () => newText,
        type: "setText"
      });
      findAndEnqueueURLsToEnrich == null ? void 0 : findAndEnqueueURLsToEnrich(newText);
      if (publishTypingEvent && newText && channel) {
        logChatPromiseExecution(channel.keystroke(parent == null ? void 0 : parent.id), "start typing event");
      }
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [channel, findAndEnqueueURLsToEnrich, parent, publishTypingEvent]
  );
  return {
    handleChange,
    insertText,
    textareaRef
  };
};

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/useSubmitHandler.js
var import_react120 = __toESM(require_react());
var useSubmitHandler = (props, state, dispatch, numberOfUploads, enrichURLsController) => {
  const { clearEditingState, message, overrideSubmitHandler, parent, publishTypingEvent } = props;
  const { attachments, linkPreviews, mentioned_users, text: text3 } = state;
  const { cancelURLEnrichment, findAndEnqueueURLsToEnrich } = enrichURLsController;
  const { channel } = useChannelStateContext("useSubmitHandler");
  const { addNotification, editMessage, sendMessage } = useChannelActionContext("useSubmitHandler");
  const { t: t2 } = useTranslationContext("useSubmitHandler");
  const textReference = (0, import_react120.useRef)({ hasChanged: false, initialText: text3 });
  (0, import_react120.useEffect)(() => {
    if (!textReference.current.initialText.length) {
      textReference.current.initialText = text3;
      return;
    }
    textReference.current.hasChanged = text3 !== textReference.current.initialText;
  }, [text3]);
  const handleSubmit = async (event, customMessageData, options2) => {
    event == null ? void 0 : event.preventDefault();
    const trimmedMessage = text3.trim();
    const isEmptyMessage = trimmedMessage === "" || trimmedMessage === ">" || trimmedMessage === "``````" || trimmedMessage === "``" || trimmedMessage === "**" || trimmedMessage === "____" || trimmedMessage === "__" || trimmedMessage === "****";
    if (isEmptyMessage && numberOfUploads === 0 && attachments.length === 0 && !(customMessageData == null ? void 0 : customMessageData.poll_id))
      return;
    const someAttachmentsUploading = attachments.some((att) => {
      var _a;
      return ((_a = att.localMetadata) == null ? void 0 : _a.uploadState) === "uploading";
    });
    if (someAttachmentsUploading) {
      return addNotification(t2("Wait until all attachments have uploaded"), "error");
    }
    const attachmentsWithoutLinkPreviews = attachments.filter((att) => {
      var _a, _b;
      const isSuccessfulUpload = ((_a = att.localMetadata) == null ? void 0 : _a.uploadState) === "finished";
      const isNotUpload = !((_b = att.localMetadata) == null ? void 0 : _b.uploadState);
      const isNotLinkPreview = !att.og_scrape_url;
      return isNotLinkPreview && (isSuccessfulUpload || isNotUpload);
    }).map((localAttachment) => {
      const { localMetadata: _23, ...attachment } = localAttachment;
      return attachment;
    });
    const sendOptions = { ...options2 };
    let attachmentsFromLinkPreviews = [];
    if (findAndEnqueueURLsToEnrich) {
      cancelURLEnrichment();
      const someLinkPreviewsLoading = Array.from(linkPreviews.values()).some((linkPreview) => [LinkPreviewState.QUEUED, LinkPreviewState.LOADING].includes(linkPreview.state));
      const someLinkPreviewsDismissed = Array.from(linkPreviews.values()).some((linkPreview) => linkPreview.state === LinkPreviewState.DISMISSED);
      attachmentsFromLinkPreviews = someLinkPreviewsLoading ? [] : Array.from(linkPreviews.values()).filter((linkPreview) => linkPreview.state === LinkPreviewState.LOADED).map(
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        ({ state: linkPreviewState, ...ogAttachment }) => ogAttachment
      );
      sendOptions.skip_enrich_url = !someLinkPreviewsLoading && attachmentsFromLinkPreviews.length > 0 || someLinkPreviewsDismissed;
    }
    const newAttachments = [
      ...attachmentsWithoutLinkPreviews,
      ...attachmentsFromLinkPreviews
    ];
    const actualMentionedUsers = Array.from(new Set(mentioned_users.filter(({ id, name }) => text3.includes(`@${id}`) || text3.includes(`@${name}`))));
    const updatedMessage = {
      attachments: newAttachments,
      mentioned_users: actualMentionedUsers,
      text: text3
    };
    if (message && message.type !== "error") {
      delete message.i18n;
      try {
        await editMessage({
          ...message,
          ...updatedMessage,
          ...customMessageData
        }, sendOptions);
        clearEditingState == null ? void 0 : clearEditingState();
        dispatch({ type: "clear" });
      } catch (err) {
        addNotification(t2("Edit message request failed"), "error");
      }
    } else {
      try {
        dispatch({ type: "clear" });
        if (overrideSubmitHandler) {
          await overrideSubmitHandler({
            ...updatedMessage,
            parent
          }, channel.cid, customMessageData, sendOptions);
        } else {
          await sendMessage({
            ...updatedMessage,
            parent
          }, customMessageData, sendOptions);
        }
        if (publishTypingEvent)
          await channel.stopTyping();
      } catch (err) {
        dispatch({
          getNewText: () => text3,
          type: "setText"
        });
        actualMentionedUsers == null ? void 0 : actualMentionedUsers.forEach((user) => {
          dispatch({ type: "addMentionedUser", user });
        });
        addNotification(t2("Send message request failed"), "error");
      }
    }
  };
  return { handleSubmit };
};

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/usePasteHandler.js
var import_react121 = __toESM(require_react());
var usePasteHandler = (uploadNewFiles, insertText, isUploadEnabled, findAndEnqueueURLsToEnrich) => {
  const onPaste = (0, import_react121.useCallback)((clipboardEvent) => {
    (async (event) => {
      const { items } = event.clipboardData;
      event.preventDefault();
      let plainTextPromise = void 0;
      for (let i = 0; i < items.length; i++) {
        const item = items[i];
        if (item.kind === "string" && item.type === "text/plain") {
          plainTextPromise = new Promise((resolve) => {
            item.getAsString((string) => {
              resolve(string);
            });
          });
          break;
        }
      }
      const fileLikes = await dataTransferItemsToFiles(Array.from(items));
      if (plainTextPromise) {
        const pastedText = await plainTextPromise;
        insertText(pastedText);
        findAndEnqueueURLsToEnrich == null ? void 0 : findAndEnqueueURLsToEnrich(pastedText, SetLinkPreviewMode.UPSERT);
        findAndEnqueueURLsToEnrich == null ? void 0 : findAndEnqueueURLsToEnrich.flush();
      } else if (fileLikes.length && isUploadEnabled) {
        uploadNewFiles(fileLikes);
        return;
      }
    })(clipboardEvent);
  }, [findAndEnqueueURLsToEnrich, insertText, isUploadEnabled, uploadNewFiles]);
  return { onPaste };
};

// node_modules/stream-chat-react/dist/components/MediaRecorder/hooks/useMediaRecorder.js
var import_react122 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MediaRecorder/observable/Subscription.js
var Subscription = class {
  constructor(unsubscribe) {
    this.closed = false;
    this._unsubscribe = unsubscribe;
  }
  unsubscribe() {
    var _a;
    this.closed = true;
    (_a = this._unsubscribe) == null ? void 0 : _a.call(this);
  }
};

// node_modules/stream-chat-react/dist/components/MediaRecorder/observable/Observer.js
function createObserver(observerOrNext) {
  return typeof observerOrNext === "function" ? { next: observerOrNext } : observerOrNext;
}

// node_modules/stream-chat-react/dist/components/MediaRecorder/observable/Observable.js
var Observable = class {
  constructor(producer) {
    this._closed = false;
    if (producer)
      this._producer = producer;
  }
  get closed() {
    return this._closed;
  }
  subscribe(observerOrNext) {
    var _a;
    const observer = createObserver(observerOrNext);
    if (!this.closed) {
      (_a = this._producer) == null ? void 0 : _a.call(this, observer);
    }
    return new Subscription(() => {
      this._closed = true;
    });
  }
};

// node_modules/stream-chat-react/dist/components/MediaRecorder/observable/Subject.js
var Subject = class extends Observable {
  constructor() {
    super();
    this._observers = /* @__PURE__ */ new Map();
    this._observerCounter = 0;
  }
  get observers() {
    return Array.from(this._observers.values());
  }
  next(value) {
    if (this.closed)
      return;
    const observers = this.observers;
    for (let i = 0; i < observers.length; i++) {
      observers[i].next(value);
    }
  }
  error(err) {
    var _a, _b;
    if (this.closed)
      return;
    this.thrownError = err;
    const { observers } = this;
    for (let i = 0; i < observers.length; i++) {
      (_b = (_a = observers[i]).error) == null ? void 0 : _b.call(_a, err);
    }
    this._observers.clear();
  }
  complete() {
    var _a, _b;
    if (this.closed)
      return;
    this._closed = true;
    const { observers } = this;
    for (let i = 0; i < observers.length; i++) {
      (_b = (_a = observers[i]).complete) == null ? void 0 : _b.call(_a);
    }
    this._observers.clear();
  }
  subscribe(observerOrNext) {
    const observer = createObserver(observerOrNext);
    if (this.thrownError || this.closed) {
      const subscription = new Subscription();
      subscription.closed = true;
      return subscription;
    }
    const observerId = this._observerCounter++;
    this._observers.set(observerId, observer);
    return new Subscription(() => {
      this._observers.delete(observerId);
    });
  }
  unsubscribe() {
    this._closed = true;
    this._observers.clear();
  }
};

// node_modules/stream-chat-react/dist/components/MediaRecorder/observable/BehaviorSubject.js
var BehaviorSubject = class extends Subject {
  constructor(_value) {
    super();
    this._value = _value;
  }
  get value() {
    const { _value, thrownError } = this;
    if (thrownError) {
      throw thrownError;
    }
    return _value;
  }
  subscribe(observerOrNext) {
    const observer = createObserver(observerOrNext);
    const subscription = super.subscribe(observerOrNext);
    if (!subscription.closed)
      observer.next(this._value);
    return subscription;
  }
  next(value) {
    super.next(this._value = value);
  }
};

// node_modules/stream-chat-react/dist/components/MediaRecorder/classes/BrowserPermission.js
var RecordingPermission;
(function(RecordingPermission2) {
  RecordingPermission2["CAM"] = "camera";
  RecordingPermission2["MIC"] = "microphone";
})(RecordingPermission || (RecordingPermission = {}));
var MEDIA_TO_PERMISSION = {
  audio: RecordingPermission.MIC,
  video: RecordingPermission.CAM
};
var BrowserPermission = class {
  constructor({ mediaType }) {
    this.state = new BehaviorSubject(void 0);
    this.status = new BehaviorSubject(void 0);
    this.error = new Subject();
    this.changeSubscriptions = [];
    this.name = MEDIA_TO_PERMISSION[mediaType];
  }
  get isWatching() {
    return this.changeSubscriptions.some((subscription) => !subscription.closed);
  }
  async watch() {
    if (!this.status.value) {
      await this.check();
      if (!this.status.value)
        return;
    }
    const status = this.status.value;
    const handlePermissionChange = (e) => {
      const { state } = e.target;
      this.state.next(state);
    };
    status.addEventListener("change", handlePermissionChange);
    this.changeSubscriptions.push(new Subscription(() => {
      status.removeEventListener("change", handlePermissionChange);
    }));
  }
  unwatch() {
    this.changeSubscriptions.forEach((subscription) => subscription.unsubscribe());
  }
  async check() {
    if (!this.name) {
      this.error.next(new Error("Unknown media recording permission"));
      return;
    }
    let permissionState;
    try {
      const permissionStatus = await navigator.permissions.query({
        name: this.name
      });
      permissionState = permissionStatus.state;
      this.status.next(permissionStatus);
    } catch (e) {
      permissionState = "granted";
    }
    this.state.next(permissionState);
  }
};

// node_modules/stream-chat-react/dist/components/MediaRecorder/classes/MediaRecorderController.js
var import_fix_webm_duration = __toESM(require_fix_webm_duration());

// node_modules/stream-chat-react/dist/utils/mergeDeep.js
var import_lodash5 = __toESM(require_lodash5());
var overrideEverything = (_23, source) => source;
var mergeDeep = (target, source) => (0, import_lodash5.default)(target, source, overrideEverything);
var overrideUndefinedOnly = (object, source) => object ?? source;
var mergeDeepUndefined = (target, source) => (0, import_lodash5.default)(target, source, overrideUndefinedOnly);

// node_modules/stream-chat-react/dist/components/MediaRecorder/classes/AmplitudeRecorder.js
var MAX_FREQUENCY_AMPLITUDE = 255;
var logError2 = (e) => e && console.error("[AMPLITUDE RECORDER ERROR]", e);
var rootMeanSquare = (values) => Math.sqrt(values.reduce((acc, val) => acc + Math.pow(val, 2), 0) / values.length);
var DEFAULT_AMPLITUDE_RECORDER_CONFIG = {
  analyserConfig: {
    fftSize: 32,
    maxDecibels: 0,
    minDecibels: -100
  },
  sampleCount: 100,
  samplingFrequencyMs: 60
};
var AmplitudeRecorderState;
(function(AmplitudeRecorderState2) {
  AmplitudeRecorderState2["CLOSED"] = "closed";
  AmplitudeRecorderState2["RECORDING"] = "recording";
  AmplitudeRecorderState2["STOPPED"] = "stopped";
})(AmplitudeRecorderState || (AmplitudeRecorderState = {}));
var AmplitudeRecorder = class {
  constructor({ config, stream }) {
    this.amplitudes = new BehaviorSubject([]);
    this.state = new BehaviorSubject(void 0);
    this.error = new Subject();
    this.start = () => {
      if (this.state.value === AmplitudeRecorderState.CLOSED)
        return;
      if (!this.stream) {
        throw new Error("Missing MediaStream instance. Cannot to start amplitude recording");
      }
      if (this.state.value === AmplitudeRecorderState.RECORDING)
        this.stop();
      if (!this.analyserNode) {
        if (!this.stream)
          return;
        this.init();
      }
      this.state.next(AmplitudeRecorderState.RECORDING);
      this.amplitudeSamplingInterval = setInterval(() => {
        if (!(this.analyserNode && this.state.value === AmplitudeRecorderState.RECORDING))
          return;
        const frequencyBins = new Uint8Array(this.analyserNode.frequencyBinCount);
        try {
          this.analyserNode.getByteFrequencyData(frequencyBins);
        } catch (e) {
          logError2(e);
          this.error.next(e);
          return;
        }
        const normalizedSignalStrength = rootMeanSquare(frequencyBins) / MAX_FREQUENCY_AMPLITUDE;
        this.amplitudes.next([...this.amplitudes.value, normalizedSignalStrength]);
      }, this.config.samplingFrequencyMs);
    };
    this.config = mergeDeepUndefined({ ...config }, DEFAULT_AMPLITUDE_RECORDER_CONFIG);
    this.stream = stream;
  }
  init() {
    this.audioContext = new AudioContext();
    this.analyserNode = this.audioContext.createAnalyser();
    const { analyserConfig } = this.config;
    this.analyserNode.fftSize = analyserConfig.fftSize;
    this.analyserNode.maxDecibels = analyserConfig.maxDecibels;
    this.analyserNode.minDecibels = analyserConfig.minDecibels;
    this.microphone = this.audioContext.createMediaStreamSource(this.stream);
    this.microphone.connect(this.analyserNode);
  }
  stop() {
    clearInterval(this.amplitudeSamplingInterval);
    this.amplitudeSamplingInterval = void 0;
    this.state.next(AmplitudeRecorderState.STOPPED);
  }
  close() {
    var _a, _b, _c, _d;
    if (this.state.value !== AmplitudeRecorderState.STOPPED)
      this.stop();
    this.state.next(AmplitudeRecorderState.CLOSED);
    this.amplitudes.next([]);
    (_a = this.microphone) == null ? void 0 : _a.disconnect();
    (_b = this.analyserNode) == null ? void 0 : _b.disconnect();
    if (((_c = this.audioContext) == null ? void 0 : _c.state) !== "closed")
      (_d = this.audioContext) == null ? void 0 : _d.close();
  }
};

// node_modules/stream-chat-react/dist/components/MediaRecorder/transcode/audioProcessing.js
var toAudioBuffer = async (file) => {
  const audioCtx = new AudioContext();
  const arrayBuffer = await readFileAsArrayBuffer(file);
  const decodedData = await audioCtx.decodeAudioData(arrayBuffer);
  if (audioCtx.state !== "closed")
    await audioCtx.close();
  return decodedData;
};
var renderAudio = async (audioBuffer, sampleRate) => {
  const offlineAudioCtx = new OfflineAudioContext(audioBuffer.numberOfChannels, audioBuffer.duration * sampleRate, sampleRate);
  const source = offlineAudioCtx.createBufferSource();
  source.buffer = audioBuffer;
  source.connect(offlineAudioCtx.destination);
  source.start();
  return await offlineAudioCtx.startRendering();
};

// node_modules/stream-chat-react/dist/components/MediaRecorder/transcode/wav.js
var WAV_HEADER_LENGTH_BYTES = 44;
var BYTES_PER_SAMPLE = 2;
var RIFF_FILE_MAX_BYTES = 4294967295;
var HEADER = {
  AUDIO_FORMAT: { offset: 20, value: 1 },
  // PCM = 1
  BITS_PER_SAMPLE: { offset: 34, value: BYTES_PER_SAMPLE * 8 },
  // 16 bits encoding
  BLOCK_ALIGN: { offset: 32 },
  BYTE_RATE: { offset: 28 },
  CHANNEL_COUNT: { offset: 22 },
  // 1 - mono, 2 - stereo
  CHUNK_ID: { offset: 0, value: 1380533830 },
  // hex representation of string "RIFF" (Resource Interchange File Format) - identifies the file structure that defines a class of more specific file formats, e.g. WAVE
  CHUNK_SIZE: { offset: 4 },
  FILE_FORMAT: { offset: 8, value: 1463899717 },
  // hex representation of string "WAVE"
  SAMPLE_RATE: { offset: 24 },
  SUBCHUNK1_ID: { offset: 12, value: 1718449184 },
  // hex representation of string "fmt " - identifies the start of "format" section of the header
  SUBCHUNK1_SIZE: { offset: 16, value: 16 },
  // Subchunk1 Size without SUBCHUNK1_ID and SUBCHUNK1_SIZE fields
  SUBCHUNK2_ID: { offset: 36, value: 1684108385 },
  // hex representation of string "data" - identifies the start of actual audio data section
  SUBCHUNK2_SIZE: { offset: 40 }
  // actual audio data size
};
var fourCharsToInt = (chars2) => chars2.charCodeAt(0) << 24 | chars2.charCodeAt(1) << 16 | chars2.charCodeAt(2) << 8 | chars2.charCodeAt(3);
var WAV_HEADER_FLAGS = {
  data: fourCharsToInt("data"),
  fmt: fourCharsToInt("fmt "),
  RIFF: fourCharsToInt("RIFF"),
  WAVE: fourCharsToInt("WAVE")
};
var writeWavHeader = ({ arrayBuffer, channelCount, sampleRate }) => {
  const byteRate = sampleRate * channelCount * BYTES_PER_SAMPLE;
  const blockAlign = channelCount * BYTES_PER_SAMPLE;
  const dataView = new DataView(arrayBuffer);
  const dataChunkSize = Math.min(dataView.byteLength - WAV_HEADER_LENGTH_BYTES, RIFF_FILE_MAX_BYTES - WAV_HEADER_LENGTH_BYTES);
  dataView.setUint32(HEADER.CHUNK_ID.offset, HEADER.CHUNK_ID.value);
  dataView.setUint32(HEADER.CHUNK_SIZE.offset, arrayBuffer.byteLength - 8, true);
  dataView.setUint32(HEADER.FILE_FORMAT.offset, HEADER.FILE_FORMAT.value);
  dataView.setUint32(HEADER.SUBCHUNK1_ID.offset, HEADER.SUBCHUNK1_ID.value);
  dataView.setUint32(HEADER.SUBCHUNK1_SIZE.offset, HEADER.SUBCHUNK1_SIZE.value, true);
  dataView.setUint16(HEADER.AUDIO_FORMAT.offset, HEADER.AUDIO_FORMAT.value, true);
  dataView.setUint16(HEADER.CHANNEL_COUNT.offset, channelCount, true);
  dataView.setUint32(HEADER.SAMPLE_RATE.offset, sampleRate, true);
  dataView.setUint32(HEADER.BYTE_RATE.offset, byteRate, true);
  dataView.setUint16(HEADER.BLOCK_ALIGN.offset, blockAlign, true);
  dataView.setUint16(HEADER.BITS_PER_SAMPLE.offset, HEADER.BITS_PER_SAMPLE.value, true);
  dataView.setUint32(HEADER.SUBCHUNK2_ID.offset, HEADER.SUBCHUNK2_ID.value);
  dataView.setUint32(HEADER.SUBCHUNK2_SIZE.offset, dataChunkSize, true);
};
var splitDataByChannel = (audioBuffer) => Array.from({ length: audioBuffer.numberOfChannels }, (_23, i) => audioBuffer.getChannelData(i));
var writeWavAudioData = ({ arrayBuffer, dataByChannel }) => {
  const dataView = new DataView(arrayBuffer);
  const channelCount = dataByChannel.length;
  dataByChannel.forEach((channelData, channelIndex) => {
    let writeOffset = WAV_HEADER_LENGTH_BYTES + channelCount * channelIndex;
    channelData.forEach((float32Value) => {
      dataView.setInt16(writeOffset, float32Value < 0 ? Math.max(-1, float32Value) * 32768 : Math.min(1, float32Value) * 32767, true);
      writeOffset += channelCount * BYTES_PER_SAMPLE;
    });
  });
};
var encodeToWaw = async (file, sampleRate) => {
  const audioBuffer = await renderAudio(await toAudioBuffer(file), sampleRate);
  const numberOfSamples = audioBuffer.duration * sampleRate;
  const fileSizeBytes = numberOfSamples * audioBuffer.numberOfChannels * BYTES_PER_SAMPLE + WAV_HEADER_LENGTH_BYTES;
  const arrayBuffer = new ArrayBuffer(fileSizeBytes);
  writeWavHeader({ arrayBuffer, channelCount: audioBuffer.numberOfChannels, sampleRate });
  writeWavAudioData({ arrayBuffer, dataByChannel: splitDataByChannel(audioBuffer) });
  return new Blob([arrayBuffer], { type: "audio/wav" });
};

// node_modules/stream-chat-react/dist/components/MediaRecorder/transcode/index.js
var transcode = ({ blob, encoder = encodeToWaw, sampleRate }) => encoder(createFileFromBlobs({
  blobsArray: [blob],
  fileName: `audio_recording_${(/* @__PURE__ */ new Date()).toISOString()}.${getExtensionFromMimeType(blob.type)}`,
  mimeType: blob.type
}), sampleRate);

// node_modules/stream-chat-react/dist/components/MediaRecorder/classes/MediaRecorderController.js
var RECORDED_MIME_TYPE_BY_BROWSER = {
  audio: {
    others: "audio/webm",
    safari: "audio/mp4;codecs=mp4a.40.2"
  }
};
var DEFAULT_AUDIO_TRANSCODER_CONFIG = {
  sampleRate: 16e3
};
var disposeOfMediaStream = (stream) => {
  if (!(stream == null ? void 0 : stream.active))
    return;
  stream.getTracks().forEach((track2) => {
    track2.stop();
    stream.removeTrack(track2);
  });
};
var logError3 = (e) => e && console.error("[MEDIA RECORDER ERROR]", e);
var MediaRecordingState;
(function(MediaRecordingState2) {
  MediaRecordingState2["PAUSED"] = "paused";
  MediaRecordingState2["RECORDING"] = "recording";
  MediaRecordingState2["STOPPED"] = "stopped";
})(MediaRecordingState || (MediaRecordingState = {}));
var RecordingAttachmentType;
(function(RecordingAttachmentType2) {
  RecordingAttachmentType2["VOICE_RECORDING"] = "voiceRecording";
})(RecordingAttachmentType || (RecordingAttachmentType = {}));
var MediaRecorderController = class {
  constructor({ config, generateRecordingTitle, t: t2 } = {}) {
    this.recordedChunkDurations = [];
    this.recordedData = [];
    this.recordingState = new BehaviorSubject(void 0);
    this.recording = new BehaviorSubject(void 0);
    this.error = new Subject();
    this.notification = new Subject();
    this.generateRecordingTitle = (mimeType) => {
      if (this.customGenerateRecordingTitle) {
        return this.customGenerateRecordingTitle(mimeType);
      }
      return `${this.mediaType}_recording_${(/* @__PURE__ */ new Date()).toISOString()}.${getExtensionFromMimeType(mimeType)}`;
    };
    this.makeVoiceRecording = async () => {
      var _a;
      if (this.recordingUri)
        URL.revokeObjectURL(this.recordingUri);
      if (!this.recordedData.length)
        return;
      const { mimeType } = this.mediaRecorderConfig;
      let blob = new Blob(this.recordedData, { type: mimeType });
      if (mimeType.match("audio/webm")) {
        blob = await (0, import_fix_webm_duration.default)(blob, this.durationMs, {
          logger: () => null
          // prevents polluting the browser console
        });
      }
      if (!mimeType.match("audio/mp4")) {
        blob = await transcode({
          blob,
          ...this.transcoderConfig
        });
      }
      if (!blob)
        return;
      this.recordingUri = URL.createObjectURL(blob);
      const file = createFileFromBlobs({
        blobsArray: [blob],
        fileName: this.generateRecordingTitle(blob.type),
        mimeType: blob.type
      });
      return {
        asset_url: this.recordingUri,
        duration: this.durationMs / 1e3,
        file_size: blob.size,
        localMetadata: {
          file,
          id: nanoid()
        },
        mime_type: blob.type,
        title: file.name,
        type: RecordingAttachmentType.VOICE_RECORDING,
        waveform_data: resampleWaveformData(((_a = this.amplitudeRecorder) == null ? void 0 : _a.amplitudes.value) ?? [], this.amplitudeRecorderConfig.sampleCount)
      };
    };
    this.handleErrorEvent = (e) => {
      const { error: error2 } = e;
      logError3(error2);
      this.error.next(error2);
      this.notification.next({
        text: this.t("An error has occurred during recording"),
        type: "error"
      });
    };
    this.handleDataavailableEvent = async (e) => {
      var _a;
      if (!e.data.size)
        return;
      if (this.mediaType !== "audio")
        return;
      try {
        this.recordedData.push(e.data);
        const recording = await this.makeVoiceRecording();
        if (!recording)
          return;
        (_a = this.signalRecordingReady) == null ? void 0 : _a.call(this, recording);
        this.recording.next(recording);
      } catch (e2) {
        logError3(e2);
        this.error.next(e2);
        this.notification.next({
          text: this.t("An error has occurred during the recording processing"),
          type: "error"
        });
      }
    };
    this.resetRecordingState = () => {
      this.recordedData = [];
      this.recording.next(void 0);
      this.recordingState.next(void 0);
      this.recordedChunkDurations = [];
      this.startTime = void 0;
    };
    this.cleanUp = () => {
      var _a;
      this.resetRecordingState();
      if (this.recordingUri)
        URL.revokeObjectURL(this.recordingUri);
      (_a = this.amplitudeRecorder) == null ? void 0 : _a.close();
      if (this.mediaRecorder) {
        disposeOfMediaStream(this.mediaRecorder.stream);
        this.mediaRecorder.removeEventListener("dataavailable", this.handleDataavailableEvent);
        this.mediaRecorder.removeEventListener("error", this.handleErrorEvent);
      }
    };
    this.start = async () => {
      if ([MediaRecordingState.RECORDING, MediaRecordingState.PAUSED].includes(this.recordingState.value)) {
        const error2 = new Error("Cannot start recording. Recording already in progress");
        logError3(error2);
        this.error.next(error2);
        return;
      }
      if (!navigator.mediaDevices) {
        const error2 = new Error("Media recording is not supported");
        logError3(error2);
        this.error.next(error2);
        this.notification.next({ text: this.t("Error starting recording"), type: "error" });
        return;
      }
      if (this.mediaType === "video") {
        const error2 = new Error(`Video recording is not supported. Provided MIME type: ${this.mediaRecorderConfig.mimeType}`);
        logError3(error2);
        this.error.next(error2);
        this.notification.next({ text: this.t("Error starting recording"), type: "error" });
        return;
      }
      if (!this.permission.state.value) {
        await this.permission.check();
      }
      if (this.permission.state.value === "denied") {
        logError3(new Error("Permission denied"));
        return;
      }
      try {
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        this.mediaRecorder = new MediaRecorder(stream, this.mediaRecorderConfig);
        this.mediaRecorder.addEventListener("dataavailable", this.handleDataavailableEvent);
        this.mediaRecorder.addEventListener("error", this.handleErrorEvent);
        this.startTime = (/* @__PURE__ */ new Date()).getTime();
        this.mediaRecorder.start();
        if (this.mediaType === "audio" && stream) {
          this.amplitudeRecorder = new AmplitudeRecorder({
            config: this.amplitudeRecorderConfig,
            stream
          });
          this.amplitudeRecorder.start();
        }
        this.recordingState.next(MediaRecordingState.RECORDING);
      } catch (error2) {
        logError3(error2);
        this.cancel();
        this.error.next(error2);
        this.notification.next({ text: this.t("Error starting recording"), type: "error" });
      }
    };
    this.pause = () => {
      var _a, _b;
      if (this.recordingState.value !== MediaRecordingState.RECORDING)
        return;
      if (this.startTime) {
        this.recordedChunkDurations.push((/* @__PURE__ */ new Date()).getTime() - this.startTime);
        this.startTime = void 0;
      }
      (_a = this.mediaRecorder) == null ? void 0 : _a.pause();
      (_b = this.amplitudeRecorder) == null ? void 0 : _b.stop();
      this.recordingState.next(MediaRecordingState.PAUSED);
    };
    this.resume = () => {
      var _a, _b;
      if (this.recordingState.value !== MediaRecordingState.PAUSED)
        return;
      this.startTime = (/* @__PURE__ */ new Date()).getTime();
      (_a = this.mediaRecorder) == null ? void 0 : _a.resume();
      (_b = this.amplitudeRecorder) == null ? void 0 : _b.start();
      this.recordingState.next(MediaRecordingState.RECORDING);
    };
    this.stop = () => {
      var _a, _b, _c;
      const recording = this.recording.value;
      if (recording)
        return Promise.resolve(recording);
      if (![MediaRecordingState.PAUSED, MediaRecordingState.RECORDING].includes(((_a = this.mediaRecorder) == null ? void 0 : _a.state) || ""))
        return Promise.resolve(void 0);
      if (this.startTime) {
        this.recordedChunkDurations.push((/* @__PURE__ */ new Date()).getTime() - this.startTime);
        this.startTime = void 0;
      }
      const result = new Promise((res) => {
        this.signalRecordingReady = res;
      });
      (_b = this.mediaRecorder) == null ? void 0 : _b.stop();
      (_c = this.amplitudeRecorder) == null ? void 0 : _c.stop();
      this.recordingState.next(MediaRecordingState.STOPPED);
      return result;
    };
    this.cancel = () => {
      this.stop();
      this.cleanUp();
    };
    this.t = t2 || defaultTranslatorFunction;
    this.amplitudeRecorderConfig = mergeDeepUndefined({ ...config == null ? void 0 : config.amplitudeRecorderConfig }, DEFAULT_AMPLITUDE_RECORDER_CONFIG);
    this.mediaRecorderConfig = mergeDeepUndefined({ ...config == null ? void 0 : config.mediaRecorderConfig }, {
      mimeType: MediaRecorder.isTypeSupported("audio/webm") ? RECORDED_MIME_TYPE_BY_BROWSER.audio.others : RECORDED_MIME_TYPE_BY_BROWSER.audio.safari
    });
    this.transcoderConfig = mergeDeepUndefined({ ...config == null ? void 0 : config.transcoderConfig }, DEFAULT_AUDIO_TRANSCODER_CONFIG);
    const mediaType = getRecordedMediaTypeFromMimeType(this.mediaRecorderConfig.mimeType);
    if (!mediaType) {
      throw new Error(`Unsupported media type (supported audio or video only). Provided mimeType: ${this.mediaRecorderConfig.mimeType}`);
    }
    this.mediaType = mediaType;
    this.permission = new BrowserPermission({ mediaType });
    this.customGenerateRecordingTitle = generateRecordingTitle;
  }
  get durationMs() {
    return this.recordedChunkDurations.reduce((acc, val) => acc + val, 0);
  }
};

// node_modules/stream-chat-react/dist/components/MediaRecorder/hooks/useMediaRecorder.js
var useMediaRecorder = ({ asyncMessagesMultiSendEnabled, enabled, generateRecordingTitle, handleSubmit, recordingConfig, uploadAttachment }) => {
  const { t: t2 } = useTranslationContext("useMediaRecorder");
  const [recording, setRecording] = (0, import_react122.useState)();
  const [recordingState, setRecordingState] = (0, import_react122.useState)();
  const [permissionState, setPermissionState] = (0, import_react122.useState)();
  const [isScheduledForSubmit, scheduleForSubmit] = (0, import_react122.useState)(false);
  const recorder = (0, import_react122.useMemo)(() => enabled ? new MediaRecorderController({
    config: recordingConfig ?? {},
    generateRecordingTitle,
    t: t2
  }) : void 0, [recordingConfig, enabled, generateRecordingTitle, t2]);
  const completeRecording = (0, import_react122.useCallback)(async () => {
    if (!recorder)
      return;
    const recording2 = await recorder.stop();
    if (!recording2)
      return;
    await uploadAttachment(recording2);
    if (!asyncMessagesMultiSendEnabled) {
      scheduleForSubmit(true);
    }
    recorder.cleanUp();
  }, [asyncMessagesMultiSendEnabled, recorder, uploadAttachment]);
  (0, import_react122.useEffect)(() => {
    if (!isScheduledForSubmit)
      return;
    handleSubmit();
    scheduleForSubmit(false);
  }, [handleSubmit, isScheduledForSubmit]);
  (0, import_react122.useEffect)(() => {
    if (!recorder)
      return;
    recorder.permission.watch();
    const recordingSubscription = recorder.recording.subscribe(setRecording);
    const recordingStateSubscription = recorder.recordingState.subscribe(setRecordingState);
    const permissionStateSubscription = recorder.permission.state.subscribe(setPermissionState);
    return () => {
      recorder.cancel();
      recorder.permission.unwatch();
      recordingSubscription.unsubscribe();
      recordingStateSubscription.unsubscribe();
      permissionStateSubscription.unsubscribe();
    };
  }, [recorder]);
  return {
    completeRecording,
    permissionState,
    recorder,
    recording,
    recordingState
  };
};

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/useMessageInputState.js
var makeEmptyMessageInputState = () => ({
  attachments: [],
  linkPreviews: /* @__PURE__ */ new Map(),
  mentioned_users: [],
  setText: () => null,
  text: ""
});
var initState = (message) => {
  var _a, _b;
  if (!message) {
    return makeEmptyMessageInputState();
  }
  const linkPreviews = ((_a = message.attachments) == null ? void 0 : _a.reduce((acc, attachment) => {
    if (!attachment.og_scrape_url)
      return acc;
    acc.set(attachment.og_scrape_url, {
      ...attachment,
      state: LinkPreviewState.LOADED
    });
    return acc;
  }, /* @__PURE__ */ new Map())) ?? /* @__PURE__ */ new Map();
  const attachments = ((_b = message.attachments) == null ? void 0 : _b.filter(({ og_scrape_url }) => !og_scrape_url).map((att) => ({
    ...att,
    localMetadata: { id: nanoid() }
  }))) || [];
  const mentioned_users = message.mentioned_users || [];
  return {
    attachments,
    linkPreviews,
    mentioned_users,
    setText: () => null,
    text: message.text || ""
  };
};
var messageInputReducer = (state, action) => {
  switch (action.type) {
    case "setText":
      return { ...state, text: action.getNewText(state.text) };
    case "clear":
      return makeEmptyMessageInputState();
    case "upsertAttachments": {
      const attachments = [...state.attachments];
      action.attachments.forEach((actionAttachment) => {
        const attachmentIndex = state.attachments.findIndex((att) => {
          var _a, _b, _c;
          return ((_a = att.localMetadata) == null ? void 0 : _a.id) && ((_b = att.localMetadata) == null ? void 0 : _b.id) === ((_c = actionAttachment.localMetadata) == null ? void 0 : _c.id);
        });
        if (attachmentIndex === -1) {
          attachments.push(actionAttachment);
        } else {
          const upsertedAttachment = mergeDeep(state.attachments[attachmentIndex] ?? {}, actionAttachment);
          attachments.splice(attachmentIndex, 1, upsertedAttachment);
        }
      });
      return {
        ...state,
        attachments
      };
    }
    case "removeAttachments": {
      return {
        ...state,
        attachments: state.attachments.filter((att) => {
          var _a;
          return !action.ids.includes((_a = att.localMetadata) == null ? void 0 : _a.id);
        })
      };
    }
    case "setLinkPreviews": {
      const linkPreviews = new Map(state.linkPreviews);
      if (action.mode === SetLinkPreviewMode.REMOVE) {
        Array.from(action.linkPreviews.keys()).forEach((key) => {
          linkPreviews.delete(key);
        });
      } else {
        Array.from(action.linkPreviews.values()).reduce((acc, linkPreview) => {
          const existingPreview = acc.get(linkPreview.og_scrape_url);
          const alreadyEnqueued = linkPreview.state === LinkPreviewState.QUEUED && (existingPreview == null ? void 0 : existingPreview.state) !== LinkPreviewState.FAILED;
          if (existingPreview && alreadyEnqueued)
            return acc;
          acc.set(linkPreview.og_scrape_url, linkPreview);
          return acc;
        }, linkPreviews);
        if (action.mode === SetLinkPreviewMode.SET) {
          Array.from(state.linkPreviews.keys()).forEach((key) => {
            if (!action.linkPreviews.get(key))
              linkPreviews.delete(key);
          });
        }
      }
      return {
        ...state,
        linkPreviews
      };
    }
    case "addMentionedUser":
      return {
        ...state,
        mentioned_users: state.mentioned_users.concat(action.user)
      };
    default:
      return state;
  }
};
var useMessageInputState = (props) => {
  const { additionalTextareaProps, asyncMessagesMultiSendEnabled, audioRecordingConfig, audioRecordingEnabled, getDefaultValue, message, urlEnrichmentConfig } = props;
  const { channelCapabilities = {}, enrichURLForPreview: enrichURLForPreviewChannelContext } = useChannelStateContext("useMessageInputState");
  const defaultValue = (getDefaultValue == null ? void 0 : getDefaultValue()) || (additionalTextareaProps == null ? void 0 : additionalTextareaProps.defaultValue);
  const initialStateValue = message || (Array.isArray(defaultValue) ? { text: defaultValue.join("") } : { text: defaultValue == null ? void 0 : defaultValue.toString() });
  const [state, dispatch] = (0, import_react123.useReducer)(messageInputReducer, initialStateValue, initState);
  const enrichURLsController = useLinkPreviews({
    dispatch,
    linkPreviews: state.linkPreviews,
    ...urlEnrichmentConfig,
    enrichURLForPreview: (urlEnrichmentConfig == null ? void 0 : urlEnrichmentConfig.enrichURLForPreview) ?? enrichURLForPreviewChannelContext
  });
  const { handleChange, insertText, textareaRef } = useMessageInputText(props, state, dispatch, enrichURLsController.findAndEnqueueURLsToEnrich);
  const [showCommandsList, setShowCommandsList] = (0, import_react123.useState)(false);
  const [showMentionsList, setShowMentionsList] = (0, import_react123.useState)(false);
  const openCommandsList = () => {
    dispatch({
      getNewText: () => "/",
      type: "setText"
    });
    setShowCommandsList(true);
  };
  const closeCommandsList = () => setShowCommandsList(false);
  const openMentionsList = () => {
    dispatch({
      getNewText: (currentText) => currentText + "@",
      type: "setText"
    });
    setShowMentionsList(true);
  };
  const closeMentionsList = () => setShowMentionsList(false);
  const { maxFilesLeft, numberOfUploads, removeAttachments, uploadAttachment, uploadNewFiles, upsertAttachments } = useAttachments(props, state, dispatch, textareaRef);
  const { handleSubmit } = useSubmitHandler(props, state, dispatch, numberOfUploads, enrichURLsController);
  const recordingController = useMediaRecorder({
    asyncMessagesMultiSendEnabled,
    enabled: !!audioRecordingEnabled,
    handleSubmit,
    recordingConfig: audioRecordingConfig,
    uploadAttachment
  });
  const isUploadEnabled = !!channelCapabilities["upload-file"];
  const { onPaste } = usePasteHandler(uploadNewFiles, insertText, isUploadEnabled, enrichURLsController.findAndEnqueueURLsToEnrich);
  const onSelectUser = (0, import_react123.useCallback)((item) => {
    dispatch({ type: "addMentionedUser", user: item });
  }, []);
  const setText = (0, import_react123.useCallback)((text3) => {
    dispatch({ getNewText: () => text3, type: "setText" });
  }, []);
  return {
    ...state,
    ...enrichURLsController,
    closeCommandsList,
    closeMentionsList,
    handleChange,
    handleSubmit,
    insertText,
    isUploadEnabled,
    maxFilesLeft,
    numberOfUploads,
    onPaste,
    onSelectUser,
    openCommandsList,
    openMentionsList,
    recordingController,
    removeAttachments,
    setText,
    showCommandsList,
    showMentionsList,
    textareaRef,
    uploadAttachment,
    uploadNewFiles,
    upsertAttachments
  };
};

// node_modules/stream-chat-react/dist/components/MessageInput/DropzoneProvider.js
var DropzoneInner = ({ children }) => {
  const { acceptedFiles, multipleUploads } = useChannelStateContext("DropzoneProvider");
  const { cooldownRemaining, isUploadEnabled, maxFilesLeft, uploadNewFiles } = useMessageInputContext("DropzoneProvider");
  return import_react124.default.createElement(ImageDropzone, { accept: acceptedFiles, disabled: !isUploadEnabled || maxFilesLeft === 0 || !!cooldownRemaining, handleFiles: uploadNewFiles, maxNumberOfFiles: maxFilesLeft, multiple: multipleUploads }, children);
};
var DropzoneProvider = (props) => {
  const cooldownTimerState = useCooldownTimer();
  const messageInputState = useMessageInputState(props);
  const messageInputContextValue = useCreateMessageInputContext({
    ...cooldownTimerState,
    ...messageInputState,
    ...props
  });
  return import_react124.default.createElement(
    MessageInputContextProvider,
    { value: messageInputContextValue },
    import_react124.default.createElement(DropzoneInner, null, props.children)
  );
};

// node_modules/stream-chat-react/dist/components/Channel/constants.js
var CHANNEL_CONTAINER_ID = "str-chat__channel";

// node_modules/stream-chat-react/dist/components/MessageList/ConnectionStatus.js
var import_react126 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageList/CustomNotification.js
var import_react125 = __toESM(require_react());
var UnMemoizedCustomNotification = (props) => {
  const { active, children, className, type } = props;
  if (!active)
    return null;
  return import_react125.default.createElement("div", { "aria-live": "polite", className: clsx_default(`str-chat__custom-notification notification-${type}`, `str-chat__notification`, `str-chat-react__notification`, className), "data-testid": "custom-notification" }, children);
};
var CustomNotification = import_react125.default.memo(UnMemoizedCustomNotification);

// node_modules/stream-chat-react/dist/components/MessageList/ConnectionStatus.js
var UnMemoizedConnectionStatus = () => {
  const { client } = useChatContext("ConnectionStatus");
  const { t: t2 } = useTranslationContext("ConnectionStatus");
  const [online, setOnline] = (0, import_react126.useState)(true);
  (0, import_react126.useEffect)(() => {
    const connectionChanged = ({ online: onlineStatus = false }) => {
      if (online !== onlineStatus) {
        setOnline(onlineStatus);
      }
    };
    client.on("connection.changed", connectionChanged);
    return () => client.off("connection.changed", connectionChanged);
  }, [client, online]);
  return import_react126.default.createElement(CustomNotification, { active: !online, className: "str-chat__connection-status-notification", type: "error" }, t2("Connection failure, reconnecting now..."));
};
var ConnectionStatus = import_react126.default.memo(UnMemoizedConnectionStatus);

// node_modules/stream-chat-react/dist/components/MessageList/GiphyPreviewMessage.js
var import_react274 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Message/Message.js
var import_react273 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Message/hooks/useActionHandler.js
var handleActionWarning = `Action handler was called, but it is missing one of its required arguments. 
Make sure the ChannelAction and ChannelState contexts are properly set and the hook is initialized with a valid message.`;
function useActionHandler(message) {
  const { removeMessage, updateMessage } = useChannelActionContext("useActionHandler");
  const { channel } = useChannelStateContext("useActionHandler");
  return async (dataOrName, value, event) => {
    if (event)
      event.preventDefault();
    if (!message || !updateMessage || !removeMessage || !channel) {
      console.warn(handleActionWarning);
      return;
    }
    const messageID = message.id;
    let formData = {};
    if (typeof dataOrName === "string") {
      formData[dataOrName] = value;
    } else {
      formData = { ...dataOrName };
    }
    if (messageID) {
      const data = await channel.sendAction(messageID, formData);
      if (data == null ? void 0 : data.message) {
        updateMessage(data.message);
      } else {
        removeMessage(message);
      }
    }
  };
}

// node_modules/stream-chat-react/dist/components/Message/utils.js
var import_react_fast_compare = __toESM(require_react_fast_compare());
var import_emoji_regex2 = __toESM(require_emoji_regex());
var validateAndGetMessage = (func, args) => {
  if (!func || typeof func !== "function")
    return null;
  if (!Array.isArray(args)) {
    args = [args];
  }
  const returnValue = func(...args);
  if (typeof returnValue !== "string")
    return null;
  return returnValue;
};
var isUserMuted = (message, mutes) => {
  if (!mutes || !message)
    return false;
  const userMuted = mutes.filter((el) => {
    var _a;
    return el.target.id === ((_a = message.user) == null ? void 0 : _a.id);
  });
  return !!userMuted.length;
};
var MESSAGE_ACTIONS = {
  delete: "delete",
  edit: "edit",
  flag: "flag",
  markUnread: "markUnread",
  mute: "mute",
  pin: "pin",
  quote: "quote",
  react: "react",
  reply: "reply"
};
var defaultPinPermissions = {
  commerce: {
    admin: true,
    anonymous: false,
    channel_member: false,
    channel_moderator: true,
    guest: false,
    member: false,
    moderator: true,
    owner: true,
    user: false
  },
  gaming: {
    admin: true,
    anonymous: false,
    channel_member: false,
    channel_moderator: true,
    guest: false,
    member: false,
    moderator: true,
    owner: false,
    user: false
  },
  livestream: {
    admin: true,
    anonymous: false,
    channel_member: false,
    channel_moderator: true,
    guest: false,
    member: false,
    moderator: true,
    owner: true,
    user: false
  },
  messaging: {
    admin: true,
    anonymous: false,
    channel_member: true,
    channel_moderator: true,
    guest: false,
    member: true,
    moderator: true,
    owner: true,
    user: false
  },
  team: {
    admin: true,
    anonymous: false,
    channel_member: true,
    channel_moderator: true,
    guest: false,
    member: true,
    moderator: true,
    owner: true,
    user: false
  }
};
var getMessageActions = (actions, { canDelete, canEdit, canFlag, canMarkUnread, canMute, canPin, canQuote, canReact, canReply }) => {
  const messageActionsAfterPermission = [];
  let messageActions = [];
  if (actions && typeof actions === "boolean") {
    messageActions = Object.keys(MESSAGE_ACTIONS);
  } else if (actions && actions.length > 0) {
    messageActions = [...actions];
  } else {
    return [];
  }
  if (canDelete && messageActions.indexOf(MESSAGE_ACTIONS.delete) > -1) {
    messageActionsAfterPermission.push(MESSAGE_ACTIONS.delete);
  }
  if (canEdit && messageActions.indexOf(MESSAGE_ACTIONS.edit) > -1) {
    messageActionsAfterPermission.push(MESSAGE_ACTIONS.edit);
  }
  if (canFlag && messageActions.indexOf(MESSAGE_ACTIONS.flag) > -1) {
    messageActionsAfterPermission.push(MESSAGE_ACTIONS.flag);
  }
  if (canMarkUnread && messageActions.indexOf(MESSAGE_ACTIONS.markUnread) > -1) {
    messageActionsAfterPermission.push(MESSAGE_ACTIONS.markUnread);
  }
  if (canMute && messageActions.indexOf(MESSAGE_ACTIONS.mute) > -1) {
    messageActionsAfterPermission.push(MESSAGE_ACTIONS.mute);
  }
  if (canPin && messageActions.indexOf(MESSAGE_ACTIONS.pin) > -1) {
    messageActionsAfterPermission.push(MESSAGE_ACTIONS.pin);
  }
  if (canQuote && messageActions.indexOf(MESSAGE_ACTIONS.quote) > -1) {
    messageActionsAfterPermission.push(MESSAGE_ACTIONS.quote);
  }
  if (canReact && messageActions.indexOf(MESSAGE_ACTIONS.react) > -1) {
    messageActionsAfterPermission.push(MESSAGE_ACTIONS.react);
  }
  if (canReply && messageActions.indexOf(MESSAGE_ACTIONS.reply) > -1) {
    messageActionsAfterPermission.push(MESSAGE_ACTIONS.reply);
  }
  return messageActionsAfterPermission;
};
var ACTIONS_NOT_WORKING_IN_THREAD = [
  MESSAGE_ACTIONS.pin,
  MESSAGE_ACTIONS.reply,
  MESSAGE_ACTIONS.markUnread
];
var showMessageActionsBox = (actions, inThread) => shouldRenderMessageActions({ inThread, messageActions: actions });
var shouldRenderMessageActions = ({ customMessageActions, CustomMessageActionsList: CustomMessageActionsList2, inThread, messageActions }) => {
  if (typeof CustomMessageActionsList2 !== "undefined" || typeof customMessageActions !== "undefined")
    return true;
  if (!messageActions.length)
    return false;
  if (inThread && messageActions.filter((action) => !ACTIONS_NOT_WORKING_IN_THREAD.includes(action)).length === 0) {
    return false;
  }
  if (messageActions.length === 1 && (messageActions.includes(MESSAGE_ACTIONS.react) || messageActions.includes(MESSAGE_ACTIONS.reply))) {
    return false;
  }
  if (messageActions.length === 2 && messageActions.includes(MESSAGE_ACTIONS.react) && messageActions.includes(MESSAGE_ACTIONS.reply)) {
    return false;
  }
  return true;
};
function areMessagesEqual(prevMessage, nextMessage) {
  var _a, _b, _c, _d, _e, _f;
  return prevMessage.deleted_at === nextMessage.deleted_at && ((_a = prevMessage.latest_reactions) == null ? void 0 : _a.length) === ((_b = nextMessage.latest_reactions) == null ? void 0 : _b.length) && ((_c = prevMessage.own_reactions) == null ? void 0 : _c.length) === ((_d = nextMessage.own_reactions) == null ? void 0 : _d.length) && prevMessage.pinned === nextMessage.pinned && prevMessage.reply_count === nextMessage.reply_count && prevMessage.status === nextMessage.status && prevMessage.text === nextMessage.text && prevMessage.type === nextMessage.type && prevMessage.updated_at === nextMessage.updated_at && ((_e = prevMessage.user) == null ? void 0 : _e.updated_at) === ((_f = nextMessage.user) == null ? void 0 : _f.updated_at) && Boolean(prevMessage.quoted_message) === Boolean(nextMessage.quoted_message) && (!prevMessage.quoted_message || areMessagesEqual(prevMessage.quoted_message, nextMessage.quoted_message));
}
var areMessagePropsEqual = (prevProps, nextProps) => {
  const { message: prevMessage, Message: prevMessageUI } = prevProps;
  const { message: nextMessage, Message: nextMessageUI } = nextProps;
  if (prevMessageUI !== nextMessageUI)
    return false;
  if (prevProps.endOfGroup !== nextProps.endOfGroup)
    return false;
  if (nextProps.showDetailedReactions !== prevProps.showDetailedReactions) {
    return false;
  }
  if (nextProps.closeReactionSelectorOnClick !== prevProps.closeReactionSelectorOnClick) {
    return false;
  }
  const messagesAreEqual = areMessagesEqual(prevMessage, nextMessage);
  if (!messagesAreEqual)
    return false;
  const deepEqualProps = (0, import_react_fast_compare.default)(nextProps.messageActions, prevProps.messageActions) && (0, import_react_fast_compare.default)(nextProps.readBy, prevProps.readBy) && (0, import_react_fast_compare.default)(nextProps.highlighted, prevProps.highlighted) && (0, import_react_fast_compare.default)(nextProps.groupStyles, prevProps.groupStyles) && // last 3 messages can have different group styles
  (0, import_react_fast_compare.default)(nextProps.mutes, prevProps.mutes) && (0, import_react_fast_compare.default)(nextProps.lastReceivedId, prevProps.lastReceivedId);
  if (!deepEqualProps)
    return false;
  return prevProps.messageListRect === nextProps.messageListRect;
};
var areMessageUIPropsEqual = (prevProps, nextProps) => {
  var _a, _b, _c, _d;
  const { lastReceivedId: prevLastReceivedId, message: prevMessage } = prevProps;
  const { lastReceivedId: nextLastReceivedId, message: nextMessage } = nextProps;
  if (prevProps.editing !== nextProps.editing)
    return false;
  if (prevProps.highlighted !== nextProps.highlighted)
    return false;
  if (prevProps.endOfGroup !== nextProps.endOfGroup)
    return false;
  if (((_a = prevProps.mutes) == null ? void 0 : _a.length) !== ((_b = nextProps.mutes) == null ? void 0 : _b.length))
    return false;
  if (((_c = prevProps.readBy) == null ? void 0 : _c.length) !== ((_d = nextProps.readBy) == null ? void 0 : _d.length))
    return false;
  if (prevProps.groupStyles !== nextProps.groupStyles)
    return false;
  if (prevProps.showDetailedReactions !== nextProps.showDetailedReactions) {
    return false;
  }
  if ((prevMessage.id === prevLastReceivedId || prevMessage.id === nextLastReceivedId) && prevLastReceivedId !== nextLastReceivedId) {
    return false;
  }
  return areMessagesEqual(prevMessage, nextMessage);
};
var messageHasReactions = (message) => Object.values((message == null ? void 0 : message.reaction_groups) ?? {}).some(({ count }) => count > 0);
var messageHasAttachments = (message) => !!(message == null ? void 0 : message.attachments) && !!message.attachments.length;
var getImages = (message) => {
  if (!(message == null ? void 0 : message.attachments)) {
    return [];
  }
  return message.attachments.filter((item) => item.type === "image");
};
var getNonImageAttachments = (message) => {
  if (!(message == null ? void 0 : message.attachments)) {
    return [];
  }
  return message.attachments.filter((item) => item.type !== "image");
};
var mapToUserNameOrId = (user) => user.name || user.id;
var getReadByTooltipText = (users, t2, client, tooltipUserNameMapper) => {
  let outStr = "";
  if (!t2) {
    throw new Error("getReadByTooltipText was called, but translation function is not available");
  }
  if (!tooltipUserNameMapper) {
    throw new Error("getReadByTooltipText was called, but tooltipUserNameMapper function is not available");
  }
  const otherUsers = users.filter((item) => item && (client == null ? void 0 : client.user) && item.id !== client.user.id).map(tooltipUserNameMapper);
  const slicedArr = otherUsers.slice(0, 5);
  const restLength = otherUsers.length - slicedArr.length;
  if (slicedArr.length === 1) {
    outStr = `${slicedArr[0]} `;
  } else if (slicedArr.length === 2) {
    outStr = t2("{{ firstUser }} and {{ secondUser }}", {
      firstUser: slicedArr[0],
      secondUser: slicedArr[1]
    });
  } else if (slicedArr.length > 2) {
    if (restLength === 0) {
      const lastUser = slicedArr.splice(slicedArr.length - 1, 1);
      outStr = t2("{{ commaSeparatedUsers }}, and {{ lastUser }}", {
        commaSeparatedUsers: slicedArr.join(", "),
        lastUser
      });
    } else {
      outStr = t2("{{ commaSeparatedUsers }} and {{ moreCount }} more", {
        commaSeparatedUsers: slicedArr.join(", "),
        moreCount: restLength
      });
    }
  }
  return outStr;
};
var isOnlyEmojis = (text3) => {
  if (!text3)
    return false;
  const noEmojis = text3.replace((0, import_emoji_regex2.default)(), "");
  const noSpace = noEmojis.replace(/[\s\n]/gm, "");
  return !noSpace;
};
var isMessageBounced = (message) => {
  var _a, _b;
  return message.type === "error" && (((_a = message.moderation_details) == null ? void 0 : _a.action) === "MESSAGE_RESPONSE_ACTION_BOUNCE" || ((_b = message.moderation) == null ? void 0 : _b.action) === "bounce");
};
var isMessageBlocked = (message) => {
  var _a, _b;
  return message.type === "error" && (((_a = message.moderation_details) == null ? void 0 : _a.action) === "MESSAGE_RESPONSE_ACTION_REMOVE" || ((_b = message.moderation) == null ? void 0 : _b.action) === "remove");
};
var isMessageEdited = (message) => !!message.message_text_updated_at;

// node_modules/stream-chat-react/dist/components/Message/hooks/useDeleteHandler.js
var useDeleteHandler = (message, notifications = {}) => {
  const { getErrorNotification, notify } = notifications;
  const { deleteMessage, updateMessage } = useChannelActionContext("useDeleteHandler");
  const { client } = useChatContext("useDeleteHandler");
  const { t: t2 } = useTranslationContext("useDeleteHandler");
  return async (event) => {
    event.preventDefault();
    if (!(message == null ? void 0 : message.id) || !client || !updateMessage) {
      return;
    }
    try {
      const deletedMessage = await deleteMessage(message);
      updateMessage(deletedMessage);
    } catch (e) {
      const errorMessage2 = getErrorNotification && validateAndGetMessage(getErrorNotification, [message]);
      if (notify)
        notify(errorMessage2 || t2("Error deleting message"), "error");
    }
  };
};

// node_modules/stream-chat-react/dist/components/Message/hooks/useEditHandler.js
var import_react127 = __toESM(require_react());
var useEditHandler = (customInitialState = false, customSetEditing, customClearEditingHandler) => {
  const [editing, setEditing] = (0, import_react127.useState)(customInitialState);
  const setEdit = customSetEditing || ((event) => {
    if (event == null ? void 0 : event.preventDefault) {
      event.preventDefault();
    }
    setEditing(true);
  });
  const clearEdit = customClearEditingHandler || ((event) => {
    if (event == null ? void 0 : event.preventDefault) {
      event.preventDefault();
    }
    setEditing(false);
  });
  return { clearEdit, editing, setEdit };
};

// node_modules/stream-chat-react/dist/components/Message/hooks/useFlagHandler.js
var missingUseFlagHandlerParameterWarning = "useFlagHandler was called but it is missing one or more necessary parameters.";
var useFlagHandler = (message, notifications = {}) => {
  const { client } = useChatContext("useFlagHandler");
  const { t: t2 } = useTranslationContext("useFlagHandler");
  return async (event) => {
    var _a;
    event.preventDefault();
    const { getErrorNotification, getSuccessNotification, notify } = notifications;
    if (!client || !t2 || !notify || !(message == null ? void 0 : message.id)) {
      console.warn(missingUseFlagHandlerParameterWarning);
      return;
    }
    if ((_a = client.user) == null ? void 0 : _a.banned) {
      return notify(t2("Error adding flag"), "error");
    }
    try {
      await client.flagMessage(message.id);
      const successMessage = getSuccessNotification && validateAndGetMessage(getSuccessNotification, [message]);
      notify(successMessage || t2("Message has been successfully flagged"), "success");
    } catch (e) {
      const errorMessage2 = getErrorNotification && validateAndGetMessage(getErrorNotification, [message]);
      notify(errorMessage2 || t2("Error adding flag"), "error");
    }
  };
};

// node_modules/stream-chat-react/dist/components/Message/hooks/useMentionsHandler.js
function createEventHandler(fn2, message) {
  return (event) => {
    var _a;
    if (typeof fn2 !== "function" || !((_a = message == null ? void 0 : message.mentioned_users) == null ? void 0 : _a.length)) {
      return;
    }
    fn2(event, message.mentioned_users);
  };
}
var useMentionsHandler = (message, customMentionHandler) => {
  const { onMentionsClick: contextOnMentionsClick, onMentionsHover: contextOnMentionsHover } = useChannelActionContext("useMentionsHandler");
  const onMentionsClick = (customMentionHandler == null ? void 0 : customMentionHandler.onMentionsClick) || contextOnMentionsClick || (() => null);
  const onMentionsHover = (customMentionHandler == null ? void 0 : customMentionHandler.onMentionsHover) || contextOnMentionsHover || (() => null);
  return {
    onMentionsClick: createEventHandler(onMentionsClick, message),
    onMentionsHover: createEventHandler(onMentionsHover, message)
  };
};

// node_modules/stream-chat-react/dist/components/Message/hooks/useMarkUnreadHandler.js
var useMarkUnreadHandler = (message, notifications = {}) => {
  const { getErrorNotification, getSuccessNotification, notify } = notifications;
  const { channel } = useChannelStateContext("useMarkUnreadHandler");
  const { t: t2 } = useTranslationContext("useMarkUnreadHandler");
  return async (event) => {
    event.preventDefault();
    if (!(message == null ? void 0 : message.id)) {
      console.warn("Mark unread handler does not have access to message id");
      return;
    }
    try {
      await channel.markUnread({ message_id: message.id });
      if (!notify)
        return;
      const successMessage = getSuccessNotification && validateAndGetMessage(getSuccessNotification, [message]);
      if (successMessage)
        notify(successMessage, "success");
    } catch (e) {
      if (!notify)
        return;
      const errorMessage2 = getErrorNotification && validateAndGetMessage(getErrorNotification, [message]);
      if (getErrorNotification && !errorMessage2)
        return;
      notify(errorMessage2 || t2("Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages."), "error");
    }
  };
};

// node_modules/stream-chat-react/dist/components/Message/hooks/useMuteHandler.js
var missingUseMuteHandlerParamsWarning = "useMuteHandler was called but it is missing one or more necessary parameter.";
var useMuteHandler = (message, notifications = {}) => {
  const { mutes } = useChannelStateContext("useMuteHandler");
  const { client } = useChatContext("useMuteHandler");
  const { t: t2 } = useTranslationContext("useMuteHandler");
  return async (event) => {
    event.preventDefault();
    const { getErrorNotification, getSuccessNotification, notify } = notifications;
    if (!t2 || !(message == null ? void 0 : message.user) || !notify || !client) {
      console.warn(missingUseMuteHandlerParamsWarning);
      return;
    }
    if (!isUserMuted(message, mutes)) {
      try {
        await client.muteUser(message.user.id);
        const successMessage = getSuccessNotification && validateAndGetMessage(getSuccessNotification, [message.user]);
        notify(successMessage || t2(`{{ user }} has been muted`, {
          user: message.user.name || message.user.id
        }), "success");
      } catch (e) {
        const errorMessage2 = getErrorNotification && validateAndGetMessage(getErrorNotification, [message.user]);
        notify(errorMessage2 || t2("Error muting a user ..."), "error");
      }
    } else {
      try {
        await client.unmuteUser(message.user.id);
        const fallbackMessage = t2(`{{ user }} has been unmuted`, {
          user: message.user.name || message.user.id
        });
        const successMessage = getSuccessNotification && validateAndGetMessage(getSuccessNotification, [message.user]) || fallbackMessage;
        if (typeof successMessage === "string") {
          notify(successMessage, "success");
        }
      } catch (e) {
        const errorMessage2 = getErrorNotification && validateAndGetMessage(getErrorNotification, [message.user]) || t2("Error unmuting a user ...");
        if (typeof errorMessage2 === "string") {
          notify(errorMessage2, "error");
        }
      }
    }
  };
};

// node_modules/stream-chat-react/dist/components/Message/hooks/useOpenThreadHandler.js
var useOpenThreadHandler = (message, customOpenThread) => {
  const { openThread: channelOpenThread } = useChannelActionContext("useOpenThreadHandler");
  const openThread = customOpenThread || channelOpenThread;
  return (event) => {
    if (!openThread || !message) {
      console.warn("Open thread handler was called but it is missing one of its parameters");
      return;
    }
    openThread(message, event);
  };
};

// node_modules/stream-chat-react/dist/components/Message/hooks/usePinHandler.js
var usePinHandler = (message, _permissions = defaultPinPermissions, notifications = {}) => {
  const { getErrorNotification, notify } = notifications;
  const { updateMessage } = useChannelActionContext("usePinHandler");
  const { channelCapabilities = {} } = useChannelStateContext("usePinHandler");
  const { client } = useChatContext("usePinHandler");
  const { t: t2 } = useTranslationContext("usePinHandler");
  const canPin = !!channelCapabilities["pin-message"];
  const handlePin = async (event) => {
    event.preventDefault();
    if (!message)
      return;
    if (!message.pinned) {
      try {
        const optimisticMessage = {
          ...message,
          pinned: true,
          pinned_at: /* @__PURE__ */ new Date(),
          pinned_by: client.user
        };
        updateMessage(optimisticMessage);
        await client.pinMessage(message);
      } catch (e) {
        const errorMessage2 = getErrorNotification && validateAndGetMessage(getErrorNotification, [message]);
        if (notify)
          notify(errorMessage2 || t2("Error pinning message"), "error");
        updateMessage(message);
      }
    } else {
      try {
        const optimisticMessage = {
          ...message,
          pin_expires: null,
          pinned: false,
          pinned_at: null,
          pinned_by: null
        };
        updateMessage(optimisticMessage);
        await client.unpinMessage(message);
      } catch (e) {
        const errorMessage2 = getErrorNotification && validateAndGetMessage(getErrorNotification, [message]);
        if (notify)
          notify(errorMessage2 || t2("Error removing message pin"), "error");
        updateMessage(message);
      }
    }
  };
  return { canPin, handlePin };
};

// node_modules/stream-chat-react/dist/components/Message/hooks/useReactionHandler.js
var import_react173 = __toESM(require_react());
var import_lodash15 = __toESM(require_lodash());

// node_modules/stream-chat-react/dist/components/Threads/ThreadContext.js
var import_react128 = __toESM(require_react());
var ThreadContext = (0, import_react128.createContext)(void 0);
var useThreadContext = () => {
  const thread = (0, import_react128.useContext)(ThreadContext);
  return thread ?? void 0;
};
var ThreadProvider = ({ children, thread }) => import_react128.default.createElement(
  ThreadContext.Provider,
  { value: thread },
  import_react128.default.createElement(Channel, { channel: thread == null ? void 0 : thread.channel }, children)
);

// node_modules/stream-chat-react/dist/components/Threads/ThreadList/ThreadList.js
var import_react172 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Threads/ThreadList/ThreadListItem.js
var import_react168 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Threads/ThreadList/ThreadListItemUI.js
var import_react167 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Message/Timestamp.js
var import_react129 = __toESM(require_react());
function Timestamp(props) {
  const { calendar: calendar3, calendarFormats, customClass, format, timestamp } = props;
  const { formatDate } = useMessageContext("MessageTimestamp");
  const { t: t2, tDateTimeParser } = useTranslationContext("MessageTimestamp");
  const normalizedTimestamp = timestamp && isDate(timestamp) ? timestamp.toISOString() : timestamp;
  const when = (0, import_react129.useMemo)(() => getDateString({
    calendar: calendar3,
    calendarFormats,
    format,
    formatDate,
    messageCreatedAt: normalizedTimestamp,
    t: t2,
    tDateTimeParser,
    timestampTranslationKey: "timestamp/MessageTimestamp"
  }), [
    calendar3,
    calendarFormats,
    format,
    formatDate,
    normalizedTimestamp,
    t2,
    tDateTimeParser
  ]);
  if (!when) {
    return null;
  }
  return import_react129.default.createElement("time", { className: customClass, dateTime: normalizedTimestamp, title: normalizedTimestamp }, when);
}

// node_modules/stream-chat-react/dist/components/Threads/UnreadCountBadge.js
var import_react130 = __toESM(require_react());
var UnreadCountBadge = ({ children, count, position }) => import_react130.default.createElement(
  "div",
  { className: "str-chat__unread-count-badge-container" },
  children,
  count > 0 && import_react130.default.createElement("div", { className: clsx_default("str-chat__unread-count-badge", position && `str-chat__unread-count-badge--${position}`) }, count)
);

// node_modules/stream-chat-react/dist/components/ChannelPreview/ChannelPreview.js
var import_lodash14 = __toESM(require_lodash());
var import_react165 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/ChannelPreview/ChannelPreviewMessenger.js
var import_react160 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/ChannelPreview/ChannelPreviewActionButtons.js
var import_react159 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/ChannelList/ChannelList.js
var import_react146 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/ChannelList/ChannelListMessenger.js
var import_react131 = __toESM(require_react());
var ChannelListMessenger = (props) => {
  const { children, error: error2 = null, loading, LoadingErrorIndicator: LoadingErrorIndicator2 = NullComponent, LoadingIndicator: LoadingIndicator2 = LoadingChannels } = props;
  const { t: t2 } = useTranslationContext("ChannelListMessenger");
  if (error2) {
    return import_react131.default.createElement(LoadingErrorIndicator2, null);
  }
  if (loading) {
    return import_react131.default.createElement(LoadingIndicator2, null);
  }
  return import_react131.default.createElement(
    "div",
    { className: "str-chat__channel-list-messenger str-chat__channel-list-messenger-react" },
    import_react131.default.createElement("div", { "aria-label": t2("aria/Channel list"), className: "str-chat__channel-list-messenger__main str-chat__channel-list-messenger-react__main", role: "listbox" }, children)
  );
};

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useConnectionRecoveredListener.js
var import_react132 = __toESM(require_react());
var useConnectionRecoveredListener = (forceUpdate) => {
  const { client } = useChatContext("useConnectionRecoveredListener");
  (0, import_react132.useEffect)(() => {
    const handleEvent = () => {
      if (forceUpdate) {
        forceUpdate();
      }
    };
    client.on("connection.recovered", handleEvent);
    return () => {
      client.off("connection.recovered", handleEvent);
    };
  }, [client, forceUpdate]);
};

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useMobileNavigation.js
var import_react133 = __toESM(require_react());
var useMobileNavigation = (channelListRef, navOpen, closeMobileNav) => {
  (0, import_react133.useEffect)(() => {
    const handleClickOutside = (event) => {
      if (closeMobileNav && channelListRef.current && !channelListRef.current.contains(event.target) && navOpen) {
        closeMobileNav();
      }
    };
    document.addEventListener("click", handleClickOutside);
    return () => {
      document.removeEventListener("click", handleClickOutside);
    };
  }, [channelListRef, closeMobileNav, navOpen]);
};

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/usePaginatedChannels.js
var import_react134 = __toESM(require_react());
var import_lodash7 = __toESM(require_lodash2());

// node_modules/stream-chat-react/dist/components/ChannelList/utils.js
var import_lodash6 = __toESM(require_lodash2());
var MAX_QUERY_CHANNELS_LIMIT = 30;
var moveChannelUp = ({ activeChannel, channels, cid }) => {
  const channelIndex = channels.findIndex((channel2) => channel2.cid === cid);
  if (!activeChannel && channelIndex <= 0)
    return channels;
  const channel = activeChannel || channels[channelIndex];
  return (0, import_lodash6.default)([channel, ...channels], "cid");
};
function findLastPinnedChannelIndex({ channels }) {
  let lastPinnedChannelIndex = null;
  for (const channel of channels) {
    if (!isChannelPinned(channel))
      break;
    if (typeof lastPinnedChannelIndex === "number") {
      lastPinnedChannelIndex++;
    } else {
      lastPinnedChannelIndex = 0;
    }
  }
  return lastPinnedChannelIndex;
}
var moveChannelUpwards = ({ channels, channelToMove, channelToMoveIndexWithinChannels, sort }) => {
  const targetChannelIndex = channelToMoveIndexWithinChannels ?? channels.findIndex((channel) => channel.cid === channelToMove.cid);
  const targetChannelExistsWithinList = targetChannelIndex >= 0;
  const targetChannelAlreadyAtTheTop = targetChannelIndex === 0;
  const considerPinnedChannels = shouldConsiderPinnedChannels(sort);
  const isTargetChannelPinned = isChannelPinned(channelToMove);
  if (targetChannelAlreadyAtTheTop || considerPinnedChannels && isTargetChannelPinned) {
    return channels;
  }
  const newChannels = [...channels];
  if (targetChannelExistsWithinList) {
    newChannels.splice(targetChannelIndex, 1);
  }
  let lastPinnedChannelIndex = null;
  if (considerPinnedChannels) {
    lastPinnedChannelIndex = findLastPinnedChannelIndex({ channels: newChannels });
  }
  newChannels.splice(typeof lastPinnedChannelIndex === "number" ? lastPinnedChannelIndex + 1 : 0, 0, channelToMove);
  return newChannels;
};
var shouldConsiderPinnedChannels = (sort) => {
  const value = extractSortValue({ atIndex: 0, sort, targetKey: "pinned_at" });
  if (typeof value !== "number")
    return false;
  return Math.abs(value) === 1;
};
var extractSortValue = ({ atIndex, sort, targetKey }) => {
  if (!sort)
    return null;
  let option = null;
  if (Array.isArray(sort)) {
    option = sort[atIndex] ?? null;
  } else {
    let index3 = 0;
    for (const key in sort) {
      if (index3 !== atIndex) {
        index3++;
        continue;
      }
      if (key !== targetKey) {
        return null;
      }
      option = sort;
      break;
    }
  }
  return (option == null ? void 0 : option[targetKey]) ?? null;
};
var shouldConsiderArchivedChannels = (filters) => {
  if (!filters)
    return false;
  return typeof filters.archived === "boolean";
};
var isChannelPinned = (channel) => {
  if (!channel)
    return false;
  const membership = channel.state.membership;
  return typeof membership.pinned_at === "string";
};
var isChannelArchived = (channel) => {
  if (!channel)
    return false;
  const membership = channel.state.membership;
  return typeof membership.archived_at === "string";
};

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/usePaginatedChannels.js
var RECOVER_LOADED_CHANNELS_THROTTLE_INTERVAL_IN_MS = 5e3;
var MIN_RECOVER_LOADED_CHANNELS_THROTTLE_INTERVAL_IN_MS = 2e3;
var usePaginatedChannels = (client, filters, sort, options2, activeChannelHandler, recoveryThrottleIntervalMs = RECOVER_LOADED_CHANNELS_THROTTLE_INTERVAL_IN_MS, customQueryChannels) => {
  const { channelsQueryState: { error: error2, setError, setQueryInProgress } } = useChatContext("usePaginatedChannels");
  const [channels, setChannels] = (0, import_react134.useState)([]);
  const [hasNextPage, setHasNextPage] = (0, import_react134.useState)(true);
  const lastRecoveryTimestamp = (0, import_react134.useRef)(void 0);
  const recoveryThrottleInterval = recoveryThrottleIntervalMs < MIN_RECOVER_LOADED_CHANNELS_THROTTLE_INTERVAL_IN_MS ? MIN_RECOVER_LOADED_CHANNELS_THROTTLE_INTERVAL_IN_MS : recoveryThrottleIntervalMs ?? RECOVER_LOADED_CHANNELS_THROTTLE_INTERVAL_IN_MS;
  const filterString = (0, import_react134.useMemo)(() => JSON.stringify(filters), [filters]);
  const sortString = (0, import_react134.useMemo)(() => JSON.stringify(sort), [sort]);
  const queryChannels = async (queryType = "load-more") => {
    setError(null);
    if (queryType === "reload") {
      setChannels([]);
    }
    setQueryInProgress(queryType);
    try {
      if (customQueryChannels) {
        await customQueryChannels({
          currentChannels: channels,
          queryType,
          setChannels,
          setHasNextPage
        });
      } else {
        const offset2 = queryType === "reload" ? 0 : channels.length;
        const newOptions = {
          limit: (options2 == null ? void 0 : options2.limit) ?? MAX_QUERY_CHANNELS_LIMIT,
          message_limit: (options2 == null ? void 0 : options2.message_limit) ?? DEFAULT_INITIAL_CHANNEL_PAGE_SIZE,
          offset: offset2,
          ...options2
        };
        const channelQueryResponse = await client.queryChannels(filters, sort || {}, newOptions);
        const newChannels = queryType === "reload" ? channelQueryResponse : (0, import_lodash7.default)([...channels, ...channelQueryResponse], "cid");
        setChannels(newChannels);
        setHasNextPage(channelQueryResponse.length >= newOptions.limit);
        if (!offset2 && activeChannelHandler) {
          activeChannelHandler(newChannels, setChannels);
        }
      }
    } catch (err) {
      console.warn(err);
      setError(err);
    }
    setQueryInProgress(null);
  };
  const throttleRecover = (0, import_react134.useCallback)(() => {
    const now = Date.now();
    const isFirstRecovery = !lastRecoveryTimestamp.current;
    const timeElapsedSinceLastRecoveryMs = lastRecoveryTimestamp.current ? now - lastRecoveryTimestamp.current : 0;
    if (!isFirstRecovery && timeElapsedSinceLastRecoveryMs < recoveryThrottleInterval && !error2) {
      return;
    }
    lastRecoveryTimestamp.current = now;
    queryChannels("reload");
  }, [error2, queryChannels, recoveryThrottleInterval]);
  const loadNextPage = () => {
    queryChannels();
  };
  (0, import_react134.useEffect)(() => {
    if (client.recoverStateOnReconnect)
      return;
    const { unsubscribe } = client.on("connection.recovered", throttleRecover);
    return () => {
      unsubscribe();
    };
  }, [client, throttleRecover]);
  (0, import_react134.useEffect)(() => {
    queryChannels("reload");
  }, [filterString, sortString]);
  return {
    channels,
    hasNextPage,
    loadNextPage,
    setChannels
  };
};

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useChannelListShape.js
var import_react135 = __toESM(require_react());
var shared = ({ customHandler, event, setChannels }) => {
  if (typeof customHandler === "function") {
    return customHandler(setChannels, event);
  }
  setChannels((channels) => {
    const channelIndex = channels.findIndex((channel) => channel.cid === event.cid);
    if (channelIndex < 0)
      return channels;
    channels.splice(channelIndex, 1);
    return [...channels];
  });
};
var useChannelListShapeDefaults = () => {
  const { client } = useChatContext();
  const handleMessageNew = (0, import_react135.useCallback)(({ allowNewMessagesFromUnfilteredChannels, customHandler, event, filters, lockChannelOrder, setChannels, sort }) => {
    if (typeof customHandler === "function") {
      return customHandler(setChannels, event);
    }
    const channelType = event.channel_type;
    const channelId = event.channel_id;
    if (!channelType || !channelId)
      return;
    setChannels((currentChannels) => {
      const targetChannel = client.channel(channelType, channelId);
      const targetChannelIndex = currentChannels.indexOf(targetChannel);
      const targetChannelExistsWithinList = targetChannelIndex >= 0;
      const isTargetChannelPinned = isChannelPinned(targetChannel);
      const isTargetChannelArchived = isChannelArchived(targetChannel);
      const considerArchivedChannels = shouldConsiderArchivedChannels(filters);
      const considerPinnedChannels = shouldConsiderPinnedChannels(sort);
      if (
        // filter is defined, target channel is archived and filter option is set to false
        considerArchivedChannels && isTargetChannelArchived && !filters.archived || // filter is defined, target channel isn't archived and filter option is set to true
        considerArchivedChannels && !isTargetChannelArchived && filters.archived || // sort option is defined, target channel is pinned
        considerPinnedChannels && isTargetChannelPinned || // list order is locked
        lockChannelOrder || // target channel is not within the loaded list and loading from cache is disallowed
        !targetChannelExistsWithinList && !allowNewMessagesFromUnfilteredChannels
      ) {
        return currentChannels;
      }
      return moveChannelUpwards({
        channels: currentChannels,
        channelToMove: targetChannel,
        channelToMoveIndexWithinChannels: targetChannelIndex,
        sort
      });
    });
  }, [client]);
  const handleNotificationMessageNew = (0, import_react135.useCallback)(async ({ allowNewMessagesFromUnfilteredChannels, customHandler, event, filters, setChannels, sort }) => {
    if (typeof customHandler === "function") {
      return customHandler(setChannels, event);
    }
    if (!event.channel) {
      return;
    }
    const channel = await getChannel({
      client,
      id: event.channel.id,
      type: event.channel.type
    });
    const considerArchivedChannels = shouldConsiderArchivedChannels(filters);
    if (isChannelArchived(channel) && considerArchivedChannels && !filters.archived) {
      return;
    }
    if (!allowNewMessagesFromUnfilteredChannels) {
      return;
    }
    setChannels((channels) => moveChannelUpwards({
      channels,
      channelToMove: channel,
      sort
    }));
  }, [client]);
  const handleNotificationAddedToChannel = (0, import_react135.useCallback)(async ({ allowNewMessagesFromUnfilteredChannels, customHandler, event, setChannels, sort }) => {
    var _a;
    if (typeof customHandler === "function") {
      return customHandler(setChannels, event);
    }
    if (!event.channel || !allowNewMessagesFromUnfilteredChannels) {
      return;
    }
    const channel = await getChannel({
      client,
      id: event.channel.id,
      members: (_a = event.channel.members) == null ? void 0 : _a.reduce((newMembers, { user, user_id }) => {
        const userId = user_id || (user == null ? void 0 : user.id);
        if (userId)
          newMembers.push(userId);
        return newMembers;
      }, []),
      type: event.channel.type
    });
    setChannels((channels) => moveChannelUpwards({
      channels,
      channelToMove: channel,
      sort
    }));
  }, [client]);
  const handleNotificationRemovedFromChannel = (0, import_react135.useCallback)(({ customHandler, event, setChannels }) => {
    if (typeof customHandler === "function") {
      return customHandler(setChannels, event);
    }
    setChannels((channels) => channels.filter((channel) => {
      var _a;
      return channel.cid !== ((_a = event.channel) == null ? void 0 : _a.cid);
    }));
  }, []);
  const handleMemberUpdated = (0, import_react135.useCallback)(({ event, filters, lockChannelOrder, setChannels, sort }) => {
    var _a;
    if (!((_a = event.member) == null ? void 0 : _a.user) || event.member.user.id !== client.userID || !event.channel_type) {
      return;
    }
    const channelType = event.channel_type;
    const channelId = event.channel_id;
    const considerPinnedChannels = shouldConsiderPinnedChannels(sort);
    const considerArchivedChannels = shouldConsiderArchivedChannels(filters);
    if (!considerPinnedChannels && !considerArchivedChannels || lockChannelOrder) {
      return;
    }
    const pinnedAtSort = extractSortValue({ atIndex: 0, sort, targetKey: "pinned_at" });
    setChannels((currentChannels) => {
      const targetChannel = client.channel(channelType, channelId);
      const targetChannelIndex = currentChannels.indexOf(targetChannel);
      const targetChannelExistsWithinList = targetChannelIndex >= 0;
      const isTargetChannelArchived = isChannelArchived(targetChannel);
      const isTargetChannelPinned = isChannelPinned(targetChannel);
      const newChannels = [...currentChannels];
      if (targetChannelExistsWithinList) {
        newChannels.splice(targetChannelIndex, 1);
      }
      if (considerArchivedChannels && isTargetChannelArchived && !filters.archived || considerArchivedChannels && !isTargetChannelArchived && filters.archived) {
        return newChannels;
      }
      let lastPinnedChannelIndex = null;
      if (pinnedAtSort === 1 || pinnedAtSort === -1 && !isTargetChannelPinned) {
        lastPinnedChannelIndex = findLastPinnedChannelIndex({ channels: newChannels });
      }
      const newTargetChannelIndex = typeof lastPinnedChannelIndex === "number" ? lastPinnedChannelIndex + 1 : 0;
      if (currentChannels[newTargetChannelIndex] === targetChannel) {
        return currentChannels;
      }
      newChannels.splice(newTargetChannelIndex, 0, targetChannel);
      return newChannels;
    });
  }, [client]);
  const handleChannelDeleted = (0, import_react135.useCallback)((p) => shared(p), []);
  const handleChannelHidden = (0, import_react135.useCallback)((p) => shared(p), []);
  const handleChannelVisible = (0, import_react135.useCallback)(async ({ customHandler, event, filters, setChannels, sort }) => {
    if (typeof customHandler === "function") {
      return customHandler(setChannels, event);
    }
    if (!event.channel_id && !event.channel_type) {
      return;
    }
    const channel = await getChannel({
      client,
      id: event.channel_id,
      type: event.channel_type
    });
    const considerArchivedChannels = shouldConsiderArchivedChannels(filters);
    if (isChannelArchived(channel) && considerArchivedChannels && !filters.archived) {
      return;
    }
    setChannels((channels) => moveChannelUpwards({
      channels,
      channelToMove: channel,
      sort
    }));
  }, [client]);
  const handleChannelTruncated = (0, import_react135.useCallback)(({ customHandler, event, setChannels }) => {
    if (typeof customHandler === "function") {
      return customHandler(setChannels, event);
    }
    setChannels((channels) => [...channels]);
  }, []);
  const handleChannelUpdated = (0, import_react135.useCallback)(({ customHandler, event, setChannels }) => {
    if (typeof customHandler === "function") {
      return customHandler(setChannels, event);
    }
    setChannels((channels) => {
      var _a, _b, _c, _d;
      const channelIndex = channels.findIndex((channel) => {
        var _a2;
        return channel.cid === ((_a2 = event.channel) == null ? void 0 : _a2.cid);
      });
      if (channelIndex > -1 && event.channel) {
        const newChannels = channels;
        newChannels[channelIndex].data = {
          ...event.channel,
          hidden: ((_a = event.channel) == null ? void 0 : _a.hidden) ?? ((_b = newChannels[channelIndex].data) == null ? void 0 : _b.hidden),
          own_capabilities: ((_c = event.channel) == null ? void 0 : _c.own_capabilities) ?? ((_d = newChannels[channelIndex].data) == null ? void 0 : _d.own_capabilities)
        };
        return [...newChannels];
      }
      return channels;
    });
  }, []);
  const handleUserPresenceChanged = (0, import_react135.useCallback)(({ event, setChannels }) => {
    setChannels((channels) => {
      const newChannels = channels.map((channel) => {
        var _a;
        if (!((_a = event.user) == null ? void 0 : _a.id) || !channel.state.members[event.user.id]) {
          return channel;
        }
        const newChannel = channel;
        newChannel.state.members[event.user.id].user = event.user;
        return newChannel;
      });
      return newChannels;
    });
  }, []);
  return (0, import_react135.useMemo)(() => ({
    handleChannelDeleted,
    handleChannelHidden,
    handleChannelTruncated,
    handleChannelUpdated,
    handleChannelVisible,
    handleMemberUpdated,
    handleMessageNew,
    handleNotificationAddedToChannel,
    handleNotificationMessageNew,
    handleNotificationRemovedFromChannel,
    handleUserPresenceChanged
  }), [
    handleChannelDeleted,
    handleChannelHidden,
    handleChannelTruncated,
    handleChannelUpdated,
    handleChannelVisible,
    handleMemberUpdated,
    handleMessageNew,
    handleNotificationAddedToChannel,
    handleNotificationMessageNew,
    handleNotificationRemovedFromChannel,
    handleUserPresenceChanged
  ]);
};
var usePrepareShapeHandlers = ({ allowNewMessagesFromUnfilteredChannels, customHandleChannelListShape, filters, lockChannelOrder, onAddedToChannel, onChannelDeleted, onChannelHidden, onChannelTruncated, onChannelUpdated, onChannelVisible, onMessageNew, onMessageNewHandler, onRemovedFromChannel, setChannels, sort }) => {
  const defaults2 = useChannelListShapeDefaults();
  const defaultHandleChannelListShapeRef = (0, import_react135.useRef)(void 0);
  const customHandleChannelListShapeRef = (0, import_react135.useRef)(void 0);
  customHandleChannelListShapeRef.current = (event) => {
    customHandleChannelListShape == null ? void 0 : customHandleChannelListShape({ defaults: defaults2, event, setChannels });
  };
  defaultHandleChannelListShapeRef.current = (event) => {
    switch (event.type) {
      case "message.new":
        defaults2.handleMessageNew({
          allowNewMessagesFromUnfilteredChannels,
          customHandler: onMessageNewHandler,
          event,
          filters,
          lockChannelOrder,
          setChannels,
          sort
        });
        break;
      case "notification.message_new":
        defaults2.handleNotificationMessageNew({
          allowNewMessagesFromUnfilteredChannels,
          customHandler: onMessageNew,
          event,
          filters,
          lockChannelOrder,
          setChannels,
          sort
        });
        break;
      case "notification.added_to_channel":
        defaults2.handleNotificationAddedToChannel({
          allowNewMessagesFromUnfilteredChannels,
          customHandler: onAddedToChannel,
          event,
          lockChannelOrder,
          setChannels,
          sort
        });
        break;
      case "notification.removed_from_channel":
        defaults2.handleNotificationRemovedFromChannel({
          customHandler: onRemovedFromChannel,
          event,
          setChannels
        });
        break;
      case "channel.deleted":
        defaults2.handleChannelDeleted({
          customHandler: onChannelDeleted,
          event,
          setChannels
        });
        break;
      case "channel.hidden":
        defaults2.handleChannelHidden({
          customHandler: onChannelHidden,
          event,
          setChannels
        });
        break;
      case "channel.visible":
        defaults2.handleChannelVisible({
          customHandler: onChannelVisible,
          event,
          filters,
          setChannels,
          sort
        });
        break;
      case "channel.truncated":
        defaults2.handleChannelTruncated({
          customHandler: onChannelTruncated,
          event,
          setChannels
        });
        break;
      case "channel.updated":
        defaults2.handleChannelUpdated({
          customHandler: onChannelUpdated,
          event,
          setChannels
        });
        break;
      case "user.presence.changed":
        defaults2.handleUserPresenceChanged({ event, setChannels });
        break;
      case "member.updated":
        defaults2.handleMemberUpdated({
          event,
          filters,
          lockChannelOrder,
          setChannels,
          sort
        });
        break;
      default:
        break;
    }
  };
  const defaultFn = (0, import_react135.useCallback)((e) => {
    var _a;
    (_a = defaultHandleChannelListShapeRef.current) == null ? void 0 : _a.call(defaultHandleChannelListShapeRef, e);
  }, []);
  const customFn = (0, import_react135.useMemo)(() => {
    if (!customHandleChannelListShape)
      return null;
    return (e) => {
      var _a;
      (_a = customHandleChannelListShapeRef.current) == null ? void 0 : _a.call(customHandleChannelListShapeRef, e);
    };
  }, [customHandleChannelListShape]);
  return {
    customHandler: customFn,
    defaultHandler: defaultFn
  };
};
var useChannelListShape = (handler) => {
  const { client } = useChatContext();
  (0, import_react135.useEffect)(() => {
    const subscription = client.on("all", handler);
    return subscription.unsubscribe;
  }, [client, handler]);
};

// node_modules/stream-chat-react/dist/components/ChannelSearch/ChannelSearch.js
var import_react141 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/ChannelSearch/hooks/useChannelSearch.js
var import_react136 = __toESM(require_react());
var import_lodash8 = __toESM(require_lodash3());
var import_lodash9 = __toESM(require_lodash2());

// node_modules/stream-chat-react/dist/components/ChannelSearch/utils.js
var isChannel = (output2) => output2.cid != null;

// node_modules/stream-chat-react/dist/components/ChannelSearch/hooks/useChannelSearch.js
var useChannelSearch = ({ channelType = "messaging", clearSearchOnClickOutside = true, disabled = false, onSearch: onSearchCallback, onSearchExit, onSelectResult, searchDebounceIntervalMs = 300, searchForChannels = false, searchForUsers = true, searchFunction, searchQueryParams, setChannels }) => {
  const { client, setActiveChannel } = useChatContext("useChannelSearch");
  const [inputIsFocused, setInputIsFocused] = (0, import_react136.useState)(false);
  const [query, setQuery] = (0, import_react136.useState)("");
  const [results, setResults] = (0, import_react136.useState)([]);
  const [searching, setSearching] = (0, import_react136.useState)(false);
  const searchQueryPromiseInProgress = (0, import_react136.useRef)(false);
  const shouldIgnoreQueryResults = (0, import_react136.useRef)(false);
  const inputRef = (0, import_react136.useRef)(null);
  const searchBarRef = (0, import_react136.useRef)(null);
  const clearState = (0, import_react136.useCallback)(() => {
    setQuery("");
    setResults([]);
    setSearching(false);
    shouldIgnoreQueryResults.current = searchQueryPromiseInProgress.current;
  }, []);
  const activateSearch = (0, import_react136.useCallback)(() => {
    setInputIsFocused(true);
  }, []);
  const exitSearch = (0, import_react136.useCallback)(() => {
    var _a;
    setInputIsFocused(false);
    (_a = inputRef.current) == null ? void 0 : _a.blur();
    clearState();
    onSearchExit == null ? void 0 : onSearchExit();
  }, [clearState, onSearchExit]);
  (0, import_react136.useEffect)(() => {
    if (disabled)
      return;
    const clickListener = (event) => {
      var _a;
      if (!(event.target instanceof HTMLElement))
        return;
      const isInputClick = (_a = searchBarRef.current) == null ? void 0 : _a.contains(event.target);
      if (isInputClick)
        return;
      if (inputIsFocused && !query || clearSearchOnClickOutside) {
        exitSearch();
      }
    };
    document.addEventListener("click", clickListener);
    return () => document.removeEventListener("click", clickListener);
  }, [disabled, inputIsFocused, query, exitSearch, clearSearchOnClickOutside]);
  (0, import_react136.useEffect)(() => {
    if (!inputRef.current || disabled)
      return;
    const handleKeyDown = (event) => {
      if (event.key === "Escape")
        return exitSearch();
    };
    inputRef.current.addEventListener("keydown", handleKeyDown);
    return () => {
      var _a;
      (_a = inputRef.current) == null ? void 0 : _a.removeEventListener("keydown", handleKeyDown);
    };
  }, [disabled]);
  const selectResult = (0, import_react136.useCallback)(
    async (result) => {
      if (!client.userID)
        return;
      if (onSelectResult) {
        await onSelectResult({
          setQuery,
          setResults,
          setSearching
        }, result);
        return;
      }
      let selectedChannel;
      if (isChannel(result)) {
        setActiveChannel(result);
        selectedChannel = result;
      } else {
        const newChannel = client.channel(channelType, {
          members: [client.userID, result.id]
        });
        await newChannel.watch();
        setActiveChannel(newChannel);
        selectedChannel = newChannel;
      }
      setChannels == null ? void 0 : setChannels((channels) => (0, import_lodash9.default)([selectedChannel, ...channels], "cid"));
      if (clearSearchOnClickOutside) {
        exitSearch();
      }
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      clearSearchOnClickOutside,
      client,
      exitSearch,
      onSelectResult,
      setActiveChannel,
      setChannels
    ]
  );
  const getChannels = (0, import_react136.useCallback)(async (text3) => {
    var _a, _b, _c, _d, _e, _f;
    if (!searchForChannels && !searchForUsers)
      return;
    let results2 = [];
    const promises = [];
    try {
      if (searchForChannels) {
        promises.push(client.queryChannels(
          // @ts-expect-error valid query
          {
            members: { $in: [client.userID] },
            name: { $autocomplete: text3 },
            ...(_a = searchQueryParams == null ? void 0 : searchQueryParams.channelFilters) == null ? void 0 : _a.filters
          },
          ((_b = searchQueryParams == null ? void 0 : searchQueryParams.channelFilters) == null ? void 0 : _b.sort) || {},
          { limit: 5, ...(_c = searchQueryParams == null ? void 0 : searchQueryParams.channelFilters) == null ? void 0 : _c.options }
        ));
      }
      if (searchForUsers) {
        promises.push(client.queryUsers(
          // @ts-expect-error valid query
          {
            $or: [{ id: { $autocomplete: text3 } }, { name: { $autocomplete: text3 } }],
            ...(_d = searchQueryParams == null ? void 0 : searchQueryParams.userFilters) == null ? void 0 : _d.filters
          },
          { id: 1, ...(_e = searchQueryParams == null ? void 0 : searchQueryParams.userFilters) == null ? void 0 : _e.sort },
          { limit: 8, ...(_f = searchQueryParams == null ? void 0 : searchQueryParams.userFilters) == null ? void 0 : _f.options }
        ));
      }
      if (promises.length) {
        searchQueryPromiseInProgress.current = true;
        const resolved = await Promise.all(promises);
        if (searchForChannels && searchForUsers) {
          const [channels, { users }] = resolved;
          results2 = [...channels, ...users.filter((u2) => {
            var _a2;
            return u2.id !== ((_a2 = client.user) == null ? void 0 : _a2.id);
          })];
        } else if (searchForChannels) {
          const [channels] = resolved;
          results2 = [...channels];
        } else if (searchForUsers) {
          const [{ users }] = resolved;
          results2 = [...users.filter((u2) => {
            var _a2;
            return u2.id !== ((_a2 = client.user) == null ? void 0 : _a2.id);
          })];
        }
      }
    } catch (error2) {
      console.error(error2);
    }
    setSearching(false);
    if (!shouldIgnoreQueryResults.current) {
      setResults(results2);
    } else {
      shouldIgnoreQueryResults.current = false;
    }
    searchQueryPromiseInProgress.current = false;
  }, [client, searchForChannels, searchForUsers, searchQueryParams]);
  const scheduleGetChannels = (0, import_react136.useCallback)((0, import_lodash8.default)(getChannels, searchDebounceIntervalMs), [getChannels, searchDebounceIntervalMs]);
  const onSearch = (0, import_react136.useCallback)((event) => {
    event.preventDefault();
    if (disabled)
      return;
    if (searchFunction) {
      searchFunction({
        setQuery,
        setResults,
        setSearching
      }, event);
    } else if (!searchForChannels && !searchForUsers) {
      return;
    } else if (event.target.value) {
      setSearching(true);
      setQuery(event.target.value);
      scheduleGetChannels(event.target.value);
    } else if (!event.target.value) {
      clearState();
      scheduleGetChannels.cancel();
    }
    onSearchCallback == null ? void 0 : onSearchCallback(event);
  }, [
    clearState,
    disabled,
    scheduleGetChannels,
    onSearchCallback,
    searchForChannels,
    searchForUsers,
    searchFunction
  ]);
  return {
    activateSearch,
    clearState,
    exitSearch,
    inputIsFocused,
    inputRef,
    onSearch,
    query,
    results,
    searchBarRef,
    searching,
    selectResult
  };
};

// node_modules/stream-chat-react/dist/components/ChannelSearch/SearchBar.js
var import_react139 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/ChannelSearch/icons.js
var import_react137 = __toESM(require_react());
var MenuIcon = () => import_react137.default.createElement(
  "svg",
  { "data-testid": "menu-icon", fill: "none", height: "24", viewBox: "0 0 24 24", width: "24", xmlns: "http://www.w3.org/2000/svg" },
  import_react137.default.createElement("path", { clipRule: "evenodd", d: "M3 8V6H21V8H3ZM3 13H21V11H3V13ZM3 18H21V16H3V18Z", fill: "black", fillRule: "evenodd" })
);
var ReturnIcon = () => import_react137.default.createElement(
  "svg",
  { "data-testid": "return-icon", fill: "none", height: "20", viewBox: "0 0 22 22", width: "20", xmlns: "http://www.w3.org/2000/svg" },
  import_react137.default.createElement("path", { d: "M21.6668 9.66666V12.3333H5.6529L12.9932 19.6736L11.1076 21.5592L0.54834 11L11.1076 0.440765L12.9932 2.32638L5.6529 9.66666H21.6668Z", fill: "#080707" })
);
var XIcon = () => import_react137.default.createElement(
  "svg",
  { fill: "none", height: "14", viewBox: "0 0 14 14", width: "14", xmlns: "http://www.w3.org/2000/svg" },
  import_react137.default.createElement("path", { d: "M14 1.41L12.59 0L7 5.59L1.41 0L0 1.41L5.59 7L0 12.59L1.41 14L7 8.41L12.59 14L14 12.59L8.41 7L14 1.41Z", fill: "#747881" })
);
var SearchIcon = ({ className }) => import_react137.default.createElement(
  "svg",
  { className, fill: "none", height: "18", viewBox: "0 0 18 18", width: "18", xmlns: "http://www.w3.org/2000/svg" },
  import_react137.default.createElement("path", { d: "M12.7549 11.255H11.9649L11.6849 10.985C12.6649 9.845 13.2549 8.365 13.2549 6.755C13.2549 3.165 10.3449 0.255005 6.75488 0.255005C3.16488 0.255005 0.254883 3.165 0.254883 6.755C0.254883 10.345 3.16488 13.255 6.75488 13.255C8.36488 13.255 9.84488 12.665 10.9849 11.685L11.2549 11.965V12.755L16.2549 17.745L17.7449 16.255L12.7549 11.255ZM6.75488 11.255C4.26488 11.255 2.25488 9.245 2.25488 6.755C2.25488 4.26501 4.26488 2.255 6.75488 2.255C9.24488 2.255 11.2549 4.26501 11.2549 6.755C11.2549 9.245 9.24488 11.255 6.75488 11.255Z", fill: "#747881" })
);

// node_modules/stream-chat-react/dist/components/ChannelSearch/SearchInput.js
var import_react138 = __toESM(require_react());
var SearchInput = (props) => {
  const { disabled, inputRef, onSearch, placeholder, query } = props;
  const { t: t2 } = useTranslationContext("SearchInput");
  return import_react138.default.createElement("input", { className: "str-chat__channel-search-input", "data-testid": "search-input", disabled, onChange: onSearch, placeholder: placeholder ?? t2("Search"), ref: inputRef, type: "text", value: query });
};

// node_modules/stream-chat-react/dist/components/ChannelSearch/SearchBar.js
var SearchBarButton = ({ children, className, onClick }) => import_react139.default.createElement("button", { className: clsx_default("str-chat__channel-search-bar-button", className), "data-testid": "search-bar-button", onClick }, children);
var SearchBar = (props) => {
  const { activateSearch, AppMenu, ClearInputIcon = XIcon, exitSearch, ExitSearchIcon = ReturnIcon, inputIsFocused, MenuIcon: MenuIcon3 = MenuIcon, searchBarRef, SearchInput: SearchInput2 = SearchInput, SearchInputIcon = SearchIcon, ...inputProps } = props;
  const [menuIsOpen, setMenuIsOpen] = (0, import_react139.useState)(false);
  const appMenuRef = (0, import_react139.useRef)(null);
  (0, import_react139.useEffect)(() => {
    if (!appMenuRef.current)
      return;
    const handleKeyDown = (event) => {
      if (menuIsOpen && event.key === "Escape") {
        setMenuIsOpen(false);
      }
    };
    const clickListener = (e) => {
      var _a;
      if (!(e.target instanceof HTMLElement) || !menuIsOpen || ((_a = appMenuRef.current) == null ? void 0 : _a.contains(e.target)))
        return;
      setMenuIsOpen(false);
    };
    document.addEventListener("keydown", handleKeyDown);
    document.addEventListener("click", clickListener);
    return () => {
      document.removeEventListener("keydown", handleKeyDown);
      document.removeEventListener("click", clickListener);
    };
  }, [menuIsOpen]);
  (0, import_react139.useEffect)(() => {
    if (!props.inputRef.current)
      return;
    const input = props.inputRef.current;
    const handleFocus = () => {
      activateSearch();
    };
    const handleBlur = (e) => {
      e.stopPropagation();
    };
    input.addEventListener("focus", handleFocus);
    input.addEventListener("blur", handleBlur);
    return () => {
      input.removeEventListener("focus", handleFocus);
      input.removeEventListener("blur", handleBlur);
    };
  }, [activateSearch, props.inputRef]);
  const handleClearClick = (0, import_react139.useCallback)(() => {
    var _a;
    exitSearch();
    (_a = inputProps.inputRef.current) == null ? void 0 : _a.focus();
  }, [exitSearch, inputProps.inputRef]);
  const closeAppMenu = (0, import_react139.useCallback)(() => setMenuIsOpen(false), []);
  return import_react139.default.createElement(
    "div",
    { className: "str-chat__channel-search-bar", "data-testid": "search-bar", ref: searchBarRef },
    inputIsFocused ? import_react139.default.createElement(
      SearchBarButton,
      { className: "str-chat__channel-search-bar-button--exit-search", onClick: exitSearch },
      import_react139.default.createElement(ExitSearchIcon, null)
    ) : AppMenu ? import_react139.default.createElement(
      SearchBarButton,
      { className: "str-chat__channel-search-bar-button--menu", onClick: () => setMenuIsOpen((prev) => !prev) },
      import_react139.default.createElement(MenuIcon3, null)
    ) : null,
    import_react139.default.createElement(
      "div",
      { className: clsx_default("str-chat__channel-search-input--wrapper", inputProps.query && "str-chat__channel-search-input--wrapper-active") },
      import_react139.default.createElement(
        "div",
        { className: "str-chat__channel-search-input--icon" },
        import_react139.default.createElement(SearchInputIcon, null)
      ),
      import_react139.default.createElement(SearchInput2, { ...inputProps }),
      import_react139.default.createElement(
        "button",
        { className: "str-chat__channel-search-input--clear-button", "data-testid": "clear-input-button", disabled: !inputProps.query, onClick: handleClearClick },
        import_react139.default.createElement(ClearInputIcon, null)
      )
    ),
    menuIsOpen && AppMenu && import_react139.default.createElement(
      "div",
      { ref: appMenuRef },
      import_react139.default.createElement(AppMenu, { close: closeAppMenu })
    )
  );
};

// node_modules/stream-chat-react/dist/components/ChannelSearch/SearchResults.js
var import_react140 = __toESM(require_react());
var DefaultSearchEmpty = () => {
  const { t: t2 } = useTranslationContext("SearchResults");
  return import_react140.default.createElement(
    "div",
    { "aria-live": "polite", className: "str-chat__channel-search-container-empty" },
    import_react140.default.createElement(SearchIcon, null),
    t2("No results found")
  );
};
var DefaultSearchResultsHeader = ({ results }) => {
  const { t: t2 } = useTranslationContext("SearchResultsHeader");
  return import_react140.default.createElement("div", { className: "str-chat__channel-search-results-header", "data-testid": "channel-search-results-header" }, t2("searchResultsCount", {
    count: results.length
  }));
};
var DefaultSearchResultsList = (props) => {
  const { focusedUser, results, SearchResultItem, selectResult } = props;
  return import_react140.default.createElement(import_react140.default.Fragment, null, results.map((result, index3) => import_react140.default.createElement(SearchResultItem, { focusedUser, index: index3, key: index3, result, selectResult })));
};
var DefaultSearchResultItem = (props) => {
  const { focusedUser, index: index3, result, selectResult } = props;
  const focused = focusedUser === index3;
  const className = clsx_default("str-chat__channel-search-result", focused && "str-chat__channel-search-result--focused");
  if (isChannel(result)) {
    const channel = result;
    return import_react140.default.createElement(ChannelPreview, { channel, className, onSelect: () => selectResult(channel) });
  } else {
    return import_react140.default.createElement(
      "button",
      { "aria-label": `Select User Channel: ${result.name || ""}`, className, "data-testid": "channel-search-result-user", onClick: () => selectResult(result), role: "option" },
      import_react140.default.createElement(Avatar, { className: "str-chat__avatar--channel-preview", image: result.image, name: result.name || result.id, user: result }),
      import_react140.default.createElement("div", { className: "str-chat__channel-search-result--display-name" }, result.name || result.id)
    );
  }
};
var ResultsContainer = ({ children, popupResults }) => {
  const { t: t2 } = useTranslationContext("ResultsContainer");
  return import_react140.default.createElement("div", { "aria-label": t2("aria/Channel search results"), className: clsx_default(`str-chat__channel-search-result-list`, popupResults ? "popup" : "inline") }, children);
};
var SearchResults = (props) => {
  const { popupResults, results, SearchEmpty = DefaultSearchEmpty, searching, SearchLoading, SearchResultItem = DefaultSearchResultItem, SearchResultsHeader = DefaultSearchResultsHeader, SearchResultsList = DefaultSearchResultsList, selectResult } = props;
  const { t: t2 } = useTranslationContext("SearchResults");
  const [focusedResult, setFocusedResult] = (0, import_react140.useState)();
  const handleKeyDown = (0, import_react140.useCallback)((event) => {
    if (event.key === "ArrowUp") {
      setFocusedResult((prevFocused) => {
        if (prevFocused === void 0)
          return 0;
        return prevFocused === 0 ? results.length - 1 : prevFocused - 1;
      });
    }
    if (event.key === "ArrowDown") {
      setFocusedResult((prevFocused) => {
        if (prevFocused === void 0)
          return 0;
        return prevFocused === results.length - 1 ? 0 : prevFocused + 1;
      });
    }
    if (event.key === "Enter") {
      event.preventDefault();
      setFocusedResult((prevFocused) => {
        if (typeof prevFocused !== "undefined") {
          selectResult(results[prevFocused]);
          return void 0;
        }
        return prevFocused;
      });
    }
  }, [results, selectResult]);
  (0, import_react140.useEffect)(() => {
    document.addEventListener("keydown", handleKeyDown, false);
    return () => document.removeEventListener("keydown", handleKeyDown);
  }, [handleKeyDown]);
  if (searching) {
    return import_react140.default.createElement(ResultsContainer, { popupResults }, SearchLoading ? import_react140.default.createElement(SearchLoading, null) : import_react140.default.createElement("div", { className: "str-chat__channel-search-container-searching", "data-testid": "search-in-progress-indicator" }, t2("Searching...")));
  }
  if (!results.length) {
    return import_react140.default.createElement(
      ResultsContainer,
      { popupResults },
      import_react140.default.createElement(SearchEmpty, null)
    );
  }
  return import_react140.default.createElement(
    ResultsContainer,
    { popupResults },
    import_react140.default.createElement(SearchResultsHeader, { results }),
    import_react140.default.createElement(SearchResultsList, { focusedUser: focusedResult, results, SearchResultItem, selectResult })
  );
};

// node_modules/stream-chat-react/dist/components/ChannelSearch/ChannelSearch.js
var UnMemoizedChannelSearch = (props) => {
  const { AppMenu, ClearInputIcon, ExitSearchIcon, MenuIcon: MenuIcon3, placeholder, popupResults = false, SearchBar: SearchBar2 = SearchBar, SearchEmpty, SearchInput: SearchInput2 = SearchInput, SearchInputIcon, SearchLoading, SearchResultItem, SearchResultsHeader, SearchResultsList, ...channelSearchParams } = props;
  const { activateSearch, clearState, exitSearch, inputIsFocused, inputRef, onSearch, query, results, searchBarRef, searching, selectResult } = useChannelSearch(channelSearchParams);
  return import_react141.default.createElement(
    "div",
    { className: clsx_default("str-chat__channel-search", popupResults ? "str-chat__channel-search--popup" : "str-chat__channel-search--inline", {
      "str-chat__channel-search--with-results": results.length > 0
    }), "data-testid": "channel-search" },
    import_react141.default.createElement(SearchBar2, { activateSearch, AppMenu, ClearInputIcon, clearState, disabled: channelSearchParams.disabled, exitSearch, ExitSearchIcon, inputIsFocused, inputRef, MenuIcon: MenuIcon3, onSearch, placeholder, query, searchBarRef, SearchInput: SearchInput2, SearchInputIcon }),
    query && import_react141.default.createElement(SearchResults, { popupResults, results, SearchEmpty, searching, SearchLoading, SearchResultItem, SearchResultsHeader, SearchResultsList, selectResult })
  );
};
var ChannelSearch = import_react141.default.memo(UnMemoizedChannelSearch);

// node_modules/stream-chat-react/dist/components/EmptyStateIndicator/EmptyStateIndicator.js
var import_react143 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/EmptyStateIndicator/icons.js
var import_react142 = __toESM(require_react());
var ChatBubble = () => import_react142.default.createElement(
  "svg",
  { "data-testid": "chat-bubble", fill: "none", height: "96", viewBox: "0 0 136 136", width: "96", xmlns: "http://www.w3.org/2000/svg" },
  import_react142.default.createElement("path", { d: "M106 24.5H30C24.775 24.5 20.5 28.775 20.5 34V119.5L39.5 100.5H106C111.225 100.5 115.5 96.225 115.5 91V34C115.5 28.775 111.225 24.5 106 24.5ZM106 91H39.5L30 100.5V34H106V91Z", fill: "#B4B7BB" })
);

// node_modules/stream-chat-react/dist/components/EmptyStateIndicator/EmptyStateIndicator.js
var UnMemoizedEmptyStateIndicator = (props) => {
  const { listType } = props;
  const { t: t2 } = useTranslationContext("EmptyStateIndicator");
  if (listType === "thread")
    return null;
  if (listType === "channel") {
    const text3 = t2("You have no channels currently");
    return import_react143.default.createElement(
      import_react143.default.Fragment,
      null,
      import_react143.default.createElement(
        "div",
        { className: "str-chat__channel-list-empty" },
        import_react143.default.createElement(ChatBubble, null),
        import_react143.default.createElement("p", { role: "listitem" }, text3)
      )
    );
  }
  if (listType === "message") {
    const text3 = t2("No chats here yet…");
    return import_react143.default.createElement(
      "div",
      { className: "str-chat__empty-channel" },
      import_react143.default.createElement(ChatBubble, null),
      import_react143.default.createElement("p", { className: "str-chat__empty-channel-text", role: "listitem" }, text3)
    );
  }
  return import_react143.default.createElement("p", null, "No items exist");
};
var EmptyStateIndicator = import_react143.default.memo(UnMemoizedEmptyStateIndicator);

// node_modules/stream-chat-react/dist/components/LoadMore/LoadMorePaginator.js
var import_react145 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/LoadMore/LoadMoreButton.js
var import_react144 = __toESM(require_react());

// node_modules/stream-chat-react/dist/utils/deprecationWarning.js
var deprecationAndReplacementWarning = (pairs, component) => {
  pairs.forEach((data) => {
    const [[oldName, oldValue], [newName, newValue]] = [
      Object.entries(data[0])[0],
      Object.entries(data[1])[0]
    ];
    if (typeof oldValue !== "undefined" && typeof newValue === "undefined" || typeof oldValue !== "undefined" && typeof newValue !== "undefined") {
      console.warn(`[Deprecation notice (${component})]: prefer using prop ${newName} instead of ${oldName}`);
    }
  });
};

// node_modules/stream-chat-react/dist/components/LoadMore/LoadMoreButton.js
var UnMemoizedLoadMoreButton = ({ children, isLoading, onClick, refreshing }) => {
  const { t: t2 } = useTranslationContext("UnMemoizedLoadMoreButton");
  const childrenOrDefaultString = children ?? t2("Load more");
  const loading = typeof isLoading !== "undefined" ? isLoading : refreshing;
  (0, import_react144.useEffect)(() => {
    deprecationAndReplacementWarning([[{ refreshing }, { isLoading }]], "LoadMoreButton");
  }, []);
  return import_react144.default.createElement(
    "div",
    { className: "str-chat__load-more-button" },
    import_react144.default.createElement("button", { "aria-label": t2("aria/Load More Channels"), className: "str-chat__load-more-button__button str-chat__cta-button", "data-testid": "load-more-button", disabled: loading, onClick }, loading ? import_react144.default.createElement(LoadingIndicator, null) : childrenOrDefaultString)
  );
};
var LoadMoreButton = import_react144.default.memo(UnMemoizedLoadMoreButton);

// node_modules/stream-chat-react/dist/components/LoadMore/LoadMorePaginator.js
var UnMemoizedLoadMorePaginator = (props) => {
  const { children, hasNextPage, isLoading, LoadMoreButton: LoadMoreButton2 = LoadMoreButton, loadNextPage, refreshing, reverse } = props;
  const loadingState = typeof isLoading !== "undefined" ? isLoading : refreshing;
  (0, import_react145.useEffect)(() => {
    deprecationAndReplacementWarning([[{ refreshing }, { isLoading }]], "LoadMorePaginator");
  }, []);
  return import_react145.default.createElement(
    import_react145.default.Fragment,
    null,
    !reverse && children,
    hasNextPage && import_react145.default.createElement(LoadMoreButton2, { isLoading: loadingState, onClick: loadNextPage }),
    reverse && children
  );
};
var LoadMorePaginator = import_react145.default.memo(UnMemoizedLoadMorePaginator);

// node_modules/stream-chat-react/dist/components/ChannelList/ChannelList.js
var DEFAULT_FILTERS = {};
var DEFAULT_OPTIONS = {};
var DEFAULT_SORT = {};
var searchControllerStateSelector = (nextValue) => ({
  searchIsActive: nextValue.isActive
});
var UnMemoizedChannelList = (props) => {
  const { additionalChannelSearchProps, allowNewMessagesFromUnfilteredChannels = true, Avatar: Avatar2 = Avatar, channelRenderFilterFn, ChannelSearch: ChannelSearch2 = ChannelSearch, customActiveChannel, customQueryChannels, EmptyStateIndicator: EmptyStateIndicator2 = EmptyStateIndicator, filters = {}, getLatestMessagePreview: getLatestMessagePreview2, List: List2 = ChannelListMessenger, LoadingErrorIndicator: LoadingErrorIndicator2 = NullComponent, LoadingIndicator: LoadingIndicator2 = LoadingChannels, lockChannelOrder = false, onAddedToChannel, onChannelDeleted, onChannelHidden, onChannelTruncated, onChannelUpdated, onChannelVisible, onMessageNew, onMessageNewHandler, onRemovedFromChannel, options: options2, Paginator = LoadMorePaginator, Preview, recoveryThrottleIntervalMs, renderChannels, sendChannelsToList = false, setActiveChannelOnMount = true, showChannelSearch = false, sort = DEFAULT_SORT, watchers = {} } = props;
  const { channel, channelsQueryState, client, closeMobileNav, customClasses, navOpen = false, searchController, setActiveChannel, theme, useImageFlagEmojisOnWindows } = useChatContext("ChannelList");
  const { Search } = useComponentContext();
  const channelListRef = (0, import_react146.useRef)(null);
  const [channelUpdateCount, setChannelUpdateCount] = (0, import_react146.useState)(0);
  const [searchActive, setSearchActive] = (0, import_react146.useState)(false);
  const { searchIsActive } = useStateStore(searchController.state, searchControllerStateSelector);
  const activeChannelHandler = async (channels2, setChannels2) => {
    if (!channels2.length || channels2.length > ((options2 == null ? void 0 : options2.limit) || MAX_QUERY_CHANNELS_LIMIT)) {
      return;
    }
    if (customActiveChannel) {
      let customActiveChannelObject = channels2.find((chan) => chan.id === customActiveChannel);
      if (!customActiveChannelObject) {
        [customActiveChannelObject] = await client.queryChannels({
          id: customActiveChannel
        });
      }
      if (customActiveChannelObject) {
        setActiveChannel(customActiveChannelObject, watchers);
        const newChannels = moveChannelUpwards({
          channels: channels2,
          channelToMove: customActiveChannelObject,
          sort
        });
        setChannels2(newChannels);
      }
      return;
    }
    if (setActiveChannelOnMount) {
      setActiveChannel(channels2[0], watchers);
    }
  };
  const forceUpdate = (0, import_react146.useCallback)(() => setChannelUpdateCount((count) => count + 1), []);
  const onSearch = (0, import_react146.useCallback)((event) => {
    var _a;
    setSearchActive(!!event.target.value);
    (_a = additionalChannelSearchProps == null ? void 0 : additionalChannelSearchProps.onSearch) == null ? void 0 : _a.call(additionalChannelSearchProps, event);
  }, [additionalChannelSearchProps]);
  const onSearchExit = (0, import_react146.useCallback)(() => {
    var _a;
    setSearchActive(false);
    (_a = additionalChannelSearchProps == null ? void 0 : additionalChannelSearchProps.onSearchExit) == null ? void 0 : _a.call(additionalChannelSearchProps);
  }, [additionalChannelSearchProps]);
  const { channels, hasNextPage, loadNextPage, setChannels } = usePaginatedChannels(client, filters || DEFAULT_FILTERS, sort || DEFAULT_SORT, options2 || DEFAULT_OPTIONS, activeChannelHandler, recoveryThrottleIntervalMs, customQueryChannels);
  const loadedChannels = channelRenderFilterFn ? channelRenderFilterFn(channels) : channels;
  useMobileNavigation(channelListRef, navOpen, closeMobileNav);
  const { customHandler, defaultHandler } = usePrepareShapeHandlers({
    allowNewMessagesFromUnfilteredChannels,
    filters,
    lockChannelOrder,
    onAddedToChannel,
    onChannelDeleted,
    onChannelHidden,
    onChannelTruncated,
    onChannelUpdated,
    onChannelVisible,
    onMessageNew,
    onMessageNewHandler,
    onRemovedFromChannel,
    setChannels,
    sort
    // TODO: implement
    // customHandleChannelListShape
  });
  useChannelListShape(customHandler ?? defaultHandler);
  useConnectionRecoveredListener(forceUpdate);
  (0, import_react146.useEffect)(() => {
    const handleEvent = (event) => {
      if (event.cid === (channel == null ? void 0 : channel.cid)) {
        setActiveChannel();
      }
    };
    client.on("channel.deleted", handleEvent);
    client.on("channel.hidden", handleEvent);
    return () => {
      client.off("channel.deleted", handleEvent);
      client.off("channel.hidden", handleEvent);
    };
  }, [channel == null ? void 0 : channel.cid]);
  const renderChannel = (item) => {
    const previewProps = {
      activeChannel: channel,
      Avatar: Avatar2,
      channel: item,
      // forces the update of preview component on channel update
      channelUpdateCount,
      getLatestMessagePreview: getLatestMessagePreview2,
      key: item.cid,
      Preview,
      setActiveChannel,
      watchers
    };
    return import_react146.default.createElement(ChannelPreview, { ...previewProps });
  };
  const baseClass = "str-chat__channel-list";
  const className = clsx_default((customClasses == null ? void 0 : customClasses.chat) ?? "str-chat", theme, (customClasses == null ? void 0 : customClasses.channelList) ?? `${baseClass} ${baseClass}-react`, {
    "str-chat--windows-flags": useImageFlagEmojisOnWindows && navigator.userAgent.match(/Win/),
    [`${baseClass}--open`]: navOpen
  });
  const showChannelList = !searchActive && !searchIsActive || (additionalChannelSearchProps == null ? void 0 : additionalChannelSearchProps.popupResults);
  return import_react146.default.createElement(
    ChannelListContextProvider,
    { value: { channels, setChannels } },
    import_react146.default.createElement(
      "div",
      { className, ref: channelListRef },
      showChannelSearch && (Search ? import_react146.default.createElement(Search, { directMessagingChannelType: additionalChannelSearchProps == null ? void 0 : additionalChannelSearchProps.channelType, disabled: additionalChannelSearchProps == null ? void 0 : additionalChannelSearchProps.disabled, exitSearchOnInputBlur: additionalChannelSearchProps == null ? void 0 : additionalChannelSearchProps.clearSearchOnClickOutside, placeholder: additionalChannelSearchProps == null ? void 0 : additionalChannelSearchProps.placeholder }) : import_react146.default.createElement(ChannelSearch2, { onSearch, onSearchExit, setChannels, ...additionalChannelSearchProps })),
      showChannelList && import_react146.default.createElement(List2, { error: channelsQueryState.error, loadedChannels: sendChannelsToList ? loadedChannels : void 0, loading: !!channelsQueryState.queryInProgress && ["reload", "uninitialized"].includes(channelsQueryState.queryInProgress), LoadingErrorIndicator: LoadingErrorIndicator2, LoadingIndicator: LoadingIndicator2, setChannels }, !(loadedChannels == null ? void 0 : loadedChannels.length) ? import_react146.default.createElement(EmptyStateIndicator2, { listType: "channel" }) : import_react146.default.createElement(Paginator, { hasNextPage, isLoading: channelsQueryState.queryInProgress === "load-more", loadNextPage }, renderChannels ? renderChannels(loadedChannels, renderChannel) : loadedChannels.map((channel2) => renderChannel(channel2))))
    )
  );
};
var ChannelList = import_react146.default.memo(UnMemoizedChannelList);

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useChannelDeletedListener.js
var import_react147 = __toESM(require_react());
var useChannelDeletedListener = (setChannels, customHandler) => {
  const { client } = useChatContext("useChannelDeletedListener");
  (0, import_react147.useEffect)(() => {
    const handleEvent = (event) => {
      if (customHandler && typeof customHandler === "function") {
        customHandler(setChannels, event);
      } else {
        setChannels((channels) => {
          const channelIndex = channels.findIndex((channel) => channel.cid === event.cid);
          if (channelIndex < 0)
            return [...channels];
          channels.splice(channelIndex, 1);
          return [...channels];
        });
      }
    };
    client.on("channel.deleted", handleEvent);
    return () => {
      client.off("channel.deleted", handleEvent);
    };
  }, [client, customHandler, setChannels]);
};

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useChannelHiddenListener.js
var import_react148 = __toESM(require_react());
var useChannelHiddenListener = (setChannels, customHandler) => {
  const { client } = useChatContext("useChannelHiddenListener");
  (0, import_react148.useEffect)(() => {
    const handleEvent = (event) => {
      if (customHandler && typeof customHandler === "function") {
        customHandler(setChannels, event);
      } else {
        setChannels((channels) => {
          const channelIndex = channels.findIndex((channel) => channel.cid === event.cid);
          if (channelIndex < 0)
            return [...channels];
          channels.splice(channelIndex, 1);
          return [...channels];
        });
      }
    };
    client.on("channel.hidden", handleEvent);
    return () => {
      client.off("channel.hidden", handleEvent);
    };
  }, [client, customHandler, setChannels]);
};

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useChannelTruncatedListener.js
var import_react149 = __toESM(require_react());
var useChannelTruncatedListener = (setChannels, customHandler, forceUpdate) => {
  const { client } = useChatContext("useChannelTruncatedListener");
  (0, import_react149.useEffect)(() => {
    const handleEvent = (event) => {
      setChannels((channels) => [...channels]);
      if (customHandler && typeof customHandler === "function") {
        customHandler(setChannels, event);
      }
      if (forceUpdate) {
        forceUpdate();
      }
    };
    client.on("channel.truncated", handleEvent);
    return () => {
      client.off("channel.truncated", handleEvent);
    };
  }, [client, customHandler, forceUpdate, setChannels]);
};

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useChannelUpdatedListener.js
var import_react150 = __toESM(require_react());
var useChannelUpdatedListener = (setChannels, customHandler, forceUpdate) => {
  const { client } = useChatContext("useChannelUpdatedListener");
  (0, import_react150.useEffect)(() => {
    const handleEvent = (event) => {
      setChannels((channels) => {
        var _a, _b, _c, _d;
        const channelIndex = channels.findIndex((channel) => {
          var _a2;
          return channel.cid === ((_a2 = event.channel) == null ? void 0 : _a2.cid);
        });
        if (channelIndex > -1 && event.channel) {
          const newChannels = channels;
          newChannels[channelIndex].data = {
            ...event.channel,
            hidden: ((_a = event.channel) == null ? void 0 : _a.hidden) ?? ((_b = newChannels[channelIndex].data) == null ? void 0 : _b.hidden),
            own_capabilities: ((_c = event.channel) == null ? void 0 : _c.own_capabilities) ?? ((_d = newChannels[channelIndex].data) == null ? void 0 : _d.own_capabilities)
          };
          return [...newChannels];
        }
        return channels;
      });
      if (forceUpdate) {
        forceUpdate();
      }
      if (customHandler && typeof customHandler === "function") {
        customHandler(setChannels, event);
      }
    };
    client.on("channel.updated", handleEvent);
    return () => {
      client.off("channel.updated", handleEvent);
    };
  }, [client, customHandler, forceUpdate, setChannels]);
};

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useChannelVisibleListener.js
var import_react151 = __toESM(require_react());
var import_lodash10 = __toESM(require_lodash2());
var useChannelVisibleListener = (setChannels, customHandler) => {
  const { client } = useChatContext("useChannelVisibleListener");
  (0, import_react151.useEffect)(() => {
    const handleEvent = async (event) => {
      if (customHandler && typeof customHandler === "function") {
        customHandler(setChannels, event);
      } else if (event.type && event.channel_type && event.channel_id) {
        const channel = await getChannel({
          client,
          id: event.channel_id,
          type: event.channel_type
        });
        setChannels((channels) => (0, import_lodash10.default)([channel, ...channels], "cid"));
      }
    };
    client.on("channel.visible", handleEvent);
    return () => {
      client.off("channel.visible", handleEvent);
    };
  }, [client, customHandler, setChannels]);
};

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useMessageNewListener.js
var import_react152 = __toESM(require_react());
var import_lodash11 = __toESM(require_lodash2());
var useMessageNewListener = (setChannels, customHandler, lockChannelOrder = false, allowNewMessagesFromUnfilteredChannels = true) => {
  const { client } = useChatContext("useMessageNewListener");
  (0, import_react152.useEffect)(() => {
    const handleEvent = (event) => {
      if (customHandler && typeof customHandler === "function") {
        customHandler(setChannels, event);
      } else {
        setChannels((channels) => {
          const channelInList = channels.filter((channel) => channel.cid === event.cid).length > 0;
          if (!channelInList && allowNewMessagesFromUnfilteredChannels && event.channel_type) {
            const channel = client.channel(event.channel_type, event.channel_id);
            return (0, import_lodash11.default)([channel, ...channels], "cid");
          }
          if (!lockChannelOrder)
            return moveChannelUp({ channels, cid: event.cid || "" });
          return channels;
        });
      }
    };
    client.on("message.new", handleEvent);
    return () => {
      client.off("message.new", handleEvent);
    };
  }, [
    allowNewMessagesFromUnfilteredChannels,
    client,
    customHandler,
    lockChannelOrder,
    setChannels
  ]);
};

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useNotificationAddedToChannelListener.js
var import_react153 = __toESM(require_react());
var import_lodash12 = __toESM(require_lodash2());
var useNotificationAddedToChannelListener = (setChannels, customHandler, allowNewMessagesFromUnfilteredChannels = true) => {
  const { client } = useChatContext("useNotificationAddedToChannelListener");
  (0, import_react153.useEffect)(() => {
    const handleEvent = async (event) => {
      var _a, _b;
      if (customHandler && typeof customHandler === "function") {
        customHandler(setChannels, event);
      } else if (allowNewMessagesFromUnfilteredChannels && ((_a = event.channel) == null ? void 0 : _a.type)) {
        const channel = await getChannel({
          client,
          id: event.channel.id,
          members: (_b = event.channel.members) == null ? void 0 : _b.reduce((acc, { user, user_id }) => {
            const userId = user_id || (user == null ? void 0 : user.id);
            if (userId) {
              acc.push(userId);
            }
            return acc;
          }, []),
          type: event.channel.type
        });
        setChannels((channels) => (0, import_lodash12.default)([channel, ...channels], "cid"));
      }
    };
    client.on("notification.added_to_channel", handleEvent);
    return () => {
      client.off("notification.added_to_channel", handleEvent);
    };
  }, [allowNewMessagesFromUnfilteredChannels, client, customHandler, setChannels]);
};

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useNotificationMessageNewListener.js
var import_react154 = __toESM(require_react());
var import_lodash13 = __toESM(require_lodash2());
var useNotificationMessageNewListener = (setChannels, customHandler, allowNewMessagesFromUnfilteredChannels = true) => {
  const { client } = useChatContext("useNotificationMessageNewListener");
  (0, import_react154.useEffect)(() => {
    const handleEvent = async (event) => {
      var _a;
      if (customHandler && typeof customHandler === "function") {
        customHandler(setChannels, event);
      } else if (allowNewMessagesFromUnfilteredChannels && ((_a = event.channel) == null ? void 0 : _a.type)) {
        const channel = await getChannel({
          client,
          id: event.channel.id,
          type: event.channel.type
        });
        setChannels((channels) => (0, import_lodash13.default)([channel, ...channels], "cid"));
      }
    };
    client.on("notification.message_new", handleEvent);
    return () => {
      client.off("notification.message_new", handleEvent);
    };
  }, [allowNewMessagesFromUnfilteredChannels, client, customHandler, setChannels]);
};

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useNotificationRemovedFromChannelListener.js
var import_react155 = __toESM(require_react());
var useNotificationRemovedFromChannelListener = (setChannels, customHandler) => {
  const { client } = useChatContext("useNotificationRemovedFromChannelListener");
  (0, import_react155.useEffect)(() => {
    const handleEvent = (event) => {
      if (customHandler && typeof customHandler === "function") {
        customHandler(setChannels, event);
      } else {
        setChannels((channels) => channels.filter((channel) => {
          var _a;
          return channel.cid !== ((_a = event.channel) == null ? void 0 : _a.cid);
        }));
      }
    };
    client.on("notification.removed_from_channel", handleEvent);
    return () => {
      client.off("notification.removed_from_channel", handleEvent);
    };
  }, [client, customHandler, setChannels]);
};

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useUserPresenceChangedListener.js
var import_react156 = __toESM(require_react());
var useUserPresenceChangedListener = (setChannels) => {
  const { client } = useChatContext("useUserPresenceChangedListener");
  (0, import_react156.useEffect)(() => {
    const handleEvent = (event) => {
      setChannels((channels) => {
        const newChannels = channels.map((channel) => {
          var _a;
          if (!((_a = event.user) == null ? void 0 : _a.id) || !channel.state.members[event.user.id]) {
            return channel;
          }
          const newChannel = channel;
          newChannel.state.members[event.user.id].user = event.user;
          return newChannel;
        });
        return [...newChannels];
      });
    };
    client.on("user.presence.changed", handleEvent);
    return () => {
      client.off("user.presence.changed", handleEvent);
    };
  }, [client, setChannels]);
};

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useSelectedChannelState.js
var import_react157 = __toESM(require_react());
var import_shim2 = __toESM(require_shim());
var noop7 = () => {
};
function useSelectedChannelState({ channel, selector: selector7, stateChangeEventKeys = ["all"] }) {
  const subscribe = (0, import_react157.useCallback)((onStoreChange) => {
    if (!channel)
      return noop7;
    const subscriptions = stateChangeEventKeys.map((et) => channel.on(et, () => {
      onStoreChange(selector7(channel));
    }));
    return () => subscriptions.forEach((subscription) => subscription.unsubscribe());
  }, [channel, selector7, stateChangeEventKeys]);
  const getSnapshot = (0, import_react157.useCallback)(() => {
    if (!channel)
      return void 0;
    return selector7(channel);
  }, [channel, selector7]);
  return (0, import_shim2.useSyncExternalStore)(subscribe, getSnapshot);
}

// node_modules/stream-chat-react/dist/components/ChannelList/hooks/useChannelMembershipState.js
var selector = (c) => c.state.membership;
var keys = ["member.updated"];
function useChannelMembershipState(channel) {
  return useSelectedChannelState({ channel, selector, stateChangeEventKeys: keys });
}

// node_modules/stream-chat-react/dist/components/ChannelPreview/icons.js
var import_react158 = __toESM(require_react());
var Icon2 = {
  ArchiveBox: (props) => import_react158.default.createElement(
    "svg",
    { className: "str-chat__icon str-chat__icon--archive-box", fill: "currentColor", viewBox: "0 0 512 512", xmlns: "http://www.w3.org/2000/svg", ...props },
    import_react158.default.createElement("path", { d: "M32 32l448 0c17.7 0 32 14.3 32 32l0 32c0 17.7-14.3 32-32 32L32 128C14.3 128 0 113.7 0 96L0 64C0 46.3 14.3 32 32 32zm0 128l448 0 0 256c0 35.3-28.7 64-64 64L96 480c-35.3 0-64-28.7-64-64l0-256zm128 80c0 8.8 7.2 16 16 16l160 0c8.8 0 16-7.2 16-16s-7.2-16-16-16l-160 0c-8.8 0-16 7.2-16 16z" })
  ),
  Pin: (props) => import_react158.default.createElement(
    "svg",
    { className: "str-chat__icon str-chat__icon--pin", fill: "currentColor", viewBox: "0 0 384 512", xmlns: "http://www.w3.org/2000/svg", ...props },
    import_react158.default.createElement("path", { d: "M32 32C32 14.3 46.3 0 64 0L320 0c17.7 0 32 14.3 32 32s-14.3 32-32 32l-29.5 0 11.4 148.2c36.7 19.9 65.7 53.2 79.5 94.7l1 3c3.3 9.8 1.6 20.5-4.4 28.8s-15.7 13.3-26 13.3L32 352c-10.3 0-19.9-4.9-26-13.3s-7.7-19.1-4.4-28.8l1-3c13.8-41.5 42.8-74.8 79.5-94.7L93.5 64 64 64C46.3 64 32 49.7 32 32zM160 384l64 0 0 96c0 17.7-14.3 32-32 32s-32-14.3-32-32l0-96z" })
  )
};

// node_modules/stream-chat-react/dist/components/ChannelPreview/ChannelPreviewActionButtons.js
function ChannelPreviewActionButtons({ channel }) {
  const membership = useChannelMembershipState(channel);
  const { t: t2 } = useTranslationContext();
  return import_react159.default.createElement(
    "div",
    { className: "str-chat__channel-preview__action-buttons" },
    import_react159.default.createElement(
      "button",
      { "aria-label": membership.pinned_at ? t2("Unpin") : t2("Pin"), className: clsx_default("str-chat__channel-preview__action-button", "str-chat__channel-preview__action-button--pin", membership.pinned_at && "str-chat__channel-preview__action-button--active"), onClick: (e) => {
        e.stopPropagation();
        if (membership.pinned_at) {
          channel.unpin();
        } else {
          channel.pin();
        }
      }, title: membership.pinned_at ? t2("Unpin") : t2("Pin") },
      import_react159.default.createElement(Icon2.Pin, null)
    ),
    import_react159.default.createElement(
      "button",
      { "aria-label": membership.archived_at ? t2("Unarchive") : t2("Archive"), className: clsx_default("str-chat__channel-preview__action-button", "str-chat__channel-preview__action-button--archive", membership.archived_at && "str-chat__channel-preview__action-button--active"), onClick: (e) => {
        e.stopPropagation();
        if (membership.archived_at) {
          channel.unarchive();
        } else {
          channel.archive();
        }
      }, title: membership.archived_at ? t2("Unarchive") : t2("Archive") },
      import_react159.default.createElement(Icon2.ArchiveBox, null)
    )
  );
}

// node_modules/stream-chat-react/dist/components/ChannelPreview/ChannelPreviewMessenger.js
var UnMemoizedChannelPreviewMessenger = (props) => {
  var _a, _b;
  const { active, Avatar: Avatar2 = Avatar, channel, className: customClassName = "", displayImage, displayTitle, groupChannelDisplayInfo, latestMessagePreview, onSelect: customOnSelectChannel, setActiveChannel, unread, watchers } = props;
  const { ChannelPreviewActionButtons: ChannelPreviewActionButtons2 = ChannelPreviewActionButtons } = useComponentContext();
  const channelPreviewButton = (0, import_react160.useRef)(null);
  const avatarName = displayTitle || ((_b = (_a = channel.state.messages[channel.state.messages.length - 1]) == null ? void 0 : _a.user) == null ? void 0 : _b.id);
  const onSelectChannel = (e) => {
    if (customOnSelectChannel) {
      customOnSelectChannel(e);
    } else if (setActiveChannel) {
      setActiveChannel(channel, watchers);
    }
    if (channelPreviewButton == null ? void 0 : channelPreviewButton.current) {
      channelPreviewButton.current.blur();
    }
  };
  return import_react160.default.createElement(
    "div",
    { className: "str-chat__channel-preview-container" },
    import_react160.default.createElement(ChannelPreviewActionButtons2, { channel }),
    import_react160.default.createElement(
      "button",
      { "aria-label": `Select Channel: ${displayTitle || ""}`, "aria-selected": active, className: clsx_default(`str-chat__channel-preview-messenger str-chat__channel-preview`, active && "str-chat__channel-preview-messenger--active", unread && unread >= 1 && "str-chat__channel-preview-messenger--unread", customClassName), "data-testid": "channel-preview-button", onClick: onSelectChannel, ref: channelPreviewButton, role: "option" },
      import_react160.default.createElement(
        "div",
        { className: "str-chat__channel-preview-messenger--left" },
        import_react160.default.createElement(Avatar2, { className: "str-chat__avatar--channel-preview", groupChannelDisplayInfo, image: displayImage, name: avatarName })
      ),
      import_react160.default.createElement(
        "div",
        { className: "str-chat__channel-preview-end" },
        import_react160.default.createElement(
          "div",
          { className: "str-chat__channel-preview-end-first-row" },
          import_react160.default.createElement(
            "div",
            { className: "str-chat__channel-preview-messenger--name" },
            import_react160.default.createElement("span", null, displayTitle)
          ),
          !!unread && import_react160.default.createElement("div", { className: "str-chat__channel-preview-unread-badge", "data-testid": "unread-badge" }, unread)
        ),
        import_react160.default.createElement("div", { className: "str-chat__channel-preview-messenger--last-message" }, latestMessagePreview)
      )
    )
  );
};
var ChannelPreviewMessenger = import_react160.default.memo(UnMemoizedChannelPreviewMessenger);

// node_modules/stream-chat-react/dist/components/ChannelPreview/hooks/useIsChannelMuted.js
var import_react161 = __toESM(require_react());
var useIsChannelMuted = (channel) => {
  const { client } = useChatContext("useIsChannelMuted");
  const [muted, setMuted] = (0, import_react161.useState)(channel.muteStatus());
  (0, import_react161.useEffect)(() => {
    const handleEvent = () => setMuted(channel.muteStatus());
    client.on("notification.channel_mutes_updated", handleEvent);
    return () => client.off("notification.channel_mutes_updated", handleEvent);
  }, [muted]);
  return muted;
};

// node_modules/stream-chat-react/dist/components/ChannelPreview/hooks/useChannelPreviewInfo.js
var import_react163 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/ChannelPreview/utils.js
var import_react162 = __toESM(require_react());
var renderPreviewText = (text3) => import_react162.default.createElement(Markdown, { skipHtml: true }, text3);
var getLatestPollVote = (latestVotesByOption) => {
  let latestVote;
  for (const optionVotes of Object.values(latestVotesByOption)) {
    optionVotes.forEach((vote) => {
      if (latestVote && new Date(latestVote.updated_at) >= new Date(vote.created_at))
        return;
      latestVote = vote;
    });
  }
  return latestVote;
};
var getLatestMessagePreview = (channel, t2, userLanguage = "en", isMessageAIGenerated) => {
  var _a, _b, _c, _d, _e, _f;
  const latestMessage = channel.state.latestMessages[channel.state.latestMessages.length - 1];
  const previewTextToRender = ((_a = latestMessage == null ? void 0 : latestMessage.i18n) == null ? void 0 : _a[`${userLanguage}_text`]) || (latestMessage == null ? void 0 : latestMessage.text);
  const poll = latestMessage == null ? void 0 : latestMessage.poll;
  if (!latestMessage) {
    return t2("Nothing yet...");
  }
  if (latestMessage.deleted_at) {
    return t2("Message deleted");
  }
  if (poll) {
    if (!poll.vote_count) {
      const createdBy = ((_b = poll.created_by) == null ? void 0 : _b.id) === channel.getClient().userID ? t2("You") : ((_c = poll.created_by) == null ? void 0 : _c.name) ?? t2("Poll");
      return t2("📊 {{createdBy}} created: {{ pollName}}", {
        createdBy,
        pollName: poll.name
      });
    } else {
      const latestVote = getLatestPollVote(poll.latest_votes_by_option);
      const option = latestVote && poll.options.find((opt) => opt.id === latestVote.option_id);
      if (option && latestVote) {
        return t2("📊 {{votedBy}} voted: {{pollOptionText}}", {
          pollOptionText: option.text,
          votedBy: ((_d = latestVote == null ? void 0 : latestVote.user) == null ? void 0 : _d.id) === channel.getClient().userID ? t2("You") : ((_e = latestVote.user) == null ? void 0 : _e.name) ?? t2("Poll")
        });
      }
    }
  }
  if (previewTextToRender) {
    return (isMessageAIGenerated == null ? void 0 : isMessageAIGenerated(latestMessage)) ? previewTextToRender : renderPreviewText(previewTextToRender);
  }
  if (latestMessage.command) {
    return `/${latestMessage.command}`;
  }
  if ((_f = latestMessage.attachments) == null ? void 0 : _f.length) {
    return t2("🏙 Attachment...");
  }
  return t2("Empty message...");
};
var getGroupChannelDisplayInfo = (channel) => {
  const members = Object.values(channel.state.members);
  if (members.length <= 2)
    return;
  const info = [];
  for (let i = 0; i < members.length; i++) {
    const { user } = members[i];
    if (!(user == null ? void 0 : user.name) && !(user == null ? void 0 : user.image))
      continue;
    info.push({ image: user.image, name: user.name });
    if (info.length === 4)
      break;
  }
  return info;
};
var getChannelDisplayInfo = (info, channel, currentUser) => {
  var _a, _b;
  if ((_a = channel.data) == null ? void 0 : _a[info])
    return channel.data[info];
  const members = Object.values(channel.state.members);
  if (members.length !== 2)
    return;
  const otherMember = members.find((member) => {
    var _a2;
    return ((_a2 = member.user) == null ? void 0 : _a2.id) !== (currentUser == null ? void 0 : currentUser.id);
  });
  return (_b = otherMember == null ? void 0 : otherMember.user) == null ? void 0 : _b[info];
};
var getDisplayTitle = (channel, currentUser) => getChannelDisplayInfo("name", channel, currentUser);
var getDisplayImage = (channel, currentUser) => getChannelDisplayInfo("image", channel, currentUser);

// node_modules/stream-chat-react/dist/components/ChannelPreview/hooks/useChannelPreviewInfo.js
var useChannelPreviewInfo = (props) => {
  const { channel, overrideImage, overrideTitle } = props;
  const { client } = useChatContext("useChannelPreviewInfo");
  const [displayTitle, setDisplayTitle] = (0, import_react163.useState)(() => overrideTitle || getDisplayTitle(channel, client.user));
  const [displayImage, setDisplayImage] = (0, import_react163.useState)(() => overrideImage || getDisplayImage(channel, client.user));
  const [groupChannelDisplayInfo, setGroupDisplayChannelInfo] = (0, import_react163.useState)(() => getGroupChannelDisplayInfo(channel));
  (0, import_react163.useEffect)(() => {
    if (overrideTitle && overrideImage)
      return;
    const updateInfo = () => {
      if (!overrideTitle)
        setDisplayTitle(getDisplayTitle(channel, client.user));
      if (!overrideImage) {
        setDisplayImage(getDisplayImage(channel, client.user));
        setGroupDisplayChannelInfo(getGroupChannelDisplayInfo(channel));
      }
    };
    updateInfo();
    client.on("user.updated", updateInfo);
    return () => {
      client.off("user.updated", updateInfo);
    };
  }, [channel, channel.data, client, overrideImage, overrideTitle]);
  return {
    displayImage: overrideImage || displayImage,
    displayTitle: overrideTitle || displayTitle,
    groupChannelDisplayInfo
  };
};

// node_modules/stream-chat-react/dist/components/ChannelPreview/hooks/useMessageDeliveryStatus.js
var import_react164 = __toESM(require_react());
var MessageDeliveryStatus;
(function(MessageDeliveryStatus2) {
  MessageDeliveryStatus2["DELIVERED"] = "delivered";
  MessageDeliveryStatus2["READ"] = "read";
})(MessageDeliveryStatus || (MessageDeliveryStatus = {}));
var useMessageDeliveryStatus = ({ channel, lastMessage }) => {
  const { client } = useChatContext();
  const [messageDeliveryStatus, setMessageDeliveryStatus] = (0, import_react164.useState)();
  const isOwnMessage = (0, import_react164.useCallback)((message) => {
    var _a;
    return client.user && ((_a = message == null ? void 0 : message.user) == null ? void 0 : _a.id) === client.user.id;
  }, [client]);
  (0, import_react164.useEffect)(() => {
    const lastMessageIsOwn = isOwnMessage(lastMessage);
    if (!(lastMessage == null ? void 0 : lastMessage.created_at) || !lastMessageIsOwn)
      return;
    const lastMessageCreatedAtDate = typeof lastMessage.created_at === "string" ? new Date(lastMessage.created_at) : lastMessage.created_at;
    const channelReadByOthersAfterLastMessageUpdate = Object.values(channel.state.read).some(({ last_read: channelLastMarkedReadDate, user }) => {
      const ignoreOwnReadStatus = client.user && user.id !== client.user.id;
      return ignoreOwnReadStatus && lastMessageCreatedAtDate < channelLastMarkedReadDate;
    });
    setMessageDeliveryStatus(channelReadByOthersAfterLastMessageUpdate ? MessageDeliveryStatus.READ : MessageDeliveryStatus.DELIVERED);
  }, [channel.state.read, client, isOwnMessage, lastMessage]);
  (0, import_react164.useEffect)(() => {
    const handleMessageNew = (event) => {
      if (!isOwnMessage(event.message)) {
        return setMessageDeliveryStatus(void 0);
      }
      return setMessageDeliveryStatus(MessageDeliveryStatus.DELIVERED);
    };
    channel.on("message.new", handleMessageNew);
    return () => {
      channel.off("message.new", handleMessageNew);
    };
  }, [channel, client, isOwnMessage]);
  (0, import_react164.useEffect)(() => {
    if (!isOwnMessage(lastMessage))
      return;
    const handleMarkRead = (event) => {
      var _a, _b;
      if (((_a = event.user) == null ? void 0 : _a.id) !== ((_b = client.user) == null ? void 0 : _b.id))
        setMessageDeliveryStatus(MessageDeliveryStatus.READ);
    };
    channel.on("message.read", handleMarkRead);
    return () => {
      channel.off("message.read", handleMarkRead);
    };
  }, [channel, client, lastMessage, isOwnMessage]);
  return {
    messageDeliveryStatus
  };
};

// node_modules/stream-chat-react/dist/components/ChannelPreview/ChannelPreview.js
var ChannelPreview = (props) => {
  const { active, channel, channelUpdateCount, getLatestMessagePreview: getLatestMessagePreview2 = getLatestMessagePreview, Preview = ChannelPreviewMessenger } = props;
  const { channel: activeChannel, client, isMessageAIGenerated, setActiveChannel } = useChatContext("ChannelPreview");
  const { t: t2, userLanguage } = useTranslationContext("ChannelPreview");
  const { displayImage, displayTitle, groupChannelDisplayInfo } = useChannelPreviewInfo({
    channel
  });
  const [lastMessage, setLastMessage] = (0, import_react165.useState)(channel.state.messages[channel.state.messages.length - 1]);
  const [unread, setUnread] = (0, import_react165.useState)(0);
  const { messageDeliveryStatus } = useMessageDeliveryStatus({
    channel,
    lastMessage
  });
  const isActive = typeof active === "undefined" ? (activeChannel == null ? void 0 : activeChannel.cid) === channel.cid : active;
  const { muted } = useIsChannelMuted(channel);
  (0, import_react165.useEffect)(() => {
    const handleEvent = (event) => {
      if (!event.cid)
        return setUnread(0);
      if (channel.cid === event.cid)
        setUnread(0);
    };
    client.on("notification.mark_read", handleEvent);
    return () => client.off("notification.mark_read", handleEvent);
  }, [channel, client]);
  (0, import_react165.useEffect)(() => {
    const handleEvent = (event) => {
      var _a, _b;
      if (channel.cid !== event.cid)
        return;
      if (((_a = event.user) == null ? void 0 : _a.id) !== ((_b = client.user) == null ? void 0 : _b.id))
        return;
      setUnread(channel.countUnread());
    };
    channel.on("notification.mark_unread", handleEvent);
    return () => {
      channel.off("notification.mark_unread", handleEvent);
    };
  }, [channel, client]);
  const refreshUnreadCount = (0, import_react165.useMemo)(() => (0, import_lodash14.default)(() => {
    if (muted) {
      setUnread(0);
    } else {
      setUnread(channel.countUnread());
    }
  }, 400), [channel, muted]);
  (0, import_react165.useEffect)(() => {
    refreshUnreadCount();
    const handleEvent = () => {
      setLastMessage(channel.state.latestMessages[channel.state.latestMessages.length - 1]);
      refreshUnreadCount();
    };
    channel.on("message.new", handleEvent);
    channel.on("message.updated", handleEvent);
    channel.on("message.deleted", handleEvent);
    channel.on("message.undeleted", handleEvent);
    channel.on("channel.truncated", handleEvent);
    return () => {
      channel.off("message.new", handleEvent);
      channel.off("message.updated", handleEvent);
      channel.off("message.deleted", handleEvent);
      channel.off("message.undeleted", handleEvent);
      channel.off("channel.truncated", handleEvent);
    };
  }, [channel, refreshUnreadCount, channelUpdateCount]);
  if (!Preview)
    return null;
  const latestMessagePreview = getLatestMessagePreview2(channel, t2, userLanguage, isMessageAIGenerated);
  return import_react165.default.createElement(Preview, { ...props, active: isActive, displayImage, displayTitle, groupChannelDisplayInfo, lastMessage, latestMessage: latestMessagePreview, latestMessagePreview, messageDeliveryStatus, setActiveChannel, unread });
};

// node_modules/stream-chat-react/dist/components/ChatView/ChatView.js
var import_react166 = __toESM(require_react());
var ChatViewContext = (0, import_react166.createContext)({
  activeChatView: "channels",
  setActiveChatView: () => void 0
});
var ChatView = ({ children }) => {
  const [activeChatView, setActiveChatView] = (0, import_react166.useState)("channels");
  const { theme } = useChatContext();
  const value = (0, import_react166.useMemo)(() => ({ activeChatView, setActiveChatView }), [activeChatView]);
  return import_react166.default.createElement(
    ChatViewContext.Provider,
    { value },
    import_react166.default.createElement("div", { className: clsx_default("str-chat", theme, "str-chat__chat-view") }, children)
  );
};
var ChannelsView = ({ children }) => {
  const { activeChatView } = (0, import_react166.useContext)(ChatViewContext);
  if (activeChatView !== "channels")
    return null;
  return import_react166.default.createElement("div", { className: "str-chat__chat-view__channels" }, children);
};
var ThreadsViewContext = (0, import_react166.createContext)({
  activeThread: void 0,
  setActiveThread: () => void 0
});
var useThreadsViewContext = () => (0, import_react166.useContext)(ThreadsViewContext);
var ThreadsView = ({ children }) => {
  const { activeChatView } = (0, import_react166.useContext)(ChatViewContext);
  const [activeThread, setActiveThread] = (0, import_react166.useState)(void 0);
  const value = (0, import_react166.useMemo)(() => ({ activeThread, setActiveThread }), [activeThread]);
  if (activeChatView !== "threads")
    return null;
  return import_react166.default.createElement(
    ThreadsViewContext.Provider,
    { value },
    import_react166.default.createElement("div", { className: "str-chat__chat-view__threads" }, children)
  );
};
var useActiveThread = ({ activeThread }) => {
  (0, import_react166.useEffect)(() => {
    if (!activeThread)
      return;
    const handleVisibilityChange = () => {
      if (document.visibilityState === "visible" && document.hasFocus()) {
        activeThread.activate();
      }
      if (document.visibilityState === "hidden" || !document.hasFocus()) {
        activeThread.deactivate();
      }
    };
    handleVisibilityChange();
    window.addEventListener("focus", handleVisibilityChange);
    window.addEventListener("blur", handleVisibilityChange);
    return () => {
      activeThread.deactivate();
      window.addEventListener("blur", handleVisibilityChange);
      window.removeEventListener("focus", handleVisibilityChange);
    };
  }, [activeThread]);
};
var ThreadAdapter = ({ children }) => {
  const { activeThread } = useThreadsViewContext();
  useActiveThread({ activeThread });
  return import_react166.default.createElement(ThreadProvider, { thread: activeThread }, children);
};
var selector2 = ({ unreadThreadCount }) => ({
  unreadThreadCount
});
var ChatViewSelector = () => {
  const { client } = useChatContext();
  const { unreadThreadCount } = useStateStore(client.threads.state, selector2);
  const { activeChatView, setActiveChatView } = (0, import_react166.useContext)(ChatViewContext);
  return import_react166.default.createElement(
    "div",
    { className: "str-chat__chat-view__selector" },
    import_react166.default.createElement(
      "button",
      { "aria-selected": activeChatView === "channels", className: "str-chat__chat-view__selector-button", onPointerDown: () => setActiveChatView("channels"), role: "tab" },
      import_react166.default.createElement(Icon.MessageBubbleEmpty, null),
      import_react166.default.createElement("div", { className: "str-chat__chat-view__selector-button-text" }, "Channels")
    ),
    import_react166.default.createElement(
      "button",
      { "aria-selected": activeChatView === "threads", className: "str-chat__chat-view__selector-button", onPointerDown: () => setActiveChatView("threads"), role: "tab" },
      import_react166.default.createElement(
        UnreadCountBadge,
        { count: unreadThreadCount, position: "top-right" },
        import_react166.default.createElement(Icon.MessageBubble, null)
      ),
      import_react166.default.createElement("div", { className: "str-chat__chat-view__selector-button-text" }, "Threads")
    )
  );
};
ChatView.Channels = ChannelsView;
ChatView.Threads = ThreadsView;
ChatView.ThreadAdapter = ThreadAdapter;
ChatView.Selector = ChatViewSelector;

// node_modules/stream-chat-react/dist/components/Threads/ThreadList/ThreadListItemUI.js
var attachmentTypeIconMap = {
  audio: "🔈",
  file: "📄",
  image: "📷",
  video: "🎥",
  voiceRecording: "🎙️"
};
var getTitleFromMessage = ({ currentUserId, message }) => {
  var _a, _b;
  const attachment = (_a = message == null ? void 0 : message.attachments) == null ? void 0 : _a.at(0);
  let attachmentIcon = "";
  if (attachment) {
    attachmentIcon += attachmentTypeIconMap[attachment.type ?? "file"] ?? attachmentTypeIconMap.file;
  }
  const messageBelongsToCurrentUser = ((_b = message == null ? void 0 : message.user) == null ? void 0 : _b.id) === currentUserId;
  if ((message == null ? void 0 : message.deleted_at) && message.parent_id)
    return clsx_default(messageBelongsToCurrentUser && "You:", "This reply was deleted.");
  if ((message == null ? void 0 : message.deleted_at) && !message.parent_id)
    return clsx_default(messageBelongsToCurrentUser && "You:", "The source message was deleted.");
  if ((attachment == null ? void 0 : attachment.type) === "voiceRecording")
    return clsx_default(attachmentIcon, messageBelongsToCurrentUser && "You:", "Voice message");
  return clsx_default(attachmentIcon, messageBelongsToCurrentUser && "You:", (message == null ? void 0 : message.text) || (attachment == null ? void 0 : attachment.fallback) || "N/A");
};
var ThreadListItemUI = (props) => {
  var _a, _b, _c;
  const { client } = useChatContext();
  const thread = useThreadListItemContext();
  const selector7 = (0, import_react167.useCallback)((nextValue) => {
    var _a2;
    return {
      channel: nextValue.channel,
      deletedAt: nextValue.deletedAt,
      latestReply: nextValue.replies.at(-1),
      ownUnreadMessageCount: client.userID && ((_a2 = nextValue.read[client.userID]) == null ? void 0 : _a2.unreadMessageCount) || 0,
      parentMessage: nextValue.parentMessage
    };
  }, [client]);
  const { channel, deletedAt, latestReply, ownUnreadMessageCount, parentMessage } = useStateStore(thread.state, selector7);
  const { displayTitle: channelDisplayTitle } = useChannelPreviewInfo({ channel });
  const { activeThread, setActiveThread } = useThreadsViewContext();
  const avatarProps = deletedAt ? null : latestReply == null ? void 0 : latestReply.user;
  return import_react167.default.createElement(
    "button",
    { "aria-selected": activeThread === thread, className: "str-chat__thread-list-item", "data-thread-id": thread.id, onClick: () => setActiveThread(thread), role: "option", ...props },
    import_react167.default.createElement(
      "div",
      { className: "str-chat__thread-list-item__channel" },
      import_react167.default.createElement(Icon.MessageBubble, null),
      import_react167.default.createElement("div", { className: "str-chat__thread-list-item__channel-text" }, channelDisplayTitle)
    ),
    import_react167.default.createElement(
      "div",
      { className: "str-chat__thread-list-item__parent-message" },
      import_react167.default.createElement(
        "div",
        { className: "str-chat__thread-list-item__parent-message-text" },
        "replied to: ",
        getTitleFromMessage({ message: parentMessage })
      ),
      !deletedAt && import_react167.default.createElement(UnreadCountBadge, { count: ownUnreadMessageCount })
    ),
    import_react167.default.createElement(
      "div",
      { className: "str-chat__thread-list-item__latest-reply" },
      import_react167.default.createElement(Avatar, { ...avatarProps }),
      import_react167.default.createElement(
        "div",
        { className: "str-chat__thread-list-item__latest-reply-details" },
        !deletedAt && import_react167.default.createElement("div", { className: "str-chat__thread-list-item__latest-reply-created-by" }, ((_a = latestReply == null ? void 0 : latestReply.user) == null ? void 0 : _a.name) || ((_b = latestReply == null ? void 0 : latestReply.user) == null ? void 0 : _b.id) || "Unknown sender"),
        import_react167.default.createElement(
          "div",
          { className: "str-chat__thread-list-item__latest-reply-text-and-timestamp" },
          import_react167.default.createElement("div", { className: "str-chat__thread-list-item__latest-reply-text" }, deletedAt ? "This thread was deleted" : getTitleFromMessage({
            currentUserId: (_c = client.user) == null ? void 0 : _c.id,
            message: latestReply
          })),
          import_react167.default.createElement(
            "div",
            { className: "str-chat__thread-list-item__latest-reply-timestamp" },
            import_react167.default.createElement(Timestamp, { timestamp: deletedAt ?? (latestReply == null ? void 0 : latestReply.created_at) })
          )
        )
      )
    )
  );
};

// node_modules/stream-chat-react/dist/components/Threads/ThreadList/ThreadListItem.js
var ThreadListItemContext = (0, import_react168.createContext)(void 0);
var useThreadListItemContext = () => (0, import_react168.useContext)(ThreadListItemContext);
var ThreadListItem = ({ thread, threadListItemUIProps }) => {
  const { ThreadListItemUI: ThreadListItemUI2 = ThreadListItemUI } = useComponentContext();
  return import_react168.default.createElement(
    ThreadListItemContext.Provider,
    { value: thread },
    import_react168.default.createElement(ThreadListItemUI2, { ...threadListItemUIProps })
  );
};
{
}

// node_modules/stream-chat-react/dist/components/Threads/ThreadList/ThreadListEmptyPlaceholder.js
var import_react169 = __toESM(require_react());
var ThreadListEmptyPlaceholder = () => import_react169.default.createElement(
  "div",
  { className: "str-chat__thread-list-empty-placeholder" },
  import_react169.default.createElement(Icon.MessageBubble, null),
  "No threads here yet..."
);

// node_modules/stream-chat-react/dist/components/Threads/ThreadList/ThreadListUnseenThreadsBanner.js
var import_react170 = __toESM(require_react());
var selector3 = (nextValue) => ({
  unseenThreadIds: nextValue.unseenThreadIds
});
var ThreadListUnseenThreadsBanner = () => {
  const { client } = useChatContext();
  const { unseenThreadIds } = useStateStore(client.threads.state, selector3);
  if (!unseenThreadIds.length)
    return null;
  return import_react170.default.createElement(
    "div",
    { className: "str-chat__unseen-threads-banner" },
    unseenThreadIds.length,
    " unread threads",
    import_react170.default.createElement(
      "button",
      { className: "str-chat__unseen-threads-banner__button", onClick: () => client.threads.reload() },
      import_react170.default.createElement(Icon.Reload, null)
    )
  );
};

// node_modules/stream-chat-react/dist/components/Threads/ThreadList/ThreadListLoadingIndicator.js
var import_react171 = __toESM(require_react());
var selector4 = (nextValue) => ({
  isLoadingNext: nextValue.pagination.isLoadingNext
});
var ThreadListLoadingIndicator = () => {
  const { LoadingIndicator: LoadingIndicator2 = LoadingIndicator } = useComponentContext();
  const { client } = useChatContext();
  const { isLoadingNext } = useStateStore(client.threads.state, selector4);
  if (!isLoadingNext)
    return null;
  return import_react171.default.createElement(
    "div",
    { className: "str-chat__thread-list-loading-indicator" },
    import_react171.default.createElement(LoadingIndicator2, null)
  );
};

// node_modules/stream-chat-react/dist/components/Threads/ThreadList/ThreadList.js
var selector5 = (nextValue) => ({ threads: nextValue.threads });
var computeItemKey = (_23, item) => item.id;
var useThreadList = () => {
  const { client } = useChatContext();
  (0, import_react172.useEffect)(() => {
    const handleVisibilityChange = () => {
      if (document.visibilityState === "visible") {
        client.threads.activate();
      }
      if (document.visibilityState === "hidden") {
        client.threads.deactivate();
      }
    };
    handleVisibilityChange();
    document.addEventListener("visibilitychange", handleVisibilityChange);
    return () => {
      client.threads.deactivate();
      document.removeEventListener("visibilitychange", handleVisibilityChange);
    };
  }, [client]);
};
var ThreadList = ({ virtuosoProps }) => {
  const { client } = useChatContext();
  const { ThreadListEmptyPlaceholder: ThreadListEmptyPlaceholder2 = ThreadListEmptyPlaceholder, ThreadListItem: ThreadListItem2 = ThreadListItem, ThreadListLoadingIndicator: ThreadListLoadingIndicator2 = ThreadListLoadingIndicator, ThreadListUnseenThreadsBanner: ThreadListUnseenThreadsBanner2 = ThreadListUnseenThreadsBanner } = useComponentContext();
  const { threads } = useStateStore(client.threads.state, selector5);
  useThreadList();
  return import_react172.default.createElement(
    "div",
    { className: "str-chat__thread-list-container" },
    import_react172.default.createElement(ThreadListUnseenThreadsBanner2, null),
    import_react172.default.createElement(ln, { atBottomStateChange: (atBottom) => atBottom && client.threads.loadNextPage(), className: "str-chat__thread-list", components: {
      EmptyPlaceholder: ThreadListEmptyPlaceholder2,
      Footer: ThreadListLoadingIndicator2
    }, computeItemKey, data: threads, itemContent: (_23, thread) => import_react172.default.createElement(ThreadListItem2, { thread }), ...virtuosoProps })
  );
};

// node_modules/stream-chat-react/dist/components/Message/hooks/useReactionHandler.js
var reactionHandlerWarning = `Reaction handler was called, but it is missing one of its required arguments.
Make sure the ChannelAction and ChannelState contexts are properly set and the hook is initialized with a valid message.`;
var useReactionHandler = (message) => {
  const thread = useThreadContext();
  const { updateMessage } = useChannelActionContext("useReactionHandler");
  const { channel, channelCapabilities } = useChannelStateContext("useReactionHandler");
  const { client } = useChatContext("useReactionHandler");
  const createMessagePreview = (0, import_react173.useCallback)(
    (add, reaction, message2) => {
      var _a, _b;
      const newReactionGroups = (message2 == null ? void 0 : message2.reaction_groups) || {};
      const reactionType = reaction.type;
      const hasReaction = !!newReactionGroups[reactionType];
      if (add) {
        const timestamp = (/* @__PURE__ */ new Date()).toISOString();
        newReactionGroups[reactionType] = hasReaction ? {
          ...newReactionGroups[reactionType],
          count: newReactionGroups[reactionType].count + 1
        } : {
          count: 1,
          first_reaction_at: timestamp,
          last_reaction_at: timestamp,
          sum_scores: 1
        };
      } else {
        if (hasReaction && newReactionGroups[reactionType].count > 1) {
          newReactionGroups[reactionType] = {
            ...newReactionGroups[reactionType],
            count: newReactionGroups[reactionType].count - 1
          };
        } else {
          delete newReactionGroups[reactionType];
        }
      }
      const newReactions = add ? [reaction, ...(message2 == null ? void 0 : message2.latest_reactions) || []] : (_a = message2.latest_reactions) == null ? void 0 : _a.filter((item) => !(item.type === reaction.type && item.user_id === reaction.user_id));
      const newOwnReactions = add ? [reaction, ...(message2 == null ? void 0 : message2.own_reactions) || []] : (_b = message2 == null ? void 0 : message2.own_reactions) == null ? void 0 : _b.filter((item) => item.type !== reaction.type);
      return {
        ...message2,
        latest_reactions: newReactions || message2.latest_reactions,
        own_reactions: newOwnReactions,
        reaction_groups: newReactionGroups
      };
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [client.user, client.userID]
  );
  const createReactionPreview = (type) => {
    var _a;
    return {
      message_id: message == null ? void 0 : message.id,
      score: 1,
      type,
      user: client.user,
      user_id: (_a = client.user) == null ? void 0 : _a.id
    };
  };
  const toggleReaction = (0, import_lodash15.default)(async (id, type, add) => {
    if (!message || !channelCapabilities["send-reaction"])
      return;
    const newReaction = createReactionPreview(type);
    const tempMessage = createMessagePreview(add, newReaction, message);
    try {
      updateMessage(tempMessage);
      thread == null ? void 0 : thread.upsertReplyLocally({ message: tempMessage });
      const messageResponse = add ? await channel.sendReaction(id, { type }) : await channel.deleteReaction(id, type);
      updateMessage(messageResponse.message);
    } catch (error2) {
      updateMessage(message);
      thread == null ? void 0 : thread.upsertReplyLocally({ message });
    }
  }, 1e3);
  return async (reactionType, event) => {
    if (event == null ? void 0 : event.preventDefault) {
      event.preventDefault();
    }
    if (!message) {
      return console.warn(reactionHandlerWarning);
    }
    let userExistingReaction = null;
    if (message.own_reactions) {
      message.own_reactions.forEach((reaction) => {
        if (reaction.user && client.userID === reaction.user.id && reaction.type === reactionType) {
          userExistingReaction = reaction;
        } else if (reaction.user && client.userID !== reaction.user.id) {
          console.warn(`message.own_reactions contained reactions from a different user, this indicates a bug`);
        }
      });
    }
    try {
      if (userExistingReaction) {
        await toggleReaction(message.id, userExistingReaction.type, false);
      } else {
        await toggleReaction(message.id, reactionType, true);
      }
    } catch (error2) {
      console.log({ error: error2 });
    }
  };
};

// node_modules/stream-chat-react/dist/components/Message/hooks/useRetryHandler.js
var useRetryHandler = (customRetrySendMessage) => {
  const { retrySendMessage: contextRetrySendMessage } = useChannelActionContext("useRetryHandler");
  const retrySendMessage = customRetrySendMessage || contextRetrySendMessage;
  return async (message) => {
    if (message) {
      await retrySendMessage(message);
    }
  };
};

// node_modules/stream-chat-react/dist/components/Message/hooks/useUserHandler.js
var useUserHandler = (message, eventHandlers) => ({
  onUserClick: (event) => {
    if (typeof (eventHandlers == null ? void 0 : eventHandlers.onUserClickHandler) !== "function" || !(message == null ? void 0 : message.user)) {
      return;
    }
    eventHandlers.onUserClickHandler(event, message.user);
  },
  onUserHover: (event) => {
    if (typeof (eventHandlers == null ? void 0 : eventHandlers.onUserHoverHandler) !== "function" || !(message == null ? void 0 : message.user)) {
      return;
    }
    eventHandlers.onUserHoverHandler(event, message.user);
  }
});

// node_modules/stream-chat-react/dist/components/Message/hooks/useUserRole.js
var useUserRole = (message, onlySenderCanEdit, disableQuotedMessages) => {
  var _a, _b, _c;
  const { channel, channelCapabilities = {} } = useChannelStateContext("useUserRole");
  const { client } = useChatContext("useUserRole");
  const isAdmin = ((_a = client.user) == null ? void 0 : _a.role) === "admin" || channel.state.membership.role === "admin";
  const isOwner = channel.state.membership.role === "owner";
  const isModerator = ((_b = client.user) == null ? void 0 : _b.role) === "channel_moderator" || channel.state.membership.role === "channel_moderator" || channel.state.membership.role === "moderator" || channel.state.membership.is_moderator === true || channel.state.membership.channel_role === "channel_moderator";
  const isMyMessage = client.userID === ((_c = message.user) == null ? void 0 : _c.id);
  const canEdit = !message.poll && (!onlySenderCanEdit && channelCapabilities["update-any-message"] || isMyMessage && channelCapabilities["update-own-message"]);
  const canDelete = channelCapabilities["delete-any-message"] || isMyMessage && channelCapabilities["delete-own-message"];
  const canFlag = !isMyMessage && channelCapabilities["flag-message"];
  const canMarkUnread = channelCapabilities["read-events"];
  const canMute = !isMyMessage && channelCapabilities["mute-channel"];
  const canQuote = !disableQuotedMessages && channelCapabilities["quote-message"];
  const canReact = channelCapabilities["send-reaction"];
  const canReply = channelCapabilities["send-reply"];
  return {
    canDelete,
    canEdit,
    canFlag,
    canMarkUnread,
    canMute,
    canQuote,
    canReact,
    canReply,
    isAdmin,
    isModerator,
    isMyMessage,
    isOwner
  };
};

// node_modules/stream-chat-react/dist/components/Message/hooks/useReactionsFetcher.js
var MAX_MESSAGE_REACTIONS_TO_FETCH = 1e3;
function useReactionsFetcher(message, notifications = {}) {
  const { client } = useChatContext("useRectionsFetcher");
  const { t: t2 } = useTranslationContext("useReactionFetcher");
  const { getErrorNotification, notify } = notifications;
  return async (reactionType, sort) => {
    try {
      return await fetchMessageReactions(client, message.id, reactionType, sort);
    } catch (e) {
      const errorMessage2 = getErrorNotification == null ? void 0 : getErrorNotification(message);
      notify == null ? void 0 : notify(errorMessage2 || t2("Error fetching reactions"), "error");
      throw e;
    }
  };
}
async function fetchMessageReactions(client, messageId, reactionType, sort) {
  const reactions = [];
  const limit = 25;
  let next;
  let hasNext = true;
  while (hasNext && reactions.length < MAX_MESSAGE_REACTIONS_TO_FETCH) {
    const response = await client.queryReactions(messageId, reactionType ? { type: reactionType } : {}, sort, { limit, next });
    reactions.push(...response.reactions);
    next = response.next;
    hasNext = Boolean(next);
  }
  return reactions;
}

// node_modules/stream-chat-react/dist/components/Message/hooks/useMessageTextStreaming.js
var import_react174 = __toESM(require_react());
var DEFAULT_LETTER_INTERVAL = 30;
var DEFAULT_RENDERING_LETTER_COUNT = 2;
var useMessageTextStreaming = ({ renderingLetterCount = DEFAULT_RENDERING_LETTER_COUNT, streamingLetterIntervalMs = DEFAULT_LETTER_INTERVAL, text: text3 }) => {
  const [streamedMessageText, setStreamedMessageText] = (0, import_react174.useState)(text3);
  const textCursor = (0, import_react174.useRef)(text3.length);
  (0, import_react174.useEffect)(() => {
    const textLength = text3.length;
    const interval = setInterval(() => {
      if (!text3 || textCursor.current >= textLength) {
        clearInterval(interval);
      }
      const newCursorValue = textCursor.current + renderingLetterCount;
      const newText = text3.substring(0, newCursorValue);
      textCursor.current += newText.length - textCursor.current;
      setStreamedMessageText(newText);
    }, streamingLetterIntervalMs);
    return () => {
      clearInterval(interval);
    };
  }, [streamingLetterIntervalMs, renderingLetterCount, text3]);
  return { streamedMessageText };
};

// node_modules/stream-chat-react/dist/components/Message/MessageSimple.js
var import_react272 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Message/icons.js
var import_react175 = __toESM(require_react());
var ActionsIcon = ({ className = "" }) => import_react175.default.createElement(
  "svg",
  { className, height: "4", viewBox: "0 0 11 4", width: "11", xmlns: "http://www.w3.org/2000/svg" },
  import_react175.default.createElement("path", { d: "M1.5 3a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm4 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm4 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z", fillRule: "nonzero" })
);
var ReactionIcon = ({ className = "" }) => import_react175.default.createElement(
  "svg",
  { className, height: "12", viewBox: "0 0 12 12", width: "12", xmlns: "http://www.w3.org/2000/svg" },
  import_react175.default.createElement(
    "g",
    { clipRule: "evenodd", fillRule: "evenodd" },
    import_react175.default.createElement("path", { d: "M6 1.2C3.3 1.2 1.2 3.3 1.2 6c0 2.7 2.1 4.8 4.8 4.8 2.7 0 4.8-2.1 4.8-4.8 0-2.7-2.1-4.8-4.8-4.8zM0 6c0-3.3 2.7-6 6-6s6 2.7 6 6-2.7 6-6 6-6-2.7-6-6z" }),
    import_react175.default.createElement("path", { d: "M5.4 4.5c0 .5-.4.9-.9.9s-.9-.4-.9-.9.4-.9.9-.9.9.4.9.9zM8.4 4.5c0 .5-.4.9-.9.9s-.9-.4-.9-.9.4-.9.9-.9.9.4.9.9zM3.3 6.7c.3-.2.6-.1.8.1.3.4.8.9 1.5 1 .6.2 1.4.1 2.4-1 .2-.2.6-.3.8 0 .2.2.3.6 0 .8-1.1 1.3-2.4 1.7-3.5 1.5-1-.2-1.8-.9-2.2-1.5-.2-.3-.1-.7.2-.9z" })
  )
);
var ThreadIcon = ({ className = "" }) => import_react175.default.createElement(
  "svg",
  { className, height: "10", width: "14", xmlns: "http://www.w3.org/2000/svg" },
  import_react175.default.createElement("path", { d: "M8.516 3c4.78 0 4.972 6.5 4.972 6.5-1.6-2.906-2.847-3.184-4.972-3.184v2.872L3.772 4.994 8.516.5V3zM.484 5l4.5-4.237v1.78L2.416 5l2.568 2.125v1.828L.484 5z", fillRule: "evenodd" })
);
var PinIcon = () => import_react175.default.createElement(
  "svg",
  { height: "13", viewBox: "0 0 14 13", width: "14", xmlns: "http://www.w3.org/2000/svg" },
  import_react175.default.createElement("path", { d: "M13.3518 6.686L6.75251 0.0866699L5.80984 1.02867L6.75318 1.972V1.97334L3.45318 5.272L3.45251 5.27334L2.50984 4.32934L1.56718 5.27267L4.39584 8.10067L0.624512 11.8713L1.56718 12.814L5.33851 9.04334L8.16718 11.8713L9.10984 10.9293L8.16718 9.986L11.4672 6.686L12.4098 7.62867L13.3518 6.686ZM7.22451 9.04267L7.22385 9.04334L4.39584 6.21467L7.69518 2.91467L10.5232 5.74267L7.22451 9.04267Z", fillRule: "evenodd" })
);
var PinIndicator = ({ message, t: t2 }) => {
  var _a, _b;
  if (!message || !t2)
    return null;
  return import_react175.default.createElement(
    "div",
    { style: { alignItems: "center", display: "flex" } },
    import_react175.default.createElement(PinIcon, null),
    import_react175.default.createElement("div", { style: {
      fontSize: "14px",
      marginBottom: "0",
      marginLeft: "8px",
      marginTop: "0"
    } }, message.pinned_by ? `${t2("Pinned by")} ${((_a = message.pinned_by) == null ? void 0 : _a.name) || ((_b = message.pinned_by) == null ? void 0 : _b.id)}` : t2("Message pinned"))
  );
};
var MessageDeliveredIcon = () => import_react175.default.createElement(
  "svg",
  { "data-testid": "delivered-icon", fill: "none", height: "24", viewBox: "0 0 24 24", width: "24", xmlns: "http://www.w3.org/2000/svg" },
  import_react175.default.createElement("path", { clipRule: "evenodd", d: "M8.9999 16.2L4.7999 12L3.3999 13.4L8.9999 19L20.9999 6.99998L19.5999 5.59998L8.9999 16.2Z", fill: "black", fillRule: "evenodd" })
);
var MessageErrorIcon = () => import_react175.default.createElement(
  "div",
  { className: "str-chat__message-error-icon" },
  import_react175.default.createElement(
    "svg",
    { "data-testid": "error", fill: "none", height: "24", viewBox: "0 0 24 24", width: "24", xmlns: "http://www.w3.org/2000/svg" },
    import_react175.default.createElement("path", { d: "M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2Z", fill: "black", id: "background" }),
    import_react175.default.createElement("path", { d: "M13 17H11V15H13V17ZM13 13H11V7H13V13Z", fill: "white" })
  )
);

// node_modules/stream-chat-react/dist/components/MessageBounce/MessageBounceModal.js
var import_react176 = __toESM(require_react());
function MessageBounceModal({ MessageBouncePrompt: MessageBouncePrompt2, ...modalProps }) {
  return import_react176.default.createElement(
    Modal,
    { className: "str-chat__message-bounce-modal", ...modalProps },
    import_react176.default.createElement(
      MessageBounceProvider,
      null,
      import_react176.default.createElement(MessageBouncePrompt2, { onClose: modalProps.onClose })
    )
  );
}

// node_modules/stream-chat-react/dist/components/MessageBounce/MessageBouncePrompt.js
var import_react177 = __toESM(require_react());
function MessageBouncePrompt({ children, onClose }) {
  const { handleDelete: handleDelete2, handleEdit, handleRetry } = useMessageBounceContext("MessageBouncePrompt");
  const { t: t2 } = useTranslationContext("MessageBouncePrompt");
  function createHandler(handle3) {
    return (e) => {
      handle3(e);
      onClose == null ? void 0 : onClose(e);
    };
  }
  return import_react177.default.createElement(
    "div",
    { className: "str-chat__message-bounce-prompt", "data-testid": "message-bounce-prompt" },
    import_react177.default.createElement("div", { className: "str-chat__message-bounce-prompt-header" }, children ?? t2("This message did not meet our content guidelines")),
    import_react177.default.createElement(
      "div",
      { className: "str-chat__message-bounce-actions" },
      import_react177.default.createElement("button", { className: "str-chat__message-bounce-edit", "data-testid": "message-bounce-edit", onClick: createHandler(handleEdit), type: "button" }, t2("Edit Message")),
      import_react177.default.createElement("button", { className: "str-chat__message-bounce-send", "data-testid": "message-bounce-send", onClick: createHandler(handleRetry) }, t2("Send Anyway")),
      import_react177.default.createElement("button", { className: "str-chat__message-bounce-delete", "data-testid": "message-bounce-delete", onClick: createHandler(handleDelete2) }, t2("Delete"))
    )
  );
}

// node_modules/stream-chat-react/dist/components/Message/MessageDeleted.js
var import_react178 = __toESM(require_react());
var MessageDeleted = (props) => {
  const { message } = props;
  const { t: t2 } = useTranslationContext("MessageDeleted");
  const { isMyMessage } = useUserRole(message);
  const messageClasses = isMyMessage ? "str-chat__message str-chat__message--me str-chat__message-simple str-chat__message-simple--me" : "str-chat__message str-chat__message-simple str-chat__message--other";
  return import_react178.default.createElement(
    "div",
    { className: `${messageClasses} str-chat__message--deleted ${message.type} `, "data-testid": "message-deleted-component", key: message.id },
    import_react178.default.createElement("div", { className: "str-chat__message--deleted-inner" }, t2("This message was deleted..."))
  );
};

// node_modules/stream-chat-react/dist/components/Message/MessageBlocked.js
var import_react179 = __toESM(require_react());
var MessageBlocked = () => {
  const { message } = useMessageContext();
  const { t: t2 } = useTranslationContext("MessageBlocked");
  const { isMyMessage } = useUserRole(message);
  const messageClasses = clsx_default("str-chat__message str-chat__message-simple str-chat__message--blocked", message.type, {
    "str-chat__message--me str-chat__message-simple--me": isMyMessage,
    "str-chat__message--other": !isMyMessage
  });
  return import_react179.default.createElement(
    "div",
    { className: messageClasses, "data-testid": "message-blocked-component", key: message.id },
    import_react179.default.createElement("div", { className: "str-chat__message--blocked-inner" }, t2("Message was blocked by moderation policies"))
  );
};

// node_modules/stream-chat-react/dist/components/Message/MessageOptions.js
var import_react189 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageActions/MessageActions.js
var import_react183 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageActions/MessageActionsBox.js
var import_react181 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageActions/CustomMessageActionsList.js
var import_react180 = __toESM(require_react());
var CustomMessageActionsList = (props) => {
  const { customMessageActions, message } = props;
  if (!customMessageActions)
    return null;
  const customActionsArray = Object.keys(customMessageActions);
  return import_react180.default.createElement(import_react180.default.Fragment, null, customActionsArray.map((customAction) => {
    const customHandler = customMessageActions[customAction];
    return import_react180.default.createElement("button", { "aria-selected": "false", className: "str-chat__message-actions-list-item str-chat__message-actions-list-item-button", key: customAction, onClick: (event) => customHandler(message, event), role: "option" }, customAction);
  }));
};

// node_modules/stream-chat-react/dist/components/MessageActions/MessageActionsBox.js
var UnMemoizedMessageActionsBox = (props) => {
  const {
    className,
    getMessageActions: getMessageActions2,
    handleDelete: handleDelete2,
    handleEdit,
    handleFlag,
    handleMarkUnread,
    handleMute,
    handlePin,
    isUserMuted: isUserMuted2,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    mine,
    open,
    ...restDivProps
  } = props;
  const { CustomMessageActionsList: CustomMessageActionsList2 = CustomMessageActionsList } = useComponentContext("MessageActionsBox");
  const { setQuotedMessage } = useChannelActionContext("MessageActionsBox");
  const { customMessageActions, message, threadList } = useMessageContext("MessageActionsBox");
  const { t: t2 } = useTranslationContext("MessageActionsBox");
  const messageActions = getMessageActions2();
  const handleQuote = () => {
    setQuotedMessage(message);
    const elements = message.parent_id ? document.querySelectorAll(".str-chat__thread .str-chat__textarea__textarea") : document.getElementsByClassName("str-chat__textarea__textarea");
    const textarea = elements.item(0);
    if (textarea instanceof HTMLTextAreaElement) {
      textarea.focus();
    }
  };
  const rootClassName2 = clsx_default("str-chat__message-actions-box", className, {
    "str-chat__message-actions-box--open": open
  });
  const buttonClassName = "str-chat__message-actions-list-item str-chat__message-actions-list-item-button";
  return import_react181.default.createElement(
    "div",
    { ...restDivProps, className: rootClassName2, "data-testid": "message-actions-box" },
    import_react181.default.createElement(
      "div",
      { "aria-label": t2("aria/Message Options"), className: "str-chat__message-actions-list", role: "listbox" },
      import_react181.default.createElement(CustomMessageActionsList2, { customMessageActions, message }),
      messageActions.indexOf(MESSAGE_ACTIONS.quote) > -1 && import_react181.default.createElement("button", { "aria-selected": "false", className: buttonClassName, onClick: handleQuote, role: "option" }, t2("Reply")),
      messageActions.indexOf(MESSAGE_ACTIONS.pin) > -1 && !message.parent_id && import_react181.default.createElement("button", { "aria-selected": "false", className: buttonClassName, onClick: handlePin, role: "option" }, !message.pinned ? t2("Pin") : t2("Unpin")),
      messageActions.indexOf(MESSAGE_ACTIONS.markUnread) > -1 && !threadList && !!message.id && import_react181.default.createElement("button", { "aria-selected": "false", className: buttonClassName, onClick: handleMarkUnread, role: "option" }, t2("Mark as unread")),
      messageActions.indexOf(MESSAGE_ACTIONS.flag) > -1 && import_react181.default.createElement("button", { "aria-selected": "false", className: buttonClassName, onClick: handleFlag, role: "option" }, t2("Flag")),
      messageActions.indexOf(MESSAGE_ACTIONS.mute) > -1 && import_react181.default.createElement("button", { "aria-selected": "false", className: buttonClassName, onClick: handleMute, role: "option" }, isUserMuted2() ? t2("Unmute") : t2("Mute")),
      messageActions.indexOf(MESSAGE_ACTIONS.edit) > -1 && import_react181.default.createElement("button", { "aria-selected": "false", className: buttonClassName, onClick: handleEdit, role: "option" }, t2("Edit Message")),
      messageActions.indexOf(MESSAGE_ACTIONS.delete) > -1 && import_react181.default.createElement("button", { "aria-selected": "false", className: buttonClassName, onClick: handleDelete2, role: "option" }, t2("Delete"))
    )
  );
};
var MessageActionsBox = import_react181.default.memo(UnMemoizedMessageActionsBox);

// node_modules/stream-chat-react/dist/components/Dialog/DialogAnchor.js
var import_react182 = __toESM(require_react());

// node_modules/react-popper/lib/esm/Popper.js
var React103 = __toESM(require_react());

// node_modules/react-popper/lib/esm/Manager.js
var React100 = __toESM(require_react());
var ManagerReferenceNodeContext = React100.createContext();
var ManagerReferenceNodeSetterContext = React100.createContext();

// node_modules/react-popper/lib/esm/utils.js
var React101 = __toESM(require_react());
var fromEntries = function fromEntries2(entries) {
  return entries.reduce(function(acc, _ref) {
    var key = _ref[0], value = _ref[1];
    acc[key] = value;
    return acc;
  }, {});
};
var useIsomorphicLayoutEffect = typeof window !== "undefined" && window.document && window.document.createElement ? React101.useLayoutEffect : React101.useEffect;

// node_modules/react-popper/lib/esm/usePopper.js
var React102 = __toESM(require_react());
var ReactDOM = __toESM(require_react_dom());

// node_modules/@popperjs/core/lib/enums.js
var top = "top";
var bottom = "bottom";
var right = "right";
var left = "left";
var auto = "auto";
var basePlacements = [top, bottom, right, left];
var start = "start";
var end = "end";
var clippingParents = "clippingParents";
var viewport = "viewport";
var popper = "popper";
var reference = "reference";
var variationPlacements = basePlacements.reduce(function(acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []);
var beforeRead = "beforeRead";
var read = "read";
var afterRead = "afterRead";
var beforeMain = "beforeMain";
var main = "main";
var afterMain = "afterMain";
var beforeWrite = "beforeWrite";
var write = "write";
var afterWrite = "afterWrite";
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

// node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
function getNodeName(element2) {
  return element2 ? (element2.nodeName || "").toLowerCase() : null;
}

// node_modules/@popperjs/core/lib/dom-utils/getWindow.js
function getWindow(node) {
  if (node == null) {
    return window;
  }
  if (node.toString() !== "[object Window]") {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }
  return node;
}

// node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
function isElement2(node) {
  var OwnElement = getWindow(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
  var OwnElement = getWindow(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  var OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}

// node_modules/@popperjs/core/lib/modifiers/applyStyles.js
function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function(name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element2 = state.elements[name];
    if (!isHTMLElement(element2) || !getNodeName(element2)) {
      return;
    }
    Object.assign(element2.style, style);
    Object.keys(attributes).forEach(function(name2) {
      var value = attributes[name2];
      if (value === false) {
        element2.removeAttribute(name2);
      } else {
        element2.setAttribute(name2, value === true ? "" : value);
      }
    });
  });
}
function effect(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;
  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }
  return function() {
    Object.keys(state.elements).forEach(function(name) {
      var element2 = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
      var style = styleProperties.reduce(function(style2, property) {
        style2[property] = "";
        return style2;
      }, {});
      if (!isHTMLElement(element2) || !getNodeName(element2)) {
        return;
      }
      Object.assign(element2.style, style);
      Object.keys(attributes).forEach(function(attribute) {
        element2.removeAttribute(attribute);
      });
    });
  };
}
var applyStyles_default = {
  name: "applyStyles",
  enabled: true,
  phase: "write",
  fn: applyStyles,
  effect,
  requires: ["computeStyles"]
};

// node_modules/@popperjs/core/lib/utils/getBasePlacement.js
function getBasePlacement(placement) {
  return placement.split("-")[0];
}

// node_modules/@popperjs/core/lib/utils/math.js
var max = Math.max;
var min = Math.min;
var round = Math.round;

// node_modules/@popperjs/core/lib/utils/userAgent.js
function getUAString() {
  var uaData = navigator.userAgentData;
  if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
    return uaData.brands.map(function(item) {
      return item.brand + "/" + item.version;
    }).join(" ");
  }
  return navigator.userAgent;
}

// node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js
function isLayoutViewport() {
  return !/^((?!chrome|android).)*safari/i.test(getUAString());
}

// node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
function getBoundingClientRect(element2, includeScale, isFixedStrategy) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  var clientRect = element2.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;
  if (includeScale && isHTMLElement(element2)) {
    scaleX = element2.offsetWidth > 0 ? round(clientRect.width) / element2.offsetWidth || 1 : 1;
    scaleY = element2.offsetHeight > 0 ? round(clientRect.height) / element2.offsetHeight || 1 : 1;
  }
  var _ref = isElement2(element2) ? getWindow(element2) : window, visualViewport = _ref.visualViewport;
  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
  var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
  var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
  var width = clientRect.width / scaleX;
  var height = clientRect.height / scaleY;
  return {
    width,
    height,
    top: y,
    right: x + width,
    bottom: y + height,
    left: x,
    x,
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
function getLayoutRect(element2) {
  var clientRect = getBoundingClientRect(element2);
  var width = element2.offsetWidth;
  var height = element2.offsetHeight;
  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }
  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }
  return {
    x: element2.offsetLeft,
    y: element2.offsetTop,
    width,
    height
  };
}

// node_modules/@popperjs/core/lib/dom-utils/contains.js
function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode();
  if (parent.contains(child)) {
    return true;
  } else if (rootNode && isShadowRoot(rootNode)) {
    var next = child;
    do {
      if (next && parent.isSameNode(next)) {
        return true;
      }
      next = next.parentNode || next.host;
    } while (next);
  }
  return false;
}

// node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
function getComputedStyle2(element2) {
  return getWindow(element2).getComputedStyle(element2);
}

// node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
function isTableElement(element2) {
  return ["table", "td", "th"].indexOf(getNodeName(element2)) >= 0;
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
function getDocumentElement(element2) {
  return ((isElement2(element2) ? element2.ownerDocument : (
    // $FlowFixMe[prop-missing]
    element2.document
  )) || window.document).documentElement;
}

// node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
function getParentNode(element2) {
  if (getNodeName(element2) === "html") {
    return element2;
  }
  return (
    // this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element2.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    element2.parentNode || // DOM Element detected
    (isShadowRoot(element2) ? element2.host : null) || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    getDocumentElement(element2)
  );
}

// node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
function getTrueOffsetParent(element2) {
  if (!isHTMLElement(element2) || // https://github.com/popperjs/popper-core/issues/837
  getComputedStyle2(element2).position === "fixed") {
    return null;
  }
  return element2.offsetParent;
}
function getContainingBlock(element2) {
  var isFirefox = /firefox/i.test(getUAString());
  var isIE2 = /Trident/i.test(getUAString());
  if (isIE2 && isHTMLElement(element2)) {
    var elementCss = getComputedStyle2(element2);
    if (elementCss.position === "fixed") {
      return null;
    }
  }
  var currentNode = getParentNode(element2);
  if (isShadowRoot(currentNode)) {
    currentNode = currentNode.host;
  }
  while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
    var css = getComputedStyle2(currentNode);
    if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
}
function getOffsetParent(element2) {
  var window2 = getWindow(element2);
  var offsetParent = getTrueOffsetParent(element2);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle2(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle2(offsetParent).position === "static")) {
    return window2;
  }
  return offsetParent || getContainingBlock(element2) || window2;
}

// node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
}

// node_modules/@popperjs/core/lib/utils/within.js
function within(min2, value, max2) {
  return max(min2, min(value, max2));
}
function withinMaxClamp(min2, value, max2) {
  var v = within(min2, value, max2);
  return v > max2 ? max2 : v;
}

// node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

// node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}

// node_modules/@popperjs/core/lib/utils/expandToHashMap.js
function expandToHashMap(value, keys2) {
  return keys2.reduce(function(hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

// node_modules/@popperjs/core/lib/modifiers/arrow.js
var toPaddingObject = function toPaddingObject2(padding, state) {
  padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
};
function arrow(_ref) {
  var _state$modifiersData$;
  var state = _ref.state, name = _ref.name, options2 = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? "height" : "width";
  if (!arrowElement || !popperOffsets2) {
    return;
  }
  var paddingObject = toPaddingObject(options2.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === "y" ? top : left;
  var maxProp = axis === "y" ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
  var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2;
  var min2 = paddingObject[minProp];
  var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset2 = within(min2, center, max2);
  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
}
function effect2(_ref2) {
  var state = _ref2.state, options2 = _ref2.options;
  var _options$element = options2.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
  if (arrowElement == null) {
    return;
  }
  if (typeof arrowElement === "string") {
    arrowElement = state.elements.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return;
    }
  }
  if (!contains(state.elements.popper, arrowElement)) {
    return;
  }
  state.elements.arrow = arrowElement;
}
var arrow_default = {
  name: "arrow",
  enabled: true,
  phase: "main",
  fn: arrow,
  effect: effect2,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};

// node_modules/@popperjs/core/lib/utils/getVariation.js
function getVariation(placement) {
  return placement.split("-")[1];
}

// node_modules/@popperjs/core/lib/modifiers/computeStyles.js
var unsetSides = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function roundOffsetsByDPR(_ref, win) {
  var x = _ref.x, y = _ref.y;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round(x * dpr) / dpr || 0,
    y: round(y * dpr) / dpr || 0
  };
}
function mapToStyles(_ref2) {
  var _Object$assign2;
  var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
  var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
  var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
    x,
    y
  }) : {
    x,
    y
  };
  x = _ref3.x;
  y = _ref3.y;
  var hasX = offsets.hasOwnProperty("x");
  var hasY = offsets.hasOwnProperty("y");
  var sideX = left;
  var sideY = top;
  var win = window;
  if (adaptive) {
    var offsetParent = getOffsetParent(popper2);
    var heightProp = "clientHeight";
    var widthProp = "clientWidth";
    if (offsetParent === getWindow(popper2)) {
      offsetParent = getDocumentElement(popper2);
      if (getComputedStyle2(offsetParent).position !== "static" && position === "absolute") {
        heightProp = "scrollHeight";
        widthProp = "scrollWidth";
      }
    }
    offsetParent = offsetParent;
    if (placement === top || (placement === left || placement === right) && variation === end) {
      sideY = bottom;
      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : (
        // $FlowFixMe[prop-missing]
        offsetParent[heightProp]
      );
      y -= offsetY - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }
    if (placement === left || (placement === top || placement === bottom) && variation === end) {
      sideX = right;
      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : (
        // $FlowFixMe[prop-missing]
        offsetParent[widthProp]
      );
      x -= offsetX - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }
  var commonStyles = Object.assign({
    position
  }, adaptive && unsetSides);
  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
    x,
    y
  }, getWindow(popper2)) : {
    x,
    y
  };
  x = _ref4.x;
  y = _ref4.y;
  if (gpuAcceleration) {
    var _Object$assign;
    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }
  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
}
function computeStyles(_ref5) {
  var state = _ref5.state, options2 = _ref5.options;
  var _options$gpuAccelerat = options2.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options2.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options2.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
  var commonStyles = {
    placement: getBasePlacement(state.placement),
    variation: getVariation(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration,
    isFixed: state.options.strategy === "fixed"
  };
  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive,
      roundOffsets
    })));
  }
  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: "absolute",
      adaptive: false,
      roundOffsets
    })));
  }
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-placement": state.placement
  });
}
var computeStyles_default = {
  name: "computeStyles",
  enabled: true,
  phase: "beforeWrite",
  fn: computeStyles,
  data: {}
};

// node_modules/@popperjs/core/lib/modifiers/eventListeners.js
var passive = {
  passive: true
};
function effect3(_ref) {
  var state = _ref.state, instance2 = _ref.instance, options2 = _ref.options;
  var _options$scroll = options2.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options2.resize, resize = _options$resize === void 0 ? true : _options$resize;
  var window2 = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
  if (scroll) {
    scrollParents.forEach(function(scrollParent) {
      scrollParent.addEventListener("scroll", instance2.update, passive);
    });
  }
  if (resize) {
    window2.addEventListener("resize", instance2.update, passive);
  }
  return function() {
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.removeEventListener("scroll", instance2.update, passive);
      });
    }
    if (resize) {
      window2.removeEventListener("resize", instance2.update, passive);
    }
  };
}
var eventListeners_default = {
  name: "eventListeners",
  enabled: true,
  phase: "write",
  fn: function fn() {
  },
  effect: effect3,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
var hash = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function(matched) {
    return hash[matched];
  });
}

// node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
var hash2 = {
  start: "end",
  end: "start"
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function(matched) {
    return hash2[matched];
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
function getWindowScroll(node) {
  var win = getWindow(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft,
    scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
function getWindowScrollBarX(element2) {
  return getBoundingClientRect(getDocumentElement(element2)).left + getWindowScroll(element2).scrollLeft;
}

// node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
function getViewportRect(element2, strategy) {
  var win = getWindow(element2);
  var html2 = getDocumentElement(element2);
  var visualViewport = win.visualViewport;
  var width = html2.clientWidth;
  var height = html2.clientHeight;
  var x = 0;
  var y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    var layoutViewport = isLayoutViewport();
    if (layoutViewport || !layoutViewport && strategy === "fixed") {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x + getWindowScrollBarX(element2),
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
function getDocumentRect(element2) {
  var _element$ownerDocumen;
  var html2 = getDocumentElement(element2);
  var winScroll = getWindowScroll(element2);
  var body = (_element$ownerDocumen = element2.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max(html2.scrollWidth, html2.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max(html2.scrollHeight, html2.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + getWindowScrollBarX(element2);
  var y = -winScroll.scrollTop;
  if (getComputedStyle2(body || html2).direction === "rtl") {
    x += max(html2.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
function isScrollParent(element2) {
  var _getComputedStyle = getComputedStyle2(element2), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

// node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
function getScrollParent(node) {
  if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
    return node.ownerDocument.body;
  }
  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }
  return getScrollParent(getParentNode(node));
}

// node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
function listScrollParents(element2, list2) {
  var _element$ownerDocumen;
  if (list2 === void 0) {
    list2 = [];
  }
  var scrollParent = getScrollParent(element2);
  var isBody = scrollParent === ((_element$ownerDocumen = element2.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list2.concat(target);
  return isBody ? updatedList : (
    // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    updatedList.concat(listScrollParents(getParentNode(target)))
  );
}

// node_modules/@popperjs/core/lib/utils/rectToClientRect.js
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
function getInnerBoundingClientRect(element2, strategy) {
  var rect = getBoundingClientRect(element2, false, strategy === "fixed");
  rect.top = rect.top + element2.clientTop;
  rect.left = rect.left + element2.clientLeft;
  rect.bottom = rect.top + element2.clientHeight;
  rect.right = rect.left + element2.clientWidth;
  rect.width = element2.clientWidth;
  rect.height = element2.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
function getClientRectFromMixedType(element2, clippingParent, strategy) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element2, strategy)) : isElement2(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element2)));
}
function getClippingParents(element2) {
  var clippingParents2 = listScrollParents(getParentNode(element2));
  var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle2(element2).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element2) ? getOffsetParent(element2) : element2;
  if (!isElement2(clipperElement)) {
    return [];
  }
  return clippingParents2.filter(function(clippingParent) {
    return isElement2(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
  });
}
function getClippingRect(element2, boundary, rootBoundary, strategy) {
  var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element2) : [].concat(boundary);
  var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents2[0];
  var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element2, clippingParent, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element2, firstClippingParent, strategy));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

// node_modules/@popperjs/core/lib/utils/computeOffsets.js
function computeOffsets(_ref) {
  var reference2 = _ref.reference, element2 = _ref.element, placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference2.x + reference2.width / 2 - element2.width / 2;
  var commonY = reference2.y + reference2.height / 2 - element2.height / 2;
  var offsets;
  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference2.y - element2.height
      };
      break;
    case bottom:
      offsets = {
        x: commonX,
        y: reference2.y + reference2.height
      };
      break;
    case right:
      offsets = {
        x: reference2.x + reference2.width,
        y: commonY
      };
      break;
    case left:
      offsets = {
        x: reference2.x - element2.width,
        y: commonY
      };
      break;
    default:
      offsets = {
        x: reference2.x,
        y: reference2.y
      };
  }
  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
  if (mainAxis != null) {
    var len = mainAxis === "y" ? "height" : "width";
    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element2[len] / 2);
        break;
      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element2[len] / 2);
        break;
      default:
    }
  }
  return offsets;
}

// node_modules/@popperjs/core/lib/utils/detectOverflow.js
function detectOverflow(state, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  var _options = options2, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var popperRect = state.rects.popper;
  var element2 = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement2(element2) ? element2 : element2.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
  var referenceClientRect = getBoundingClientRect(state.elements.reference);
  var popperOffsets2 = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: "absolute",
    placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset;
  if (elementContext === popper && offsetData) {
    var offset2 = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function(key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
      overflowOffsets[key] += offset2[axis] * multiply;
    });
  }
  return overflowOffsets;
}

// node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
function computeAutoPlacement(state, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  var _options = options2, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements2 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
    return getVariation(placement2) === variation;
  }) : basePlacements;
  var allowedPlacements = placements2.filter(function(placement2) {
    return allowedAutoPlacements.indexOf(placement2) >= 0;
  });
  if (allowedPlacements.length === 0) {
    allowedPlacements = placements2;
  }
  var overflows = allowedPlacements.reduce(function(acc, placement2) {
    acc[placement2] = detectOverflow(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding
    })[getBasePlacement(placement2)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function(a, b) {
    return overflows[a] - overflows[b];
  });
}

// node_modules/@popperjs/core/lib/modifiers/flip.js
function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }
  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}
function flip(_ref) {
  var state = _ref.state, options2 = _ref.options, name = _ref.name;
  if (state.modifiersData[name]._skip) {
    return;
  }
  var _options$mainAxis = options2.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options2.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options2.fallbackPlacements, padding = options2.padding, boundary = options2.boundary, rootBoundary = options2.rootBoundary, altBoundary = options2.altBoundary, _options$flipVariatio = options2.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options2.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
    return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding,
      flipVariations,
      allowedAutoPlacements
    }) : placement2);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = /* @__PURE__ */ new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements2[0];
  for (var i = 0; i < placements2.length; i++) {
    var placement = placements2[i];
    var _basePlacement = getBasePlacement(placement);
    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? "width" : "height";
    var overflow = detectOverflow(state, {
      placement,
      boundary,
      rootBoundary,
      altBoundary,
      padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }
    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];
    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }
    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }
    if (checks.every(function(check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }
    checksMap.set(placement, checks);
  }
  if (makeFallbackChecks) {
    var numberOfChecks = flipVariations ? 3 : 1;
    var _loop = function _loop2(_i2) {
      var fittingPlacement = placements2.find(function(placement2) {
        var checks2 = checksMap.get(placement2);
        if (checks2) {
          return checks2.slice(0, _i2).every(function(check) {
            return check;
          });
        }
      });
      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };
    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);
      if (_ret === "break") break;
    }
  }
  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
}
var flip_default = {
  name: "flip",
  enabled: true,
  phase: "main",
  fn: flip,
  requiresIfExists: ["offset"],
  data: {
    _skip: false
  }
};

// node_modules/@popperjs/core/lib/modifiers/hide.js
function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }
  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}
function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function(side) {
    return overflow[side] >= 0;
  });
}
function hide(_ref) {
  var state = _ref.state, name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: "reference"
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets,
    popperEscapeOffsets,
    isReferenceHidden,
    hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-reference-hidden": isReferenceHidden,
    "data-popper-escaped": hasPopperEscaped
  });
}
var hide_default = {
  name: "hide",
  enabled: true,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: hide
};

// node_modules/@popperjs/core/lib/modifiers/offset.js
function distanceAndSkiddingToXY(placement, rects, offset2) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
  var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
    placement
  })) : offset2, skidding = _ref[0], distance = _ref[1];
  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}
function offset(_ref2) {
  var state = _ref2.state, options2 = _ref2.options, name = _ref2.name;
  var _options$offset = options2.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements.reduce(function(acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }
  state.modifiersData[name] = data;
}
var offset_default = {
  name: "offset",
  enabled: true,
  phase: "main",
  requires: ["popperOffsets"],
  fn: offset
};

// node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
function popperOffsets(_ref) {
  var state = _ref.state, name = _ref.name;
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: "absolute",
    placement: state.placement
  });
}
var popperOffsets_default = {
  name: "popperOffsets",
  enabled: true,
  phase: "read",
  fn: popperOffsets,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getAltAxis.js
function getAltAxis(axis) {
  return axis === "x" ? "y" : "x";
}

// node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
function preventOverflow(_ref) {
  var state = _ref.state, options2 = _ref.options, name = _ref.name;
  var _options$mainAxis = options2.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options2.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options2.boundary, rootBoundary = options2.rootBoundary, altBoundary = options2.altBoundary, padding = options2.padding, _options$tether = options2.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options2.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary,
    rootBoundary,
    padding,
    altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
    mainAxis: tetherOffsetValue,
    altAxis: tetherOffsetValue
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, tetherOffsetValue);
  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
  var data = {
    x: 0,
    y: 0
  };
  if (!popperOffsets2) {
    return;
  }
  if (checkMainAxis) {
    var _offsetModifierState$;
    var mainSide = mainAxis === "y" ? top : left;
    var altSide = mainAxis === "y" ? bottom : right;
    var len = mainAxis === "y" ? "height" : "width";
    var offset2 = popperOffsets2[mainAxis];
    var min2 = offset2 + overflow[mainSide];
    var max2 = offset2 - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide];
    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
    var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = offset2 + maxOffset - offsetModifierValue;
    var preventedOffset = within(tether ? min(min2, tetherMin) : min2, offset2, tether ? max(max2, tetherMax) : max2);
    popperOffsets2[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset2;
  }
  if (checkAltAxis) {
    var _offsetModifierState$2;
    var _mainSide = mainAxis === "x" ? top : left;
    var _altSide = mainAxis === "x" ? bottom : right;
    var _offset = popperOffsets2[altAxis];
    var _len = altAxis === "y" ? "height" : "width";
    var _min = _offset + overflow[_mainSide];
    var _max = _offset - overflow[_altSide];
    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
    popperOffsets2[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }
  state.modifiersData[name] = data;
}
var preventOverflow_default = {
  name: "preventOverflow",
  enabled: true,
  phase: "main",
  fn: preventOverflow,
  requiresIfExists: ["offset"]
};

// node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
function getHTMLElementScroll(element2) {
  return {
    scrollLeft: element2.scrollLeft,
    scrollTop: element2.scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
function getNodeScroll(node) {
  if (node === getWindow(node) || !isHTMLElement(node)) {
    return getWindowScroll(node);
  } else {
    return getHTMLElementScroll(node);
  }
}

// node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
function isElementScaled(element2) {
  var rect = element2.getBoundingClientRect();
  var scaleX = round(rect.width) / element2.offsetWidth || 1;
  var scaleY = round(rect.height) / element2.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
}
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
    isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

// node_modules/@popperjs/core/lib/utils/orderModifiers.js
function order(modifiers) {
  var map3 = /* @__PURE__ */ new Map();
  var visited = /* @__PURE__ */ new Set();
  var result = [];
  modifiers.forEach(function(modifier) {
    map3.set(modifier.name, modifier);
  });
  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function(dep) {
      if (!visited.has(dep)) {
        var depModifier = map3.get(dep);
        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }
  modifiers.forEach(function(modifier) {
    if (!visited.has(modifier.name)) {
      sort(modifier);
    }
  });
  return result;
}
function orderModifiers(modifiers) {
  var orderedModifiers = order(modifiers);
  return modifierPhases.reduce(function(acc, phase) {
    return acc.concat(orderedModifiers.filter(function(modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}

// node_modules/@popperjs/core/lib/utils/debounce.js
function debounce3(fn2) {
  var pending;
  return function() {
    if (!pending) {
      pending = new Promise(function(resolve) {
        Promise.resolve().then(function() {
          pending = void 0;
          resolve(fn2());
        });
      });
    }
    return pending;
  };
}

// node_modules/@popperjs/core/lib/utils/mergeByName.js
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function(merged2, current) {
    var existing = merged2[current.name];
    merged2[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged2;
  }, {});
  return Object.keys(merged).map(function(key) {
    return merged[key];
  });
}

// node_modules/@popperjs/core/lib/createPopper.js
var DEFAULT_OPTIONS2 = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return !args.some(function(element2) {
    return !(element2 && typeof element2.getBoundingClientRect === "function");
  });
}
function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }
  var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers3 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS2 : _generatorOptions$def2;
  return function createPopper4(reference2, popper2, options2) {
    if (options2 === void 0) {
      options2 = defaultOptions;
    }
    var state = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS2, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference2,
        popper: popper2
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance2 = {
      state,
      setOptions: function setOptions(setOptionsAction) {
        var options3 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options3);
        state.scrollParents = {
          reference: isElement2(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
          popper: listScrollParents(popper2)
        };
        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers3, state.options.modifiers)));
        state.orderedModifiers = orderedModifiers.filter(function(m) {
          return m.enabled;
        });
        runModifierEffects();
        return instance2.update();
      },
      // Sync update – it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }
        var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
        if (!areValidElements(reference3, popper3)) {
          return;
        }
        state.rects = {
          reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
          popper: getLayoutRect(popper3)
        };
        state.reset = false;
        state.placement = state.options.placement;
        state.orderedModifiers.forEach(function(modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        for (var index3 = 0; index3 < state.orderedModifiers.length; index3++) {
          if (state.reset === true) {
            state.reset = false;
            index3 = -1;
            continue;
          }
          var _state$orderedModifie = state.orderedModifiers[index3], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
          if (typeof fn2 === "function") {
            state = fn2({
              state,
              options: _options,
              name,
              instance: instance2
            }) || state;
          }
        }
      },
      // Async and optimistically optimized update – it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: debounce3(function() {
        return new Promise(function(resolve) {
          instance2.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };
    if (!areValidElements(reference2, popper2)) {
      return instance2;
    }
    instance2.setOptions(options2).then(function(state2) {
      if (!isDestroyed && options2.onFirstUpdate) {
        options2.onFirstUpdate(state2);
      }
    });
    function runModifierEffects() {
      state.orderedModifiers.forEach(function(_ref) {
        var name = _ref.name, _ref$options = _ref.options, options3 = _ref$options === void 0 ? {} : _ref$options, effect4 = _ref.effect;
        if (typeof effect4 === "function") {
          var cleanupFn = effect4({
            state,
            name,
            instance: instance2,
            options: options3
          });
          var noopFn = function noopFn2() {
          };
          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }
    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function(fn2) {
        return fn2();
      });
      effectCleanupFns = [];
    }
    return instance2;
  };
}
var createPopper = popperGenerator();

// node_modules/@popperjs/core/lib/popper-lite.js
var defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default];
var createPopper2 = popperGenerator({
  defaultModifiers
});

// node_modules/@popperjs/core/lib/popper.js
var defaultModifiers2 = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
var createPopper3 = popperGenerator({
  defaultModifiers: defaultModifiers2
});

// node_modules/react-popper/lib/esm/usePopper.js
var import_react_fast_compare2 = __toESM(require_react_fast_compare());
var EMPTY_MODIFIERS = [];
var usePopper = function usePopper2(referenceElement, popperElement, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  var prevOptions = React102.useRef(null);
  var optionsWithDefaults = {
    onFirstUpdate: options2.onFirstUpdate,
    placement: options2.placement || "bottom",
    strategy: options2.strategy || "absolute",
    modifiers: options2.modifiers || EMPTY_MODIFIERS
  };
  var _React$useState = React102.useState({
    styles: {
      popper: {
        position: optionsWithDefaults.strategy,
        left: "0",
        top: "0"
      },
      arrow: {
        position: "absolute"
      }
    },
    attributes: {}
  }), state = _React$useState[0], setState = _React$useState[1];
  var updateStateModifier = React102.useMemo(function() {
    return {
      name: "updateState",
      enabled: true,
      phase: "write",
      fn: function fn2(_ref) {
        var state2 = _ref.state;
        var elements = Object.keys(state2.elements);
        ReactDOM.flushSync(function() {
          setState({
            styles: fromEntries(elements.map(function(element2) {
              return [element2, state2.styles[element2] || {}];
            })),
            attributes: fromEntries(elements.map(function(element2) {
              return [element2, state2.attributes[element2]];
            }))
          });
        });
      },
      requires: ["computeStyles"]
    };
  }, []);
  var popperOptions = React102.useMemo(function() {
    var newOptions = {
      onFirstUpdate: optionsWithDefaults.onFirstUpdate,
      placement: optionsWithDefaults.placement,
      strategy: optionsWithDefaults.strategy,
      modifiers: [].concat(optionsWithDefaults.modifiers, [updateStateModifier, {
        name: "applyStyles",
        enabled: false
      }])
    };
    if ((0, import_react_fast_compare2.default)(prevOptions.current, newOptions)) {
      return prevOptions.current || newOptions;
    } else {
      prevOptions.current = newOptions;
      return newOptions;
    }
  }, [optionsWithDefaults.onFirstUpdate, optionsWithDefaults.placement, optionsWithDefaults.strategy, optionsWithDefaults.modifiers, updateStateModifier]);
  var popperInstanceRef = React102.useRef();
  useIsomorphicLayoutEffect(function() {
    if (popperInstanceRef.current) {
      popperInstanceRef.current.setOptions(popperOptions);
    }
  }, [popperOptions]);
  useIsomorphicLayoutEffect(function() {
    if (referenceElement == null || popperElement == null) {
      return;
    }
    var createPopper4 = options2.createPopper || createPopper3;
    var popperInstance = createPopper4(referenceElement, popperElement, popperOptions);
    popperInstanceRef.current = popperInstance;
    return function() {
      popperInstance.destroy();
      popperInstanceRef.current = null;
    };
  }, [referenceElement, popperElement, options2.createPopper]);
  return {
    state: popperInstanceRef.current ? popperInstanceRef.current.state : null,
    styles: state.styles,
    attributes: state.attributes,
    update: popperInstanceRef.current ? popperInstanceRef.current.update : null,
    forceUpdate: popperInstanceRef.current ? popperInstanceRef.current.forceUpdate : null
  };
};

// node_modules/react-popper/lib/esm/Reference.js
var React104 = __toESM(require_react());
var import_warning = __toESM(require_warning());

// node_modules/stream-chat-react/dist/components/Dialog/DialogAnchor.js
function useDialogAnchor({ open, placement, referenceElement }) {
  const [popperElement, setPopperElement] = (0, import_react182.useState)(null);
  const { attributes, styles, update } = usePopper(referenceElement, popperElement, {
    modifiers: [
      {
        name: "eventListeners",
        options: {
          // It's not safe to update popper position on resize and scroll, since popper's
          // reference element might not be visible at the time.
          resize: false,
          scroll: false
        }
      }
    ],
    placement
  });
  (0, import_react182.useEffect)(() => {
    if (open && popperElement) {
      update == null ? void 0 : update();
    }
  }, [open, popperElement, update]);
  if (popperElement && !open) {
    setPopperElement(null);
  }
  return {
    attributes,
    setPopperElement,
    styles
  };
}
var DialogAnchor = ({ children, className, focus = true, id, placement = "auto", referenceElement = null, trapFocus, ...restDivProps }) => {
  const dialog = useDialog({ id });
  const open = useDialogIsOpen(id);
  const { attributes, setPopperElement, styles } = useDialogAnchor({
    open,
    placement,
    referenceElement
  });
  (0, import_react182.useEffect)(() => {
    if (!open)
      return;
    const hideOnEscape = (event) => {
      if (event.key !== "Escape")
        return;
      dialog == null ? void 0 : dialog.close();
    };
    document.addEventListener("keyup", hideOnEscape);
    return () => {
      document.removeEventListener("keyup", hideOnEscape);
    };
  }, [dialog, open]);
  if (!open) {
    return null;
  }
  return import_react182.default.createElement(
    DialogPortalEntry,
    { dialogId: id },
    import_react182.default.createElement(
      $9bf71ea28793e738$export$20e40289641fbbb6,
      { autoFocus: focus, contain: trapFocus, restoreFocus: true },
      import_react182.default.createElement("div", { ...restDivProps, ...attributes.popper, className: clsx_default("str-chat__dialog-contents", className), "data-testid": "str-chat__dialog-contents", ref: setPopperElement, style: styles.popper, tabIndex: 0 }, children)
    )
  );
};

// node_modules/stream-chat-react/dist/components/MessageActions/MessageActions.js
var MessageActions = (props) => {
  const { ActionsIcon: ActionsIcon2 = ActionsIcon, customWrapperClass = "", getMessageActions: propGetMessageActions, handleDelete: propHandleDelete, handleFlag: propHandleFlag, handleMarkUnread: propHandleMarkUnread, handleMute: propHandleMute, handlePin: propHandlePin, inline, message: propMessage, mine } = props;
  const { mutes } = useChatContext("MessageActions");
  const { customMessageActions, getMessageActions: contextGetMessageActions, handleDelete: contextHandleDelete, handleFlag: contextHandleFlag, handleMarkUnread: contextHandleMarkUnread, handleMute: contextHandleMute, handlePin: contextHandlePin, isMyMessage, message: contextMessage, setEditingState, threadList } = useMessageContext("MessageActions");
  const { CustomMessageActionsList: CustomMessageActionsList2 } = useComponentContext("MessageActions");
  const { t: t2 } = useTranslationContext("MessageActions");
  const getMessageActions2 = propGetMessageActions || contextGetMessageActions;
  const handleDelete2 = propHandleDelete || contextHandleDelete;
  const handleFlag = propHandleFlag || contextHandleFlag;
  const handleMarkUnread = propHandleMarkUnread || contextHandleMarkUnread;
  const handleMute = propHandleMute || contextHandleMute;
  const handlePin = propHandlePin || contextHandlePin;
  const message = propMessage || contextMessage;
  const isMine = mine ? mine() : isMyMessage();
  const isMuted = (0, import_react183.useCallback)(() => isUserMuted(message, mutes), [message, mutes]);
  const dialogId = `message-actions--${message.id}`;
  const dialog = useDialog({ id: dialogId });
  const dialogIsOpen = useDialogIsOpen(dialogId);
  const messageActions = getMessageActions2();
  const renderMessageActions = shouldRenderMessageActions({
    customMessageActions,
    CustomMessageActionsList: CustomMessageActionsList2,
    inThread: threadList,
    messageActions
  });
  const actionsBoxButtonRef = (0, import_react183.useRef)(null);
  if (!renderMessageActions)
    return null;
  return import_react183.default.createElement(
    MessageActionsWrapper,
    { customWrapperClass, inline, toggleOpen: dialog == null ? void 0 : dialog.toggle },
    import_react183.default.createElement(
      DialogAnchor,
      { id: dialogId, placement: isMine ? "top-end" : "top-start", referenceElement: actionsBoxButtonRef.current, trapFocus: true },
      import_react183.default.createElement(MessageActionsBox, { getMessageActions: getMessageActions2, handleDelete: handleDelete2, handleEdit: setEditingState, handleFlag, handleMarkUnread, handleMute, handlePin, isUserMuted: isMuted, mine: isMine, open: dialogIsOpen })
    ),
    import_react183.default.createElement(
      "button",
      { "aria-expanded": dialogIsOpen, "aria-haspopup": "true", "aria-label": t2("aria/Open Message Actions Menu"), className: "str-chat__message-actions-box-button", "data-testid": "message-actions-toggle-button", ref: actionsBoxButtonRef },
      import_react183.default.createElement(ActionsIcon2, { className: "str-chat__message-action-icon" })
    )
  );
};
var MessageActionsWrapper = (props) => {
  const { children, customWrapperClass, inline, toggleOpen } = props;
  const defaultWrapperClass = clsx_default("str-chat__message-simple__actions__action", "str-chat__message-simple__actions__action--options", "str-chat__message-actions-container");
  const wrapperProps = {
    className: customWrapperClass || defaultWrapperClass,
    "data-testid": "message-actions",
    onClick: toggleOpen
  };
  if (inline)
    return import_react183.default.createElement("span", { ...wrapperProps }, children);
  return import_react183.default.createElement("div", { ...wrapperProps }, children);
};

// node_modules/stream-chat-react/dist/components/Reactions/ReactionSelectorWithButton.js
var import_react188 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Reactions/ReactionSelector.js
var import_react187 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Reactions/reactionOptions.js
var import_react186 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Reactions/StreamEmoji.js
var import_react185 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Reactions/SpriteImage.js
var import_react184 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Reactions/utils/utils.js
var isMutableRef = (ref) => {
  if (ref) {
    return ref.current !== void 0;
  }
  return false;
};
var getImageDimensions = (source) => new Promise((resolve, reject) => {
  const image2 = new Image();
  image2.addEventListener("load", () => {
    resolve([image2.width, image2.height]);
  }, { once: true });
  image2.addEventListener("error", () => reject(`Couldn't load image from ${source}`), {
    once: true
  });
  image2.src = source;
});

// node_modules/stream-chat-react/dist/components/Reactions/SpriteImage.js
var SpriteImage = ({ columns, fallback, height, position, rows, spriteUrl, style, width }) => {
  const [[spriteWidth, spriteHeight], setSpriteDimensions] = (0, import_react184.useState)([0, 0]);
  (0, import_react184.useEffect)(() => {
    getImageDimensions(spriteUrl).then(setSpriteDimensions).catch(console.error);
  }, [spriteUrl]);
  const [x, y] = position;
  if (!spriteHeight || !spriteWidth)
    return import_react184.default.createElement(import_react184.default.Fragment, null, fallback);
  return import_react184.default.createElement("div", { "data-testid": "sprite-image", style: {
    ...style,
    "--str-chat__sprite-image-resize-ratio": "var(--str-chat__sprite-image-resize-ratio-x, var(--str-chat__sprite-image-resize-ratio-y, 1))",
    "--str-chat__sprite-image-resize-ratio-x": "calc(var(--str-chat__sprite-image-width) / var(--str-chat__sprite-item-width))",
    "--str-chat__sprite-image-resize-ratio-y": "calc(var(--str-chat__sprite-image-height) / var(--str-chat__sprite-item-height))",
    "--str-chat__sprite-item-height": `${spriteHeight / rows}`,
    "--str-chat__sprite-item-width": `${spriteWidth / columns}`,
    ...Number.isFinite(height) ? { "--str-chat__sprite-image-height": `${height}px` } : {},
    ...Number.isFinite(width) ? { "--str-chat__sprite-image-width": `${width}px` } : {},
    backgroundImage: `url('${spriteUrl}')`,
    backgroundPosition: `${x * (100 / (columns - 1))}% ${y * (100 / (rows - 1))}%`,
    backgroundSize: `${columns * 100}% ${rows * 100}%`,
    height: "var(--str-chat__sprite-image-height, calc(var(--str-chat__sprite-item-height) * var(--str-chat__sprite-image-resize-ratio)))",
    width: "var(--str-chat__sprite-image-width, calc(var(--str-chat__sprite-item-width) * var(--str-chat__sprite-image-resize-ratio)))"
  } });
};

// node_modules/stream-chat-react/dist/components/Reactions/StreamEmoji.js
var StreamSpriteEmojiPositions = {
  angry: [1, 1],
  haha: [1, 0],
  like: [0, 0],
  love: [1, 2],
  sad: [0, 1],
  wow: [0, 2]
};
var STREAM_SPRITE_URL = "https://getstream.imgix.net/images/emoji-sprite.png";
var StreamEmoji = ({ fallback, type }) => {
  const position = StreamSpriteEmojiPositions[type];
  return import_react185.default.createElement(SpriteImage, { columns: 2, fallback, position, rows: 3, spriteUrl: STREAM_SPRITE_URL, style: {
    "--str-chat__sprite-image-height": "var(--str-chat__stream-emoji-size, 18px)"
  } });
};

// node_modules/stream-chat-react/dist/components/Reactions/reactionOptions.js
var defaultReactionOptions = [
  {
    type: "haha",
    Component: () => import_react186.default.createElement(StreamEmoji, { fallback: "😂", type: "haha" }),
    name: "Joy"
  },
  {
    type: "like",
    Component: () => import_react186.default.createElement(StreamEmoji, { fallback: "👍", type: "like" }),
    name: "Thumbs up"
  },
  {
    type: "love",
    Component: () => import_react186.default.createElement(StreamEmoji, { fallback: "❤️", type: "love" }),
    name: "Heart"
  },
  { type: "sad", Component: () => import_react186.default.createElement(StreamEmoji, { fallback: "😔", type: "sad" }), name: "Sad" },
  {
    type: "wow",
    Component: () => import_react186.default.createElement(StreamEmoji, { fallback: "😲", type: "wow" }),
    name: "Astonished"
  }
];

// node_modules/stream-chat-react/dist/components/Reactions/ReactionSelector.js
var UnMemoizedReactionSelector = (props) => {
  var _a;
  const { Avatar: propAvatar, detailedView = true, handleReaction: propHandleReaction, latest_reactions: propLatestReactions, own_reactions: propOwnReactions, reaction_groups: propReactionGroups, reactionOptions: propReactionOptions, reverse = false } = props;
  const { Avatar: contextAvatar, reactionOptions: contextReactionOptions = defaultReactionOptions } = useComponentContext("ReactionSelector");
  const { closeReactionSelectorOnClick, handleReaction: contextHandleReaction, message } = useMessageContext("ReactionSelector");
  const dialogId = `reaction-selector--${message.id}`;
  const dialog = useDialog({ id: dialogId });
  const reactionOptions = propReactionOptions ?? contextReactionOptions;
  const Avatar2 = propAvatar || contextAvatar || Avatar;
  const handleReaction = propHandleReaction || contextHandleReaction;
  const latestReactions = propLatestReactions || (message == null ? void 0 : message.latest_reactions) || [];
  const ownReactions = propOwnReactions || (message == null ? void 0 : message.own_reactions) || [];
  const reactionGroups = propReactionGroups || (message == null ? void 0 : message.reaction_groups) || {};
  const [tooltipReactionType, setTooltipReactionType] = (0, import_react187.useState)(null);
  const [tooltipPositions, setTooltipPositions] = (0, import_react187.useState)(null);
  const rootRef = (0, import_react187.useRef)(null);
  const targetRef = (0, import_react187.useRef)(null);
  const tooltipRef = (0, import_react187.useRef)(null);
  const showTooltip = (0, import_react187.useCallback)((event, reactionType) => {
    targetRef.current = event.currentTarget;
    setTooltipReactionType(reactionType);
  }, []);
  const hideTooltip = (0, import_react187.useCallback)(() => {
    setTooltipReactionType(null);
    setTooltipPositions(null);
  }, []);
  (0, import_react187.useEffect)(() => {
    var _a2, _b, _c;
    if (!tooltipReactionType || !rootRef.current)
      return;
    const tooltip = (_a2 = tooltipRef.current) == null ? void 0 : _a2.getBoundingClientRect();
    const target = (_b = targetRef.current) == null ? void 0 : _b.getBoundingClientRect();
    const container = isMutableRef(rootRef) ? (_c = rootRef.current) == null ? void 0 : _c.getBoundingClientRect() : null;
    if (!tooltip || !target || !container)
      return;
    const tooltipPosition = tooltip.width === container.width || tooltip.x < container.x ? 0 : target.left + target.width / 2 - container.left - tooltip.width / 2;
    const arrowPosition = target.x - tooltip.x + target.width / 2 - tooltipPosition;
    setTooltipPositions({
      arrow: arrowPosition,
      tooltip: tooltipPosition
    });
  }, [tooltipReactionType, rootRef]);
  const getUsersPerReactionType = (type) => latestReactions.map((reaction) => {
    var _a2, _b;
    if (reaction.type === type) {
      return ((_a2 = reaction.user) == null ? void 0 : _a2.name) || ((_b = reaction.user) == null ? void 0 : _b.id);
    }
    return null;
  }).filter(Boolean);
  const iHaveReactedWithReaction = (reactionType) => ownReactions.find((reaction) => reaction.type === reactionType);
  const getLatestUserForReactionType = (type) => {
    var _a2;
    return ((_a2 = latestReactions.find((reaction) => reaction.type === type && !!reaction.user)) == null ? void 0 : _a2.user) || void 0;
  };
  return import_react187.default.createElement(
    "div",
    { className: clsx_default("str-chat__reaction-selector str-chat__message-reaction-selector str-chat-react__message-reaction-selector", {
      "str-chat__reaction-selector--reverse": reverse
    }), "data-testid": "reaction-selector", ref: rootRef },
    !!tooltipReactionType && detailedView && import_react187.default.createElement(
      "div",
      { className: "str-chat__reaction-selector-tooltip", ref: tooltipRef, style: {
        left: tooltipPositions == null ? void 0 : tooltipPositions.tooltip,
        visibility: tooltipPositions ? "visible" : "hidden"
      } },
      import_react187.default.createElement("div", { className: "arrow", style: { left: tooltipPositions == null ? void 0 : tooltipPositions.arrow } }),
      (_a = getUsersPerReactionType(tooltipReactionType)) == null ? void 0 : _a.map((user, i, users) => import_react187.default.createElement("span", { className: "latest-user-username", key: `key-${i}-${user}` }, `${user}${i < users.length - 1 ? ", " : ""}`))
    ),
    import_react187.default.createElement("ul", { className: "str-chat__message-reactions-list str-chat__message-reactions-options" }, reactionOptions.map(({ Component: Component2, name: reactionName, type: reactionType }) => {
      var _a2;
      const latestUser = getLatestUserForReactionType(reactionType);
      const count = ((_a2 = reactionGroups[reactionType]) == null ? void 0 : _a2.count) ?? 0;
      return import_react187.default.createElement(
        "li",
        { key: reactionType },
        import_react187.default.createElement(
          "button",
          { "aria-label": `Select Reaction: ${reactionName || reactionType}`, className: clsx_default("str-chat__message-reactions-list-item str-chat__message-reactions-option", {
            "str-chat__message-reactions-option-selected": iHaveReactedWithReaction(reactionType)
          }), "data-testid": "select-reaction-button", "data-text": reactionType, onClick: (event) => {
            handleReaction(reactionType, event);
            if (closeReactionSelectorOnClick) {
              dialog.close();
            }
          } },
          !!count && detailedView && import_react187.default.createElement("div", { className: "latest-user str-chat__message-reactions-last-user", onClick: hideTooltip, onMouseEnter: (e) => showTooltip(e, reactionType), onMouseLeave: hideTooltip }, latestUser ? import_react187.default.createElement(Avatar2, { image: latestUser.image, name: latestUser.name, size: 20, user: latestUser }) : import_react187.default.createElement("div", { className: "latest-user-not-found" })),
          import_react187.default.createElement(
            "span",
            { className: "str-chat__message-reaction-emoji" },
            import_react187.default.createElement(Component2, null)
          ),
          Boolean(count) && detailedView && import_react187.default.createElement("span", { className: "str-chat__message-reactions-list-item__count" }, count || "")
        )
      );
    }))
  );
};
var ReactionSelector = import_react187.default.memo(UnMemoizedReactionSelector);

// node_modules/stream-chat-react/dist/components/Reactions/ReactionSelectorWithButton.js
var ReactionSelectorWithButton = ({ ReactionIcon: ReactionIcon2 }) => {
  const { t: t2 } = useTranslationContext("ReactionSelectorWithButton");
  const { isMyMessage, message } = useMessageContext("MessageOptions");
  const { ReactionSelector: ReactionSelector2 = ReactionSelector } = useComponentContext("MessageOptions");
  const buttonRef = (0, import_react188.useRef)(null);
  const dialogId = `reaction-selector--${message.id}`;
  const dialog = useDialog({ id: dialogId });
  const dialogIsOpen = useDialogIsOpen(dialogId);
  return import_react188.default.createElement(
    import_react188.default.Fragment,
    null,
    import_react188.default.createElement(
      DialogAnchor,
      { id: dialogId, placement: isMyMessage() ? "top-end" : "top-start", referenceElement: buttonRef.current, trapFocus: true },
      import_react188.default.createElement(ReactionSelector2, null)
    ),
    import_react188.default.createElement(
      "button",
      { "aria-expanded": dialogIsOpen, "aria-label": t2("aria/Open Reaction Selector"), className: "str-chat__message-reactions-button", "data-testid": "message-reaction-action", onClick: () => dialog == null ? void 0 : dialog.toggle(), ref: buttonRef },
      import_react188.default.createElement(ReactionIcon2, { className: "str-chat__message-action-icon" })
    )
  );
};

// node_modules/stream-chat-react/dist/components/Message/MessageOptions.js
var UnMemoizedMessageOptions = (props) => {
  const { ActionsIcon: ActionsIcon2 = ActionsIcon, displayReplies = true, handleOpenThread: propHandleOpenThread, ReactionIcon: ReactionIcon2 = ReactionIcon, theme = "simple", ThreadIcon: ThreadIcon2 = ThreadIcon } = props;
  const { getMessageActions: getMessageActions2, handleOpenThread: contextHandleOpenThread, initialMessage, message, threadList } = useMessageContext("MessageOptions");
  const { t: t2 } = useTranslationContext("MessageOptions");
  const messageActionsDialogIsOpen = useDialogIsOpen(`message-actions--${message.id}`);
  const reactionSelectorDialogIsOpen = useDialogIsOpen(`reaction-selector--${message.id}`);
  const handleOpenThread = propHandleOpenThread || contextHandleOpenThread;
  const messageActions = getMessageActions2();
  const shouldShowReactions = messageActions.indexOf(MESSAGE_ACTIONS.react) > -1;
  const shouldShowReplies = messageActions.indexOf(MESSAGE_ACTIONS.reply) > -1 && displayReplies && !threadList;
  if (!message.type || message.type === "error" || message.type === "system" || message.type === "ephemeral" || message.status === "failed" || message.status === "sending" || initialMessage) {
    return null;
  }
  return import_react189.default.createElement(
    "div",
    { className: clsx_default(`str-chat__message-${theme}__actions str-chat__message-options`, {
      "str-chat__message-options--active": messageActionsDialogIsOpen || reactionSelectorDialogIsOpen
    }), "data-testid": "message-options" },
    import_react189.default.createElement(MessageActions, { ActionsIcon: ActionsIcon2 }),
    shouldShowReplies && import_react189.default.createElement(
      "button",
      { "aria-label": t2("aria/Open Thread"), className: `str-chat__message-${theme}__actions__action str-chat__message-${theme}__actions__action--thread str-chat__message-reply-in-thread-button`, "data-testid": "thread-action", onClick: handleOpenThread },
      import_react189.default.createElement(ThreadIcon2, { className: "str-chat__message-action-icon" })
    ),
    shouldShowReactions && import_react189.default.createElement(ReactionSelectorWithButton, { ReactionIcon: ReactionIcon2 })
  );
};
var MessageOptions = import_react189.default.memo(UnMemoizedMessageOptions);

// node_modules/stream-chat-react/dist/components/Message/MessageRepliesCountButton.js
var import_react190 = __toESM(require_react());
var UnMemoizedMessageRepliesCountButton = (props) => {
  const { labelPlural, labelSingle, onClick, reply_count = 0 } = props;
  const { t: t2 } = useTranslationContext("MessageRepliesCountButton");
  if (!reply_count)
    return null;
  let replyCountText = t2("replyCount", { count: reply_count });
  if (labelPlural && reply_count > 1) {
    replyCountText = `${reply_count} ${labelPlural}`;
  } else if (labelSingle) {
    replyCountText = `1 ${labelSingle}`;
  }
  return import_react190.default.createElement(
    "div",
    { className: "str-chat__message-replies-count-button-wrapper" },
    import_react190.default.createElement("button", { className: "str-chat__message-replies-count-button", "data-testid": "replies-count-button", onClick }, replyCountText)
  );
};
var MessageRepliesCountButton = import_react190.default.memo(UnMemoizedMessageRepliesCountButton);

// node_modules/stream-chat-react/dist/components/Message/MessageStatus.js
var import_react193 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Tooltip/Tooltip.js
var import_react191 = __toESM(require_react());
var Tooltip = ({ children, ...rest }) => import_react191.default.createElement("div", { className: "str-chat__tooltip", ...rest }, children);
var PopperTooltip = ({ children, offset: offset2 = [0, 10], placement = "top", referenceElement, visible = false }) => {
  const [popperElement, setPopperElement] = (0, import_react191.useState)(null);
  const { attributes, styles } = usePopper(referenceElement, popperElement, {
    modifiers: [
      {
        name: "offset",
        options: {
          offset: offset2
        }
      }
    ],
    placement
  });
  if (!visible)
    return null;
  return import_react191.default.createElement("div", { className: "str-chat__tooltip", ref: setPopperElement, style: styles.popper, ...attributes.popper }, children);
};

// node_modules/stream-chat-react/dist/components/Tooltip/hooks/useEnterLeaveHandlers.js
var import_react192 = __toESM(require_react());
var useEnterLeaveHandlers = ({ onMouseEnter, onMouseLeave } = {}) => {
  const [tooltipVisible, setTooltipVisible] = (0, import_react192.useState)(false);
  const handleEnter = (0, import_react192.useCallback)((e) => {
    setTooltipVisible(true);
    onMouseEnter == null ? void 0 : onMouseEnter(e);
  }, [onMouseEnter]);
  const handleLeave = (0, import_react192.useCallback)((e) => {
    setTooltipVisible(false);
    onMouseLeave == null ? void 0 : onMouseLeave(e);
  }, [onMouseLeave]);
  return { handleEnter, handleLeave, tooltipVisible };
};

// node_modules/stream-chat-react/dist/components/Message/MessageStatus.js
var UnMemoizedMessageStatus = (props) => {
  var _a;
  const { Avatar: propAvatar, MessageDeliveredStatus, MessageReadStatus, MessageSendingStatus, messageType = "simple", tooltipUserNameMapper = mapToUserNameOrId } = props;
  const { handleEnter, handleLeave, tooltipVisible } = useEnterLeaveHandlers();
  const { client } = useChatContext("MessageStatus");
  const { Avatar: contextAvatar } = useComponentContext("MessageStatus");
  const { isMyMessage, lastReceivedId, message, readBy, threadList } = useMessageContext("MessageStatus");
  const { t: t2 } = useTranslationContext("MessageStatus");
  const [referenceElement, setReferenceElement] = (0, import_react193.useState)(null);
  const Avatar2 = propAvatar || contextAvatar || Avatar;
  if (!isMyMessage() || message.type === "error")
    return null;
  const justReadByMe = (readBy == null ? void 0 : readBy.length) === 1 && readBy[0].id === ((_a = client.user) == null ? void 0 : _a.id);
  const rootClassName2 = `str-chat__message-${messageType}-status str-chat__message-status`;
  const sending = message.status === "sending";
  const delivered = message.status === "received" && message.id === lastReceivedId && !threadList;
  const deliveredAndRead = !!((readBy == null ? void 0 : readBy.length) && !threadList && !justReadByMe);
  const readersWithoutOwnUser = deliveredAndRead ? readBy.filter((item) => {
    var _a2;
    return item.id !== ((_a2 = client.user) == null ? void 0 : _a2.id);
  }) : [];
  const [lastReadUser] = readersWithoutOwnUser;
  return import_react193.default.createElement(
    "span",
    { className: rootClassName2, "data-testid": clsx_default({
      "message-status-read-by": deliveredAndRead,
      "message-status-received": delivered && !deliveredAndRead,
      "message-status-sending": sending
    }), onMouseEnter: handleEnter, onMouseLeave: handleLeave, ref: setReferenceElement },
    sending && (MessageSendingStatus ? import_react193.default.createElement(MessageSendingStatus, null) : import_react193.default.createElement(
      import_react193.default.Fragment,
      null,
      import_react193.default.createElement(PopperTooltip, { offset: [0, 5], referenceElement, visible: tooltipVisible }, t2("Sending...")),
      import_react193.default.createElement(LoadingIndicator, null)
    )),
    delivered && !deliveredAndRead && (MessageDeliveredStatus ? import_react193.default.createElement(MessageDeliveredStatus, null) : import_react193.default.createElement(
      import_react193.default.Fragment,
      null,
      import_react193.default.createElement(PopperTooltip, { offset: [0, 5], referenceElement, visible: tooltipVisible }, t2("Delivered")),
      import_react193.default.createElement(MessageDeliveredIcon, null)
    )),
    deliveredAndRead && (MessageReadStatus ? import_react193.default.createElement(MessageReadStatus, null) : import_react193.default.createElement(
      import_react193.default.Fragment,
      null,
      import_react193.default.createElement(PopperTooltip, { offset: [0, 5], referenceElement, visible: tooltipVisible }, getReadByTooltipText(readBy, t2, client, tooltipUserNameMapper)),
      import_react193.default.createElement(Avatar2, { className: "str-chat__avatar--message-status", image: lastReadUser.image, name: lastReadUser.name || lastReadUser.id, user: lastReadUser }),
      readersWithoutOwnUser.length > 1 && import_react193.default.createElement("span", { className: `str-chat__message-${messageType}-status-number`, "data-testid": "message-status-read-by-many" }, readersWithoutOwnUser.length)
    ))
  );
};
var MessageStatus = import_react193.default.memo(UnMemoizedMessageStatus);

// node_modules/stream-chat-react/dist/components/Message/MessageText.js
var import_react228 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Message/QuotedMessage.js
var import_react226 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Poll/Poll.js
var import_react220 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Poll/PollContent.js
var import_react218 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Poll/PollHeader.js
var import_react194 = __toESM(require_react());
var pollStateSelector = (nextValue) => ({
  enforce_unique_vote: nextValue.enforce_unique_vote,
  is_closed: nextValue.is_closed,
  max_votes_allowed: nextValue.max_votes_allowed,
  name: nextValue.name,
  options: nextValue.options
});
var PollHeader = () => {
  const { t: t2 } = useTranslationContext("PollHeader");
  const { poll } = usePollContext();
  const { enforce_unique_vote, is_closed, max_votes_allowed, name, options: options2 } = useStateStore(poll.state, pollStateSelector);
  const selectionInstructions = (0, import_react194.useMemo)(() => {
    if (is_closed)
      return t2("Vote ended");
    if (enforce_unique_vote || options2.length === 1)
      return t2("Select one");
    if (max_votes_allowed)
      return t2("Select up to {{count}}", {
        count: max_votes_allowed > options2.length ? options2.length : max_votes_allowed
      });
    if (options2.length > 1)
      return t2("Select one or more");
    return "";
  }, [is_closed, enforce_unique_vote, max_votes_allowed, options2.length, t2]);
  if (!name)
    return;
  return import_react194.default.createElement(
    "div",
    { className: "str-chat__poll-header" },
    import_react194.default.createElement("div", { className: "str-chat__poll-title" }, name),
    import_react194.default.createElement("div", { className: "str-chat__poll-subtitle" }, selectionInstructions)
  );
};

// node_modules/stream-chat-react/dist/components/Poll/PollActions/AddCommentForm.js
var import_react197 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Dialog/FormDialog.js
var import_react196 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Form/FieldError.js
var import_react195 = __toESM(require_react());
var FieldError = ({ className, text: text3, ...props }) => import_react195.default.createElement("div", { ...props, className: clsx_default("str-chat__form-field-error", className) }, text3);

// node_modules/stream-chat-react/dist/components/Dialog/FormDialog.js
var FormDialog = ({ className, close, fields, onSubmit, shouldDisableSubmitButton, title }) => {
  const { t: t2 } = useTranslationContext();
  const [fieldErrors, setFieldErrors] = (0, import_react196.useState)({});
  const [value, setValue] = (0, import_react196.useState)(() => {
    let acc = {};
    for (const [id, config] of Object.entries(fields)) {
      acc = { ...acc, [id]: config.props.value };
    }
    return acc;
  });
  const handleChange = (0, import_react196.useCallback)((event) => {
    var _a;
    const fieldId = event.target.id;
    const fieldConfig = fields[fieldId];
    if (!fieldConfig)
      return;
    const error2 = (_a = fieldConfig.validator) == null ? void 0 : _a.call(fieldConfig, event.target.value);
    if (error2) {
      setFieldErrors((prev) => ({ [fieldId]: error2, ...prev }));
    } else {
      setFieldErrors((prev) => {
        delete prev[fieldId];
        return prev;
      });
    }
    setValue((prev) => ({ ...prev, [fieldId]: event.target.value }));
    if (!fieldConfig.props.onChange)
      return;
    if (fieldConfig.element === "input") {
      fieldConfig.props.onChange(event);
    } else if (fieldConfig.element === "textarea") {
      fieldConfig.props.onChange(event);
    }
  }, [fields]);
  const handleSubmit = async () => {
    var _a, _b;
    if (!Object.keys(value).length)
      return;
    const errors = {};
    for (const [id, fieldValue] of Object.entries(value)) {
      const thisFieldError = (_b = (_a = fields[id]).validator) == null ? void 0 : _b.call(_a, fieldValue);
      if (thisFieldError) {
        errors[id] = thisFieldError;
      }
    }
    if (Object.keys(errors).length) {
      setFieldErrors(errors);
      return;
    }
    await onSubmit(value);
    close();
  };
  return import_react196.default.createElement(
    "div",
    { className: clsx_default("str-chat__dialog str-chat__dialog--form", className) },
    import_react196.default.createElement(
      "div",
      { className: "str-chat__dialog__body" },
      title && import_react196.default.createElement("div", { className: "str-chat__dialog__title" }, title),
      import_react196.default.createElement(
        "form",
        { autoComplete: "off", onSubmit: (e) => {
          e.preventDefault();
          handleSubmit();
        } },
        Object.entries(fields).map(([id, fieldConfig]) => {
          var _a;
          return import_react196.default.createElement(
            "div",
            { className: "str-chat__dialog__field", key: `dialog-field-${id}` },
            fieldConfig.label && import_react196.default.createElement("label", { className: clsx_default(`str-chat__dialog__title str-chat__dialog__title--${id}`), htmlFor: id }, fieldConfig.label),
            import_react196.default.createElement(fieldConfig.element, {
              id,
              ...fieldConfig.props,
              onChange: handleChange,
              value: value[id]
            }),
            import_react196.default.createElement(FieldError, { text: (_a = fieldErrors[id]) == null ? void 0 : _a.message })
          );
        }),
        import_react196.default.createElement(
          "div",
          { className: "str-chat__dialog__controls" },
          import_react196.default.createElement("button", { className: "str-chat__dialog__controls-button str-chat__dialog__controls-button--cancel", onClick: close }, t2("Cancel")),
          import_react196.default.createElement("button", { className: "str-chat__dialog__controls-button str-chat__dialog__controls-button--submit", disabled: Object.keys(fieldErrors).length > 0 || (shouldDisableSubmitButton == null ? void 0 : shouldDisableSubmitButton(value)), type: "submit" }, t2("Send"))
        )
      )
    )
  );
};

// node_modules/stream-chat-react/dist/components/Poll/PollActions/AddCommentForm.js
var pollStateSelector2 = (nextValue) => ({ ownAnswer: nextValue.ownAnswer });
var AddCommentForm = ({ close, messageId }) => {
  const { t: t2 } = useTranslationContext("AddCommentForm");
  const { poll } = usePollContext();
  const { ownAnswer } = useStateStore(poll.state, pollStateSelector2);
  return import_react197.default.createElement(FormDialog, { className: "str-chat__prompt-dialog str-chat__modal__poll-add-comment", close, fields: {
    comment: {
      element: "input",
      props: {
        id: "comment",
        name: "comment",
        required: true,
        type: "text",
        value: (ownAnswer == null ? void 0 : ownAnswer.answer_text) ?? ""
      }
    }
  }, onSubmit: async (value) => {
    await poll.addAnswer(value.comment, messageId);
  }, shouldDisableSubmitButton: (value) => !value.comment || value.comment === (ownAnswer == null ? void 0 : ownAnswer.answer_text), title: ownAnswer ? t2("Update your comment") : t2("Add a comment") });
};

// node_modules/stream-chat-react/dist/components/Dialog/PromptDialog.js
var import_react198 = __toESM(require_react());
var PromptDialog = ({ actions, className, prompt, title }) => import_react198.default.createElement(
  "div",
  { className: clsx_default("str-chat__dialog str-chat__dialog--prompt", className) },
  import_react198.default.createElement(
    "div",
    { className: "str-chat__dialog__body" },
    title && import_react198.default.createElement("div", { className: "str-chat__dialog__title" }, title),
    import_react198.default.createElement("div", { className: "str-chat__dialog__prompt" }, prompt)
  ),
  import_react198.default.createElement("div", { className: "str-chat__dialog__controls" }, actions.map(({ className: className2, ...props }, i) => import_react198.default.createElement("button", { className: clsx_default(`str-chat__dialog__controls-button`, className2), key: `prompt-dialog__controls-button--${i}`, ...props })))
);

// node_modules/stream-chat-react/dist/components/Poll/PollActions/EndPollDialog.js
var import_react199 = __toESM(require_react());
var EndPollDialog = ({ close }) => {
  const { t: t2 } = useTranslationContext("SuggestPollOptionForm");
  const { poll } = usePollContext();
  return import_react199.default.createElement(PromptDialog, { actions: [
    {
      children: t2("Cancel"),
      className: "str-chat__dialog__controls-button--cancel",
      onClick: close
    },
    {
      children: t2("End"),
      className: ".str-chat__dialog__controls-button--submit str-chat__dialog__controls-button--end-poll",
      onClick: poll.close
    }
  ], className: "str-chat__modal__end-vote", prompt: t2("Nobody will be able to vote in this poll anymore."), title: t2("End vote") });
};

// node_modules/stream-chat-react/dist/components/Poll/PollActions/PollActions.js
var import_react217 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Poll/PollActions/PollAction.js
var import_react200 = __toESM(require_react());
var PollAction = ({ buttonText, children, closeModal, modalClassName, modalIsOpen, openModal }) => import_react200.default.createElement(
  import_react200.default.Fragment,
  null,
  import_react200.default.createElement("button", { className: "str-chat__poll-action", onClick: openModal }, buttonText),
  import_react200.default.createElement(Modal, { className: modalClassName, onClose: closeModal, open: modalIsOpen }, children)
);

// node_modules/stream-chat-react/dist/components/Poll/PollActions/SuggestPollOptionForm.js
var import_react201 = __toESM(require_react());
var pollStateSelector3 = (nextValue) => ({ options: nextValue.options });
var SuggestPollOptionForm = ({ close, messageId }) => {
  const { client } = useChatContext("SuggestPollOptionForm");
  const { t: t2 } = useTranslationContext("SuggestPollOptionForm");
  const { poll } = usePollContext();
  const { options: options2 } = useStateStore(poll.state, pollStateSelector3);
  return import_react201.default.createElement(FormDialog, { className: "str-chat__prompt-dialog str-chat__modal__suggest-poll-option", close, fields: {
    optionText: {
      element: "input",
      props: {
        id: "optionText",
        name: "optionText",
        required: true,
        type: "text",
        value: ""
      },
      validator: (value) => {
        if (!value)
          return;
        const existingOption = options2.find((option) => option.text === value.trim());
        if (existingOption) {
          return new Error(t2("Option already exists"));
        }
        return;
      }
    }
  }, onSubmit: async (value) => {
    const { poll_option } = await client.createPollOption(poll.id, {
      text: value.optionText
    });
    poll.castVote(poll_option.id, messageId);
  }, shouldDisableSubmitButton: (value) => !value.optionText, title: t2("Suggest an option") });
};

// node_modules/stream-chat-react/dist/components/Poll/PollActions/PollAnswerList.js
var import_react209 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Modal/ModalHeader.js
var import_react202 = __toESM(require_react());
var ModalHeader = ({ className, close, goBack, title }) => import_react202.default.createElement(
  "div",
  { className: clsx_default("str-chat__modal-header", className) },
  goBack && import_react202.default.createElement("button", { className: "str-chat__modal-header__go-back-button", onClick: goBack }),
  import_react202.default.createElement("div", { className: "str-chat__modal-header__title" }, title),
  close && import_react202.default.createElement("button", { className: "str-chat__modal-header__close-button", onClick: close })
);

// node_modules/stream-chat-react/dist/components/Poll/PollVote.js
var import_react203 = __toESM(require_react());
var PollVoteTimestamp = ({ timestamp }) => {
  const { t: t2 } = useTranslationContext();
  const { handleEnter, handleLeave, tooltipVisible } = useEnterLeaveHandlers();
  const [referenceElement, setReferenceElement] = (0, import_react203.useState)(null);
  const timestampDate = new Date(timestamp);
  return import_react203.default.createElement(
    "div",
    { className: "str-chat__poll-vote__timestamp", onMouseEnter: handleEnter, onMouseLeave: handleLeave, ref: setReferenceElement },
    t2("timestamp/PollVote", { timestamp: timestampDate }),
    import_react203.default.createElement(PopperTooltip, { offset: [0, 5], placement: "bottom", referenceElement, visible: tooltipVisible }, t2("timestamp/PollVoteTooltip", { timestamp: timestampDate }))
  );
};
var PollVoteAuthor = ({ vote }) => {
  var _a, _b, _c;
  const { t: t2 } = useTranslationContext();
  const { client } = useChatContext();
  const { handleEnter, handleLeave, tooltipVisible } = useEnterLeaveHandlers();
  const [referenceElement, setReferenceElement] = (0, import_react203.useState)(null);
  const displayName = ((_a = client.user) == null ? void 0 : _a.id) && client.user.id === ((_b = vote.user) == null ? void 0 : _b.id) ? t2("You") : ((_c = vote.user) == null ? void 0 : _c.name) || t2("Anonymous");
  return import_react203.default.createElement(
    "div",
    { className: "str-chat__poll-vote__author", onMouseEnter: handleEnter, onMouseLeave: handleLeave, ref: setReferenceElement },
    vote.user && import_react203.default.createElement(Avatar, { className: "str-chat__avatar--poll-vote-author", image: vote.user.image, key: `poll-vote-${vote.id}-avatar-${vote.user.id}`, name: vote.user.name }),
    import_react203.default.createElement("div", { className: "str-chat__poll-vote__author__name" }, displayName),
    import_react203.default.createElement(PopperTooltip, { offset: [0, 5], placement: "bottom", referenceElement, visible: tooltipVisible }, displayName)
  );
};
var PollVote = ({ vote }) => import_react203.default.createElement(
  "div",
  { className: "str-chat__poll-vote" },
  import_react203.default.createElement(PollVoteAuthor, { vote }),
  import_react203.default.createElement(PollVoteTimestamp, { timestamp: vote.created_at })
);
var PollVoteListing = ({ votes }) => import_react203.default.createElement("div", { className: "str-chat__poll-vote-listing" }, votes.map((vote) => import_react203.default.createElement(PollVote, { key: `poll-vote-${vote.id}`, vote })));

// node_modules/stream-chat-react/dist/components/Poll/hooks/usePollAnswerPagination.js
var import_react206 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Poll/hooks/useManagePollVotesRealtime.js
var import_react204 = __toESM(require_react());
function useManagePollVotesRealtime(managedVoteType, cursorPaginatorState, optionId) {
  const { client } = useChatContext();
  const [votesInRealtime, setVotesInRealtime] = (0, import_react204.useState)((cursorPaginatorState == null ? void 0 : cursorPaginatorState.getLatestValue().items) ?? []);
  (0, import_react204.useEffect)(() => cursorPaginatorState == null ? void 0 : cursorPaginatorState.subscribeWithSelector((state) => [state.latestPageItems], ([latestPageItems]) => setVotesInRealtime((prev) => [...prev, ...latestPageItems])), [cursorPaginatorState]);
  (0, import_react204.useEffect)(() => {
    const handleVoteEvent = (event) => {
      if (!event.poll_vote)
        return;
      const isAnswer = isVoteAnswer(event.poll_vote);
      if (managedVoteType === "answer" && !isAnswer || managedVoteType === "vote" && (isAnswer || event.poll_vote.option_id !== optionId))
        return;
      if (event.type === "poll.vote_removed") {
        setVotesInRealtime((prev) => event.poll_vote ? prev.filter((vote) => vote.id !== event.poll_vote.id) : prev);
      }
      if (event.type === "poll.vote_changed") {
        setVotesInRealtime((prev) => event.poll_vote ? prev.filter((vote) => vote.id !== event.poll_vote.id) : prev);
      }
      if (["poll.vote_casted", "poll.vote_changed"].includes(event.type)) {
        setVotesInRealtime((prev) => event.poll_vote ? [event.poll_vote, ...prev] : prev);
      }
    };
    const voteCastedSubscription = client.on("poll.vote_casted", handleVoteEvent);
    const voteRemovedSubscription = client.on("poll.vote_removed", handleVoteEvent);
    const voteChangedSubscription = client.on("poll.vote_changed", handleVoteEvent);
    return () => {
      voteCastedSubscription.unsubscribe();
      voteRemovedSubscription.unsubscribe();
      voteChangedSubscription.unsubscribe();
    };
  }, [client, optionId, managedVoteType]);
  return votesInRealtime;
}

// node_modules/stream-chat-react/dist/components/InfiniteScrollPaginator/hooks/useCursorPaginator.js
var import_lodash16 = __toESM(require_lodash2());
var import_react205 = __toESM(require_react());
var useCursorPaginator = (paginationFn, loadFirstPage) => {
  const cursorPaginatorState = (0, import_react205.useMemo)(() => new StateStore({
    hasNextPage: true,
    items: [],
    latestPageItems: [],
    loading: false
  }), []);
  const loadMore = (0, import_react205.useCallback)(async () => {
    const { loading, next: currentNext } = cursorPaginatorState.getLatestValue();
    if (currentNext === null || loading)
      return;
    cursorPaginatorState.partialNext({ loading: true });
    try {
      const { items, next } = await paginationFn(currentNext);
      cursorPaginatorState.next((prev) => ({
        ...prev,
        hasNextPage: !!next,
        items: (0, import_lodash16.default)(prev.items.concat(items), "id"),
        latestPageItems: items,
        next: next || null
      }));
    } catch (error2) {
      cursorPaginatorState.partialNext({ error: error2 });
    }
    cursorPaginatorState.partialNext({ loading: false });
  }, [cursorPaginatorState, paginationFn]);
  (0, import_react205.useEffect)(() => {
    const { items } = cursorPaginatorState.getLatestValue();
    if (!loadFirstPage || items.length)
      return;
    loadMore();
  }, [cursorPaginatorState, loadFirstPage, loadMore]);
  return {
    cursorPaginatorState,
    loadMore
  };
};

// node_modules/stream-chat-react/dist/components/Poll/hooks/usePollAnswerPagination.js
var paginationStateSelector = (state) => [
  state.error,
  state.hasNextPage,
  state.loading
];
var usePollAnswerPagination = ({ paginationParams } = {}) => {
  const { poll } = usePollContext();
  const paginationFn = (0, import_react206.useCallback)(async (next) => {
    const { next: newNext, votes } = await poll.queryAnswers({
      filter: paginationParams == null ? void 0 : paginationParams.filter,
      options: !next ? paginationParams == null ? void 0 : paginationParams.options : { ...paginationParams == null ? void 0 : paginationParams.options, next },
      sort: { created_at: -1, ...paginationParams == null ? void 0 : paginationParams.sort }
    });
    return { items: votes, next: newNext };
  }, [paginationParams, poll]);
  const { cursorPaginatorState, loadMore } = useCursorPaginator(paginationFn, true);
  const answers = useManagePollVotesRealtime("answer", cursorPaginatorState);
  const [error2, hasNextPage, loading] = useStateStore(cursorPaginatorState, paginationStateSelector);
  return {
    answers,
    error: error2,
    hasNextPage,
    loading,
    loadMore
  };
};

// node_modules/stream-chat-react/dist/components/Poll/hooks/usePollOptionVotesPagination.js
var import_react207 = __toESM(require_react());
var paginationStateSelector2 = (state) => [
  state.error,
  state.hasNextPage,
  state.loading
];
var usePollOptionVotesPagination = ({ paginationParams }) => {
  const { poll } = usePollContext();
  const paginationFn = (0, import_react207.useCallback)(async (next) => {
    const { next: newNext, votes: votes2 } = await poll.queryOptionVotes({
      filter: paginationParams.filter,
      options: !next ? paginationParams == null ? void 0 : paginationParams.options : { ...paginationParams == null ? void 0 : paginationParams.options, next },
      sort: { created_at: -1, ...paginationParams == null ? void 0 : paginationParams.sort }
    });
    return { items: votes2, next: newNext };
  }, [paginationParams, poll]);
  const { cursorPaginatorState, loadMore } = useCursorPaginator(paginationFn, true);
  const votes = useManagePollVotesRealtime("vote", cursorPaginatorState, paginationParams.filter.option_id);
  const [error2, hasNextPage, loading] = useStateStore(cursorPaginatorState, paginationStateSelector2);
  return {
    error: error2,
    hasNextPage,
    loading,
    loadMore,
    votes
  };
};

// node_modules/stream-chat-react/dist/components/InfiniteScrollPaginator/InfiniteScrollPaginator.js
var import_lodash17 = __toESM(require_lodash3());
var import_react208 = __toESM(require_react());
var mousewheelListener = (event) => {
  if (event instanceof WheelEvent && event.deltaY === 1) {
    event.preventDefault();
  }
};
var InfiniteScrollPaginator = (props) => {
  const { children, className, listenToScroll, loadNextDebounceMs = 500, loadNextOnScrollToBottom, loadNextOnScrollToTop, threshold = DEFAULT_LOAD_PAGE_SCROLL_THRESHOLD, useCapture = false, ...componentProps } = props;
  const rootRef = (0, import_react208.useRef)(null);
  const childRef = (0, import_react208.useRef)(null);
  const scrollListener = (0, import_react208.useMemo)(() => (0, import_lodash17.default)(() => {
    const root2 = rootRef.current;
    const child = childRef.current;
    if (!root2 || root2.offsetParent === null || !child) {
      return;
    }
    const distanceFromBottom = child.scrollHeight - root2.scrollTop - root2.clientHeight;
    const distanceFromTop = root2.scrollTop;
    if (listenToScroll) {
      listenToScroll(distanceFromBottom, distanceFromTop, threshold);
    }
    if (distanceFromTop < Number(threshold)) {
      loadNextOnScrollToTop == null ? void 0 : loadNextOnScrollToTop();
    }
    if (distanceFromBottom < Number(threshold)) {
      loadNextOnScrollToBottom == null ? void 0 : loadNextOnScrollToBottom();
    }
  }, loadNextDebounceMs), [
    listenToScroll,
    loadNextDebounceMs,
    loadNextOnScrollToBottom,
    loadNextOnScrollToTop,
    threshold
  ]);
  (0, import_react208.useEffect)(() => {
    const scrollElement = rootRef.current;
    if (!scrollElement)
      return;
    scrollElement.addEventListener("scroll", scrollListener, useCapture);
    return () => {
      scrollElement.removeEventListener("scroll", scrollListener, useCapture);
    };
  }, [scrollListener, useCapture]);
  (0, import_react208.useEffect)(() => {
    const root2 = rootRef.current;
    if (!root2 || typeof ResizeObserver === "undefined" || !scrollListener)
      return;
    const observer = new ResizeObserver(scrollListener);
    observer.observe(root2);
    return () => {
      observer.disconnect();
    };
  }, [scrollListener]);
  (0, import_react208.useEffect)(() => {
    const root2 = rootRef.current;
    if (root2) {
      root2.addEventListener("wheel", mousewheelListener, { passive: false });
    }
    return () => {
      if (root2) {
        root2.removeEventListener("wheel", mousewheelListener, useCapture);
      }
    };
  }, [useCapture]);
  return import_react208.default.createElement(
    "div",
    { ...componentProps, className: clsx_default("str-chat__infinite-scroll-paginator", className), ref: rootRef },
    import_react208.default.createElement("div", { className: "str-chat__infinite-scroll-paginator__content", ref: childRef }, children)
  );
};

// node_modules/stream-chat-react/dist/components/Poll/PollActions/PollAnswerList.js
var pollStateSelector4 = (nextValue) => ({
  is_closed: nextValue.is_closed,
  ownAnswer: nextValue.ownAnswer
});
var PollAnswerList = ({ close, onUpdateOwnAnswerClick }) => {
  const { t: t2 } = useTranslationContext();
  const { poll } = usePollContext();
  const { is_closed, ownAnswer } = useStateStore(poll.state, pollStateSelector4);
  const { answers, error: error2, hasNextPage, loading, loadMore } = usePollAnswerPagination();
  return import_react209.default.createElement(
    "div",
    { className: "str-chat__modal__poll-answer-list" },
    import_react209.default.createElement(ModalHeader, { close, title: t2("Poll comments") }),
    import_react209.default.createElement(
      "div",
      { className: "str-chat__modal__poll-answer-list__body" },
      import_react209.default.createElement(
        InfiniteScrollPaginator,
        { loadNextOnScrollToBottom: loadMore, threshold: 40 },
        import_react209.default.createElement("div", { className: "str-chat__poll-answer-list" }, answers.map((answer) => import_react209.default.createElement(
          "div",
          { className: "str-chat__poll-answer", key: `comment-${answer.id}` },
          answer.answer_text && import_react209.default.createElement("p", { className: "str-chat__poll-answer__text" }, answer.answer_text),
          import_react209.default.createElement(PollVote, { key: `poll-vote-${answer.id}`, vote: answer })
        ))),
        hasNextPage && import_react209.default.createElement("div", { className: "str-chat__loading-indicator-placeholder" }, loading && import_react209.default.createElement(LoadingIndicator, null))
      ),
      (error2 == null ? void 0 : error2.message) && import_react209.default.createElement("div", null, error2 == null ? void 0 : error2.message)
    ),
    answers.length > 0 && !is_closed && import_react209.default.createElement("button", { className: "str-chat__poll-action", onClick: onUpdateOwnAnswerClick }, ownAnswer ? t2("Update your comment") : t2("Add a comment"))
  );
};

// node_modules/stream-chat-react/dist/components/Poll/PollActions/PollOptionsFullList.js
var import_react212 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Poll/PollOptionList.js
var import_react211 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Poll/PollOptionSelector.js
var import_lodash18 = __toESM(require_lodash3());
var import_react210 = __toESM(require_react());
var AmountBar = ({ amount, className }) => import_react210.default.createElement("div", { className: clsx_default("str-chat__amount-bar", className), "data-testid": "amount-bar", role: "progressbar", style: {
  "--str-chat__amount-bar-fulfillment": amount + "%"
} });
var Checkmark = ({ checked }) => import_react210.default.createElement("div", { className: clsx_default("str-chat__checkmark", { "str-chat__checkmark--checked": checked }) });
var pollStateSelector5 = (nextValue) => ({
  is_closed: nextValue.is_closed,
  latest_votes_by_option: nextValue.latest_votes_by_option,
  maxVotedOptionIds: nextValue.maxVotedOptionIds,
  ownVotesByOptionId: nextValue.ownVotesByOptionId,
  vote_counts_by_option: nextValue.vote_counts_by_option,
  voting_visibility: nextValue.voting_visibility
});
var PollOptionSelector = ({ displayAvatarCount, option, voteCountVerbose }) => {
  const { t: t2 } = useTranslationContext();
  const { channelCapabilities = {} } = useChannelStateContext("PollOptionsShortlist");
  const { message } = useMessageContext();
  const { poll } = usePollContext();
  const { is_closed, latest_votes_by_option, maxVotedOptionIds, ownVotesByOptionId, vote_counts_by_option, voting_visibility } = useStateStore(poll.state, pollStateSelector5);
  const canCastVote = channelCapabilities["cast-poll-vote"] && !is_closed;
  const winningOptionCount = maxVotedOptionIds[0] ? vote_counts_by_option[maxVotedOptionIds[0]] : 0;
  const toggleVote = (0, import_react210.useMemo)(() => (0, import_lodash18.default)(() => {
    if (!canCastVote)
      return;
    const haveVotedForTheOption = !!ownVotesByOptionId[option.id];
    return haveVotedForTheOption ? poll.removeVote(ownVotesByOptionId[option.id].id, message.id) : poll.castVote(option.id, message.id);
  }, 100), [canCastVote, message.id, option.id, ownVotesByOptionId, poll]);
  return import_react210.default.createElement(
    "div",
    { className: clsx_default("str-chat__poll-option", {
      "str-chat__poll-option--votable": canCastVote
    }), key: `base-poll-option-${option.id}`, onClick: toggleVote },
    canCastVote && import_react210.default.createElement(Checkmark, { checked: !!ownVotesByOptionId[option.id] }),
    import_react210.default.createElement(
      "div",
      { className: "str-chat__poll-option-data" },
      import_react210.default.createElement("p", { className: "str-chat__poll-option-text" }, option.text),
      displayAvatarCount && voting_visibility === "public" && import_react210.default.createElement("div", { className: "str-chat__poll-option-voters" }, (latest_votes_by_option == null ? void 0 : latest_votes_by_option[option.id]) && latest_votes_by_option[option.id].filter((vote) => !!vote.user && !isVoteAnswer(vote)).slice(0, displayAvatarCount).map(({ user }) => import_react210.default.createElement(Avatar, { image: user == null ? void 0 : user.image, key: `poll-option-${option.id}-avatar-${user == null ? void 0 : user.id}`, name: user == null ? void 0 : user.name }))),
      import_react210.default.createElement("div", { className: "str-chat__poll-option-vote-count" }, voteCountVerbose ? t2("{{count}} votes", {
        count: vote_counts_by_option[option.id] ?? 0
      }) : vote_counts_by_option[option.id] ?? 0)
    ),
    import_react210.default.createElement(AmountBar, { amount: (winningOptionCount && (vote_counts_by_option[option.id] ?? 0) / winningOptionCount) * 100, className: clsx_default("str-chat__poll-option__votes-bar", {
      "str-chat__poll-option__votes-bar--winner": is_closed && maxVotedOptionIds.length === 1 && maxVotedOptionIds[0] === option.id
    }) })
  );
};

// node_modules/stream-chat-react/dist/components/Poll/PollOptionList.js
var pollStateSelector6 = (nextValue) => ({ options: nextValue.options });
var PollOptionList = ({ optionsDisplayCount }) => {
  const { PollOptionSelector: PollOptionSelector2 = PollOptionSelector } = useComponentContext();
  const { poll } = usePollContext();
  const { options: options2 } = useStateStore(poll.state, pollStateSelector6);
  return import_react211.default.createElement("div", { className: clsx_default("str-chat__poll-option-list", {
    "str-chat__poll-option-list--full": typeof optionsDisplayCount === "undefined"
  }) }, options2.slice(0, optionsDisplayCount ?? options2.length).map((option) => import_react211.default.createElement(PollOptionSelector2, { displayAvatarCount: 3, key: `poll-option-${option.id}`, option })));
};

// node_modules/stream-chat-react/dist/components/Poll/PollActions/PollOptionsFullList.js
var pollStateSelector7 = (nextValue) => ({ name: nextValue.name });
var PollOptionsFullList = ({ close }) => {
  const { t: t2 } = useTranslationContext();
  const { poll } = usePollContext();
  const { name } = useStateStore(poll.state, pollStateSelector7);
  return import_react212.default.createElement(
    "div",
    { className: "str-chat__modal__poll-option-list" },
    import_react212.default.createElement(ModalHeader, { close, title: t2("Poll options") }),
    import_react212.default.createElement(
      "div",
      { className: "str-chat__modal__poll-option-list__body" },
      import_react212.default.createElement("div", { className: "str-chat__modal__poll-option-list__title" }, name),
      import_react212.default.createElement(PollOptionList, null)
    )
  );
};

// node_modules/stream-chat-react/dist/components/Poll/PollActions/PollResults/PollResults.js
var import_react216 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Poll/PollActions/PollResults/PollOptionVotesList.js
var import_react214 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Poll/PollActions/PollResults/PollOptionWithVotesHeader.js
var import_react213 = __toESM(require_react());
var pollStateSelector8 = (nextValue) => ({
  maxVotedOptionIds: nextValue.maxVotedOptionIds,
  vote_counts_by_option: nextValue.vote_counts_by_option
});
var PollResultOptionVoteCounter = ({ optionId }) => {
  const { t: t2 } = useTranslationContext();
  const { poll } = usePollContext();
  const { maxVotedOptionIds, vote_counts_by_option } = useStateStore(poll.state, pollStateSelector8);
  return import_react213.default.createElement(
    "div",
    { className: "str-chat__poll-result-option-vote-counter" },
    maxVotedOptionIds.length === 1 && maxVotedOptionIds[0] === optionId && import_react213.default.createElement("div", { className: "str-chat__poll-result-winning-option-icon" }),
    import_react213.default.createElement("span", { className: "str-chat__poll-result-option-vote-count" }, t2("{{count}} votes", { count: vote_counts_by_option[optionId] ?? 0 }))
  );
};
var PollOptionWithVotesHeader = ({ option }) => import_react213.default.createElement(
  "div",
  { className: "str-chat__poll-option__header" },
  import_react213.default.createElement("div", { className: "str-chat__poll-option__option-text" }, option.text),
  import_react213.default.createElement(PollResultOptionVoteCounter, { optionId: option.id })
);

// node_modules/stream-chat-react/dist/components/Poll/PollActions/PollResults/PollOptionVotesList.js
var PollOptionVotesList = ({ option }) => {
  const paginationParams = (0, import_react214.useMemo)(() => ({ filter: { option_id: option.id } }), [option.id]);
  const { error: error2, hasNextPage, loading, loadMore, votes } = usePollOptionVotesPagination({
    paginationParams
  });
  return import_react214.default.createElement(
    "div",
    { className: "str-chat__poll-option str-chat__poll-option--full-vote-list" },
    import_react214.default.createElement(PollOptionWithVotesHeader, { option }),
    import_react214.default.createElement(
      InfiniteScrollPaginator,
      { loadNextOnScrollToBottom: loadMore, threshold: 40 },
      import_react214.default.createElement(PollVoteListing, { votes }),
      hasNextPage && import_react214.default.createElement("div", { className: "str-chat__loading-indicator-placeholder" }, loading && import_react214.default.createElement(LoadingIndicator, null))
    ),
    error2 && error2.message
  );
};

// node_modules/stream-chat-react/dist/components/Poll/PollActions/PollResults/PollOptionWithLatestVotes.js
var import_react215 = __toESM(require_react());
var pollStateSelector9 = (nextValue) => ({
  latest_votes_by_option: nextValue.latest_votes_by_option
});
var PollOptionWithLatestVotes = ({ countVotesPreview = 5, option, showAllVotes }) => {
  const { t: t2 } = useTranslationContext();
  const { channelCapabilities = {} } = useChannelStateContext("PollOptionWithLatestVotes");
  const { poll } = usePollContext();
  const { latest_votes_by_option } = useStateStore(poll.state, pollStateSelector9);
  const votes = latest_votes_by_option && latest_votes_by_option[option.id];
  return import_react215.default.createElement(
    "div",
    { className: "str-chat__poll-option" },
    import_react215.default.createElement(PollOptionWithVotesHeader, { option }),
    votes && import_react215.default.createElement(PollVoteListing, { votes: votes.slice(0, countVotesPreview) }),
    channelCapabilities["query-poll-votes"] && showAllVotes && (votes == null ? void 0 : votes.length) > countVotesPreview && import_react215.default.createElement("button", { className: "str-chat__poll-option__show-all-votes-button", onClick: showAllVotes }, t2("Show all"))
  );
};

// node_modules/stream-chat-react/dist/components/Poll/PollActions/PollResults/PollResults.js
var pollStateSelector10 = (nextValue) => ({
  name: nextValue.name,
  options: [...nextValue.options],
  vote_counts_by_option: nextValue.vote_counts_by_option
});
var PollResults = ({ close }) => {
  const { t: t2 } = useTranslationContext();
  const { poll } = usePollContext();
  const { name, options: options2, vote_counts_by_option } = useStateStore(poll.state, pollStateSelector10);
  const [optionToView, setOptionToView] = (0, import_react216.useState)();
  const goBack = (0, import_react216.useCallback)(() => setOptionToView(void 0), []);
  return import_react216.default.createElement("div", { className: clsx_default("str-chat__modal__poll-results", {
    "str-chat__modal__poll-results--option-detail": optionToView
  }) }, optionToView ? import_react216.default.createElement(
    import_react216.default.Fragment,
    null,
    import_react216.default.createElement(ModalHeader, { close, goBack, title: optionToView.text }),
    import_react216.default.createElement(
      "div",
      { className: "str-chat__modal__poll-results__body" },
      import_react216.default.createElement(PollOptionVotesList, { key: `poll-option-detail-${optionToView.id}`, option: optionToView })
    )
  ) : import_react216.default.createElement(
    import_react216.default.Fragment,
    null,
    import_react216.default.createElement(ModalHeader, { close, title: t2("Poll results") }),
    import_react216.default.createElement(
      "div",
      { className: "str-chat__modal__poll-results__body" },
      import_react216.default.createElement("div", { className: "str-chat__modal__poll-results__title" }, name),
      import_react216.default.createElement("div", { className: "str-chat__modal__poll-results__option-list" }, options2.sort((next, current) => (vote_counts_by_option[current.id] ?? 0) >= (vote_counts_by_option[next.id] ?? 0) ? 1 : -1).map((option) => import_react216.default.createElement(PollOptionWithLatestVotes, { key: `poll-option-${option.id}`, option, showAllVotes: () => setOptionToView(option) })))
    )
  ));
};

// node_modules/stream-chat-react/dist/components/Poll/constants.js
var MAX_POLL_OPTIONS = 100;
var VALID_MAX_VOTES_VALUE_REGEX = /^([2-9]|10)$/;
var MAX_OPTIONS_DISPLAYED = 10;

// node_modules/stream-chat-react/dist/components/Poll/PollActions/PollActions.js
var pollStateSelector11 = (nextValue) => ({
  allow_answers: nextValue.allow_answers,
  allow_user_suggested_options: nextValue.allow_user_suggested_options,
  answers_count: nextValue.answers_count,
  created_by_id: nextValue.created_by_id,
  is_closed: nextValue.is_closed,
  options: nextValue.options,
  ownAnswer: nextValue.ownAnswer
});
var PollActions = ({ AddCommentForm: AddCommentForm2 = AddCommentForm, EndPollDialog: EndPollDialog2 = EndPollDialog, PollAnswerList: PollAnswerList2 = PollAnswerList, PollOptionsFullList: PollOptionsFullList2 = PollOptionsFullList, PollResults: PollResults2 = PollResults, SuggestPollOptionForm: SuggestPollOptionForm2 = SuggestPollOptionForm }) => {
  var _a;
  const { client } = useChatContext();
  const { t: t2 } = useTranslationContext("PollActions");
  const { channelCapabilities = {} } = useChannelStateContext("PollActions");
  const { message } = useMessageContext("PollActions");
  const { poll } = usePollContext();
  const { allow_answers, allow_user_suggested_options, answers_count, created_by_id, is_closed, options: options2, ownAnswer } = useStateStore(poll.state, pollStateSelector11);
  const [modalOpen, setModalOpen] = (0, import_react217.useState)();
  const closeModal = (0, import_react217.useCallback)(() => setModalOpen(void 0), []);
  const onUpdateAnswerClick = (0, import_react217.useCallback)(() => setModalOpen("add-comment"), []);
  return import_react217.default.createElement(
    "div",
    { className: "str-chat__poll-actions" },
    options2.length > MAX_OPTIONS_DISPLAYED && import_react217.default.createElement(
      PollAction,
      { buttonText: t2("See all options ({{count}})", {
        count: options2.length
      }), closeModal, modalIsOpen: modalOpen === "view-all-options", openModal: () => setModalOpen("view-all-options") },
      import_react217.default.createElement(PollOptionsFullList2, { close: closeModal })
    ),
    !is_closed && allow_user_suggested_options && options2.length < MAX_POLL_OPTIONS && import_react217.default.createElement(
      PollAction,
      { buttonText: t2("Suggest an option"), closeModal, modalClassName: "str-chat__suggest-poll-option-modal", modalIsOpen: modalOpen === "suggest-option", openModal: () => setModalOpen("suggest-option") },
      import_react217.default.createElement(SuggestPollOptionForm2, { close: closeModal, messageId: message.id })
    ),
    !is_closed && allow_answers && import_react217.default.createElement(
      PollAction,
      { buttonText: ownAnswer ? t2("Update your comment") : t2("Add a comment"), closeModal, modalClassName: "str-chat__add-poll-answer-modal", modalIsOpen: modalOpen === "add-comment", openModal: () => setModalOpen("add-comment") },
      import_react217.default.createElement(AddCommentForm2, { close: closeModal, messageId: message.id })
    ),
    answers_count > 0 && channelCapabilities["query-poll-votes"] && import_react217.default.createElement(
      PollAction,
      { buttonText: t2("View {{count}} comments", { count: answers_count }), closeModal, modalClassName: "str-chat__poll-answer-list-modal", modalIsOpen: modalOpen === "view-comments", openModal: () => setModalOpen("view-comments") },
      import_react217.default.createElement(PollAnswerList2, { close: closeModal, onUpdateOwnAnswerClick: onUpdateAnswerClick })
    ),
    import_react217.default.createElement(
      PollAction,
      { buttonText: t2("View results"), closeModal, modalClassName: "str-chat__poll-results-modal", modalIsOpen: modalOpen === "view-results", openModal: () => setModalOpen("view-results") },
      import_react217.default.createElement(PollResults2, { close: closeModal })
    ),
    !is_closed && created_by_id === ((_a = client.user) == null ? void 0 : _a.id) && import_react217.default.createElement(
      PollAction,
      { buttonText: t2("End vote"), closeModal, modalClassName: "str-chat__end-poll-modal", modalIsOpen: modalOpen === "end-vote", openModal: () => setModalOpen("end-vote") },
      import_react217.default.createElement(EndPollDialog2, { close: closeModal })
    )
  );
};

// node_modules/stream-chat-react/dist/components/Poll/PollContent.js
var pollStateSelectorPollContent = (nextValue) => ({ is_closed: nextValue.is_closed });
var PollContent = () => {
  const { PollActions: PollActions2 = PollActions, PollHeader: PollHeader2 = PollHeader } = useComponentContext();
  const { poll } = usePollContext();
  const { is_closed } = useStateStore(poll.state, pollStateSelectorPollContent);
  return import_react218.default.createElement(
    "div",
    { className: clsx_default("str-chat__poll", { "str-chat__poll--closed": is_closed }) },
    import_react218.default.createElement(PollHeader2, null),
    import_react218.default.createElement(PollOptionList, { optionsDisplayCount: MAX_OPTIONS_DISPLAYED }),
    import_react218.default.createElement(PollActions2, null)
  );
};

// node_modules/stream-chat-react/dist/components/Poll/QuotedPoll.js
var import_react219 = __toESM(require_react());
var pollStateSelectorQuotedPoll = (nextValue) => ({
  is_closed: nextValue.is_closed,
  name: nextValue.name
});
var QuotedPoll = () => {
  const { poll } = usePollContext();
  const { is_closed, name } = useStateStore(poll.state, pollStateSelectorQuotedPoll);
  return import_react219.default.createElement(
    "div",
    { className: clsx_default("str-chat__quoted-poll-preview", {
      "str-chat__quoted-poll-preview--closed": is_closed
    }) },
    import_react219.default.createElement("div", { className: "str-chat__quoted-poll-preview__icon" }, "📊"),
    import_react219.default.createElement("div", { className: "str-chat__quoted-poll-preview__name" }, name)
  );
};

// node_modules/stream-chat-react/dist/components/Poll/Poll.js
var Poll = ({ isQuoted, poll }) => {
  const { PollContent: PollContent2 = PollContent, QuotedPoll: QuotedPoll2 = QuotedPoll } = useComponentContext();
  return poll ? import_react220.default.createElement(PollProvider, { poll }, isQuoted ? import_react220.default.createElement(QuotedPoll2, null) : import_react220.default.createElement(PollContent2, null)) : null;
};

// node_modules/stream-chat-react/dist/components/Poll/PollCreationDialog/PollCreationDialog.js
var import_react225 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Poll/PollCreationDialog/OptionFieldSet.js
var import_react222 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/DragAndDrop/DragAndDropContainer.js
var import_react221 = __toESM(require_react());
var DragAndDropContainer = ({ children, className, draggable, onSetNewOrder }) => {
  const [order2, setOrder] = (0, import_react221.useState)([]);
  const [dragStartIndex, setDragStartIndex] = (0, import_react221.useState)(null);
  const [dragOverIndex, setDragOverIndex] = (0, import_react221.useState)(null);
  const [container, setContainer] = (0, import_react221.useState)(null);
  const moveDirection = dragStartIndex === null || dragOverIndex === null ? void 0 : dragStartIndex <= dragOverIndex ? "down" : "up";
  const childrenArray = import_react221.default.Children.toArray(children);
  (0, import_react221.useEffect)(() => {
    setOrder(import_react221.default.Children.map(children, (_23, index3) => index3) || []);
  }, [children]);
  (0, import_react221.useEffect)(() => {
    if (!container)
      return;
    const handleDragStart = (e) => {
      var _a, _b;
      const target = e.target;
      const draggableItem = target.closest(".str-chat__drag-and-drop-container__item");
      if (e.dataTransfer) {
        e.dataTransfer.effectAllowed = "move";
      }
      if (draggableItem instanceof HTMLElement) {
        const index3 = Array.from(((_a = draggableItem.parentElement) == null ? void 0 : _a.children) || []).indexOf(draggableItem);
        setDragStartIndex(index3);
        (_b = e.dataTransfer) == null ? void 0 : _b.setData("text/plain", index3.toString());
        draggableItem.style.opacity = "0.3";
      }
    };
    const handleDragOver = (e) => {
      var _a;
      e.preventDefault();
      const target = e.target;
      const draggableItem = target.closest(".str-chat__drag-and-drop-container__item");
      if (draggableItem instanceof HTMLElement) {
        const index3 = Array.from(((_a = draggableItem.parentElement) == null ? void 0 : _a.children) || []).indexOf(draggableItem);
        setDragOverIndex(index3);
      }
    };
    const handleDragLeave = () => {
      setDragOverIndex(null);
    };
    const handleDrop = (e) => {
      var _a, _b;
      e.preventDefault();
      const draggedIndex = parseInt(((_a = e.dataTransfer) == null ? void 0 : _a.getData("text/plain")) || "-1", 10);
      const target = e.target;
      const draggableItem = target.closest(".str-chat__drag-and-drop-container__item");
      if (draggableItem instanceof HTMLElement) {
        const dropIndex = Array.from(((_b = draggableItem.parentElement) == null ? void 0 : _b.children) || []).indexOf(draggableItem);
        if (draggedIndex !== -1 && draggedIndex !== dropIndex) {
          setOrder((prevOrder) => {
            const newOrder = [...prevOrder];
            const [removed] = newOrder.splice(draggedIndex, 1);
            newOrder.splice(dropIndex, 0, removed);
            onSetNewOrder == null ? void 0 : onSetNewOrder(newOrder);
            return newOrder;
          });
        }
      }
      setDragStartIndex(null);
      setDragOverIndex(null);
    };
    const handleDragEnd = (e) => {
      const target = e.target;
      if (target instanceof HTMLElement) {
        target.style.opacity = "";
      }
      setDragStartIndex(null);
      setDragOverIndex(null);
    };
    container.addEventListener("dragstart", handleDragStart);
    container.addEventListener("dragover", handleDragOver);
    container.addEventListener("dragleave", handleDragLeave);
    container.addEventListener("drop", handleDrop);
    container.addEventListener("dragend", handleDragEnd);
    return () => {
      container.removeEventListener("dragstart", handleDragStart);
      container.removeEventListener("dragover", handleDragOver);
      container.removeEventListener("dragleave", handleDragLeave);
      container.removeEventListener("drop", handleDrop);
      container.removeEventListener("dragend", handleDragEnd);
    };
  }, [container, onSetNewOrder]);
  return import_react221.default.createElement("div", { className: clsx_default("str-chat__drag-and-drop-container", className), ref: setContainer }, order2.map((originalIndex, currentIndex) => {
    const child = childrenArray[originalIndex];
    return import_react221.default.createElement("div", { className: clsx_default("str-chat__drag-and-drop-container__item", {
      "str-chat__drag-and-drop-container__item--dragged-over-from-bottom": moveDirection === "up" && dragOverIndex === currentIndex,
      "str-chat__drag-and-drop-container__item--dragged-over-from-top": moveDirection === "down" && dragOverIndex === currentIndex
    }), draggable, key: import_react221.default.isValidElement(child) ? child.key : `draggable-item-${originalIndex}` }, child);
  }));
};

// node_modules/stream-chat-react/dist/components/Poll/PollCreationDialog/OptionFieldSet.js
var VALIDATION_ERRORS = { "Option already exists": true };
var OptionFieldSet = ({ errors, options: options2, setErrors, setState }) => {
  const { t: t2 } = useTranslationContext("OptionFieldSet");
  const findOptionDuplicate = (sourceOption) => {
    const isDuplicateFilter = (option) => !!sourceOption.text.trim() && // do not include empty options into consideration
    option.id !== sourceOption.id && option.text.trim() === sourceOption.text.trim();
    return options2.find(isDuplicateFilter);
  };
  const onSetNewOrder = (0, import_react222.useCallback)((newOrder) => {
    setState((prev) => ({
      ...prev,
      options: newOrder.map((index3) => prev.options[index3])
    }));
  }, [setState]);
  const draggable = options2.length > 1;
  return import_react222.default.createElement(
    "fieldset",
    { className: "str-chat__form__field str-chat__form__input-fieldset" },
    import_react222.default.createElement("legend", { className: "str-chat__form__field-label" }, t2("Options")),
    import_react222.default.createElement(DragAndDropContainer, { className: "str-chat__form__input-fieldset__values", draggable, onSetNewOrder }, options2.map((option, i) => import_react222.default.createElement(
      "div",
      { className: clsx_default("str-chat__form__input-field", {
        "str-chat__form__input-field--draggable": draggable,
        "str-chat__form__input-field--has-error": errors[option.id]
      }), key: `new-poll-option-${i}` },
      import_react222.default.createElement(
        "div",
        { className: "str-chat__form__input-field__value" },
        import_react222.default.createElement(FieldError, { className: "str-chat__form__input-field__error", "data-testid": "poll-option-input-field-error", text: errors[option.id] }),
        import_react222.default.createElement("input", { id: option.id, onBlur: (e) => {
          if (findOptionDuplicate({ id: e.target.id, text: e.target.value })) {
            setErrors((prev) => ({
              ...prev,
              [e.target.id]: t2("Option already exists")
            }));
          }
        }, onChange: (e) => {
          setState((prev) => {
            const shouldAddEmptyOption = prev.options.length < MAX_POLL_OPTIONS && (!prev.options || prev.options.slice(i + 1).length === 0 && !!e.target.value);
            const shouldRemoveOption = prev.options && prev.options.slice(i + 1).length > 0 && !e.target.value;
            const optionListHead = prev.options ? prev.options.slice(0, i) : [];
            const optionListTail = shouldAddEmptyOption ? [{ id: nanoid(), text: "" }] : (prev.options || []).slice(i + 1);
            if (errors[option.id] && !e.target.value || VALIDATION_ERRORS[errors[option.id]] && !findOptionDuplicate({ id: e.target.id, text: e.target.value })) {
              setErrors((prev2) => {
                delete prev2[option.id];
                return prev2;
              });
            }
            return {
              ...prev,
              options: [
                ...optionListHead,
                ...shouldRemoveOption ? [] : [{ ...option, text: e.target.value }],
                ...optionListTail
              ]
            };
          });
        }, onKeyUp: (event) => {
          var _a;
          if (event.key === "Enter") {
            const nextInputId = options2[i + 1].id;
            (_a = document.getElementById(nextInputId)) == null ? void 0 : _a.focus();
          }
        }, placeholder: t2("Add an option"), type: "text", value: option.text })
      ),
      draggable && import_react222.default.createElement("div", { className: "str-chat__drag-handle" })
    )))
  );
};

// node_modules/stream-chat-react/dist/components/Poll/PollCreationDialog/PollCreationDialogControls.js
var import_react223 = __toESM(require_react());
var PollCreationDialogControls = ({ close, errors, state }) => {
  const { client } = useChatContext();
  const { t: t2 } = useTranslationContext("PollCreationDialogControls");
  const { handleSubmit: handleSubmitMessage } = useMessageInputContext("PollCreationDialogControls");
  const canSubmit = () => {
    var _a, _b;
    const hasAtLeastOneOption = state.options.filter((o) => !!o.text).length > 0;
    const hasName = !!state.name;
    const maxVotesAllowedNumber = parseInt(((_b = (_a = state.max_votes_allowed) == null ? void 0 : _a.match(VALID_MAX_VOTES_VALUE_REGEX)) == null ? void 0 : _b[0]) || "");
    const validMaxVotesAllowed = state.max_votes_allowed === "" || !!maxVotesAllowedNumber && (2 <= maxVotesAllowedNumber || maxVotesAllowedNumber <= 10);
    const noErrors = errors.length === 0;
    return hasAtLeastOneOption && hasName && validMaxVotesAllowed && noErrors;
  };
  return import_react223.default.createElement(
    "div",
    { className: "str-chat__dialog__controls" },
    import_react223.default.createElement("button", { className: "str-chat__dialog__controls-button str-chat__dialog__controls-button--cancel", onClick: close }, t2("Cancel")),
    import_react223.default.createElement("button", { className: "str-chat__dialog__controls-button str-chat__dialog__controls-button--submit", disabled: !canSubmit(), onClick: async (e) => {
      var _a;
      let pollId;
      try {
        const { poll } = await client.createPoll({
          ...state,
          max_votes_allowed: state.max_votes_allowed ? parseInt(state.max_votes_allowed) : void 0,
          options: (_a = state.options) == null ? void 0 : _a.filter((o) => o.text).map((o) => ({ text: o.text }))
        });
        pollId = poll.id;
      } catch (e2) {
        return;
      }
      try {
        await handleSubmitMessage(e, { poll_id: pollId });
      } catch (e2) {
        return;
      }
      close();
    }, type: "submit" }, t2("Create"))
  );
};

// node_modules/stream-chat-react/dist/components/Form/SwitchField.js
var import_react224 = __toESM(require_react());
var SwitchField = ({ children, ...props }) => {
  const inputRef = (0, import_react224.useRef)(null);
  const handleKeyUp = (event) => {
    if (![" ", "Enter"].includes(event.key) || !inputRef.current)
      return;
    event.preventDefault();
    inputRef.current.click();
  };
  return import_react224.default.createElement(
    "div",
    { className: "str-chat__form__field str-chat__form__switch-field" },
    import_react224.default.createElement(
      "label",
      null,
      import_react224.default.createElement("div", { className: "str-chat__form__field str-chat__form__switch-field-content" }, children),
      import_react224.default.createElement("input", { type: "checkbox", ...props, ref: inputRef }),
      import_react224.default.createElement(
        "div",
        { className: clsx_default("str-chat__form__switch-field__switch", {
          "str-chat__form__switch-field__switch--on": props.checked
        }), onKeyUp: handleKeyUp, tabIndex: 0 },
        import_react224.default.createElement("div", { className: "str-chat__form__switch-field__switch-handle" })
      )
    )
  );
};
var SimpleSwitchField = ({ labelText, ...props }) => import_react224.default.createElement(
  SwitchField,
  { ...props },
  import_react224.default.createElement("div", { className: "str-chat__form__field str-chat__form__switch-field__text" }, labelText)
);

// node_modules/stream-chat-react/dist/components/Poll/PollCreationDialog/PollCreationDialog.js
var PollCreationDialog = ({ close }) => {
  const { client } = useChatContext();
  const { t: t2 } = useTranslationContext();
  const [nameError, setNameError] = (0, import_react225.useState)();
  const [optionsErrors, setOptionsErrors] = (0, import_react225.useState)({});
  const [multipleAnswerCountError, setMultipleAnswerCountError] = (0, import_react225.useState)();
  const [state, setState] = (0, import_react225.useState)(() => {
    var _a;
    return {
      allow_answers: false,
      allow_user_suggested_options: false,
      description: "",
      enforce_unique_vote: true,
      id: nanoid(),
      max_votes_allowed: "",
      name: "",
      options: [{ id: nanoid(), text: "" }],
      user_id: (_a = client.user) == null ? void 0 : _a.id,
      voting_visibility: "public"
    };
  });
  return import_react225.default.createElement(
    "div",
    { className: "str-chat__dialog str-chat__poll-creation-dialog", "data-testid": "poll-creation-dialog" },
    import_react225.default.createElement(ModalHeader, { close, title: t2("Create poll") }),
    import_react225.default.createElement(
      "div",
      { className: "str-chat__dialog__body" },
      import_react225.default.createElement(
        "form",
        { autoComplete: "off" },
        import_react225.default.createElement(
          "div",
          { className: clsx_default("str-chat__form__field str-chat__form__input-field str-chat__form__input-field--with-label", {
            "str-chat__form__input-field--has-error": nameError
          }) },
          import_react225.default.createElement("label", { className: "str-chat__form__field-label", htmlFor: "name" }, t2("Question")),
          import_react225.default.createElement(
            "div",
            { className: clsx_default("str-chat__form__input-field__value") },
            import_react225.default.createElement(FieldError, { className: "str-chat__form__input-field__error", "data-testid": "poll-name-input-field-error", text: nameError }),
            import_react225.default.createElement("input", { id: "name", onBlur: (e) => {
              if (!e.target.value) {
                setNameError("The field is required");
              }
            }, onChange: (e) => {
              setState((prev) => ({ ...prev, name: e.target.value }));
              if (nameError && e.target.value) {
                setNameError(void 0);
              }
            }, placeholder: t2("Ask a question"), type: "text", value: state.name })
          )
        ),
        import_react225.default.createElement(OptionFieldSet, { errors: optionsErrors, options: state.options, setErrors: setOptionsErrors, setState }),
        import_react225.default.createElement(
          "div",
          { className: clsx_default("str-chat__form__expandable-field", {
            "str-chat__form__expandable-field--expanded": !state.enforce_unique_vote
          }) },
          import_react225.default.createElement(SimpleSwitchField, { checked: !state.enforce_unique_vote, id: "enforce_unique_vote", labelText: t2("Multiple answers"), onChange: (e) => {
            setState((prev) => ({
              ...prev,
              enforce_unique_vote: !e.target.checked,
              max_votes_allowed: ""
            }));
            setMultipleAnswerCountError(void 0);
          } }),
          !state.enforce_unique_vote && import_react225.default.createElement(
            "div",
            { className: clsx_default("str-chat__form__input-field", {
              "str-chat__form__input-field--has-error": multipleAnswerCountError
            }) },
            import_react225.default.createElement(
              "div",
              { className: clsx_default("str-chat__form__input-field__value") },
              import_react225.default.createElement(FieldError, { className: "str-chat__form__input-field__error", "data-testid": "poll-max-votes-allowed-input-field-error", text: multipleAnswerCountError }),
              import_react225.default.createElement("input", { id: "max_votes_allowed", onChange: (e) => {
                const isValidValue = e.target.validity.valid && (!e.target.value || e.target.value.match(VALID_MAX_VOTES_VALUE_REGEX));
                if (!isValidValue) {
                  setMultipleAnswerCountError(t2("Type a number from 2 to 10"));
                } else if (multipleAnswerCountError) {
                  setMultipleAnswerCountError(void 0);
                }
                setState((prev) => ({
                  ...prev,
                  max_votes_allowed: e.target.value
                }));
              }, placeholder: t2("Maximum number of votes (from 2 to 10)"), type: "number", value: state.max_votes_allowed })
            )
          )
        ),
        import_react225.default.createElement(SimpleSwitchField, { checked: state.voting_visibility === "anonymous", id: "voting_visibility", labelText: t2("Anonymous poll"), onChange: (e) => setState((prev) => ({
          ...prev,
          voting_visibility: e.target.checked ? "anonymous" : "public"
        })) }),
        import_react225.default.createElement(SimpleSwitchField, { checked: state.allow_user_suggested_options, id: "allow_user_suggested_options", labelText: t2("Allow option suggestion"), onChange: (e) => setState((prev) => ({
          ...prev,
          allow_user_suggested_options: e.target.checked
        })) }),
        import_react225.default.createElement(SimpleSwitchField, { checked: state.allow_answers, id: "allow_answers", labelText: t2("Allow comments"), onChange: (e) => setState((prev) => ({ ...prev, allow_answers: e.target.checked })) })
      )
    ),
    import_react225.default.createElement(PollCreationDialogControls, { close, errors: [
      ...nameError ?? [],
      ...multipleAnswerCountError ?? [],
      ...Object.keys(optionsErrors)
    ], state })
  );
};

// node_modules/stream-chat-react/dist/components/Message/QuotedMessage.js
var QuotedMessage = ({ renderText: propsRenderText }) => {
  var _a, _b, _c;
  const { Attachment: Attachment2 = Attachment, Avatar: ContextAvatar } = useComponentContext("QuotedMessage");
  const { client } = useChatContext();
  const { isMyMessage, message, renderText: contextRenderText } = useMessageContext("QuotedMessage");
  const { t: t2, userLanguage } = useTranslationContext("QuotedMessage");
  const { jumpToMessage } = useChannelActionContext("QuotedMessage");
  const renderText2 = propsRenderText ?? contextRenderText ?? renderText;
  const Avatar2 = ContextAvatar || Avatar;
  const { quoted_message } = message;
  const poll = (quoted_message == null ? void 0 : quoted_message.poll_id) && client.polls.fromState(quoted_message.poll_id);
  const quotedMessageDeleted = (quoted_message == null ? void 0 : quoted_message.deleted_at) || (quoted_message == null ? void 0 : quoted_message.type) === "deleted";
  const quotedMessageText = quotedMessageDeleted ? t2("This message was deleted...") : ((_a = quoted_message == null ? void 0 : quoted_message.i18n) == null ? void 0 : _a[`${userLanguage}_text`]) || (quoted_message == null ? void 0 : quoted_message.text);
  const quotedMessageAttachment = ((_b = quoted_message == null ? void 0 : quoted_message.attachments) == null ? void 0 : _b.length) && !quotedMessageDeleted ? quoted_message.attachments[0] : null;
  const renderedText = (0, import_react226.useMemo)(() => renderText2(quotedMessageText, quoted_message == null ? void 0 : quoted_message.mentioned_users), [quotedMessageText, quoted_message == null ? void 0 : quoted_message.mentioned_users, renderText2]);
  if (!quoted_message)
    return null;
  if (!quoted_message.poll && !quotedMessageText && !quotedMessageAttachment)
    return null;
  return import_react226.default.createElement(
    import_react226.default.Fragment,
    null,
    import_react226.default.createElement(
      "div",
      { className: clsx_default("str-chat__quoted-message-preview", { mine: isMyMessage() }), "data-testid": "quoted-message", onClickCapture: (e) => {
        e.stopPropagation();
        e.preventDefault();
        jumpToMessage(quoted_message.id);
      } },
      quoted_message.user && import_react226.default.createElement(Avatar2, { className: "str-chat__avatar--quoted-message-sender", image: quoted_message.user.image, name: quoted_message.user.name || quoted_message.user.id, user: quoted_message.user }),
      import_react226.default.createElement("div", { className: "str-chat__quoted-message-bubble", "data-testid": "quoted-message-contents" }, poll ? import_react226.default.createElement(Poll, { isQuoted: true, poll }) : import_react226.default.createElement(
        import_react226.default.Fragment,
        null,
        quotedMessageAttachment && import_react226.default.createElement(Attachment2, { attachments: [quotedMessageAttachment], isQuoted: true }),
        import_react226.default.createElement("div", { className: "str-chat__quoted-message-bubble__text", "data-testid": "quoted-message-text" }, renderedText)
      ))
    ),
    ((_c = message.attachments) == null ? void 0 : _c.length) ? import_react226.default.createElement(Attachment2, { attachments: message.attachments }) : null
  );
};

// node_modules/stream-chat-react/dist/components/Message/MessageErrorText.js
var import_react227 = __toESM(require_react());
function MessageErrorText({ message, theme }) {
  const { t: t2 } = useTranslationContext("MessageText");
  if (message.type === "error" && !isMessageBounced(message)) {
    return import_react227.default.createElement("div", { className: `str-chat__${theme}-message--error-message str-chat__message--error-message` }, t2("Error · Unsent"));
  }
  if (message.status === "failed") {
    return import_react227.default.createElement("div", { className: `str-chat__${theme}-message--error-message str-chat__message--error-message` }, message.errorStatusCode !== 403 ? t2("Message Failed · Click to try again") : t2("Message Failed · Unauthorized"));
  }
  return null;
}

// node_modules/stream-chat-react/dist/components/Message/MessageText.js
var UnMemoizedMessageTextComponent = (props) => {
  var _a;
  const { customInnerClass, customWrapperClass = "", message: propMessage, renderText: propsRenderText, theme = "simple" } = props;
  const { QuotedMessage: QuotedMessage2 = QuotedMessage } = useComponentContext("MessageText");
  const { message: contextMessage, onMentionsClickMessage, onMentionsHoverMessage, renderText: contextRenderText, unsafeHTML } = useMessageContext("MessageText");
  const renderText2 = propsRenderText ?? contextRenderText ?? renderText;
  const { userLanguage } = useTranslationContext("MessageText");
  const message = propMessage || contextMessage;
  const hasAttachment = messageHasAttachments(message);
  const messageTextToRender = ((_a = message.i18n) == null ? void 0 : _a[`${userLanguage}_text`]) || message.text;
  const messageText = (0, import_react228.useMemo)(
    () => renderText2(messageTextToRender, message.mentioned_users),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [message.mentioned_users, messageTextToRender]
  );
  const wrapperClass = customWrapperClass || "str-chat__message-text";
  const innerClass = customInnerClass || `str-chat__message-text-inner str-chat__message-${theme}-text-inner`;
  if (!messageTextToRender && !message.quoted_message)
    return null;
  return import_react228.default.createElement(
    "div",
    { className: wrapperClass, tabIndex: 0 },
    import_react228.default.createElement(
      "div",
      { className: clsx_default(innerClass, {
        [`str-chat__message-${theme}-text-inner--has-attachment`]: hasAttachment,
        [` str-chat__message-${theme}-text-inner--is-emoji`]: isOnlyEmojis(message.text) && !message.quoted_message
      }), "data-testid": "message-text-inner-wrapper", onClick: onMentionsClickMessage, onMouseOver: onMentionsHoverMessage },
      message.quoted_message && import_react228.default.createElement(QuotedMessage2, null),
      import_react228.default.createElement(MessageErrorText, { message, theme }),
      unsafeHTML && message.html ? import_react228.default.createElement("div", { dangerouslySetInnerHTML: { __html: message.html } }) : import_react228.default.createElement("div", null, messageText)
    )
  );
};
var MessageText = import_react228.default.memo(UnMemoizedMessageTextComponent);

// node_modules/stream-chat-react/dist/components/Message/MessageTimestamp.js
var import_react229 = __toESM(require_react());
var UnMemoizedMessageTimestamp = (props) => {
  const { message: propMessage, ...timestampProps } = props;
  const { message: contextMessage } = useMessageContext("MessageTimestamp");
  const { Timestamp: Timestamp2 = Timestamp } = useComponentContext("MessageTimestamp");
  const message = propMessage || contextMessage;
  return import_react229.default.createElement(Timestamp2, { timestamp: message.created_at, ...timestampProps });
};
var MessageTimestamp = import_react229.default.memo(UnMemoizedMessageTimestamp);

// node_modules/stream-chat-react/dist/constants/messageTypes.js
var CUSTOM_MESSAGE_TYPE = {
  date: "message.date",
  intro: "channel.intro"
};

// node_modules/stream-chat-react/dist/components/MessageInput/AttachmentSelector.js
var import_react234 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageInput/icons.js
var import_react230 = __toESM(require_react());
var LoadingIndicatorIcon = ({ size = 20 }) => {
  const id = (0, import_react230.useMemo)(() => nanoid(), []);
  return import_react230.default.createElement(
    "div",
    { className: "str-chat__loading-indicator" },
    import_react230.default.createElement(
      "svg",
      { "data-testid": "loading-indicator", height: size, viewBox: "0 0 30 30", width: size, xmlns: "http://www.w3.org/2000/svg" },
      import_react230.default.createElement(
        "defs",
        null,
        import_react230.default.createElement(
          "linearGradient",
          { id: `${id}-linear-gradient`, x1: "50%", x2: "50%", y1: "0%", y2: "100%" },
          import_react230.default.createElement("stop", { offset: "0%", stopColor: "#FFF", stopOpacity: "0" }),
          import_react230.default.createElement("stop", { "data-testid": "stop-color", offset: "100%", stopOpacity: "1" })
        )
      ),
      import_react230.default.createElement("path", { d: "M2.518 23.321l1.664-1.11A12.988 12.988 0 0 0 15 28c7.18 0 13-5.82 13-13S22.18 2 15 2V0c8.284 0 15 6.716 15 15 0 8.284-6.716 15-15 15-5.206 0-9.792-2.652-12.482-6.679z", fill: `url(#${id}-linear-gradient)`, fillRule: "evenodd" })
    )
  );
};
var UploadIcon = () => {
  const { t: t2 } = useTranslationContext("UploadIcon");
  return import_react230.default.createElement(
    "svg",
    { "data-testid": "attach-icon", fill: "none", height: "24", viewBox: "0 0 24 24", width: "24", xmlns: "http://www.w3.org/2000/svg" },
    import_react230.default.createElement("title", null, t2("Attach files")),
    import_react230.default.createElement(
      "g",
      { clipPath: "url(#clip0_10878_5)" },
      import_react230.default.createElement("path", { d: "M12.9997 6.99993L10.9997 6.99993L10.9997 10.9999L6.99972 10.9999L6.99972 12.9999L10.9997 12.9999L10.9997 16.9999L12.9997 16.9999L12.9997 12.9999L16.9997 12.9999L16.9997 10.9999L12.9997 10.9999L12.9997 6.99993ZM11.9997 1.99992C6.47972 1.99992 1.99972 6.47993 1.99972 11.9999C1.99972 17.5199 6.47972 21.9999 11.9997 21.9999C17.5197 21.9999 21.9997 17.5199 21.9997 11.9999C21.9997 6.47993 17.5197 1.99992 11.9997 1.99992ZM11.9997 19.9999C7.58972 19.9999 3.99972 16.4099 3.99972 11.9999C3.99972 7.58993 7.58972 3.99993 11.9997 3.99993C16.4097 3.99993 19.9997 7.58993 19.9997 11.9999C19.9997 16.4099 16.4097 19.9999 11.9997 19.9999Z", fill: "black" })
    ),
    import_react230.default.createElement(
      "defs",
      null,
      import_react230.default.createElement(
        "clipPath",
        { id: "clip0_10878_5" },
        import_react230.default.createElement("rect", { fill: "white", height: "24", width: "24" })
      )
    )
  );
};
var CloseIcon = () => import_react230.default.createElement(
  "svg",
  { "data-testid": "close-no-outline", fill: "none", height: "24", viewBox: "0 0 24 24", width: "24", xmlns: "http://www.w3.org/2000/svg" },
  import_react230.default.createElement("path", { d: "M19 6.41L17.59 5L12 10.59L6.41 5L5 6.41L10.59 12L5 17.59L6.41 19L12 13.41L17.59 19L19 17.59L13.41 12L19 6.41Z", fill: "black" })
);
var RetryIcon = () => import_react230.default.createElement(
  "svg",
  { "data-testid": "retry", fill: "none", height: "24", viewBox: "0 0 24 24", width: "24", xmlns: "http://www.w3.org/2000/svg" },
  import_react230.default.createElement("path", { d: "M17.6449 6.35C16.1949 4.9 14.2049 4 11.9949 4C7.57488 4 4.00488 7.58 4.00488 12C4.00488 16.42 7.57488 20 11.9949 20C15.7249 20 18.8349 17.45 19.7249 14H17.6449C16.8249 16.33 14.6049 18 11.9949 18C8.68488 18 5.99488 15.31 5.99488 12C5.99488 8.69 8.68488 6 11.9949 6C13.6549 6 15.1349 6.69 16.2149 7.78L12.9949 11H19.9949V4L17.6449 6.35Z", fill: "black" })
);
var DownloadIcon2 = () => import_react230.default.createElement(
  "svg",
  { "data-testid": "download", fill: "none", height: "24", viewBox: "0 0 24 24", width: "24", xmlns: "http://www.w3.org/2000/svg" },
  import_react230.default.createElement("path", { d: "M19.35 10.04C18.67 6.59 15.64 4 12 4C9.11 4 6.6 5.64 5.35 8.04C2.34 8.36 0 10.91 0 14C0 17.31 2.69 20 6 20H19C21.76 20 24 17.76 24 15C24 12.36 21.95 10.22 19.35 10.04ZM19 18H6C3.79 18 2 16.21 2 14C2 11.95 3.53 10.24 5.56 10.03L6.63 9.92L7.13 8.97C8.08 7.14 9.94 6 12 6C14.62 6 16.88 7.86 17.39 10.43L17.69 11.93L19.22 12.04C20.78 12.14 22 13.45 22 15C22 16.65 20.65 18 19 18ZM13.45 10H10.55V13H8L12 17L16 13H13.45V10Z", fill: "black" })
);
var LinkIcon = () => import_react230.default.createElement(
  "svg",
  { fill: "none", height: "11", viewBox: "0 0 20 11", width: "20", xmlns: "http://www.w3.org/2000/svg" },
  import_react230.default.createElement("path", { clipRule: "evenodd", d: "M1.9 5.5C1.9 3.79 3.29 2.4 5 2.4H8.05C8.57467 2.4 9 1.97467 9 1.45C9 0.925329 8.57467 0.5 8.05 0.5H5C2.24 0.5 0 2.74 0 5.5C0 8.26 2.24 10.5 5 10.5H8.05C8.57467 10.5 9 10.0747 9 9.55C9 9.02533 8.57467 8.6 8.05 8.6H5C3.29 8.6 1.9 7.21 1.9 5.5ZM6 5.5C6 6.05228 6.44772 6.5 7 6.5H13C13.5523 6.5 14 6.05228 14 5.5C14 4.94772 13.5523 4.5 13 4.5H7C6.44772 4.5 6 4.94772 6 5.5ZM15 0.5H11.95C11.4253 0.5 11 0.925329 11 1.45C11 1.97467 11.4253 2.4 11.95 2.4H15C16.71 2.4 18.1 3.79 18.1 5.5C18.1 7.21 16.71 8.6 15 8.6H11.95C11.4253 8.6 11 9.02533 11 9.55C11 10.0747 11.4253 10.5 11.95 10.5H15C17.76 10.5 20 8.26 20 5.5C20 2.74 17.76 0.5 15 0.5Z", fill: "#005DFF", fillRule: "evenodd" })
);
var SendIcon = () => {
  const { t: t2 } = useTranslationContext("SendButton");
  return import_react230.default.createElement(
    "svg",
    { "data-testid": "send", fill: "currentColor", height: "24", viewBox: "0 0 24 24", width: "24", xmlns: "http://www.w3.org/2000/svg" },
    import_react230.default.createElement("title", null, t2("Send")),
    import_react230.default.createElement("path", { d: "M4.00952 22L24 12L4.00952 2L4 9.77778L18.2857 12L4 14.2222L4.00952 22Z" })
  );
};
var MicIcon = () => import_react230.default.createElement(
  "svg",
  { fill: "currentColor", viewBox: "0 0 14 20", xmlns: "http://www.w3.org/2000/svg" },
  import_react230.default.createElement("path", { d: "M7 12.5C8.66 12.5 10 11.16 10 9.5V3.5C10 1.84 8.66 0.5 7 0.5C5.34 0.5 4 1.84 4 3.5V9.5C4 11.16 5.34 12.5 7 12.5Z" }),
  import_react230.default.createElement("path", { d: "M12 9.5C12 12.26 9.76 14.5 7 14.5C4.24 14.5 2 12.26 2 9.5H0C0 13.03 2.61 15.93 6 16.42V19.5H8V16.42C11.39 15.93 14 13.03 14 9.5H12Z" })
);
var BinIcon = () => import_react230.default.createElement(
  "svg",
  { fill: "currentColor", viewBox: "0 0 32 32", xmlns: "http://www.w3.org/2000/svg" },
  import_react230.default.createElement("path", { d: "M8.00033 25.3333C8.00033 26.8 9.20033 28 10.667 28H21.3337C22.8003 28 24.0003 26.8 24.0003 25.3333V12C24.0003 10.5333 22.8003 9.33333 21.3337 9.33333H10.667C9.20033 9.33333 8.00033 10.5333 8.00033 12V25.3333ZM24.0003 5.33333H20.667L19.7203 4.38667C19.4803 4.14667 19.1337 4 18.787 4H13.2137C12.867 4 12.5203 4.14667 12.2803 4.38667L11.3337 5.33333H8.00033C7.26699 5.33333 6.66699 5.93333 6.66699 6.66667C6.66699 7.4 7.26699 8 8.00033 8H24.0003C24.7337 8 25.3337 7.4 25.3337 6.66667C25.3337 5.93333 24.7337 5.33333 24.0003 5.33333Z" })
);
var PauseIcon2 = () => import_react230.default.createElement(
  "svg",
  { "data-testid": "str-chat__pause-icon", fill: "currentColor", viewBox: "0 0 16 20", xmlns: "http://www.w3.org/2000/svg" },
  import_react230.default.createElement("path", { d: "M0 19.3333H5.33333V0.666626H0V19.3333ZM10.6667 0.666626V19.3333H16V0.666626H10.6667Z" })
);
var PlayIcon = () => import_react230.default.createElement(
  "svg",
  { "data-testid": "str-chat__play-icon", fill: "currentColor", viewBox: "0 0 14 18", xmlns: "http://www.w3.org/2000/svg" },
  import_react230.default.createElement("path", { d: "M0.236328 2.09338V15.9067C0.236328 16.9601 1.39633 17.6001 2.28966 17.0267L13.143 10.1201C13.9697 9.60005 13.9697 8.40005 13.143 7.86672L2.28966 0.973385C1.39633 0.400051 0.236328 1.04005 0.236328 2.09338Z" })
);
var CheckSignIcon = () => import_react230.default.createElement(
  "svg",
  { fill: "currentColor", viewBox: "0 0 18 14", xmlns: "http://www.w3.org/2000/svg" },
  import_react230.default.createElement("path", { d: "M5.79457 10.875L2.32457 7.40502C1.93457 7.01502 1.30457 7.01502 0.91457 7.40502C0.52457 7.79502 0.52457 8.42502 0.91457 8.81502L5.09457 12.995C5.48457 13.385 6.11457 13.385 6.50457 12.995L17.0846 2.41502C17.4746 2.02502 17.4746 1.39502 17.0846 1.00502C16.6946 0.615024 16.0646 0.615024 15.6746 1.00502L5.79457 10.875Z" })
);

// node_modules/stream-chat-react/dist/components/Dialog/DialogMenu.js
var import_react231 = __toESM(require_react());
var DialogMenuButton = ({ children, className, ...props }) => import_react231.default.createElement(
  "button",
  { className: clsx_default("str-chat__dialog-menu__button", className), ...props },
  import_react231.default.createElement("div", { className: "str-chat__dialog-menu__button-icon" }),
  import_react231.default.createElement("div", { className: "str-chat__dialog-menu__button-text" }, children)
);

// node_modules/stream-chat-react/dist/context/AttachmentSelectorContext.js
var import_react232 = __toESM(require_react());
var AttachmentSelectorContext = (0, import_react232.createContext)({
  fileInput: null
});
var AttachmentSelectorContextProvider = ({ children, value }) => import_react232.default.createElement(AttachmentSelectorContext.Provider, { value }, children);
var useAttachmentSelectorContext = () => (0, import_react232.useContext)(AttachmentSelectorContext);

// node_modules/stream-chat-react/dist/components/UtilityComponents/useStableId.js
var import_react233 = __toESM(require_react());
var useStableId = (key) => {
  const id = (0, import_react233.useMemo)(() => nanoid(), [key]);
  return id;
};

// node_modules/stream-chat-react/dist/components/MessageInput/AttachmentSelector.js
var SimpleAttachmentSelector = () => {
  const { AttachmentSelectorInitiationButtonContents, FileUploadIcon = UploadIcon } = useComponentContext();
  const inputRef = (0, import_react234.useRef)(null);
  const [labelElement, setLabelElement] = (0, import_react234.useState)(null);
  const id = useStableId();
  (0, import_react234.useEffect)(() => {
    if (!labelElement)
      return;
    const handleKeyUp = (event) => {
      if (![" ", "Enter"].includes(event.key) || !inputRef.current)
        return;
      event.preventDefault();
      inputRef.current.click();
    };
    labelElement.addEventListener("keyup", handleKeyUp);
    return () => {
      labelElement.removeEventListener("keyup", handleKeyUp);
    };
  }, [labelElement]);
  return import_react234.default.createElement(
    "div",
    { className: "str-chat__file-input-container", "data-testid": "file-upload-button" },
    import_react234.default.createElement(UploadFileInput, { id, ref: inputRef }),
    import_react234.default.createElement("label", { className: "str-chat__file-input-label", htmlFor: id, ref: setLabelElement, tabIndex: 0 }, AttachmentSelectorInitiationButtonContents ? import_react234.default.createElement(AttachmentSelectorInitiationButtonContents, null) : import_react234.default.createElement(FileUploadIcon, null))
  );
};
var AttachmentSelectorMenuInitButtonIcon = () => {
  const { AttachmentSelectorInitiationButtonContents, FileUploadIcon } = useComponentContext("SimpleAttachmentSelector");
  if (AttachmentSelectorInitiationButtonContents) {
    return import_react234.default.createElement(AttachmentSelectorInitiationButtonContents, null);
  }
  if (FileUploadIcon) {
    return import_react234.default.createElement(FileUploadIcon, null);
  }
  return import_react234.default.createElement("div", { className: "str-chat__attachment-selector__menu-button__icon" });
};
var DefaultAttachmentSelectorComponents = {
  File({ closeMenu }) {
    const { t: t2 } = useTranslationContext();
    const { fileInput } = useAttachmentSelectorContext();
    return import_react234.default.createElement(DialogMenuButton, { className: "str-chat__attachment-selector-actions-menu__button str-chat__attachment-selector-actions-menu__upload-file-button", onClick: () => {
      if (fileInput)
        fileInput.click();
      closeMenu();
    } }, t2("File"));
  },
  Poll({ closeMenu, openModalForAction }) {
    const { t: t2 } = useTranslationContext();
    return import_react234.default.createElement(DialogMenuButton, { className: "str-chat__attachment-selector-actions-menu__button str-chat__attachment-selector-actions-menu__create-poll-button", onClick: () => {
      openModalForAction("createPoll");
      closeMenu();
    } }, t2("Poll"));
  }
};
var defaultAttachmentSelectorActionSet = [
  { ActionButton: DefaultAttachmentSelectorComponents.File, type: "uploadFile" },
  {
    ActionButton: DefaultAttachmentSelectorComponents.Poll,
    type: "createPoll"
  }
];
var useAttachmentSelectorActionsFiltered = (original) => {
  const { PollCreationDialog: PollCreationDialog2 = PollCreationDialog } = useComponentContext();
  const { channelCapabilities, channelConfig } = useChannelStateContext();
  const { isThreadInput } = useMessageInputContext();
  return original.filter((action) => {
    if (action.type === "uploadFile" && !channelCapabilities["upload-file"])
      return false;
    if (action.type === "createPoll" && (!(channelConfig == null ? void 0 : channelConfig.polls) || isThreadInput || !channelCapabilities["send-poll"]))
      return false;
    return true;
  }).map((action) => {
    if (action.type === "createPoll" && !action.ModalContent) {
      return { ...action, ModalContent: PollCreationDialog2 };
    }
    return action;
  });
};
var AttachmentSelector = ({ attachmentSelectorActionSet = defaultAttachmentSelectorActionSet, getModalPortalDestination }) => {
  const { t: t2 } = useTranslationContext();
  const { channelCapabilities } = useChannelStateContext();
  const { isThreadInput } = useMessageInputContext();
  const actions = useAttachmentSelectorActionsFiltered(attachmentSelectorActionSet);
  const menuDialogId = `attachment-actions-menu${isThreadInput ? "-thread" : ""}`;
  const menuDialog = useDialog({ id: menuDialogId });
  const menuDialogIsOpen = useDialogIsOpen(menuDialogId);
  const [modalContentAction, setModalContentActionAction] = (0, import_react234.useState)();
  const openModal = (0, import_react234.useCallback)((actionType) => {
    const action = actions.find((a) => a.type === actionType);
    if (!(action == null ? void 0 : action.ModalContent))
      return;
    setModalContentActionAction(action);
  }, [actions]);
  const closeModal = (0, import_react234.useCallback)(() => setModalContentActionAction(void 0), []);
  const [fileInput, setFileInput] = (0, import_react234.useState)(null);
  const menuButtonRef = (0, import_react234.useRef)(null);
  const getDefaultPortalDestination = (0, import_react234.useCallback)(() => document.getElementById(CHANNEL_CONTAINER_ID), []);
  if (actions.length === 0)
    return null;
  if (actions.length === 1 && actions[0].type === "uploadFile")
    return import_react234.default.createElement(SimpleAttachmentSelector, null);
  const ModalContent = modalContentAction == null ? void 0 : modalContentAction.ModalContent;
  const modalIsOpen = !!ModalContent;
  return import_react234.default.createElement(
    AttachmentSelectorContextProvider,
    { value: { fileInput } },
    import_react234.default.createElement(
      "div",
      { className: "str-chat__attachment-selector" },
      channelCapabilities["upload-file"] && import_react234.default.createElement(UploadFileInput, { ref: setFileInput }),
      import_react234.default.createElement(
        "button",
        { "aria-expanded": menuDialogIsOpen, "aria-haspopup": "true", "aria-label": t2("aria/Open Attachment Selector"), className: "str-chat__attachment-selector__menu-button", "data-testid": "invoke-attachment-selector-button", onClick: () => menuDialog == null ? void 0 : menuDialog.toggle(), ref: menuButtonRef },
        import_react234.default.createElement(AttachmentSelectorMenuInitButtonIcon, null)
      ),
      import_react234.default.createElement(
        DialogAnchor,
        { id: menuDialogId, placement: "top-start", referenceElement: menuButtonRef.current, trapFocus: true },
        import_react234.default.createElement("div", { className: "str-chat__attachment-selector-actions-menu str-chat__dialog-menu", "data-testid": "attachment-selector-actions-menu" }, actions.map(({ ActionButton, type }) => import_react234.default.createElement(ActionButton, { closeMenu: menuDialog.close, key: `attachment-selector-item-${type}`, openModalForAction: openModal })))
      ),
      import_react234.default.createElement(
        Portal,
        { getPortalDestination: getModalPortalDestination ?? getDefaultPortalDestination, isOpen: modalIsOpen },
        import_react234.default.createElement(Modal, { className: "str-chat__create-poll-modal", onClose: closeModal, open: modalIsOpen }, ModalContent && import_react234.default.createElement(ModalContent, { close: closeModal }))
      )
    )
  );
};

// node_modules/stream-chat-react/dist/components/MessageInput/AttachmentPreviewList/AttachmentPreviewList.js
var import_react246 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageInput/AttachmentPreviewList/UnsupportedAttachmentPreview.js
var import_react235 = __toESM(require_react());
var UnsupportedAttachmentPreview = ({ attachment, handleRetry, removeAttachments }) => {
  var _a, _b, _c, _d;
  const { t: t2 } = useTranslationContext("UnsupportedAttachmentPreview");
  const title = attachment.title ?? t2("Unsupported attachment");
  return import_react235.default.createElement(
    "div",
    { className: "str-chat__attachment-preview-unsupported", "data-testid": "attachment-preview-unknown" },
    import_react235.default.createElement(
      "div",
      { className: "str-chat__attachment-preview-file-icon" },
      import_react235.default.createElement(FileIcon, { filename: title, mimeType: attachment.mime_type })
    ),
    import_react235.default.createElement(
      "button",
      { className: "str-chat__attachment-preview-delete", "data-testid": "file-preview-item-delete-button", disabled: ((_a = attachment.localMetadata) == null ? void 0 : _a.uploadState) === "uploading", onClick: () => {
        var _a2, _b2;
        return ((_a2 = attachment.localMetadata) == null ? void 0 : _a2.id) && removeAttachments([(_b2 = attachment.localMetadata) == null ? void 0 : _b2.id]);
      } },
      import_react235.default.createElement(CloseIcon, null)
    ),
    ((_b = attachment.localMetadata) == null ? void 0 : _b.uploadState) === "failed" && !!handleRetry && import_react235.default.createElement(
      "button",
      { className: "str-chat__attachment-preview-error str-chat__attachment-preview-error-file", "data-testid": "file-preview-item-retry-button", onClick: () => handleRetry(attachment) },
      import_react235.default.createElement(RetryIcon, null)
    ),
    import_react235.default.createElement(
      "div",
      { className: "str-chat__attachment-preview-metadata" },
      import_react235.default.createElement("div", { className: "str-chat__attachment-preview-title", title }, title),
      ((_c = attachment.localMetadata) == null ? void 0 : _c.uploadState) === "finished" && !!attachment.asset_url && import_react235.default.createElement(
        "a",
        { className: "str-chat__attachment-preview-file-download", download: true, href: attachment.asset_url, rel: "noreferrer", target: "_blank" },
        import_react235.default.createElement(DownloadIcon2, null)
      ),
      ((_d = attachment.localMetadata) == null ? void 0 : _d.uploadState) === "uploading" && import_react235.default.createElement(LoadingIndicatorIcon, { size: 17 })
    )
  );
};

// node_modules/stream-chat-react/dist/components/MessageInput/AttachmentPreviewList/VoiceRecordingPreview.js
var import_react243 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MediaRecorder/RecordingPermissionDeniedNotification.js
var import_react236 = __toESM(require_react());
var RecordingPermissionDeniedNotification = ({ onClose, permissionName }) => {
  const { t: t2 } = useTranslationContext();
  const permissionTranslations = {
    body: {
      camera: t2("To start recording, allow the camera access in your browser"),
      microphone: t2("To start recording, allow the microphone access in your browser")
    },
    heading: {
      camera: t2("Allow access to camera"),
      microphone: t2("Allow access to microphone")
    }
  };
  return import_react236.default.createElement(
    "div",
    { className: "str-chat__recording-permission-denied-notification" },
    import_react236.default.createElement("div", { className: "str-chat__recording-permission-denied-notification__heading" }, permissionTranslations.heading[permissionName]),
    import_react236.default.createElement("p", { className: "str-chat__recording-permission-denied-notification__message" }, permissionTranslations.body[permissionName]),
    import_react236.default.createElement(
      "div",
      { className: "str-chat__recording-permission-denied-notification__dismiss-button-container" },
      import_react236.default.createElement("button", { className: "str-chat__recording-permission-denied-notification__dismiss-button", onClick: onClose }, t2("Ok"))
    )
  );
};

// node_modules/stream-chat-react/dist/components/MediaRecorder/AudioRecorder/AudioRecorder.js
var import_react241 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MediaRecorder/AudioRecorder/AudioRecordingPreview.js
var import_react238 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MediaRecorder/AudioRecorder/RecordingTimer.js
var import_react237 = __toESM(require_react());
var RecordingTimer = ({ durationSeconds }) => import_react237.default.createElement("div", { className: clsx_default("str-chat__recording-timer", {
  "str-chat__recording-timer--hours": durationSeconds >= 3600
}) }, displayDuration(durationSeconds));

// node_modules/stream-chat-react/dist/components/MediaRecorder/AudioRecorder/AudioRecordingPreview.js
var AudioRecordingPreview = ({ durationSeconds, mimeType, waveformData, ...props }) => {
  const { audioRef, isPlaying, progress, secondsElapsed, seek, togglePlay } = useAudioController({
    durationSeconds,
    mimeType
  });
  const displayedDuration = secondsElapsed || durationSeconds;
  return import_react238.default.createElement(
    import_react238.default.Fragment,
    null,
    import_react238.default.createElement(
      "audio",
      { ref: audioRef },
      import_react238.default.createElement("source", { src: props.src, type: mimeType })
    ),
    import_react238.default.createElement("button", { className: "str-chat__audio_recorder__toggle-playback-button", "data-testid": "audio-recording-preview-toggle-play-btn", onClick: togglePlay }, isPlaying ? import_react238.default.createElement(PauseIcon2, null) : import_react238.default.createElement(PlayIcon, null)),
    import_react238.default.createElement(RecordingTimer, { durationSeconds: displayedDuration }),
    import_react238.default.createElement(
      "div",
      { className: "str-chat__wave-progress-bar__track-container" },
      import_react238.default.createElement(WaveProgressBar, { progress, seek, waveformData: waveformData || [] })
    )
  );
};

// node_modules/stream-chat-react/dist/components/MediaRecorder/AudioRecorder/AudioRecordingInProgress.js
var import_react240 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/useTimeElapsed.js
var import_react239 = __toESM(require_react());
var useTimeElapsed = ({ startOnMount } = {}) => {
  const [secondsElapsed, setSecondsElapsed] = (0, import_react239.useState)(0);
  const updateInterval = (0, import_react239.useRef)(void 0);
  const startCounter = (0, import_react239.useCallback)(() => {
    if (updateInterval.current)
      return;
    updateInterval.current = setInterval(() => {
      setSecondsElapsed((prev) => prev + 1);
    }, 1e3);
  }, []);
  const stopCounter = (0, import_react239.useCallback)(() => {
    clearInterval(updateInterval.current);
    updateInterval.current = void 0;
  }, []);
  (0, import_react239.useEffect)(() => {
    if (!startOnMount)
      return;
    startCounter();
    return () => {
      stopCounter();
    };
  }, [startCounter, startOnMount, stopCounter]);
  return {
    secondsElapsed,
    startCounter,
    stopCounter
  };
};

// node_modules/stream-chat-react/dist/components/MediaRecorder/AudioRecorder/AudioRecordingInProgress.js
var AudioRecordingWaveform = ({ maxDataPointsDrawn = 100 }) => {
  const { recordingController: { recorder } } = useMessageInputContext();
  const [amplitudes, setAmplitudes] = (0, import_react240.useState)([]);
  (0, import_react240.useEffect)(() => {
    if (!(recorder == null ? void 0 : recorder.amplitudeRecorder))
      return;
    const amplitudesSubscription = recorder.amplitudeRecorder.amplitudes.subscribe(setAmplitudes);
    return () => {
      amplitudesSubscription.unsubscribe();
    };
  }, [recorder]);
  if (!recorder)
    return null;
  return import_react240.default.createElement(
    "div",
    { className: "str-chat__waveform-box-container" },
    import_react240.default.createElement("div", { className: "str-chat__audio_recorder__waveform-box" }, amplitudes.slice(-maxDataPointsDrawn).map((amplitude, i) => import_react240.default.createElement("div", { className: "str-chat__wave-progress-bar__amplitude-bar", key: `amplitude-${i}-voice-recording`, style: {
      "--str-chat__wave-progress-bar__amplitude-bar-height": amplitude ? amplitude * 100 + "%" : "0%"
    } })))
  );
};
var AudioRecordingInProgress = () => {
  const { secondsElapsed, startCounter, stopCounter } = useTimeElapsed();
  const { recordingController: { recorder } } = useMessageInputContext();
  (0, import_react240.useEffect)(() => {
    if (!(recorder == null ? void 0 : recorder.mediaRecorder))
      return;
    const { mediaRecorder } = recorder;
    if (mediaRecorder.state === "recording") {
      startCounter();
    }
    mediaRecorder.addEventListener("start", startCounter);
    mediaRecorder.addEventListener("resume", startCounter);
    mediaRecorder.addEventListener("stop", stopCounter);
    mediaRecorder.addEventListener("pause", stopCounter);
    return () => {
      mediaRecorder.removeEventListener("start", startCounter);
      mediaRecorder.removeEventListener("resume", startCounter);
      mediaRecorder.removeEventListener("stop", stopCounter);
      mediaRecorder.removeEventListener("pause", stopCounter);
    };
  }, [recorder, startCounter, stopCounter]);
  return import_react240.default.createElement(
    import_react240.default.Fragment,
    null,
    import_react240.default.createElement(RecordingTimer, { durationSeconds: secondsElapsed }),
    import_react240.default.createElement(AudioRecordingWaveform, null)
  );
};

// node_modules/stream-chat-react/dist/components/MediaRecorder/AudioRecorder/AudioRecorder.js
var AudioRecorder = () => {
  var _a;
  const { recordingController: { completeRecording, recorder, recording, recordingState } } = useMessageInputContext();
  const isUploadingFile = ((_a = recording == null ? void 0 : recording.localMetadata) == null ? void 0 : _a.uploadState) === "uploading";
  const state = (0, import_react241.useMemo)(() => ({
    paused: recordingState === MediaRecordingState.PAUSED,
    recording: recordingState === MediaRecordingState.RECORDING,
    stopped: recordingState === MediaRecordingState.STOPPED
  }), [recordingState]);
  if (!recorder)
    return null;
  return import_react241.default.createElement(
    "div",
    { className: "str-chat__audio_recorder-container" },
    import_react241.default.createElement(
      "div",
      { className: "str-chat__audio_recorder", "data-testid": "audio-recorder" },
      import_react241.default.createElement(
        "button",
        { className: "str-chat__audio_recorder__cancel-button", "data-testid": "cancel-recording-audio-button", disabled: isUploadingFile, onClick: recorder.cancel },
        import_react241.default.createElement(BinIcon, null)
      ),
      state.stopped && (recording == null ? void 0 : recording.asset_url) ? import_react241.default.createElement(AudioRecordingPreview, { durationSeconds: recording.duration ?? 0, mimeType: recording.mime_type, src: recording.asset_url, waveformData: recording.waveform_data }) : state.paused || state.recording ? import_react241.default.createElement(AudioRecordingInProgress, null) : null,
      state.paused && import_react241.default.createElement(
        "button",
        { className: "str-chat__audio_recorder__resume-recording-button", onClick: recorder.resume },
        import_react241.default.createElement(MicIcon, null)
      ),
      state.recording && import_react241.default.createElement(
        "button",
        { className: "str-chat__audio_recorder__pause-recording-button", "data-testid": "pause-recording-audio-button", onClick: recorder.pause },
        import_react241.default.createElement(PauseIcon2, null)
      ),
      state.stopped ? import_react241.default.createElement("button", { className: "str-chat__audio_recorder__complete-button", "data-testid": "audio-recorder-complete-button", disabled: isUploadingFile, onClick: completeRecording }, isUploadingFile ? import_react241.default.createElement(LoadingIndicatorIcon, null) : import_react241.default.createElement(SendIcon, null)) : import_react241.default.createElement(
        "button",
        { className: "str-chat__audio_recorder__stop-button", "data-testid": "audio-recorder-stop-button", onClick: recorder.stop },
        import_react241.default.createElement(CheckSignIcon, null)
      )
    )
  );
};

// node_modules/stream-chat-react/dist/components/MediaRecorder/AudioRecorder/AudioRecordingButtons.js
var import_react242 = __toESM(require_react());
var StartRecordingAudioButton = (props) => import_react242.default.createElement(
  "button",
  { "aria-label": "Start recording audio", className: "str-chat__start-recording-audio-button", "data-testid": "start-recording-audio-button", ...props },
  import_react242.default.createElement(MicIcon, null)
);

// node_modules/stream-chat-react/dist/components/MessageInput/AttachmentPreviewList/VoiceRecordingPreview.js
var VoiceRecordingPreview = ({ attachment, handleRetry, removeAttachments }) => {
  var _a, _b, _c;
  const { audioRef, isPlaying, secondsElapsed, togglePlay } = useAudioController({
    mimeType: attachment.mime_type
  });
  return import_react243.default.createElement(
    "div",
    { className: "str-chat__attachment-preview-voice-recording", "data-testid": "attachment-preview-voice-recording" },
    import_react243.default.createElement(
      "audio",
      { ref: audioRef },
      import_react243.default.createElement("source", { "data-testid": "audio-source", src: attachment.asset_url, type: attachment.mime_type })
    ),
    import_react243.default.createElement(PlayButton, { isPlaying, onClick: togglePlay }),
    import_react243.default.createElement(
      "button",
      { className: "str-chat__attachment-preview-delete", "data-testid": "file-preview-item-delete-button", disabled: ((_a = attachment.localMetadata) == null ? void 0 : _a.uploadState) === "uploading", onClick: () => {
        var _a2;
        return ((_a2 = attachment.localMetadata) == null ? void 0 : _a2.id) && removeAttachments([attachment.localMetadata.id]);
      } },
      import_react243.default.createElement(CloseIcon, null)
    ),
    ((_b = attachment.localMetadata) == null ? void 0 : _b.uploadState) === "failed" && !!handleRetry && import_react243.default.createElement(
      "button",
      { className: "str-chat__attachment-preview-error str-chat__attachment-preview-error-file", "data-testid": "file-preview-item-retry-button", onClick: () => handleRetry(attachment) },
      import_react243.default.createElement(RetryIcon, null)
    ),
    import_react243.default.createElement(
      "div",
      { className: "str-chat__attachment-preview-metadata" },
      import_react243.default.createElement("div", { className: "str-chat__attachment-preview-file-name", title: attachment.title }, attachment.title),
      typeof attachment.duration !== "undefined" && import_react243.default.createElement(RecordingTimer, { durationSeconds: secondsElapsed || attachment.duration }),
      ((_c = attachment.localMetadata) == null ? void 0 : _c.uploadState) === "uploading" && import_react243.default.createElement(LoadingIndicatorIcon, { size: 17 })
    ),
    import_react243.default.createElement(
      "div",
      { className: "str-chat__attachment-preview-file-icon" },
      import_react243.default.createElement(FileIcon, { filename: attachment.title, mimeType: attachment.mime_type })
    )
  );
};

// node_modules/stream-chat-react/dist/components/MessageInput/AttachmentPreviewList/FileAttachmentPreview.js
var import_react244 = __toESM(require_react());
var FileAttachmentPreview = ({ attachment, handleRetry, removeAttachments }) => {
  var _a, _b, _c, _d;
  const { t: t2 } = useTranslationContext("FilePreview");
  return import_react244.default.createElement(
    "div",
    { className: "str-chat__attachment-preview-file", "data-testid": "attachment-preview-file" },
    import_react244.default.createElement(
      "div",
      { className: "str-chat__attachment-preview-file-icon" },
      import_react244.default.createElement(FileIcon, { filename: attachment.title, mimeType: attachment.mime_type })
    ),
    import_react244.default.createElement(
      "button",
      { "aria-label": t2("aria/Remove attachment"), className: "str-chat__attachment-preview-delete", "data-testid": "file-preview-item-delete-button", disabled: ((_a = attachment.localMetadata) == null ? void 0 : _a.uploadState) === "uploading", onClick: () => {
        var _a2, _b2;
        return ((_a2 = attachment.localMetadata) == null ? void 0 : _a2.id) && removeAttachments([(_b2 = attachment.localMetadata) == null ? void 0 : _b2.id]);
      } },
      import_react244.default.createElement(CloseIcon, null)
    ),
    ((_b = attachment.localMetadata) == null ? void 0 : _b.uploadState) === "failed" && !!handleRetry && import_react244.default.createElement(
      "button",
      { className: "str-chat__attachment-preview-error str-chat__attachment-preview-error-file", "data-testid": "file-preview-item-retry-button", onClick: () => handleRetry(attachment) },
      import_react244.default.createElement(RetryIcon, null)
    ),
    import_react244.default.createElement(
      "div",
      { className: "str-chat__attachment-preview-file-end" },
      import_react244.default.createElement("div", { className: "str-chat__attachment-preview-file-name", title: attachment.title }, attachment.title),
      ((_c = attachment.localMetadata) == null ? void 0 : _c.uploadState) === "finished" && !!attachment.asset_url && import_react244.default.createElement(
        "a",
        { "aria-label": t2("aria/Download attachment"), className: "str-chat__attachment-preview-file-download", download: true, href: attachment.asset_url, rel: "noreferrer", target: "_blank", title: t2("Download attachment {{ name }}", { name: attachment.title }) },
        import_react244.default.createElement(DownloadIcon2, null)
      ),
      ((_d = attachment.localMetadata) == null ? void 0 : _d.uploadState) === "uploading" && import_react244.default.createElement(LoadingIndicatorIcon, { size: 17 })
    )
  );
};

// node_modules/stream-chat-react/dist/components/MessageInput/AttachmentPreviewList/ImageAttachmentPreview.js
var import_react245 = __toESM(require_react());
var ImageAttachmentPreview = ({ attachment, handleRetry, removeAttachments }) => {
  const { t: t2 } = useTranslationContext("ImagePreviewItem");
  const { BaseImage: BaseImage3 = BaseImage } = useComponentContext("ImagePreview");
  const [previewError, setPreviewError] = (0, import_react245.useState)(false);
  const { id, uploadState } = attachment.localMetadata ?? {};
  const handleLoadError = (0, import_react245.useCallback)(() => setPreviewError(true), []);
  const assetUrl = attachment.image_url || attachment.localMetadata.previewUri;
  return import_react245.default.createElement(
    "div",
    { className: clsx_default("str-chat__attachment-preview-image", {
      "str-chat__attachment-preview-image--error": previewError
    }), "data-testid": "attachment-preview-image" },
    import_react245.default.createElement(
      "button",
      { "aria-label": t2("aria/Remove attachment"), className: "str-chat__attachment-preview-delete", "data-testid": "image-preview-item-delete-button", disabled: uploadState === "uploading", onClick: () => id && removeAttachments([id]) },
      import_react245.default.createElement(CloseIcon, null)
    ),
    uploadState === "failed" && import_react245.default.createElement(
      "button",
      { className: "str-chat__attachment-preview-error str-chat__attachment-preview-error-image", "data-testid": "image-preview-item-retry-button", onClick: () => handleRetry(attachment) },
      import_react245.default.createElement(RetryIcon, null)
    ),
    uploadState === "uploading" && import_react245.default.createElement(
      "div",
      { className: "str-chat__attachment-preview-image-loading" },
      import_react245.default.createElement(LoadingIndicatorIcon, { size: 17 })
    ),
    assetUrl && import_react245.default.createElement(BaseImage3, { alt: attachment.fallback, className: "str-chat__attachment-preview-thumbnail", onError: handleLoadError, src: assetUrl, title: attachment.fallback })
  );
};

// node_modules/stream-chat-react/dist/components/MessageInput/AttachmentPreviewList/AttachmentPreviewList.js
var AttachmentPreviewList = ({ AudioAttachmentPreview = FileAttachmentPreview, FileAttachmentPreview: FileAttachmentPreview2 = FileAttachmentPreview, ImageAttachmentPreview: ImageAttachmentPreview2 = ImageAttachmentPreview, UnsupportedAttachmentPreview: UnsupportedAttachmentPreview2 = UnsupportedAttachmentPreview, VideoAttachmentPreview = FileAttachmentPreview, VoiceRecordingPreview: VoiceRecordingPreview2 = VoiceRecordingPreview }) => {
  const { attachments, removeAttachments, uploadAttachment } = useMessageInputContext("AttachmentPreviewList");
  return import_react246.default.createElement(
    "div",
    { className: "str-chat__attachment-preview-list" },
    import_react246.default.createElement("div", { className: "str-chat__attachment-list-scroll-container", "data-testid": "attachment-list-scroll-container" }, attachments.map((attachment) => {
      if (isScrapedContent(attachment))
        return null;
      if (isLocalVoiceRecordingAttachment(attachment)) {
        return import_react246.default.createElement(VoiceRecordingPreview2, { attachment, handleRetry: uploadAttachment, key: attachment.localMetadata.id || attachment.asset_url, removeAttachments });
      } else if (isLocalAudioAttachment(attachment)) {
        return import_react246.default.createElement(AudioAttachmentPreview, { attachment, handleRetry: uploadAttachment, key: attachment.localMetadata.id || attachment.asset_url, removeAttachments });
      } else if (isLocalMediaAttachment(attachment)) {
        return import_react246.default.createElement(VideoAttachmentPreview, { attachment, handleRetry: uploadAttachment, key: attachment.localMetadata.id || attachment.asset_url, removeAttachments });
      } else if (isLocalImageAttachment(attachment)) {
        return import_react246.default.createElement(ImageAttachmentPreview2, { attachment, handleRetry: uploadAttachment, key: attachment.localMetadata.id || attachment.image_url, removeAttachments });
      } else if (isLocalFileAttachment(attachment)) {
        return import_react246.default.createElement(FileAttachmentPreview2, { attachment, handleRetry: uploadAttachment, key: attachment.localMetadata.id || attachment.asset_url, removeAttachments });
      } else if (isLocalAttachment(attachment)) {
        return import_react246.default.createElement(UnsupportedAttachmentPreview2, { attachment, handleRetry: uploadAttachment, key: attachment.localMetadata.id, removeAttachments });
      }
      return null;
    }))
  );
};

// node_modules/stream-chat-react/dist/components/MessageInput/CooldownTimer.js
var import_react248 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/useTimer.js
var import_react247 = __toESM(require_react());
var useTimer = ({ startFrom }) => {
  const [secondsLeft, setSecondsLeft] = (0, import_react247.useState)();
  (0, import_react247.useEffect)(() => {
    let countdownTimeout;
    if (typeof secondsLeft === "number" && secondsLeft > 0) {
      countdownTimeout = setTimeout(() => {
        setSecondsLeft(secondsLeft - 1);
      }, 1e3);
    }
    return () => {
      clearTimeout(countdownTimeout);
    };
  }, [secondsLeft]);
  (0, import_react247.useEffect)(() => {
    setSecondsLeft(startFrom ?? 0);
  }, [startFrom]);
  return secondsLeft;
};

// node_modules/stream-chat-react/dist/components/MessageInput/CooldownTimer.js
var CooldownTimer = ({ cooldownInterval }) => {
  const secondsLeft = useTimer({ startFrom: cooldownInterval });
  return import_react248.default.createElement("div", { className: "str-chat__message-input-cooldown", "data-testid": "cooldown-timer" }, secondsLeft);
};

// node_modules/stream-chat-react/dist/components/MessageInput/DefaultTriggerProvider.js
var import_react251 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/useCommandTrigger.js
var useCommandTrigger = () => {
  const { channelConfig } = useChannelStateContext("useCommandTrigger");
  const { t: t2 } = useTranslationContext("useCommandTrigger");
  const commands = channelConfig == null ? void 0 : channelConfig.commands;
  return {
    component: CommandItem,
    dataProvider: (query, text3, onReady) => {
      if (text3.indexOf("/") !== 0 || !commands) {
        return [];
      }
      const selectedCommands = commands.filter((command) => {
        var _a;
        return ((_a = command.name) == null ? void 0 : _a.indexOf(query)) !== -1;
      });
      selectedCommands.sort((a, b) => {
        var _a, _b;
        let nameA = (_a = a.name) == null ? void 0 : _a.toLowerCase();
        let nameB = (_b = b.name) == null ? void 0 : _b.toLowerCase();
        if ((nameA == null ? void 0 : nameA.indexOf(query)) === 0) {
          nameA = `0${nameA}`;
        }
        if ((nameB == null ? void 0 : nameB.indexOf(query)) === 0) {
          nameB = `0${nameB}`;
        }
        if (nameA != null && nameB != null) {
          if (nameA < nameB) {
            return -1;
          }
          if (nameA > nameB) {
            return 1;
          }
        }
        return 0;
      });
      const result = selectedCommands.slice(0, 5);
      if (onReady)
        onReady(result.filter((result2) => result2.name !== void 0).map((commandData) => {
          const translatedCommandData = {
            name: commandData.name
          };
          if (commandData.args)
            translatedCommandData.args = t2(`${commandData.name}-command-args`, {
              defaultValue: commandData.args
            });
          if (commandData.description)
            translatedCommandData.description = t2(`${commandData.name}-command-description`, {
              defaultValue: commandData.description
            });
          return translatedCommandData;
        }), query);
      return result;
    },
    output: (entity) => ({
      caretPosition: "next",
      key: entity.name,
      text: `/${entity.name}`
    })
  };
};

// node_modules/stream-chat-react/dist/components/EmoticonItem/EmoticonItem.js
var import_react249 = __toESM(require_react());
var UnMemoizedEmoticonItem = (props) => {
  const { entity } = props;
  const hasEntity = Object.keys(entity).length;
  const itemParts = entity == null ? void 0 : entity.itemNameParts;
  const renderName = () => {
    if (!hasEntity)
      return null;
    return hasEntity && itemParts.parts.map((part, i) => part.toLowerCase() === itemParts.match.toLowerCase() ? import_react249.default.createElement("span", { className: "str-chat__emoji-item--highlight", key: `part-${i}` }, part) : import_react249.default.createElement("span", { className: "str-chat__emoji-item--part", key: `part-${i}` }, part));
  };
  return import_react249.default.createElement(
    "div",
    { className: "str-chat__emoji-item" },
    import_react249.default.createElement("span", { className: "str-chat__emoji-item--entity" }, entity.native),
    import_react249.default.createElement("span", { className: "str-chat__emoji-item--name" }, renderName())
  );
};
var EmoticonItem = import_react249.default.memo(UnMemoizedEmoticonItem);

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/useEmojiTrigger.js
var useEmojiTrigger = (emojiSearchIndex) => ({
  component: EmoticonItem,
  dataProvider: async (query, _23, onReady) => {
    if (query.length === 0 || query.charAt(0).match(/[^a-zA-Z0-9+-]/)) {
      return onReady([], query);
    }
    const emojis = await (emojiSearchIndex == null ? void 0 : emojiSearchIndex.search(query)) ?? [];
    const result = emojis.filter(Boolean).slice(0, 7).map(({ id, name, native, skins = [] }) => {
      const [firstSkin] = skins;
      return {
        id,
        name,
        native: native ?? firstSkin.native
      };
    });
    if (onReady)
      onReady(result, query);
  },
  output: (entity) => ({
    caretPosition: "next",
    key: entity.id,
    text: `${"native" in entity ? entity.native : ""}`
  })
});

// node_modules/stream-chat-react/dist/components/MessageInput/hooks/useUserTrigger.js
var import_react250 = __toESM(require_react());
var import_lodash19 = __toESM(require_lodash());
var useUserTrigger = (params) => {
  const { disableMentions, mentionAllAppUsers, mentionQueryParams = {}, onSelectUser, useMentionsTransliteration } = params;
  const [searching, setSearching] = (0, import_react250.useState)(false);
  const { client, mutes } = useChatContext("useUserTrigger");
  const { channel } = useChannelStateContext("useUserTrigger");
  const { members } = channel.state;
  const { watchers } = channel.state;
  const getMembersAndWatchers = (0, import_react250.useCallback)(() => {
    const memberUsers = members ? Object.values(members).map(({ user }) => user) : [];
    const watcherUsers = watchers ? Object.values(watchers) : [];
    const users = [...memberUsers, ...watcherUsers];
    const uniqueUsers = {};
    users.forEach((user) => {
      if (user && !uniqueUsers[user.id]) {
        uniqueUsers[user.id] = user;
      }
    });
    return Object.values(uniqueUsers);
  }, [members, watchers]);
  const queryMembersThrottled = (0, import_react250.useCallback)((0, import_lodash19.default)(async (query, onReady) => {
    try {
      const response = await channel.queryMembers({
        name: { $autocomplete: query }
      });
      const users = response.members.map((member) => member.user);
      if (onReady && users.length) {
        onReady(users);
      } else {
        onReady([]);
      }
    } catch (error2) {
      console.log({ error: error2 });
    }
  }, 200), [channel]);
  const queryUsers = async (query, onReady) => {
    if (!query || searching)
      return;
    setSearching(true);
    try {
      const { users } = await client.queryUsers(
        // @ts-expect-error valid query
        {
          $or: [{ id: { $autocomplete: query } }, { name: { $autocomplete: query } }],
          ...typeof mentionQueryParams.filters === "function" ? mentionQueryParams.filters(query) : mentionQueryParams.filters
        },
        Array.isArray(mentionQueryParams.sort) ? [{ id: 1 }, ...mentionQueryParams.sort] : { id: 1, ...mentionQueryParams.sort },
        { limit: 10, ...mentionQueryParams.options }
      );
      if (onReady && users.length) {
        onReady(users);
      } else {
        onReady([]);
      }
    } catch (error2) {
      console.log({ error: error2 });
    }
    setSearching(false);
  };
  const queryUsersThrottled = (0, import_lodash19.default)(queryUsers, 200);
  return {
    callback: (item) => onSelectUser(item),
    component: UserItem,
    dataProvider: (query, text3, onReady) => {
      var _a;
      if (disableMentions)
        return;
      const filterMutes = (data) => {
        if (text3.includes("/unmute") && !mutes.length) {
          return [];
        }
        if (!mutes.length)
          return data;
        if (text3.includes("/unmute")) {
          return data.filter((suggestion) => mutes.some((mute) => mute.target.id === suggestion.id));
        }
        return data.filter((suggestion) => mutes.every((mute) => mute.target.id !== suggestion.id));
      };
      if (mentionAllAppUsers) {
        return queryUsersThrottled(query, (data) => {
          if (onReady)
            onReady(filterMutes(data), query);
        });
      }
      if (!query || Object.values(members || {}).length < 100) {
        const users = getMembersAndWatchers();
        const params2 = {
          ownUserId: client.userID,
          query,
          text: text3,
          useMentionsTransliteration,
          users
        };
        const matchingUsers = searchLocalUsers(params2);
        const usersToShow = ((_a = mentionQueryParams.options) == null ? void 0 : _a.limit) ?? 7;
        const data = matchingUsers.slice(0, usersToShow);
        if (onReady)
          onReady(filterMutes(data), query);
        return data;
      }
      return queryMembersThrottled(query, (data) => {
        if (onReady)
          onReady(filterMutes(data), query);
      });
    },
    output: (entity) => ({
      caretPosition: "next",
      key: entity.id,
      text: `@${entity.name || entity.id}`
    })
  };
};

// node_modules/stream-chat-react/dist/components/MessageInput/DefaultTriggerProvider.js
var DefaultTriggerProvider = ({ children }) => {
  const currentValue = useMessageInputContext("DefaultTriggerProvider");
  const defaultAutocompleteTriggers = {
    "/": useCommandTrigger(),
    ":": useEmojiTrigger(currentValue.emojiSearchIndex),
    "@": useUserTrigger({
      disableMentions: currentValue.disableMentions,
      mentionAllAppUsers: currentValue.mentionAllAppUsers,
      mentionQueryParams: currentValue.mentionQueryParams,
      onSelectUser: currentValue.onSelectUser,
      useMentionsTransliteration: currentValue.useMentionsTransliteration
    })
  };
  const newValue = {
    ...currentValue,
    autocompleteTriggers: defaultAutocompleteTriggers
  };
  return import_react251.default.createElement(MessageInputContextProvider, { value: newValue }, children);
};

// node_modules/stream-chat-react/dist/components/MessageInput/EditMessageForm.js
var import_react264 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageInput/MessageInputFlat.js
var import_react263 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageInput/SendButton.js
var import_react252 = __toESM(require_react());
var SendButton = ({ sendMessage, ...rest }) => import_react252.default.createElement(
  "button",
  { "aria-label": "Send", className: "str-chat__send-button", "data-testid": "send-button", onClick: sendMessage, type: "button", ...rest },
  import_react252.default.createElement(SendIcon, null)
);

// node_modules/stream-chat-react/dist/components/MessageInput/StopAIGenerationButton.js
var import_react253 = __toESM(require_react());
var StopAIGenerationButton = ({ onClick, ...restProps }) => {
  const { t: t2 } = useTranslationContext();
  return import_react253.default.createElement("button", { "aria-label": t2("aria/Stop AI Generation"), className: "str-chat__stop-ai-generation-button", "data-testid": "stop-ai-generation-button", onClick, ...restProps });
};

// node_modules/stream-chat-react/dist/components/MessageInput/QuotedMessagePreview.js
var import_react257 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Message/FixedHeightMessage.js
var import_react255 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MML/MML.js
var import_react254 = __toESM(require_react());
var MMLReact = import_react254.default.lazy(async () => {
  const mml = await import("./mml-react.esm-57QXABTM.js");
  return { default: mml.MML };
});
var MML = (props) => {
  const { actionHandler, align = "right", source } = props;
  const { theme } = useChatContext("MML");
  return import_react254.default.createElement(
    import_react254.Suspense,
    { fallback: null },
    import_react254.default.createElement(MMLReact, { className: `mml-align-${align}`, Loading: null, onSubmit: actionHandler, source, Success: null, theme: (theme || "").replace(" ", "-") })
  );
};

// node_modules/stream-chat-react/dist/components/Message/FixedHeightMessage.js
var selectColor = (number, dark) => {
  const hue = number * 137.508;
  return `hsl(${hue},${dark ? "50%" : "85%"}, ${dark ? "75%" : "55%"})`;
};
var hashUserId = (userId) => {
  const hash3 = userId.split("").reduce((acc, c) => {
    acc = (acc << 5) - acc + c.charCodeAt(0);
    return acc & acc;
  }, 0);
  return Math.abs(hash3) / 10 ** Math.ceil(Math.log10(Math.abs(hash3) + 1));
};
var getUserColor = (theme, userId) => selectColor(hashUserId(userId), theme.includes("dark"));
var UnMemoizedFixedHeightMessage = (props) => {
  var _a, _b, _c, _d;
  const { groupedByUser: propGroupedByUser, message: propMessage } = props;
  const { theme } = useChatContext("FixedHeightMessage");
  const { groupedByUser: contextGroupedByUser, message: contextMessage } = useMessageContext("FixedHeightMessage");
  const { MessageDeleted: MessageDeleted2 = MessageDeleted } = useComponentContext("FixedHeightMessage");
  const { userLanguage } = useTranslationContext("FixedHeightMessage");
  const groupedByUser = propGroupedByUser !== void 0 ? propGroupedByUser : contextGroupedByUser;
  const message = propMessage || contextMessage;
  const handleAction = useActionHandler(message);
  const handleDelete2 = useDeleteHandler(message);
  const role = useUserRole(message);
  const messageTextToRender = ((_a = message == null ? void 0 : message.i18n) == null ? void 0 : _a[`${userLanguage}_text`]) || (message == null ? void 0 : message.text);
  const renderedText = (0, import_react255.useMemo)(() => renderText(messageTextToRender, message.mentioned_users), [message.mentioned_users, messageTextToRender]);
  const userId = ((_b = message.user) == null ? void 0 : _b.id) || "";
  const userColor = (0, import_react255.useMemo)(() => getUserColor(theme, userId), [userId, theme]);
  const messageActionsHandler = (0, import_react255.useCallback)(() => getMessageActions(["delete"], { canDelete: role.canDelete }), [role]);
  const images = (_c = message == null ? void 0 : message.attachments) == null ? void 0 : _c.filter(({ type }) => type === "image");
  return import_react255.default.createElement(
    "div",
    { className: `str-chat__virtual-message__wrapper ${role.isMyMessage ? "str-chat__virtual-message__wrapper--me" : ""} ${groupedByUser ? "str-chat__virtual-message__wrapper--group" : ""}`, key: message.id },
    message.user && import_react255.default.createElement(Avatar, { image: message.user.image, name: message.user.name || message.user.id, user: message.user }),
    import_react255.default.createElement(
      "div",
      { className: "str-chat__virtual-message__content" },
      import_react255.default.createElement(
        "div",
        { className: "str-chat__virtual-message__meta" },
        import_react255.default.createElement(
          "div",
          { className: "str-chat__virtual-message__author", style: { color: userColor } },
          import_react255.default.createElement("strong", null, ((_d = message.user) == null ? void 0 : _d.name) || "unknown")
        )
      ),
      message.deleted_at || message.type === "deleted" ? import_react255.default.createElement(MessageDeleted2, { message }) : import_react255.default.createElement(
        import_react255.default.Fragment,
        null,
        images && import_react255.default.createElement(Gallery, { images }),
        import_react255.default.createElement(
          "div",
          { className: "str-chat__virtual-message__text", "data-testid": "msg-text" },
          renderedText,
          message.mml && import_react255.default.createElement(MML, { actionHandler: handleAction, align: "left", source: message.mml }),
          import_react255.default.createElement(
            "div",
            { className: "str-chat__virtual-message__data" },
            import_react255.default.createElement(MessageActions, { customWrapperClass: "str-chat__virtual-message__actions", getMessageActions: messageActionsHandler, handleDelete: handleDelete2, message, mine: () => role.isMyMessage }),
            import_react255.default.createElement(
              "span",
              { className: "str-chat__virtual-message__date" },
              import_react255.default.createElement(MessageTimestamp, { customClass: "str-chat__message-simple-timestamp", message })
            )
          )
        )
      )
    )
  );
};
var FixedHeightMessage = import_react255.default.memo(UnMemoizedFixedHeightMessage);

// node_modules/stream-chat-react/dist/components/Message/StreamedMessageText.js
var import_react256 = __toESM(require_react());
var StreamedMessageText = (props) => {
  const { message: messageFromProps, renderingLetterCount, renderText: renderText2, streamingLetterIntervalMs } = props;
  const { message: messageFromContext } = useMessageContext("StreamedMessageText");
  const message = messageFromProps || messageFromContext;
  const { text: text3 = "" } = message;
  const { streamedMessageText } = useMessageTextStreaming({
    renderingLetterCount,
    streamingLetterIntervalMs,
    text: text3
  });
  return import_react256.default.createElement(MessageText, { message: { ...message, text: streamedMessageText }, renderText: renderText2 });
};

// node_modules/stream-chat-react/dist/components/MessageInput/QuotedMessagePreview.js
var QuotedMessagePreviewHeader = () => {
  const { setQuotedMessage } = useChannelActionContext("QuotedMessagePreview");
  const { t: t2 } = useTranslationContext("QuotedMessagePreview");
  return import_react257.default.createElement(
    "div",
    { className: "str-chat__quoted-message-preview-header" },
    import_react257.default.createElement("div", { className: "str-chat__quoted-message-reply-to-message" }, t2("Reply to Message")),
    import_react257.default.createElement(
      "button",
      { "aria-label": t2("aria/Cancel Reply"), className: "str-chat__quoted-message-remove", onClick: () => setQuotedMessage(void 0) },
      import_react257.default.createElement(CloseIcon, null)
    )
  );
};
var QuotedMessagePreview = ({ quotedMessage, renderText: renderText2 = renderText }) => {
  var _a;
  const { client } = useChatContext();
  const { Attachment: Attachment2 = Attachment, Avatar: Avatar2 = Avatar } = useComponentContext("QuotedMessagePreview");
  const { userLanguage } = useTranslationContext("QuotedMessagePreview");
  const quotedMessageText = ((_a = quotedMessage.i18n) == null ? void 0 : _a[`${userLanguage}_text`]) || quotedMessage.text;
  const renderedText = (0, import_react257.useMemo)(() => renderText2(quotedMessageText, quotedMessage.mentioned_users), [quotedMessage.mentioned_users, quotedMessageText, renderText2]);
  const quotedMessageAttachment = (0, import_react257.useMemo)(() => {
    const [attachment] = quotedMessage.attachments ?? [];
    return attachment ? [attachment] : [];
  }, [quotedMessage.attachments]);
  if (!quotedMessageText && !quotedMessageAttachment)
    return null;
  const poll = quotedMessage.poll_id && client.polls.fromState(quotedMessage.poll_id);
  return import_react257.default.createElement(
    "div",
    { className: "str-chat__quoted-message-preview", "data-testid": "quoted-message-preview" },
    quotedMessage.user && import_react257.default.createElement(Avatar2, { className: "str-chat__avatar--quoted-message-sender", image: quotedMessage.user.image, name: quotedMessage.user.name || quotedMessage.user.id, user: quotedMessage.user }),
    import_react257.default.createElement("div", { className: "str-chat__quoted-message-bubble" }, poll ? import_react257.default.createElement(Poll, { isQuoted: true, poll }) : import_react257.default.createElement(
      import_react257.default.Fragment,
      null,
      !!quotedMessageAttachment.length && import_react257.default.createElement(Attachment2, { attachments: quotedMessageAttachment, isQuoted: true }),
      import_react257.default.createElement("div", { className: "str-chat__quoted-message-text", "data-testid": "quoted-message-text" }, renderedText)
    ))
  );
};

// node_modules/stream-chat-react/dist/components/MessageInput/LinkPreviewList.js
var import_react258 = __toESM(require_react());
var LinkPreviewList = ({ linkPreviews }) => {
  const { quotedMessage } = useChannelStateContext();
  const showLinkPreviews = linkPreviews.length > 0 && !quotedMessage;
  if (!showLinkPreviews)
    return null;
  return import_react258.default.createElement("div", { className: "str-chat__link-preview-list" }, Array.from(linkPreviews.values()).map((linkPreview) => linkPreview.state === LinkPreviewState.LOADED ? import_react258.default.createElement(LinkPreviewCard, { key: linkPreview.og_scrape_url, linkPreview }) : null));
};
var LinkPreviewCard = ({ linkPreview }) => {
  const { dismissLinkPreview } = useMessageInputContext();
  const { handleEnter, handleLeave, tooltipVisible } = useEnterLeaveHandlers();
  const [referenceElement, setReferenceElement] = (0, import_react258.useState)(null);
  return import_react258.default.createElement(
    "div",
    { className: clsx_default("str-chat__link-preview-card", {
      "str-chat__link-preview-card--loading": linkPreview.state === LinkPreviewState.LOADING
    }), "data-testid": "link-preview-card" },
    import_react258.default.createElement(PopperTooltip, { offset: [0, 5], referenceElement, visible: tooltipVisible }, linkPreview.og_scrape_url),
    import_react258.default.createElement(
      "div",
      { className: "str-chat__link-preview-card__icon-container", onMouseEnter: handleEnter, onMouseLeave: handleLeave, ref: setReferenceElement },
      import_react258.default.createElement(LinkIcon, null)
    ),
    import_react258.default.createElement(
      "div",
      { className: "str-chat__link-preview-card__content" },
      import_react258.default.createElement("div", { className: "str-chat__link-preview-card__content-title" }, linkPreview.title),
      import_react258.default.createElement("div", { className: "str-chat__link-preview-card__content-description" }, linkPreview.text)
    ),
    import_react258.default.createElement(
      "button",
      { className: "str-chat__link-preview-card__dismiss-button", "data-testid": "link-preview-card-dismiss-btn", onClick: () => dismissLinkPreview(linkPreview) },
      import_react258.default.createElement(CloseIcon, null)
    )
  );
};

// node_modules/stream-chat-react/dist/components/ChatAutoComplete/ChatAutoComplete.js
var import_react259 = __toESM(require_react());
var UnMemoizedChatAutoComplete = (props) => {
  const { AutocompleteSuggestionItem: SuggestionItem, AutocompleteSuggestionList: SuggestionList } = useComponentContext("ChatAutoComplete");
  const { t: t2 } = useTranslationContext("ChatAutoComplete");
  const messageInput = useMessageInputContext("ChatAutoComplete");
  const { cooldownRemaining, disabled, emojiSearchIndex, textareaRef: innerRef } = messageInput;
  const placeholder = props.placeholder || t2("Type your message");
  const emojiReplace = props.wordReplace ? (word) => {
    var _a;
    return (_a = props.wordReplace) == null ? void 0 : _a.call(props, word, emojiSearchIndex);
  } : async (word) => {
    const found = await (emojiSearchIndex == null ? void 0 : emojiSearchIndex.search(word)) || [];
    const emoji2 = found.filter(Boolean).slice(0, 10).find(({ emoticons }) => !!(emoticons == null ? void 0 : emoticons.includes(word)));
    if (!emoji2)
      return null;
    const [firstSkin] = emoji2.skins ?? [];
    return emoji2.native ?? firstSkin.native;
  };
  const updateInnerRef = (0, import_react259.useCallback)((ref) => {
    if (innerRef) {
      innerRef.current = ref;
    }
  }, [innerRef]);
  return import_react259.default.createElement(ReactTextareaAutocomplete, { additionalTextareaProps: messageInput.additionalTextareaProps, "aria-label": cooldownRemaining ? t2("Slow Mode ON") : placeholder, className: "str-chat__textarea__textarea str-chat__message-textarea", closeCommandsList: messageInput.closeCommandsList, closeMentionsList: messageInput.closeMentionsList, containerClassName: "str-chat__textarea str-chat__message-textarea-react-host", disabled: (props.disabled ?? disabled) || !!cooldownRemaining, disableMentions: messageInput.disableMentions, grow: messageInput.grow, handleSubmit: props.handleSubmit || messageInput.handleSubmit, innerRef: updateInnerRef, loadingComponent: LoadingIndicator, maxRows: messageInput.maxRows, minChar: 0, minRows: messageInput.minRows, onBlur: props.onBlur, onChange: props.onChange || messageInput.handleChange, onFocus: props.onFocus, onPaste: props.onPaste || messageInput.onPaste, placeholder: cooldownRemaining ? t2("Slow Mode ON") : placeholder, replaceWord: emojiReplace, rows: props.rows || 1, shouldSubmit: messageInput.shouldSubmit, showCommandsList: messageInput.showCommandsList, showMentionsList: messageInput.showMentionsList, SuggestionItem, SuggestionList, trigger: messageInput.autocompleteTriggers || {}, value: props.value || messageInput.text });
};
var ChatAutoComplete = import_react259.default.memo(UnMemoizedChatAutoComplete);

// node_modules/stream-chat-react/dist/components/AIStateIndicator/AIStateIndicator.js
var import_react261 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/AIStateIndicator/hooks/useAIState.js
var import_react260 = __toESM(require_react());
var AIStates = {
  Error: "AI_STATE_ERROR",
  ExternalSources: "AI_STATE_EXTERNAL_SOURCES",
  Generating: "AI_STATE_GENERATING",
  Idle: "AI_STATE_IDLE",
  Thinking: "AI_STATE_THINKING"
};
var useAIState = (channel) => {
  const [aiState, setAiState] = (0, import_react260.useState)(AIStates.Idle);
  (0, import_react260.useEffect)(() => {
    if (!channel) {
      return;
    }
    const indicatorChangedListener = channel.on("ai_indicator.update", (event) => {
      const { cid } = event;
      const state = event.ai_state;
      if (channel.cid === cid) {
        setAiState(state);
      }
    });
    const indicatorClearedListener = channel.on("ai_indicator.clear", (event) => {
      const { cid } = event;
      if (channel.cid === cid) {
        setAiState(AIStates.Idle);
      }
    });
    return () => {
      indicatorChangedListener.unsubscribe();
      indicatorClearedListener.unsubscribe();
    };
  }, [channel]);
  return { aiState };
};

// node_modules/stream-chat-react/dist/components/AIStateIndicator/AIStateIndicator.js
var AIStateIndicator = ({ channel: channelFromProps }) => {
  const { t: t2 } = useTranslationContext();
  const { channel: channelFromContext } = useChannelStateContext("AIStateIndicator");
  const channel = channelFromProps || channelFromContext;
  const { aiState } = useAIState(channel);
  const allowedStates = {
    [AIStates.Thinking]: t2("Thinking..."),
    [AIStates.Generating]: t2("Generating...")
  };
  return aiState in allowedStates ? import_react261.default.createElement(
    "div",
    { className: "str-chat__ai-state-indicator-container" },
    import_react261.default.createElement("p", { className: "str-chat__ai-state-indicator-text" }, allowedStates[aiState])
  ) : null;
};

// node_modules/stream-chat-react/dist/components/MessageInput/WithDragAndDropUpload.js
var import_react262 = __toESM(require_react());
var DragAndDropUploadContext = import_react262.default.createContext({
  subscribeToDrop: null
});
var useDragAndDropUploadContext = () => (0, import_react262.useContext)(DragAndDropUploadContext);
var useRegisterDropHandlers = ({ uploadNewFiles }) => {
  const { subscribeToDrop } = useDragAndDropUploadContext();
  (0, import_react262.useEffect)(() => {
    const unsubscribe = subscribeToDrop == null ? void 0 : subscribeToDrop(uploadNewFiles);
    return unsubscribe;
  }, [subscribeToDrop, uploadNewFiles]);
};
var WithDragAndDropUpload = ({ children, className, component: Component2 = "div", style }) => {
  const dropHandlersRef = (0, import_react262.useRef)(/* @__PURE__ */ new Set());
  const { acceptedFiles = [], multipleUploads } = useChannelStateContext();
  const { t: t2 } = useTranslationContext();
  const messageInputContext = useMessageInputContext();
  const dragAndDropUploadContext = useDragAndDropUploadContext();
  const isWithinMessageInputContext = typeof messageInputContext.uploadNewFiles === "function";
  const accept = (0, import_react262.useMemo)(() => acceptedFiles.reduce((mediaTypeMap, mediaType) => {
    mediaTypeMap[mediaType] ?? (mediaTypeMap[mediaType] = []);
    return mediaTypeMap;
  }, {}), [acceptedFiles]);
  const subscribeToDrop = (0, import_react262.useCallback)((fn2) => {
    dropHandlersRef.current.add(fn2);
    return () => {
      dropHandlersRef.current.delete(fn2);
    };
  }, []);
  const handleDrop = (0, import_react262.useCallback)((files) => {
    dropHandlersRef.current.forEach((fn2) => fn2(files));
  }, []);
  const { getRootProps, isDragActive, isDragReject } = useDropzone({
    accept,
    // apply `disabled` rules if available, otherwise allow anything and
    // let the `uploadNewFiles` handle the limitations internally
    disabled: isWithinMessageInputContext ? !messageInputContext.isUploadEnabled || messageInputContext.maxFilesLeft === 0 : false,
    multiple: multipleUploads,
    noClick: true,
    onDrop: isWithinMessageInputContext ? messageInputContext.uploadNewFiles : handleDrop
  });
  if (dragAndDropUploadContext.subscribeToDrop !== null) {
    return import_react262.default.createElement(Component2, { className }, children);
  }
  return import_react262.default.createElement(
    DragAndDropUploadContext.Provider,
    { value: {
      subscribeToDrop
    } },
    import_react262.default.createElement(
      Component2,
      { ...getRootProps({ className, style }) },
      isDragActive && import_react262.default.createElement(
        "div",
        { className: clsx_default("str-chat__dropzone-container", {
          "str-chat__dropzone-container--not-accepted": isDragReject
        }) },
        !isDragReject && import_react262.default.createElement("p", null, t2("Drag your files here")),
        isDragReject && import_react262.default.createElement("p", null, t2("Some of the files will not be accepted"))
      ),
      children
    )
  );
};

// node_modules/stream-chat-react/dist/components/MessageInput/MessageInputFlat.js
var MessageInputFlat = () => {
  const { asyncMessagesMultiSendEnabled, attachments, cooldownRemaining, findAndEnqueueURLsToEnrich, handleSubmit, hideSendButton, isUploadEnabled, linkPreviews, message, numberOfUploads, parent, recordingController, setCooldownRemaining, text: text3 } = useMessageInputContext("MessageInputFlat");
  const { AttachmentPreviewList: AttachmentPreviewList2 = AttachmentPreviewList, AttachmentSelector: AttachmentSelector2 = message ? SimpleAttachmentSelector : AttachmentSelector, AudioRecorder: AudioRecorder2 = AudioRecorder, CooldownTimer: CooldownTimer2 = CooldownTimer, EmojiPicker, LinkPreviewList: LinkPreviewList2 = LinkPreviewList, QuotedMessagePreview: QuotedMessagePreview2 = QuotedMessagePreview, RecordingPermissionDeniedNotification: RecordingPermissionDeniedNotification2 = RecordingPermissionDeniedNotification, SendButton: SendButton2 = SendButton, StartRecordingAudioButton: StartRecordingAudioButton2 = StartRecordingAudioButton, StopAIGenerationButton: StopAIGenerationButtonOverride } = useComponentContext("MessageInputFlat");
  const { quotedMessage } = useChannelStateContext("MessageInputFlat");
  const { setQuotedMessage } = useChannelActionContext("MessageInputFlat");
  const { channel } = useChatContext("MessageInputFlat");
  const { aiState } = useAIState(channel);
  const stopGenerating = (0, import_react263.useCallback)(() => channel == null ? void 0 : channel.stopAIResponse(), [channel]);
  const [showRecordingPermissionDeniedNotification, setShowRecordingPermissionDeniedNotification] = (0, import_react263.useState)(false);
  const closePermissionDeniedNotification = (0, import_react263.useCallback)(() => {
    setShowRecordingPermissionDeniedNotification(false);
  }, []);
  const failedUploadsCount = (0, import_react263.useMemo)(() => attachments.filter((a) => {
    var _a;
    return ((_a = a.localMetadata) == null ? void 0 : _a.uploadState) === "failed";
  }).length, [attachments]);
  (0, import_react263.useEffect)(() => {
    const handleQuotedMessageUpdate = (e) => {
      var _a;
      if (((_a = e.message) == null ? void 0 : _a.id) !== (quotedMessage == null ? void 0 : quotedMessage.id))
        return;
      if (e.type === "message.deleted") {
        setQuotedMessage(void 0);
        return;
      }
      setQuotedMessage(e.message);
    };
    channel == null ? void 0 : channel.on("message.deleted", handleQuotedMessageUpdate);
    channel == null ? void 0 : channel.on("message.updated", handleQuotedMessageUpdate);
    return () => {
      channel == null ? void 0 : channel.off("message.deleted", handleQuotedMessageUpdate);
      channel == null ? void 0 : channel.off("message.updated", handleQuotedMessageUpdate);
    };
  }, [channel, quotedMessage]);
  if (recordingController.recordingState)
    return import_react263.default.createElement(AudioRecorder2, null);
  const displayQuotedMessage = !message && quotedMessage && quotedMessage.parent_id === (parent == null ? void 0 : parent.id);
  const recordingEnabled = !!(recordingController.recorder && navigator.mediaDevices);
  const isRecording = !!recordingController.recordingState;
  const StopAIGenerationButton2 = StopAIGenerationButtonOverride === void 0 ? StopAIGenerationButton : StopAIGenerationButtonOverride;
  const shouldDisplayStopAIGeneration = [AIStates.Thinking, AIStates.Generating].includes(aiState) && !!StopAIGenerationButton2;
  return import_react263.default.createElement(
    WithDragAndDropUpload,
    { className: "str-chat__message-input", component: "div" },
    recordingEnabled && recordingController.permissionState === "denied" && showRecordingPermissionDeniedNotification && import_react263.default.createElement(RecordingPermissionDeniedNotification2, { onClose: closePermissionDeniedNotification, permissionName: RecordingPermission.MIC }),
    findAndEnqueueURLsToEnrich && import_react263.default.createElement(LinkPreviewList2, { linkPreviews: Array.from(linkPreviews.values()) }),
    displayQuotedMessage && import_react263.default.createElement(QuotedMessagePreviewHeader, null),
    import_react263.default.createElement(
      "div",
      { className: "str-chat__message-input-inner" },
      import_react263.default.createElement(AttachmentSelector2, null),
      import_react263.default.createElement(
        "div",
        { className: "str-chat__message-textarea-container" },
        displayQuotedMessage && import_react263.default.createElement(QuotedMessagePreview2, { quotedMessage }),
        isUploadEnabled && !!(numberOfUploads + failedUploadsCount || attachments.length > 0) && import_react263.default.createElement(AttachmentPreviewList2, null),
        import_react263.default.createElement(
          "div",
          { className: "str-chat__message-textarea-with-emoji-picker" },
          import_react263.default.createElement(ChatAutoComplete, null),
          EmojiPicker && import_react263.default.createElement(EmojiPicker, null)
        )
      ),
      shouldDisplayStopAIGeneration ? import_react263.default.createElement(StopAIGenerationButton2, { onClick: stopGenerating }) : !hideSendButton && import_react263.default.createElement(import_react263.default.Fragment, null, cooldownRemaining ? import_react263.default.createElement(CooldownTimer2, { cooldownInterval: cooldownRemaining, setCooldownRemaining }) : import_react263.default.createElement(
        import_react263.default.Fragment,
        null,
        import_react263.default.createElement(SendButton2, { disabled: !numberOfUploads && !text3.length && attachments.length - failedUploadsCount === 0, sendMessage: handleSubmit }),
        recordingEnabled && import_react263.default.createElement(StartRecordingAudioButton2, { disabled: isRecording || !asyncMessagesMultiSendEnabled && attachments.some((a) => a.type === RecordingAttachmentType.VOICE_RECORDING), onClick: () => {
          var _a;
          (_a = recordingController.recorder) == null ? void 0 : _a.start();
          setShowRecordingPermissionDeniedNotification(true);
        } })
      ))
    )
  );
};

// node_modules/stream-chat-react/dist/components/MessageInput/EditMessageForm.js
var EditMessageForm = () => {
  const { t: t2 } = useTranslationContext("EditMessageForm");
  const { clearEditingState, handleSubmit } = useMessageInputContext("EditMessageForm");
  (0, import_react264.useEffect)(() => {
    const onKeyDown = (event) => {
      if (event.key === "Escape")
        clearEditingState == null ? void 0 : clearEditingState();
    };
    document.addEventListener("keydown", onKeyDown);
    return () => document.removeEventListener("keydown", onKeyDown);
  }, [clearEditingState]);
  return import_react264.default.createElement(
    "form",
    { autoComplete: "off", className: "str-chat__edit-message-form", onSubmit: handleSubmit },
    import_react264.default.createElement(MessageInputFlat, null),
    import_react264.default.createElement(
      "div",
      { className: "str-chat__edit-message-form-options" },
      import_react264.default.createElement("button", { className: "str-chat__edit-message-cancel", "data-testid": "cancel-button", onClick: clearEditingState }, t2("Cancel")),
      import_react264.default.createElement("button", { className: "str-chat__edit-message-send", "data-testid": "send-button-edit-form", type: "submit" }, t2("Send"))
    )
  );
};

// node_modules/stream-chat-react/dist/components/MessageInput/MessageInput.js
var import_react265 = __toESM(require_react());
var MessageInputProvider = (props) => {
  const cooldownTimerState = useCooldownTimer();
  const messageInputState = useMessageInputState(props);
  const { emojiSearchIndex } = useComponentContext("MessageInput");
  const messageInputContextValue = useCreateMessageInputContext({
    ...cooldownTimerState,
    ...messageInputState,
    ...props,
    emojiSearchIndex: props.emojiSearchIndex ?? emojiSearchIndex
  });
  useRegisterDropHandlers(messageInputContextValue);
  return import_react265.default.createElement(MessageInputContextProvider, { value: messageInputContextValue }, props.children);
};
var UnMemoizedMessageInput = (props) => {
  const { Input: PropInput } = props;
  const { dragAndDropWindow } = useChannelStateContext();
  const { Input: ContextInput, TriggerProvider = DefaultTriggerProvider } = useComponentContext("MessageInput");
  const id = useStableId();
  const Input = PropInput || ContextInput || MessageInputFlat;
  const dialogManagerId = props.isThreadInput ? `message-input-dialog-manager-thread-${id}` : `message-input-dialog-manager-${id}`;
  if (dragAndDropWindow)
    return import_react265.default.createElement(
      DialogManagerProvider,
      { id: dialogManagerId },
      import_react265.default.createElement(
        TriggerProvider,
        null,
        import_react265.default.createElement(Input, null)
      )
    );
  return import_react265.default.createElement(
    DialogManagerProvider,
    { id: dialogManagerId },
    import_react265.default.createElement(
      MessageInputProvider,
      { ...props },
      import_react265.default.createElement(
        TriggerProvider,
        null,
        import_react265.default.createElement(Input, null)
      )
    )
  );
};
var MessageInput = import_react265.default.memo(UnMemoizedMessageInput);

// node_modules/stream-chat-react/dist/components/Reactions/ReactionsList.js
var import_react269 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Reactions/ReactionsListModal.js
var import_react267 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Reactions/hooks/useFetchReactions.js
var import_react266 = __toESM(require_react());
function useFetchReactions(options2) {
  const { handleFetchReactions: contextHandleFetchReactions } = useMessageContext("useFetchReactions");
  const [reactions, setReactions] = (0, import_react266.useState)([]);
  const { handleFetchReactions: propHandleFetchReactions, reactionType, shouldFetch, sort } = options2;
  const [isLoading, setIsLoading] = (0, import_react266.useState)(shouldFetch);
  const handleFetchReactions = propHandleFetchReactions ?? contextHandleFetchReactions;
  (0, import_react266.useEffect)(() => {
    if (!shouldFetch) {
      return;
    }
    let cancel = false;
    (async () => {
      try {
        setIsLoading(true);
        const reactions2 = await handleFetchReactions(reactionType, sort);
        if (!cancel) {
          setReactions(reactions2);
        }
      } catch (e) {
        if (!cancel) {
          setReactions([]);
        }
      } finally {
        if (!cancel) {
          setIsLoading(false);
        }
      }
    })();
    return () => {
      cancel = true;
    };
  }, [handleFetchReactions, reactionType, shouldFetch, sort]);
  return { isLoading, reactions };
}

// node_modules/stream-chat-react/dist/components/Reactions/ReactionsListModal.js
var defaultReactionDetailsSort = { created_at: -1 };
function ReactionsListModal({ handleFetchReactions, onSelectedReactionTypeChange, reactionDetailsSort: propReactionDetailsSort, reactions, selectedReactionType, sortReactionDetails: propSortReactionDetails, ...modalProps }) {
  const selectedReaction = reactions.find(({ reactionType }) => reactionType === selectedReactionType);
  const SelectedEmojiComponent = (selectedReaction == null ? void 0 : selectedReaction.EmojiComponent) ?? null;
  const { reactionDetailsSort: contextReactionDetailsSort, sortReactionDetails: contextSortReactionDetails } = useMessageContext("ReactionsListModal");
  const legacySortReactionDetails = propSortReactionDetails ?? contextSortReactionDetails;
  const reactionDetailsSort = propReactionDetailsSort ?? contextReactionDetailsSort ?? defaultReactionDetailsSort;
  const { isLoading: areReactionsLoading, reactions: reactionDetails } = useFetchReactions({
    handleFetchReactions,
    reactionType: selectedReactionType,
    shouldFetch: modalProps.open,
    sort: reactionDetailsSort
  });
  const reactionDetailsWithLegacyFallback = (0, import_react267.useMemo)(() => legacySortReactionDetails ? [...reactionDetails].sort(legacySortReactionDetails) : reactionDetails, [legacySortReactionDetails, reactionDetails]);
  return import_react267.default.createElement(
    Modal,
    { ...modalProps, className: clsx_default("str-chat__message-reactions-details-modal", modalProps.className) },
    import_react267.default.createElement(
      "div",
      { className: "str-chat__message-reactions-details", "data-testid": "reactions-list-modal" },
      import_react267.default.createElement("div", { className: "str-chat__message-reactions-details-reaction-types" }, reactions.map(({ EmojiComponent, reactionCount, reactionType }) => EmojiComponent && import_react267.default.createElement(
        "div",
        { className: clsx_default("str-chat__message-reactions-details-reaction-type", {
          "str-chat__message-reactions-details-reaction-type--selected": selectedReactionType === reactionType
        }), "data-testid": `reaction-details-selector-${reactionType}`, key: reactionType, onClick: () => onSelectedReactionTypeChange == null ? void 0 : onSelectedReactionTypeChange(reactionType) },
        import_react267.default.createElement(
          "span",
          { className: "str-chat__message-reaction-emoji str-chat__message-reaction-emoji--with-fallback" },
          import_react267.default.createElement(EmojiComponent, null)
        ),
        " ",
        import_react267.default.createElement("span", { className: "str-chat__message-reaction-count" }, reactionCount)
      ))),
      SelectedEmojiComponent && import_react267.default.createElement(
        "div",
        { className: "str-chat__message-reaction-emoji str-chat__message-reaction-emoji--with-fallback str-chat__message-reaction-emoji-big" },
        import_react267.default.createElement(SelectedEmojiComponent, null)
      ),
      import_react267.default.createElement("div", { className: "str-chat__message-reactions-details-reacting-users", "data-testid": "all-reacting-users" }, areReactionsLoading ? import_react267.default.createElement(LoadingIndicator, null) : reactionDetailsWithLegacyFallback.map(({ user }) => import_react267.default.createElement(
        "div",
        { className: "str-chat__message-reactions-details-reacting-user", key: user == null ? void 0 : user.id },
        import_react267.default.createElement(Avatar, { className: "stream-chat__avatar--reaction", "data-testid": "avatar", image: user == null ? void 0 : user.image, name: (user == null ? void 0 : user.name) || (user == null ? void 0 : user.id) }),
        import_react267.default.createElement("span", { className: "str-chat__user-item--name", "data-testid": "reaction-user-username" }, (user == null ? void 0 : user.name) || (user == null ? void 0 : user.id))
      )))
    )
  );
}

// node_modules/stream-chat-react/dist/components/Reactions/hooks/useProcessReactions.js
var import_react268 = __toESM(require_react());
var defaultReactionsSort = (a, b) => {
  if (a.firstReactionAt && b.firstReactionAt) {
    return +a.firstReactionAt - +b.firstReactionAt;
  }
  return a.reactionType.localeCompare(b.reactionType, "en");
};
var useProcessReactions = (params) => {
  const { own_reactions: propOwnReactions, reaction_groups: propReactionGroups, reactionOptions: propReactionOptions, reactions: propReactions, sortReactions: propSortReactions } = params;
  const { message, sortReactions: contextSortReactions } = useMessageContext("useProcessReactions");
  const { reactionOptions: contextReactionOptions = defaultReactionOptions } = useComponentContext("useProcessReactions");
  const reactionOptions = propReactionOptions ?? contextReactionOptions;
  const sortReactions = propSortReactions ?? contextSortReactions ?? defaultReactionsSort;
  const latestReactions = propReactions || message.latest_reactions;
  const ownReactions = propOwnReactions || (message == null ? void 0 : message.own_reactions);
  const reactionGroups = propReactionGroups || (message == null ? void 0 : message.reaction_groups);
  const isOwnReaction = (0, import_react268.useCallback)((reactionType) => (ownReactions == null ? void 0 : ownReactions.some((reaction) => reaction.type === reactionType)) ?? false, [ownReactions]);
  const getEmojiByReactionType = (0, import_react268.useCallback)((reactionType) => {
    var _a;
    return ((_a = reactionOptions.find(({ type }) => type === reactionType)) == null ? void 0 : _a.Component) ?? null;
  }, [reactionOptions]);
  const isSupportedReaction = (0, import_react268.useCallback)((reactionType) => reactionOptions.some((reactionOption) => reactionOption.type === reactionType), [reactionOptions]);
  const getLatestReactedUserNames = (0, import_react268.useCallback)((reactionType) => (latestReactions == null ? void 0 : latestReactions.flatMap((reaction) => {
    var _a, _b;
    if (reactionType && reactionType === reaction.type) {
      const username = ((_a = reaction.user) == null ? void 0 : _a.name) || ((_b = reaction.user) == null ? void 0 : _b.id);
      return username ? [username] : [];
    }
    return [];
  })) ?? [], [latestReactions]);
  const existingReactions = (0, import_react268.useMemo)(() => {
    if (!reactionGroups) {
      return [];
    }
    const unsortedReactions = Object.entries(reactionGroups).flatMap(([reactionType, { count, first_reaction_at, last_reaction_at }]) => {
      if (count === 0 || !isSupportedReaction(reactionType)) {
        return [];
      }
      const latestReactedUserNames = getLatestReactedUserNames(reactionType);
      return [
        {
          EmojiComponent: getEmojiByReactionType(reactionType),
          firstReactionAt: first_reaction_at ? new Date(first_reaction_at) : null,
          isOwnReaction: isOwnReaction(reactionType),
          lastReactionAt: last_reaction_at ? new Date(last_reaction_at) : null,
          latestReactedUserNames,
          reactionCount: count,
          reactionType,
          unlistedReactedUserCount: count - latestReactedUserNames.length
        }
      ];
    });
    return unsortedReactions.sort(sortReactions);
  }, [
    getEmojiByReactionType,
    getLatestReactedUserNames,
    isOwnReaction,
    isSupportedReaction,
    reactionGroups,
    sortReactions
  ]);
  const hasReactions = existingReactions.length > 0;
  const totalReactionCount = (0, import_react268.useMemo)(() => existingReactions.reduce((total, { reactionCount }) => total + reactionCount, 0), [existingReactions]);
  return {
    existingReactions,
    hasReactions,
    totalReactionCount
  };
};

// node_modules/stream-chat-react/dist/components/Reactions/ReactionsList.js
var UnMemoizedReactionsList = (props) => {
  const {
    handleFetchReactions,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    reactionDetailsSort,
    reverse = false,
    sortReactionDetails,
    ...rest
  } = props;
  const { existingReactions, hasReactions, totalReactionCount } = useProcessReactions(rest);
  const [selectedReactionType, setSelectedReactionType] = (0, import_react269.useState)(null);
  const { t: t2 } = useTranslationContext("ReactionsList");
  const { ReactionsListModal: ReactionsListModal2 = ReactionsListModal } = useComponentContext();
  const handleReactionButtonClick = (reactionType) => {
    if (totalReactionCount > MAX_MESSAGE_REACTIONS_TO_FETCH) {
      return;
    }
    setSelectedReactionType(reactionType);
  };
  if (!hasReactions)
    return null;
  return import_react269.default.createElement(
    import_react269.default.Fragment,
    null,
    import_react269.default.createElement(
      "div",
      { "aria-label": t2("aria/Reaction list"), className: clsx_default("str-chat__reaction-list str-chat__message-reactions-container", {
        // we are stuck with both classes as both are used in CSS
        "str-chat__reaction-list--reverse": reverse
      }), "data-testid": "reaction-list", role: "figure" },
      import_react269.default.createElement(
        "ul",
        { className: "str-chat__message-reactions" },
        existingReactions.map(({ EmojiComponent, isOwnReaction, reactionCount, reactionType }) => EmojiComponent && import_react269.default.createElement(
          "li",
          { className: clsx_default("str-chat__message-reaction", {
            "str-chat__message-reaction-own": isOwnReaction
          }), key: reactionType },
          import_react269.default.createElement(
            "button",
            { "aria-label": `Reactions: ${reactionType}`, "data-testid": `reactions-list-button-${reactionType}`, onClick: () => handleReactionButtonClick(reactionType), type: "button" },
            import_react269.default.createElement(
              "span",
              { className: "str-chat__message-reaction-emoji" },
              import_react269.default.createElement(EmojiComponent, null)
            ),
            " ",
            import_react269.default.createElement("span", { className: "str-chat__message-reaction-count", "data-testclass": "reaction-list-reaction-count" }, reactionCount)
          )
        )),
        import_react269.default.createElement(
          "li",
          null,
          import_react269.default.createElement("span", { className: "str-chat__reaction-list--counter" }, totalReactionCount)
        )
      )
    ),
    selectedReactionType !== null && import_react269.default.createElement(ReactionsListModal2, { handleFetchReactions, onClose: () => setSelectedReactionType(null), onSelectedReactionTypeChange: setSelectedReactionType, open: selectedReactionType !== null, reactions: existingReactions, selectedReactionType, sortReactionDetails })
  );
};
var ReactionsList = import_react269.default.memo(UnMemoizedReactionsList);

// node_modules/stream-chat-react/dist/components/Reactions/SimpleReactionsList.js
var import_react270 = __toESM(require_react());
var WithTooltip = ({ children, onMouseEnter, onMouseLeave, title }) => {
  const [referenceElement, setReferenceElement] = (0, import_react270.useState)(null);
  const { handleEnter, handleLeave, tooltipVisible } = useEnterLeaveHandlers({
    onMouseEnter,
    onMouseLeave
  });
  return import_react270.default.createElement(
    import_react270.default.Fragment,
    null,
    import_react270.default.createElement(PopperTooltip, { referenceElement, visible: tooltipVisible }, title),
    import_react270.default.createElement("span", { onMouseEnter: handleEnter, onMouseLeave: handleLeave, ref: setReferenceElement }, children)
  );
};
var UnMemoizedSimpleReactionsList = (props) => {
  const { handleReaction: propHandleReaction, ...rest } = props;
  const { handleReaction: contextHandleReaction } = useMessageContext("SimpleReactionsList");
  const { existingReactions, hasReactions, totalReactionCount } = useProcessReactions(rest);
  const handleReaction = propHandleReaction || contextHandleReaction;
  if (!hasReactions)
    return null;
  return import_react270.default.createElement(
    "div",
    { className: "str-chat__message-reactions-container" },
    import_react270.default.createElement(
      "ul",
      { className: "str-chat__simple-reactions-list str-chat__message-reactions", "data-testid": "simple-reaction-list" },
      existingReactions.map(({ EmojiComponent, isOwnReaction, latestReactedUserNames, reactionType }) => {
        const tooltipContent = latestReactedUserNames.join(", ");
        return EmojiComponent && import_react270.default.createElement(
          "li",
          { className: clsx_default("str-chat__simple-reactions-list-item", {
            "str-chat__message-reaction-own": isOwnReaction
          }), key: reactionType, onClick: (event) => handleReaction(reactionType, event), onKeyUp: (event) => handleReaction(reactionType, event) },
          import_react270.default.createElement(
            WithTooltip,
            { title: tooltipContent },
            import_react270.default.createElement(EmojiComponent, null)
          )
        );
      }),
      import_react270.default.createElement("li", { className: "str-chat__simple-reactions-list-item--last-number" }, totalReactionCount)
    )
  );
};
var SimpleReactionsList = import_react270.default.memo(UnMemoizedSimpleReactionsList);

// node_modules/stream-chat-react/dist/components/Message/MessageEditedTimestamp.js
var import_react271 = __toESM(require_react());
function MessageEditedTimestamp({ message: propMessage, open, ...timestampProps }) {
  const { t: t2 } = useTranslationContext("MessageEditedTimestamp");
  const { message: contextMessage } = useMessageContext("MessageEditedTimestamp");
  const { Timestamp: Timestamp2 = Timestamp } = useComponentContext("MessageEditedTimestamp");
  const message = propMessage || contextMessage;
  if (!isMessageEdited(message)) {
    return null;
  }
  return import_react271.default.createElement(
    "div",
    { className: clsx_default("str-chat__message-edited-timestamp", open ? "str-chat__message-edited-timestamp--open" : "str-chat__message-edited-timestamp--collapsed"), "data-testid": "message-edited-timestamp" },
    t2("Edited"),
    " ",
    import_react271.default.createElement(Timestamp2, { timestamp: message.message_text_updated_at, ...timestampProps })
  );
}

// node_modules/stream-chat-react/dist/components/Message/MessageSimple.js
var MessageSimpleWithContext = (props) => {
  var _a;
  const { additionalMessageInputProps, clearEditingState, editing, endOfGroup, firstOfGroup, groupedByUser, handleAction, handleOpenThread, handleRetry, highlighted, isMessageAIGenerated, isMyMessage, message, onUserClick, onUserHover, renderText: renderText2, threadList } = props;
  const { client } = useChatContext("MessageSimple");
  const { t: t2 } = useTranslationContext("MessageSimple");
  const [isBounceDialogOpen, setIsBounceDialogOpen] = (0, import_react272.useState)(false);
  const [isEditedTimestampOpen, setEditedTimestampOpen] = (0, import_react272.useState)(false);
  const {
    Attachment: Attachment2 = Attachment,
    Avatar: Avatar2 = Avatar,
    EditMessageInput = EditMessageForm,
    MessageOptions: MessageOptions2 = MessageOptions,
    // TODO: remove this "passthrough" in the next
    // major release and use the new default instead
    MessageActions: MessageActions2 = MessageOptions2,
    MessageBlocked: MessageBlocked2 = MessageBlocked,
    MessageDeleted: MessageDeleted2 = MessageDeleted,
    MessageBouncePrompt: MessageBouncePrompt2 = MessageBouncePrompt,
    MessageRepliesCountButton: MessageRepliesCountButton2 = MessageRepliesCountButton,
    MessageStatus: MessageStatus2 = MessageStatus,
    MessageTimestamp: MessageTimestamp2 = MessageTimestamp,
    ReactionsList: ReactionsList2 = ReactionsList,
    StreamedMessageText: StreamedMessageText2 = StreamedMessageText,
    PinIndicator: PinIndicator2
  } = useComponentContext("MessageSimple");
  const hasAttachment = messageHasAttachments(message);
  const hasReactions = messageHasReactions(message);
  const isAIGenerated = (0, import_react272.useMemo)(() => isMessageAIGenerated == null ? void 0 : isMessageAIGenerated(message), [isMessageAIGenerated, message]);
  if (message.customType === CUSTOM_MESSAGE_TYPE.date) {
    return null;
  }
  if (message.deleted_at || message.type === "deleted") {
    return import_react272.default.createElement(MessageDeleted2, { message });
  }
  if (isMessageBlocked(message)) {
    return import_react272.default.createElement(MessageBlocked2, null);
  }
  const showMetadata = !groupedByUser || endOfGroup;
  const showReplyCountButton = !threadList && !!message.reply_count;
  const allowRetry = message.status === "failed" && message.errorStatusCode !== 403;
  const isBounced = isMessageBounced(message);
  const isEdited = isMessageEdited(message) && !isAIGenerated;
  let handleClick = void 0;
  if (allowRetry) {
    handleClick = () => handleRetry(message);
  } else if (isBounced) {
    handleClick = () => setIsBounceDialogOpen(true);
  } else if (isEdited) {
    handleClick = () => setEditedTimestampOpen((prev) => !prev);
  }
  const rootClassName2 = clsx_default("str-chat__message str-chat__message-simple", `str-chat__message--${message.type}`, `str-chat__message--${message.status}`, isMyMessage() ? "str-chat__message--me str-chat__message-simple--me" : "str-chat__message--other", message.text ? "str-chat__message--has-text" : "has-no-text", {
    "str-chat__message--has-attachment": hasAttachment,
    "str-chat__message--highlighted": highlighted,
    "str-chat__message--pinned pinned-message": message.pinned,
    "str-chat__message--with-reactions": hasReactions,
    "str-chat__message-send-can-be-retried": (message == null ? void 0 : message.status) === "failed" && (message == null ? void 0 : message.errorStatusCode) !== 403,
    "str-chat__message-with-thread-link": showReplyCountButton,
    "str-chat__virtual-message__wrapper--end": endOfGroup,
    "str-chat__virtual-message__wrapper--first": firstOfGroup,
    "str-chat__virtual-message__wrapper--group": groupedByUser
  });
  const poll = message.poll_id && client.polls.fromState(message.poll_id);
  return import_react272.default.createElement(
    import_react272.default.Fragment,
    null,
    editing && import_react272.default.createElement(
      Modal,
      { className: "str-chat__edit-message-modal", onClose: clearEditingState, open: editing },
      import_react272.default.createElement(MessageInput, { clearEditingState, grow: true, hideSendButton: true, Input: EditMessageInput, message, ...additionalMessageInputProps })
    ),
    isBounceDialogOpen && import_react272.default.createElement(MessageBounceModal, { MessageBouncePrompt: MessageBouncePrompt2, onClose: () => setIsBounceDialogOpen(false), open: isBounceDialogOpen }),
    import_react272.default.createElement(
      "div",
      { className: rootClassName2, key: message.id },
      PinIndicator2 && import_react272.default.createElement(PinIndicator2, null),
      message.user && import_react272.default.createElement(Avatar2, { image: message.user.image, name: message.user.name || message.user.id, onClick: onUserClick, onMouseOver: onUserHover, user: message.user }),
      import_react272.default.createElement(
        "div",
        { className: clsx_default("str-chat__message-inner", {
          "str-chat__simple-message--error-failed": allowRetry || isBounced
        }), "data-testid": "message-inner", onClick: handleClick, onKeyUp: handleClick },
        import_react272.default.createElement(MessageActions2, null),
        import_react272.default.createElement("div", { className: "str-chat__message-reactions-host" }, hasReactions && import_react272.default.createElement(ReactionsList2, { reverse: true })),
        import_react272.default.createElement(
          "div",
          { className: "str-chat__message-bubble" },
          poll && import_react272.default.createElement(Poll, { poll }),
          ((_a = message.attachments) == null ? void 0 : _a.length) && !message.quoted_message ? import_react272.default.createElement(Attachment2, { actionHandler: handleAction, attachments: message.attachments }) : null,
          isAIGenerated ? import_react272.default.createElement(StreamedMessageText2, { message, renderText: renderText2 }) : import_react272.default.createElement(MessageText, { message, renderText: renderText2 }),
          message.mml && import_react272.default.createElement(MML, { actionHandler: handleAction, align: isMyMessage() ? "right" : "left", source: message.mml }),
          import_react272.default.createElement(MessageErrorIcon, null)
        )
      ),
      showReplyCountButton && import_react272.default.createElement(MessageRepliesCountButton2, { onClick: handleOpenThread, reply_count: message.reply_count }),
      showMetadata && import_react272.default.createElement(
        "div",
        { className: "str-chat__message-metadata" },
        import_react272.default.createElement(MessageStatus2, null),
        !isMyMessage() && !!message.user && import_react272.default.createElement("span", { className: "str-chat__message-simple-name" }, message.user.name || message.user.id),
        import_react272.default.createElement(MessageTimestamp2, { customClass: "str-chat__message-simple-timestamp" }),
        isEdited && import_react272.default.createElement("span", { className: "str-chat__mesage-simple-edited" }, t2("Edited")),
        isEdited && import_react272.default.createElement(MessageEditedTimestamp, { calendar: true, open: isEditedTimestampOpen })
      )
    )
  );
};
var MemoizedMessageSimple = import_react272.default.memo(MessageSimpleWithContext, areMessageUIPropsEqual);
var MessageSimple = (props) => {
  const messageContext = useMessageContext("MessageSimple");
  return import_react272.default.createElement(MemoizedMessageSimple, { ...messageContext, ...props });
};

// node_modules/stream-chat-react/dist/components/Message/Message.js
var MessageWithContext = (props) => {
  const { canPin, groupedByUser, Message: propMessage, message, messageActions = Object.keys(MESSAGE_ACTIONS), onUserClick: propOnUserClick, onUserHover: propOnUserHover, userRoles } = props;
  const { client, isMessageAIGenerated } = useChatContext("Message");
  const { read: read2 } = useChannelStateContext("Message");
  const { Message: contextMessage } = useComponentContext("Message");
  const actionsEnabled = message.type === "regular" && message.status === "received";
  const MessageUIComponent = propMessage ?? contextMessage ?? MessageSimple;
  const { clearEdit, editing, setEdit } = useEditHandler();
  const { onUserClick, onUserHover } = useUserHandler(message, {
    onUserClickHandler: propOnUserClick,
    onUserHoverHandler: propOnUserHover
  });
  const { canDelete, canEdit, canFlag, canMarkUnread, canMute, canQuote, canReact, canReply, isMyMessage } = userRoles;
  const messageIsUnread = (0, import_react273.useMemo)(() => {
    var _a;
    return !!(!isMyMessage && ((_a = client.user) == null ? void 0 : _a.id) && read2 && (!read2[client.user.id] || (message == null ? void 0 : message.created_at) && new Date(message.created_at).getTime() > read2[client.user.id].last_read.getTime()));
  }, [client, isMyMessage, message.created_at, read2]);
  const messageActionsHandler = (0, import_react273.useCallback)(() => getMessageActions(messageActions, {
    canDelete,
    canEdit,
    canFlag,
    canMarkUnread,
    canMute,
    canPin,
    canQuote,
    canReact,
    canReply
  }), [
    messageActions,
    canDelete,
    canEdit,
    canFlag,
    canMarkUnread,
    canMute,
    canPin,
    canQuote,
    canReact,
    canReply
  ]);
  const {
    canPin: canPinPropToNotPass,
    // eslint-disable-line @typescript-eslint/no-unused-vars
    messageActions: messageActionsPropToNotPass,
    // eslint-disable-line @typescript-eslint/no-unused-vars
    onlySenderCanEdit: onlySenderCanEditPropToNotPass,
    // eslint-disable-line @typescript-eslint/no-unused-vars
    onUserClick: onUserClickPropToNotPass,
    // eslint-disable-line @typescript-eslint/no-unused-vars
    onUserHover: onUserHoverPropToNotPass,
    // eslint-disable-line @typescript-eslint/no-unused-vars
    userRoles: userRolesPropToNotPass,
    // eslint-disable-line @typescript-eslint/no-unused-vars
    ...rest
  } = props;
  const messageContextValue = {
    ...rest,
    actionsEnabled,
    clearEditingState: clearEdit,
    editing,
    getMessageActions: messageActionsHandler,
    handleEdit: setEdit,
    isMessageAIGenerated,
    isMyMessage: () => isMyMessage,
    messageIsUnread,
    onUserClick,
    onUserHover,
    setEditingState: setEdit
  };
  return import_react273.default.createElement(
    MessageProvider,
    { value: messageContextValue },
    import_react273.default.createElement(MessageUIComponent, { groupedByUser })
  );
};
var MemoizedMessage = import_react273.default.memo(MessageWithContext, areMessagePropsEqual);
var Message = (props) => {
  const { closeReactionSelectorOnClick, disableQuotedMessages, getDeleteMessageErrorNotification, getFetchReactionsErrorNotification, getFlagMessageErrorNotification, getFlagMessageSuccessNotification, getMarkMessageUnreadErrorNotification, getMarkMessageUnreadSuccessNotification, getMuteUserErrorNotification, getMuteUserSuccessNotification, getPinMessageErrorNotification, message, onlySenderCanEdit = false, onMentionsClick: propOnMentionsClick, onMentionsHover: propOnMentionsHover, openThread: propOpenThread, pinPermissions, reactionDetailsSort, retrySendMessage: propRetrySendMessage, sortReactionDetails, sortReactions } = props;
  const { addNotification } = useChannelActionContext("Message");
  const { highlightedMessageId, mutes } = useChannelStateContext("Message");
  const handleAction = useActionHandler(message);
  const handleOpenThread = useOpenThreadHandler(message, propOpenThread);
  const handleReaction = useReactionHandler(message);
  const handleRetry = useRetryHandler(propRetrySendMessage);
  const userRoles = useUserRole(message, onlySenderCanEdit, disableQuotedMessages);
  const handleFetchReactions = useReactionsFetcher(message, {
    getErrorNotification: getFetchReactionsErrorNotification,
    notify: addNotification
  });
  const handleDelete2 = useDeleteHandler(message, {
    getErrorNotification: getDeleteMessageErrorNotification,
    notify: addNotification
  });
  const handleFlag = useFlagHandler(message, {
    getErrorNotification: getFlagMessageErrorNotification,
    getSuccessNotification: getFlagMessageSuccessNotification,
    notify: addNotification
  });
  const handleMarkUnread = useMarkUnreadHandler(message, {
    getErrorNotification: getMarkMessageUnreadErrorNotification,
    getSuccessNotification: getMarkMessageUnreadSuccessNotification,
    notify: addNotification
  });
  const handleMute = useMuteHandler(message, {
    getErrorNotification: getMuteUserErrorNotification,
    getSuccessNotification: getMuteUserSuccessNotification,
    notify: addNotification
  });
  const { onMentionsClick, onMentionsHover } = useMentionsHandler(message, {
    onMentionsClick: propOnMentionsClick,
    onMentionsHover: propOnMentionsHover
  });
  const { canPin, handlePin } = usePinHandler(message, pinPermissions, {
    getErrorNotification: getPinMessageErrorNotification,
    notify: addNotification
  });
  const highlighted = highlightedMessageId === message.id;
  return import_react273.default.createElement(MemoizedMessage, { additionalMessageInputProps: props.additionalMessageInputProps, autoscrollToBottom: props.autoscrollToBottom, canPin, closeReactionSelectorOnClick, customMessageActions: props.customMessageActions, disableQuotedMessages: props.disableQuotedMessages, endOfGroup: props.endOfGroup, firstOfGroup: props.firstOfGroup, formatDate: props.formatDate, groupedByUser: props.groupedByUser, groupStyles: props.groupStyles, handleAction, handleDelete: handleDelete2, handleFetchReactions, handleFlag, handleMarkUnread, handleMute, handleOpenThread, handlePin, handleReaction, handleRetry, highlighted, initialMessage: props.initialMessage, lastReceivedId: props.lastReceivedId, message, Message: props.Message, messageActions: props.messageActions, messageListRect: props.messageListRect, mutes, onMentionsClickMessage: onMentionsClick, onMentionsHoverMessage: onMentionsHover, onUserClick: props.onUserClick, onUserHover: props.onUserHover, pinPermissions: props.pinPermissions, reactionDetailsSort, readBy: props.readBy, renderText: props.renderText, sortReactionDetails, sortReactions, threadList: props.threadList, unsafeHTML: props.unsafeHTML, userRoles });
};

// node_modules/stream-chat-react/dist/components/MessageList/GiphyPreviewMessage.js
var GiphyPreviewMessage = (props) => {
  const { message } = props;
  return import_react274.default.createElement(
    "div",
    { className: "giphy-preview-message" },
    import_react274.default.createElement(Message, { message })
  );
};

// node_modules/stream-chat-react/dist/components/MessageList/MessageList.js
var import_react293 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageList/hooks/MessageList/useEnrichedMessages.js
var import_react275 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageList/utils.js
var processMessages = (params) => {
  var _a, _b;
  const { messages, reviewProcessedMessage, setGiphyPreviewMessage, ...context } = params;
  const { enableDateSeparator, hideDeletedMessages, hideNewMessageSeparator, lastRead, userId } = context;
  let unread = false;
  let ephemeralMessagePresent = false;
  let lastDateSeparator;
  const newMessages = [];
  for (let i = 0; i < messages.length; i += 1) {
    const message = messages[i];
    if (hideDeletedMessages && message.type === "deleted") {
      continue;
    }
    if (setGiphyPreviewMessage && message.type === "ephemeral" && message.command === "giphy") {
      ephemeralMessagePresent = true;
      setGiphyPreviewMessage(message);
      continue;
    }
    const changes = [];
    const messageDate = message.created_at && isDate(message.created_at) && message.created_at.toDateString() || "";
    const previousMessage = messages[i - 1];
    let prevMessageDate = messageDate;
    if (enableDateSeparator && (previousMessage == null ? void 0 : previousMessage.created_at) && isDate(previousMessage.created_at)) {
      prevMessageDate = previousMessage.created_at.toDateString();
    }
    if (!unread && !hideNewMessageSeparator) {
      unread = lastRead && message.created_at && new Date(lastRead) < message.created_at || false;
      if (enableDateSeparator && unread && ((_a = message.user) == null ? void 0 : _a.id) !== userId) {
        changes.push({
          customType: CUSTOM_MESSAGE_TYPE.date,
          date: message.created_at,
          id: makeDateMessageId(message.created_at),
          unread
        });
      }
    }
    if (enableDateSeparator && (i === 0 || // always put date separator before the first message
    messageDate !== prevMessageDate || // add date separator btw. 2 messages created on different date
    // if hiding deleted messages replace the previous deleted message(s) with A separator if the last rendered message was created on different date
    hideDeletedMessages && (previousMessage == null ? void 0 : previousMessage.type) === "deleted" && lastDateSeparator !== messageDate) && ((_b = changes[changes.length - 1]) == null ? void 0 : _b.customType) !== CUSTOM_MESSAGE_TYPE.date) {
      lastDateSeparator = messageDate;
      changes.push({
        customType: CUSTOM_MESSAGE_TYPE.date,
        date: message.created_at,
        id: makeDateMessageId(message.created_at)
      }, message);
    } else {
      changes.push(message);
    }
    newMessages.push(...(reviewProcessedMessage == null ? void 0 : reviewProcessedMessage({
      changes,
      context,
      index: i,
      messages,
      processedMessages: newMessages
    })) || changes);
  }
  if (setGiphyPreviewMessage && !ephemeralMessagePresent) {
    setGiphyPreviewMessage(void 0);
  }
  return newMessages;
};
var makeDateMessageId = (date) => {
  let idSuffix;
  try {
    idSuffix = !date ? nanoid() : date instanceof Date ? date.toISOString() : date;
  } catch (e) {
    idSuffix = nanoid();
  }
  return `${CUSTOM_MESSAGE_TYPE.date}-${idSuffix}`;
};
var getLastReceived = (messages) => {
  for (let i = messages.length - 1; i > 0; i -= 1) {
    if (messages[i].status === "received") {
      return messages[i].id;
    }
  }
  return null;
};
var getReadStates = (messages, read2 = {}, returnAllReadData) => {
  const readData = {};
  Object.values(read2).forEach((readState) => {
    if (!readState.last_read)
      return;
    let userLastReadMsgId;
    messages.forEach((msg) => {
      if (msg.created_at && msg.created_at < readState.last_read) {
        userLastReadMsgId = msg.id;
        if (returnAllReadData) {
          if (!readData[userLastReadMsgId]) {
            readData[userLastReadMsgId] = [];
          }
          readData[userLastReadMsgId].push(readState.user);
        }
      }
    });
    if (userLastReadMsgId && !returnAllReadData) {
      if (!readData[userLastReadMsgId]) {
        readData[userLastReadMsgId] = [];
      }
      readData[userLastReadMsgId].push(readState.user);
    }
  });
  return readData;
};
var insertIntro = (messages, headerPosition) => {
  const newMessages = messages;
  const intro = {
    customType: CUSTOM_MESSAGE_TYPE.intro
  };
  if (!headerPosition) {
    newMessages.unshift(intro);
    return newMessages;
  }
  if (!newMessages.length) {
    newMessages.unshift(intro);
    return newMessages;
  }
  for (let i = 0; i < messages.length; i += 1) {
    const message = messages[i];
    const messageTime = message.created_at && isDate(message.created_at) ? message.created_at.getTime() : null;
    const nextMessage = messages[i + 1];
    const nextMessageTime = nextMessage.created_at && isDate(nextMessage.created_at) ? nextMessage.created_at.getTime() : null;
    if (messageTime && messageTime < headerPosition) {
      if (nextMessageTime && nextMessageTime < headerPosition) {
        if (messages[i + 1] && messages[i + 1].customType === CUSTOM_MESSAGE_TYPE.date)
          continue;
        if (!nextMessageTime) {
          newMessages.push(intro);
          return newMessages;
        }
      } else {
        newMessages.splice(i + 1, 0, intro);
        return newMessages;
      }
    }
  }
  return newMessages;
};
var getGroupStyles = (message, previousMessage, nextMessage, noGroupByUser, maxTimeBetweenGroupedMessages) => {
  var _a, _b, _c, _d, _e, _f, _g;
  if (message.customType === CUSTOM_MESSAGE_TYPE.date)
    return "";
  if (message.customType === CUSTOM_MESSAGE_TYPE.intro)
    return "";
  if (noGroupByUser || ((_a = message.attachments) == null ? void 0 : _a.length) !== 0)
    return "single";
  const isTopMessage = !previousMessage || previousMessage.customType === CUSTOM_MESSAGE_TYPE.intro || previousMessage.customType === CUSTOM_MESSAGE_TYPE.date || previousMessage.type === "system" || previousMessage.type === "error" || ((_b = previousMessage.attachments) == null ? void 0 : _b.length) !== 0 || ((_c = message.user) == null ? void 0 : _c.id) !== ((_d = previousMessage.user) == null ? void 0 : _d.id) || previousMessage.deleted_at || message.reaction_groups && Object.keys(message.reaction_groups).length > 0 || isMessageEdited(previousMessage) || maxTimeBetweenGroupedMessages !== void 0 && previousMessage.created_at && message.created_at && new Date(message.created_at).getTime() - new Date(previousMessage.created_at).getTime() > maxTimeBetweenGroupedMessages;
  const isBottomMessage = !nextMessage || nextMessage.customType === CUSTOM_MESSAGE_TYPE.intro || nextMessage.customType === CUSTOM_MESSAGE_TYPE.date || nextMessage.type === "system" || nextMessage.type === "error" || ((_e = nextMessage.attachments) == null ? void 0 : _e.length) !== 0 || ((_f = message.user) == null ? void 0 : _f.id) !== ((_g = nextMessage.user) == null ? void 0 : _g.id) || nextMessage.deleted_at || nextMessage.reaction_groups && Object.keys(nextMessage.reaction_groups).length > 0 || isMessageEdited(message) || maxTimeBetweenGroupedMessages !== void 0 && nextMessage.created_at && message.created_at && new Date(nextMessage.created_at).getTime() - new Date(message.created_at).getTime() > maxTimeBetweenGroupedMessages;
  if (!isTopMessage && !isBottomMessage) {
    if (message.deleted_at || message.type === "error")
      return "single";
    return "middle";
  }
  if (isBottomMessage) {
    if (isTopMessage || message.deleted_at || message.type === "error")
      return "single";
    return "bottom";
  }
  if (isTopMessage)
    return "top";
  return "";
};
var hasMoreMessagesProbably = (returnedCountMessages, limit) => returnedCountMessages >= limit;
var hasNotMoreMessages = (returnedCountMessages, limit) => returnedCountMessages < limit;
function isDateSeparatorMessage(message) {
  return message.customType === CUSTOM_MESSAGE_TYPE.date && !!message.date && isDate(message.date);
}
var getIsFirstUnreadMessage = ({ firstUnreadMessageId, isFirstMessage, lastReadDate, lastReadMessageId, message, previousMessage, unreadMessageCount = 0 }) => {
  if (message.parent_id)
    return false;
  const createdAtTimestamp = message.created_at && new Date(message.created_at).getTime();
  const lastReadTimestamp = lastReadDate == null ? void 0 : lastReadDate.getTime();
  const messageIsUnread = !!createdAtTimestamp && !!lastReadTimestamp && createdAtTimestamp > lastReadTimestamp;
  const previousMessageIsLastRead = !!lastReadMessageId && lastReadMessageId === (previousMessage == null ? void 0 : previousMessage.id);
  return firstUnreadMessageId === message.id || !!unreadMessageCount && messageIsUnread && (isFirstMessage || previousMessageIsLastRead);
};

// node_modules/stream-chat-react/dist/components/MessageList/hooks/MessageList/useEnrichedMessages.js
var useEnrichedMessages = (args) => {
  const { channel, disableDateSeparator, groupStyles, headerPosition, hideDeletedMessages, hideNewMessageSeparator, maxTimeBetweenGroupedMessages, messages, noGroupByUser, reviewProcessedMessage } = args;
  const { client } = useChatContext("useEnrichedMessages");
  const { HeaderComponent } = useComponentContext("useEnrichedMessages");
  const lastRead = (0, import_react275.useMemo)(() => {
    var _a;
    return (_a = channel.lastRead) == null ? void 0 : _a.call(channel);
  }, [channel]);
  const enableDateSeparator = !disableDateSeparator;
  let messagesWithDates = !enableDateSeparator && !hideDeletedMessages && hideNewMessageSeparator ? messages : processMessages({
    enableDateSeparator,
    hideDeletedMessages,
    hideNewMessageSeparator,
    lastRead,
    messages,
    reviewProcessedMessage,
    userId: client.userID || ""
  });
  if (HeaderComponent) {
    messagesWithDates = insertIntro(messagesWithDates, headerPosition);
  }
  const groupStylesFn = groupStyles || getGroupStyles;
  const messageGroupStyles = (0, import_react275.useMemo)(
    () => messagesWithDates.reduce((acc, message, i) => {
      const style = groupStylesFn(message, messagesWithDates[i - 1], messagesWithDates[i + 1], noGroupByUser, maxTimeBetweenGroupedMessages);
      if (style)
        acc[message.id] = style;
      return acc;
    }, {}),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [maxTimeBetweenGroupedMessages, messagesWithDates, noGroupByUser]
  );
  return { messageGroupStyles, messages: messagesWithDates };
};

// node_modules/stream-chat-react/dist/components/MessageList/hooks/MessageList/useMessageListElements.js
var import_react277 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageList/hooks/useLastReadData.js
var import_react276 = __toESM(require_react());
var useLastReadData = (props) => {
  const { messages, read: read2, returnAllReadData, userID } = props;
  return (0, import_react276.useMemo)(() => getReadStates(messages.filter(({ user }) => (user == null ? void 0 : user.id) === userID), read2, returnAllReadData), [messages, read2, returnAllReadData, userID]);
};

// node_modules/stream-chat-react/dist/components/MessageList/hooks/MessageList/useMessageListElements.js
var useMessageListElements = (props) => {
  const { channelUnreadUiState, enrichedMessages, internalMessageProps, messageGroupStyles, read: read2, renderMessages, returnAllReadData, threadList } = props;
  const { client, customClasses } = useChatContext("useMessageListElements");
  const components = useComponentContext("useMessageListElements");
  const readData = useLastReadData({
    messages: enrichedMessages,
    read: read2,
    returnAllReadData,
    userID: client.userID
  });
  const lastReceivedMessageId = (0, import_react277.useMemo)(() => getLastReceived(enrichedMessages), [enrichedMessages]);
  const elements = (0, import_react277.useMemo)(
    () => renderMessages({
      channelUnreadUiState,
      components,
      customClasses,
      lastReceivedMessageId,
      messageGroupStyles,
      messages: enrichedMessages,
      readData,
      sharedMessageProps: { ...internalMessageProps, threadList }
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      enrichedMessages,
      internalMessageProps,
      lastReceivedMessageId,
      messageGroupStyles,
      channelUnreadUiState,
      readData,
      renderMessages,
      threadList
    ]
  );
  return elements;
};

// node_modules/stream-chat-react/dist/components/MessageList/hooks/MessageList/useMessageListScrollManager.js
var import_react278 = __toESM(require_react());
function useMessageListScrollManager(params) {
  const { loadMoreScrollThreshold, onScrollBy, scrollContainerMeasures, scrolledUpThreshold, scrollToBottom, showNewMessages } = params;
  const { client } = useChatContext("useMessageListScrollManager");
  const measures = (0, import_react278.useRef)({
    offsetHeight: 0,
    scrollHeight: 0
  });
  const messages = (0, import_react278.useRef)(void 0);
  const scrollTop = (0, import_react278.useRef)(0);
  (0, import_react278.useLayoutEffect)(() => {
    var _a, _b, _c;
    const prevMeasures = measures.current;
    const prevMessages = messages.current;
    const newMessages = params.messages;
    const lastNewMessage = newMessages[newMessages.length - 1] || {};
    const lastPrevMessage = prevMessages == null ? void 0 : prevMessages[prevMessages.length - 1];
    const newMeasures = scrollContainerMeasures();
    const wasAtBottom = prevMeasures.scrollHeight - prevMeasures.offsetHeight - scrollTop.current < scrolledUpThreshold;
    if (typeof prevMessages !== "undefined") {
      if (prevMessages.length < newMessages.length) {
        if ((lastPrevMessage == null ? void 0 : lastPrevMessage.id) === lastNewMessage.id) {
          if (scrollTop.current < loadMoreScrollThreshold) {
            const listHeightDelta = newMeasures.scrollHeight - prevMeasures.scrollHeight;
            onScrollBy(listHeightDelta);
          }
        } else {
          const lastMessageIsFromCurrentUser = ((_a = lastNewMessage.user) == null ? void 0 : _a.id) === client.userID;
          if (lastMessageIsFromCurrentUser || wasAtBottom) {
            scrollToBottom();
          } else {
            showNewMessages();
          }
        }
      } else {
        const hasNewReactions = ((_b = lastPrevMessage == null ? void 0 : lastPrevMessage.latest_reactions) == null ? void 0 : _b.length) !== ((_c = lastNewMessage.latest_reactions) == null ? void 0 : _c.length);
        const hasNewReplies = (lastPrevMessage == null ? void 0 : lastPrevMessage.reply_count) !== lastNewMessage.reply_count;
        if ((hasNewReactions || hasNewReplies) && wasAtBottom) {
          scrollToBottom();
        }
      }
    }
    messages.current = newMessages;
    measures.current = newMeasures;
  }, [measures, messages, params.messages]);
  return (scrollTopValue) => {
    scrollTop.current = scrollTopValue;
  };
}

// node_modules/stream-chat-react/dist/components/MessageList/hooks/MessageList/useScrollLocationLogic.js
var import_react279 = __toESM(require_react());
var useScrollLocationLogic = (params) => {
  const { hasMoreNewer, listElement, loadMoreScrollThreshold, messages = [], scrolledUpThreshold = 200, suppressAutoscroll } = params;
  const [hasNewMessages, setHasNewMessages] = (0, import_react279.useState)(false);
  const [wrapperRect, setWrapperRect] = (0, import_react279.useState)();
  const [isMessageListScrolledToBottom, setIsMessageListScrolledToBottom] = (0, import_react279.useState)(true);
  const closeToBottom = (0, import_react279.useRef)(false);
  const closeToTop = (0, import_react279.useRef)(false);
  const scrollToBottom = (0, import_react279.useCallback)(() => {
    if (!(listElement == null ? void 0 : listElement.scrollTo) || hasMoreNewer || suppressAutoscroll) {
      return;
    }
    listElement.scrollTo({
      top: listElement.scrollHeight
    });
    setHasNewMessages(false);
  }, [listElement, hasMoreNewer, suppressAutoscroll]);
  (0, import_react279.useLayoutEffect)(() => {
    if (listElement) {
      setWrapperRect(listElement.getBoundingClientRect());
      scrollToBottom();
    }
  }, [listElement, hasMoreNewer]);
  const updateScrollTop = useMessageListScrollManager({
    loadMoreScrollThreshold,
    messages,
    onScrollBy: (scrollBy) => {
      listElement == null ? void 0 : listElement.scrollBy({ top: scrollBy });
    },
    scrollContainerMeasures: () => ({
      offsetHeight: (listElement == null ? void 0 : listElement.offsetHeight) || 0,
      scrollHeight: (listElement == null ? void 0 : listElement.scrollHeight) || 0
    }),
    scrolledUpThreshold,
    scrollToBottom,
    showNewMessages: () => setHasNewMessages(true)
  });
  const onScroll = (0, import_react279.useCallback)((event) => {
    const element2 = event.target;
    const scrollTop = element2.scrollTop;
    updateScrollTop(scrollTop);
    const offsetHeight = element2.offsetHeight;
    const scrollHeight = element2.scrollHeight;
    const prevCloseToBottom = closeToBottom.current;
    closeToBottom.current = scrollHeight - (scrollTop + offsetHeight) < scrolledUpThreshold;
    closeToTop.current = scrollTop < scrolledUpThreshold;
    if (closeToBottom.current) {
      setHasNewMessages(false);
    }
    if (prevCloseToBottom && !closeToBottom.current) {
      setIsMessageListScrolledToBottom(false);
    } else if (!prevCloseToBottom && closeToBottom.current) {
      setIsMessageListScrolledToBottom(true);
    }
  }, [updateScrollTop, closeToTop, closeToBottom, scrolledUpThreshold]);
  return {
    hasNewMessages,
    isMessageListScrolledToBottom,
    onScroll,
    scrollToBottom,
    wrapperRect
  };
};

// node_modules/stream-chat-react/dist/components/MessageList/hooks/MessageList/useUnreadMessagesNotification.js
var import_react282 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageList/MessageListMainPanel.js
var import_react280 = __toESM(require_react());
var MESSAGE_LIST_MAIN_PANEL_CLASS = "str-chat__main-panel-inner str-chat__message-list-main-panel";
var MessageListMainPanel = ({ children }) => import_react280.default.createElement("div", { className: MESSAGE_LIST_MAIN_PANEL_CLASS }, children);

// node_modules/stream-chat-react/dist/components/MessageList/UnreadMessagesSeparator.js
var import_react281 = __toESM(require_react());
var UNREAD_MESSAGE_SEPARATOR_CLASS = "str-chat__unread-messages-separator";
var UnreadMessagesSeparator = ({ showCount, unreadCount }) => {
  const { t: t2 } = useTranslationContext("UnreadMessagesSeparator");
  return import_react281.default.createElement("div", { className: UNREAD_MESSAGE_SEPARATOR_CLASS, "data-testid": "unread-messages-separator" }, unreadCount && showCount ? t2("unreadMessagesSeparatorText", { count: unreadCount }) : t2("Unread messages"));
};

// node_modules/stream-chat-react/dist/components/MessageList/hooks/MessageList/useUnreadMessagesNotification.js
var targetScrolledAboveVisibleContainerArea = (element2) => {
  const { bottom: targetBottom } = element2.getBoundingClientRect();
  return targetBottom < 0;
};
var targetScrolledBelowVisibleContainerArea = (element2, container) => {
  const { top: targetTop } = element2.getBoundingClientRect();
  const { top: containerBottom } = container.getBoundingClientRect();
  return targetTop > containerBottom;
};
var useUnreadMessagesNotification = ({ isMessageListScrolledToBottom, showAlways, unreadCount }) => {
  const { messages } = useChannelStateContext("UnreadMessagesNotification");
  const [show, setShow] = (0, import_react282.useState)(false);
  const isScrolledAboveTargetTop = (0, import_react282.useRef)(false);
  const intersectionObserverIsSupported = typeof IntersectionObserver !== "undefined";
  (0, import_react282.useEffect)(() => {
    if (!(unreadCount && intersectionObserverIsSupported)) {
      setShow(false);
      return;
    }
    const [msgListPanel] = document.getElementsByClassName(MESSAGE_LIST_MAIN_PANEL_CLASS);
    if (!msgListPanel)
      return;
    const [observedTarget] = document.getElementsByClassName(UNREAD_MESSAGE_SEPARATOR_CLASS);
    if (!observedTarget) {
      setShow(true);
      return;
    }
    const scrolledBelowSeparator = targetScrolledAboveVisibleContainerArea(observedTarget);
    const scrolledAboveSeparator = targetScrolledBelowVisibleContainerArea(observedTarget, msgListPanel);
    setShow(showAlways ? scrolledBelowSeparator || scrolledAboveSeparator : scrolledBelowSeparator);
    const observer = new IntersectionObserver((elements) => {
      if (!elements.length)
        return;
      const { boundingClientRect, isIntersecting } = elements[0];
      if (isIntersecting) {
        setShow(false);
        return;
      }
      const separatorIsAboveContainerTop = boundingClientRect.bottom < 0;
      setShow(showAlways || separatorIsAboveContainerTop);
      isScrolledAboveTargetTop.current = separatorIsAboveContainerTop;
    }, { root: msgListPanel });
    observer.observe(observedTarget);
    return () => {
      observer.disconnect();
    };
  }, [
    intersectionObserverIsSupported,
    isMessageListScrolledToBottom,
    messages,
    showAlways,
    unreadCount
  ]);
  (0, import_react282.useEffect)(() => {
    if (unreadCount && isMessageListScrolledToBottom && isScrolledAboveTargetTop.current) {
      setShow(true);
      isScrolledAboveTargetTop.current = false;
    }
  }, [isMessageListScrolledToBottom, unreadCount]);
  return { show: show && intersectionObserverIsSupported };
};

// node_modules/stream-chat-react/dist/components/MessageList/hooks/useMarkRead.js
var import_react283 = __toESM(require_react());
var hasReadLastMessage = (channel, userId) => {
  var _a, _b;
  const latestMessageIdInChannel = (_a = channel.state.latestMessages.slice(-1)[0]) == null ? void 0 : _a.id;
  const lastReadMessageIdServer = (_b = channel.state.read[userId]) == null ? void 0 : _b.last_read_message_id;
  return latestMessageIdInChannel === lastReadMessageIdServer;
};
var useMarkRead = ({ isMessageListScrolledToBottom, messageListIsThread, wasMarkedUnread }) => {
  const { client } = useChatContext("useMarkRead");
  const { markRead, setChannelUnreadUiState } = useChannelActionContext("useMarkRead");
  const { channel } = useChannelStateContext("useMarkRead");
  (0, import_react283.useEffect)(() => {
    const shouldMarkRead = () => {
      var _a;
      return !document.hidden && !wasMarkedUnread && !messageListIsThread && isMessageListScrolledToBottom && ((_a = client.user) == null ? void 0 : _a.id) && !hasReadLastMessage(channel, client.user.id);
    };
    const onVisibilityChange = () => {
      if (shouldMarkRead())
        markRead();
    };
    const handleMessageNew = (event) => {
      var _a, _b;
      const mainChannelUpdated = !((_a = event.message) == null ? void 0 : _a.parent_id) || ((_b = event.message) == null ? void 0 : _b.show_in_channel);
      if (!isMessageListScrolledToBottom || wasMarkedUnread || document.hidden) {
        setChannelUnreadUiState((prev) => {
          const previousUnreadCount = (prev == null ? void 0 : prev.unread_messages) ?? 0;
          const previousLastMessage = getPreviousLastMessage(channel.state.messages, event.message);
          return {
            ...prev || {},
            last_read: (prev == null ? void 0 : prev.last_read) ?? (previousUnreadCount === 0 && (previousLastMessage == null ? void 0 : previousLastMessage.created_at) ? new Date(previousLastMessage.created_at) : /* @__PURE__ */ new Date(0)),
            // not having information about the last read message means the whole channel is unread,
            unread_messages: previousUnreadCount + 1
          };
        });
      } else if (mainChannelUpdated && shouldMarkRead()) {
        markRead();
      }
    };
    channel.on("message.new", handleMessageNew);
    document.addEventListener("visibilitychange", onVisibilityChange);
    if (shouldMarkRead()) {
      markRead();
    }
    return () => {
      channel.off("message.new", handleMessageNew);
      document.removeEventListener("visibilitychange", onVisibilityChange);
    };
  }, [
    channel,
    client,
    isMessageListScrolledToBottom,
    markRead,
    messageListIsThread,
    setChannelUnreadUiState,
    wasMarkedUnread
  ]);
};
function getPreviousLastMessage(messages, newMessage) {
  if (!newMessage)
    return;
  let previousLastMessage;
  for (let i = messages.length - 1; i >= 0; i--) {
    const msg = messages[i];
    if (!(msg == null ? void 0 : msg.id))
      break;
    if (msg.id !== newMessage.id) {
      previousLastMessage = msg;
      break;
    }
  }
  return previousLastMessage;
}

// node_modules/stream-chat-react/dist/components/MessageList/MessageNotification.js
var import_react284 = __toESM(require_react());
var UnMemoizedMessageNotification = (props) => {
  const { children, onClick, showNotification = true } = props;
  if (!showNotification)
    return null;
  return import_react284.default.createElement("button", { "aria-live": "polite", className: `str-chat__message-notification`, "data-testid": "message-notification", onClick }, children);
};
var MessageNotification = import_react284.default.memo(UnMemoizedMessageNotification);

// node_modules/stream-chat-react/dist/components/MessageList/MessageListNotifications.js
var import_react285 = __toESM(require_react());
var MessageListNotifications = (props) => {
  const { hasNewMessages, isMessageListScrolledToBottom, isNotAtLatestMessageSet, MessageNotification: MessageNotification2, notifications, scrollToBottom, threadList, unreadCount } = props;
  const { t: t2 } = useTranslationContext("MessageListNotifications");
  return import_react285.default.createElement(
    "div",
    { className: "str-chat__list-notifications" },
    notifications.map((notification) => import_react285.default.createElement(CustomNotification, { active: true, key: notification.id, type: notification.type }, notification.text)),
    import_react285.default.createElement(ConnectionStatus, null),
    import_react285.default.createElement(MessageNotification2, { isMessageListScrolledToBottom, onClick: scrollToBottom, showNotification: hasNewMessages || isNotAtLatestMessageSet, threadList, unreadCount }, isNotAtLatestMessageSet ? t2("Latest Messages") : t2("New Messages!"))
  );
};

// node_modules/stream-chat-react/dist/components/MessageList/UnreadMessagesNotification.js
var import_react287 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageList/icons.js
var import_react286 = __toESM(require_react());
var ArrowDown = ({ className, color }) => import_react286.default.createElement(
  "svg",
  { className, "data-testid": "arrow-down", fill: "none", height: "24", viewBox: "0 0 24 24", width: "24", xmlns: "http://www.w3.org/2000/svg" },
  import_react286.default.createElement("path", { d: "M7.41 8.29504L12 12.875L16.59 8.29504L18 9.70504L12 15.705L6 9.70504L7.41 8.29504Z", fill: color || "var(--primary-color)" })
);
var CloseIcon2 = () => import_react286.default.createElement(
  "svg",
  { fill: "currentColor", viewBox: "0 0 14 13", xmlns: "http://www.w3.org/2000/svg" },
  import_react286.default.createElement("path", { d: "M1.32227 12.3408C0.944336 11.9629 0.953125 11.3213 1.32227 10.9521L5.60254 6.66309L1.32227 2.38281C0.953125 2.01367 0.944336 1.37207 1.32227 0.994141C1.7002 0.616211 2.3418 0.625 2.71094 0.985352L7 5.27441L11.2803 0.994141C11.6494 0.625 12.291 0.616211 12.6689 0.994141C13.0469 1.37207 13.0381 2.01367 12.6689 2.38281L8.38867 6.66309L12.6689 10.9521C13.0381 11.3213 13.0469 11.9629 12.6689 12.3408C12.291 12.7188 11.6494 12.71 11.2803 12.3408L7 8.06055L2.71094 12.3408C2.3418 12.71 1.7002 12.7188 1.32227 12.3408Z" })
);

// node_modules/stream-chat-react/dist/components/MessageList/UnreadMessagesNotification.js
var UnreadMessagesNotification = ({ queryMessageLimit, showCount, unreadCount }) => {
  const { jumpToFirstUnreadMessage, markRead } = useChannelActionContext("UnreadMessagesNotification");
  const { t: t2 } = useTranslationContext("UnreadMessagesNotification");
  return import_react287.default.createElement(
    "div",
    { className: "str-chat__unread-messages-notification", "data-testid": "unread-messages-notification" },
    import_react287.default.createElement("button", { onClick: () => jumpToFirstUnreadMessage(queryMessageLimit) }, unreadCount && showCount ? t2("{{count}} unread", { count: unreadCount ?? 0 }) : t2("Unread messages")),
    import_react287.default.createElement(
      "button",
      { onClick: () => markRead() },
      import_react287.default.createElement(CloseIcon2, null)
    )
  );
};

// node_modules/stream-chat-react/dist/components/InfiniteScrollPaginator/InfiniteScroll.js
var import_react288 = __toESM(require_react());
var mousewheelListener2 = (event) => {
  if (event instanceof WheelEvent && event.deltaY === 1) {
    event.preventDefault();
  }
};
var InfiniteScroll = (props) => {
  const { children, element: element2 = "div", hasMore, hasMoreNewer, hasNextPage, hasPreviousPage, head, initialLoad = true, isLoading, listenToScroll, loader, loadMore, loadMoreNewer, loadNextPage, loadPreviousPage, threshold = DEFAULT_LOAD_PAGE_SCROLL_THRESHOLD, useCapture = false, ...elementProps } = props;
  const loadNextPageFn = loadNextPage || loadMoreNewer;
  const loadPreviousPageFn = loadPreviousPage || loadMore;
  const hasNextPageFlag = hasNextPage || hasMoreNewer;
  const hasPreviousPageFlag = hasPreviousPage || hasMore;
  const scrollComponent = (0, import_react288.useRef)(void 0);
  const previousOffset = (0, import_react288.useRef)(void 0);
  const previousReverseOffset = (0, import_react288.useRef)(void 0);
  const scrollListenerRef = (0, import_react288.useRef)(void 0);
  scrollListenerRef.current = () => {
    const element3 = scrollComponent.current;
    if (!element3 || element3.offsetParent === null) {
      return;
    }
    const parentElement = element3.parentElement;
    const offset2 = element3.scrollHeight - parentElement.scrollTop - parentElement.clientHeight;
    const reverseOffset = parentElement.scrollTop;
    if (listenToScroll) {
      listenToScroll(offset2, reverseOffset, threshold);
    }
    if (isLoading)
      return;
    if (previousOffset.current === offset2 && previousReverseOffset.current === reverseOffset)
      return;
    previousOffset.current = offset2;
    previousReverseOffset.current = reverseOffset;
    if (reverseOffset < Number(threshold) && typeof loadPreviousPageFn === "function" && hasPreviousPageFlag) {
      loadPreviousPageFn();
    }
    if (offset2 < Number(threshold) && typeof loadNextPageFn === "function" && hasNextPageFlag) {
      loadNextPageFn();
    }
  };
  (0, import_react288.useEffect)(() => {
    deprecationAndReplacementWarning([
      [{ hasMoreNewer }, { hasNextPage }],
      [{ loadMoreNewer }, { loadNextPage }],
      [{ hasMore }, { hasPreviousPage }],
      [{ loadMore }, { loadPreviousPage }]
    ], "InfiniteScroll");
  }, []);
  (0, import_react288.useEffect)(() => {
    var _a;
    const scrollElement = (_a = scrollComponent.current) == null ? void 0 : _a.parentNode;
    if (!scrollElement)
      return;
    const scrollListener = () => {
      var _a2;
      return (_a2 = scrollListenerRef.current) == null ? void 0 : _a2.call(scrollListenerRef);
    };
    scrollElement.addEventListener("scroll", scrollListener, useCapture);
    scrollElement.addEventListener("resize", scrollListener, useCapture);
    scrollListener();
    return () => {
      scrollElement.removeEventListener("scroll", scrollListener, useCapture);
      scrollElement.removeEventListener("resize", scrollListener, useCapture);
    };
  }, [initialLoad, useCapture]);
  (0, import_react288.useEffect)(() => {
    var _a;
    const scrollElement = (_a = scrollComponent.current) == null ? void 0 : _a.parentNode;
    if (scrollElement) {
      scrollElement.addEventListener("wheel", mousewheelListener2, { passive: false });
    }
    return () => {
      if (scrollElement) {
        scrollElement.removeEventListener("wheel", mousewheelListener2, useCapture);
      }
    };
  }, [useCapture]);
  const attributes = {
    ...elementProps,
    ref: (element3) => {
      scrollComponent.current = element3;
    }
  };
  const childrenArray = [loader, children];
  if (head) {
    childrenArray.unshift(head);
  }
  return import_react288.default.createElement(element2, attributes, childrenArray);
};

// node_modules/stream-chat-react/dist/components/TypingIndicator/TypingIndicator.js
var import_react289 = __toESM(require_react());
var useJoinTypingUsers = (names) => {
  const { t: t2 } = useTranslationContext();
  if (!names.length)
    return null;
  const [name, ...rest] = names;
  if (names.length === 1)
    return t2("{{ user }} is typing...", {
      user: name
    });
  const MAX_JOINED_USERS = 3;
  if (names.length > MAX_JOINED_USERS)
    return t2("{{ users }} and more are typing...", {
      users: names.slice(0, MAX_JOINED_USERS).join(", ").trim()
    });
  return t2("{{ users }} and {{ user }} are typing...", {
    user: name,
    users: rest.join(", ").trim()
  });
};
var UnMemoizedTypingIndicator = (props) => {
  const { threadList } = props;
  const { channelConfig, thread } = useChannelStateContext("TypingIndicator");
  const { client } = useChatContext("TypingIndicator");
  const { typing = {} } = useTypingContext("TypingIndicator");
  const typingInChannel = !threadList ? Object.values(typing).filter(({ parent_id, user }) => {
    var _a;
    return (user == null ? void 0 : user.id) !== ((_a = client.user) == null ? void 0 : _a.id) && !parent_id;
  }) : [];
  const typingInThread = threadList ? Object.values(typing).filter(({ parent_id, user }) => {
    var _a;
    return (user == null ? void 0 : user.id) !== ((_a = client.user) == null ? void 0 : _a.id) && parent_id === (thread == null ? void 0 : thread.id);
  }) : [];
  const typingUserList = (threadList ? typingInThread : typingInChannel).map(({ user }) => (user == null ? void 0 : user.name) || (user == null ? void 0 : user.id)).filter(Boolean);
  const joinedTypingUsers = useJoinTypingUsers(typingUserList);
  const isTypingActive = threadList && typingInThread.length || !threadList && typingInChannel.length;
  if ((channelConfig == null ? void 0 : channelConfig.typing_events) === false) {
    return null;
  }
  if (!isTypingActive)
    return null;
  return import_react289.default.createElement(
    "div",
    { className: clsx_default("str-chat__typing-indicator", {
      "str-chat__typing-indicator--typing": isTypingActive
    }), "data-testid": "typing-indicator" },
    import_react289.default.createElement(
      "div",
      { className: "str-chat__typing-indicator__dots" },
      import_react289.default.createElement("span", { className: "str-chat__typing-indicator__dot" }),
      import_react289.default.createElement("span", { className: "str-chat__typing-indicator__dot" }),
      import_react289.default.createElement("span", { className: "str-chat__typing-indicator__dot" })
    ),
    import_react289.default.createElement("div", { className: "str-chat__typing-indicator__users", "data-testid": "typing-users" }, joinedTypingUsers)
  );
};
var TypingIndicator = import_react289.default.memo(UnMemoizedTypingIndicator);

// node_modules/stream-chat-react/dist/components/MessageList/renderMessages.js
var import_react292 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/DateSeparator/DateSeparator.js
var import_react290 = __toESM(require_react());
var UnMemoizedDateSeparator = (props) => {
  const { calendar: calendar3, date: messageCreatedAt, formatDate, position = "right", unread, ...restTimestampFormatterOptions } = props;
  const { t: t2, tDateTimeParser } = useTranslationContext("DateSeparator");
  const formattedDate = getDateString({
    calendar: calendar3,
    ...restTimestampFormatterOptions,
    formatDate,
    messageCreatedAt,
    t: t2,
    tDateTimeParser,
    timestampTranslationKey: "timestamp/DateSeparator"
  });
  return import_react290.default.createElement(
    "div",
    { className: "str-chat__date-separator", "data-testid": "date-separator" },
    (position === "right" || position === "center") && import_react290.default.createElement("hr", { className: "str-chat__date-separator-line" }),
    import_react290.default.createElement("div", { className: "str-chat__date-separator-date" }, unread ? `${t2("New")} - ${formattedDate}` : formattedDate),
    (position === "left" || position === "center") && import_react290.default.createElement("hr", { className: "str-chat__date-separator-line" })
  );
};
var DateSeparator = import_react290.default.memo(UnMemoizedDateSeparator);

// node_modules/stream-chat-react/dist/components/EventComponent/EventComponent.js
var import_react291 = __toESM(require_react());
var UnMemoizedEventComponent = (props) => {
  var _a, _b, _c;
  const { Avatar: Avatar2 = Avatar, calendar: calendar3, calendarFormats, format, message } = props;
  const { t: t2, tDateTimeParser } = useTranslationContext("EventComponent");
  const { created_at = "", event, text: text3, type } = message;
  const getDateOptions = { messageCreatedAt: created_at.toString(), tDateTimeParser };
  if (type === "system")
    return import_react291.default.createElement(
      "div",
      { className: "str-chat__message--system", "data-testid": "message-system" },
      import_react291.default.createElement(
        "div",
        { className: "str-chat__message--system__text" },
        import_react291.default.createElement("div", { className: "str-chat__message--system__line" }),
        import_react291.default.createElement("p", null, text3),
        import_react291.default.createElement("div", { className: "str-chat__message--system__line" })
      ),
      import_react291.default.createElement(
        "div",
        { className: "str-chat__message--system__date" },
        import_react291.default.createElement("strong", null, getDateString({
          ...getDateOptions,
          calendar: calendar3,
          calendarFormats,
          format,
          t: t2,
          timestampTranslationKey: "timestamp/SystemMessage"
        }))
      )
    );
  if ((event == null ? void 0 : event.type) === "member.removed" || (event == null ? void 0 : event.type) === "member.added") {
    const name = ((_a = event.user) == null ? void 0 : _a.name) || ((_b = event.user) == null ? void 0 : _b.id);
    const sentence = `${name} ${event.type === "member.added" ? "has joined the chat" : "was removed from the chat"}`;
    return import_react291.default.createElement(
      "div",
      { className: "str-chat__event-component__channel-event" },
      import_react291.default.createElement(Avatar2, { image: (_c = event.user) == null ? void 0 : _c.image, name, user: event.user }),
      import_react291.default.createElement(
        "div",
        { className: "str-chat__event-component__channel-event__content" },
        import_react291.default.createElement("em", { className: "str-chat__event-component__channel-event__sentence" }, sentence),
        import_react291.default.createElement("div", { className: "str-chat__event-component__channel-event__date" }, getDateString({ ...getDateOptions, format: "LT" }))
      )
    );
  }
  return null;
};
var EventComponent = import_react291.default.memo(UnMemoizedEventComponent);

// node_modules/stream-chat-react/dist/components/MessageList/renderMessages.js
function defaultRenderMessages({ channelUnreadUiState, components, customClasses, lastReceivedMessageId: lastReceivedId, messageGroupStyles, messages, readData, sharedMessageProps: messageProps }) {
  const { DateSeparator: DateSeparator2 = DateSeparator, HeaderComponent, MessageSystem = EventComponent, UnreadMessagesSeparator: UnreadMessagesSeparator2 = UnreadMessagesSeparator } = components;
  const renderedMessages = [];
  let firstMessage;
  let previousMessage = void 0;
  for (let index3 = 0; index3 < messages.length; index3++) {
    const message = messages[index3];
    if (isDateSeparatorMessage(message)) {
      renderedMessages.push(import_react292.default.createElement(
        "li",
        { key: `${message.date.toISOString()}-i` },
        import_react292.default.createElement(DateSeparator2, { date: message.date, formatDate: messageProps.formatDate, unread: message.unread })
      ));
    } else if (message.customType === CUSTOM_MESSAGE_TYPE.intro && HeaderComponent) {
      renderedMessages.push(import_react292.default.createElement(
        "li",
        { key: "intro" },
        import_react292.default.createElement(HeaderComponent, null)
      ));
    } else if (message.type === "system") {
      renderedMessages.push(import_react292.default.createElement(
        "li",
        { "data-message-id": message.id, key: message.id || message.created_at },
        import_react292.default.createElement(MessageSystem, { message })
      ));
    } else {
      if (!firstMessage) {
        firstMessage = message;
      }
      const groupStyles = messageGroupStyles[message.id] || "";
      const messageClass = (customClasses == null ? void 0 : customClasses.message) || `str-chat__li str-chat__li--${groupStyles}`;
      const isFirstUnreadMessage = getIsFirstUnreadMessage({
        firstUnreadMessageId: channelUnreadUiState == null ? void 0 : channelUnreadUiState.first_unread_message_id,
        isFirstMessage: !!(firstMessage == null ? void 0 : firstMessage.id) && firstMessage.id === message.id,
        lastReadDate: channelUnreadUiState == null ? void 0 : channelUnreadUiState.last_read,
        lastReadMessageId: channelUnreadUiState == null ? void 0 : channelUnreadUiState.last_read_message_id,
        message,
        previousMessage,
        unreadMessageCount: channelUnreadUiState == null ? void 0 : channelUnreadUiState.unread_messages
      });
      renderedMessages.push(import_react292.default.createElement(
        import_react292.Fragment,
        { key: message.id || message.created_at },
        isFirstUnreadMessage && UnreadMessagesSeparator2 && import_react292.default.createElement(
          "li",
          { className: "str-chat__li str-chat__unread-messages-separator-wrapper" },
          import_react292.default.createElement(UnreadMessagesSeparator2, { unreadCount: channelUnreadUiState == null ? void 0 : channelUnreadUiState.unread_messages })
        ),
        import_react292.default.createElement(
          "li",
          { className: messageClass, "data-message-id": message.id, "data-testid": messageClass },
          import_react292.default.createElement(Message, { groupStyles: [groupStyles], lastReceivedId, message, readBy: readData[message.id] || [], ...messageProps })
        )
      ));
      previousMessage = message;
    }
  }
  return renderedMessages;
}

// node_modules/stream-chat-react/dist/components/MessageList/MessageList.js
var MessageListWithContext = (props) => {
  const {
    channel,
    channelUnreadUiState,
    disableDateSeparator = false,
    groupStyles,
    hasMoreNewer = false,
    headerPosition,
    hideDeletedMessages = false,
    hideNewMessageSeparator = false,
    highlightedMessageId,
    internalInfiniteScrollProps: { threshold: loadMoreScrollThreshold = DEFAULT_LOAD_PAGE_SCROLL_THRESHOLD, ...restInternalInfiniteScrollProps } = {},
    jumpToLatestMessage = () => Promise.resolve(),
    loadMore: loadMoreCallback,
    loadMoreNewer: loadMoreNewerCallback,
    // @deprecated in favor of `channelCapabilities` - TODO: remove in next major release
    maxTimeBetweenGroupedMessages,
    messageActions = Object.keys(MESSAGE_ACTIONS),
    messageLimit = DEFAULT_NEXT_CHANNEL_PAGE_SIZE,
    messages = [],
    noGroupByUser = false,
    notifications,
    pinPermissions = defaultPinPermissions,
    reactionDetailsSort,
    read: read2,
    renderMessages = defaultRenderMessages,
    returnAllReadData = false,
    reviewProcessedMessage,
    showUnreadNotificationAlways,
    sortReactionDetails,
    sortReactions,
    suppressAutoscroll,
    threadList = false,
    unsafeHTML = false
  } = props;
  const [listElement, setListElement] = import_react293.default.useState(null);
  const [ulElement, setUlElement] = import_react293.default.useState(null);
  const { customClasses } = useChatContext("MessageList");
  const { EmptyStateIndicator: EmptyStateIndicator2 = EmptyStateIndicator, LoadingIndicator: LoadingIndicator2 = LoadingIndicator, MessageListMainPanel: MessageListMainPanel2 = MessageListMainPanel, MessageListNotifications: MessageListNotifications2 = MessageListNotifications, MessageNotification: MessageNotification2 = MessageNotification, TypingIndicator: TypingIndicator2 = TypingIndicator, UnreadMessagesNotification: UnreadMessagesNotification2 = UnreadMessagesNotification } = useComponentContext("MessageList");
  const { hasNewMessages, isMessageListScrolledToBottom, onScroll, scrollToBottom, wrapperRect } = useScrollLocationLogic({
    hasMoreNewer,
    listElement,
    loadMoreScrollThreshold,
    messages,
    scrolledUpThreshold: props.scrolledUpThreshold,
    suppressAutoscroll
  });
  const { show: showUnreadMessagesNotification } = useUnreadMessagesNotification({
    isMessageListScrolledToBottom,
    showAlways: !!showUnreadNotificationAlways,
    unreadCount: channelUnreadUiState == null ? void 0 : channelUnreadUiState.unread_messages
  });
  useMarkRead({
    isMessageListScrolledToBottom,
    messageListIsThread: threadList,
    wasMarkedUnread: !!(channelUnreadUiState == null ? void 0 : channelUnreadUiState.first_unread_message_id)
  });
  const { messageGroupStyles, messages: enrichedMessages } = useEnrichedMessages({
    channel,
    disableDateSeparator,
    groupStyles,
    headerPosition,
    hideDeletedMessages,
    hideNewMessageSeparator,
    maxTimeBetweenGroupedMessages,
    messages,
    noGroupByUser,
    reviewProcessedMessage
  });
  const elements = useMessageListElements({
    channelUnreadUiState,
    enrichedMessages,
    internalMessageProps: {
      additionalMessageInputProps: props.additionalMessageInputProps,
      closeReactionSelectorOnClick: props.closeReactionSelectorOnClick,
      customMessageActions: props.customMessageActions,
      disableQuotedMessages: props.disableQuotedMessages,
      formatDate: props.formatDate,
      getDeleteMessageErrorNotification: props.getDeleteMessageErrorNotification,
      getFlagMessageErrorNotification: props.getFlagMessageErrorNotification,
      getFlagMessageSuccessNotification: props.getFlagMessageSuccessNotification,
      getMarkMessageUnreadErrorNotification: props.getMarkMessageUnreadErrorNotification,
      getMarkMessageUnreadSuccessNotification: props.getMarkMessageUnreadSuccessNotification,
      getMuteUserErrorNotification: props.getMuteUserErrorNotification,
      getMuteUserSuccessNotification: props.getMuteUserSuccessNotification,
      getPinMessageErrorNotification: props.getPinMessageErrorNotification,
      Message: props.Message,
      messageActions,
      messageListRect: wrapperRect,
      onlySenderCanEdit: props.onlySenderCanEdit,
      onMentionsClick: props.onMentionsClick,
      onMentionsHover: props.onMentionsHover,
      onUserClick: props.onUserClick,
      onUserHover: props.onUserHover,
      openThread: props.openThread,
      pinPermissions,
      reactionDetailsSort,
      renderText: props.renderText,
      retrySendMessage: props.retrySendMessage,
      sortReactionDetails,
      sortReactions,
      unsafeHTML
    },
    messageGroupStyles,
    read: read2,
    renderMessages,
    returnAllReadData,
    threadList
  });
  const messageListClass = (customClasses == null ? void 0 : customClasses.messageList) || "str-chat__list";
  const loadMore = import_react293.default.useCallback(() => {
    if (loadMoreCallback) {
      loadMoreCallback(messageLimit);
    }
  }, [loadMoreCallback, messageLimit]);
  const loadMoreNewer = import_react293.default.useCallback(() => {
    if (loadMoreNewerCallback) {
      loadMoreNewerCallback(messageLimit);
    }
  }, [loadMoreNewerCallback, messageLimit]);
  const scrollToBottomFromNotification = import_react293.default.useCallback(async () => {
    if (hasMoreNewer) {
      await jumpToLatestMessage();
    } else {
      scrollToBottom();
    }
  }, [scrollToBottom, hasMoreNewer]);
  import_react293.default.useLayoutEffect(() => {
    if (highlightedMessageId) {
      const element2 = ulElement == null ? void 0 : ulElement.querySelector(`[data-message-id='${highlightedMessageId}']`);
      element2 == null ? void 0 : element2.scrollIntoView({ block: "center" });
    }
  }, [highlightedMessageId]);
  const id = useStableId();
  const showEmptyStateIndicator = elements.length === 0 && !threadList;
  const dialogManagerId = threadList ? `message-list-dialog-manager-thread-${id}` : `message-list-dialog-manager-${id}`;
  return import_react293.default.createElement(
    MessageListContextProvider,
    { value: { listElement, scrollToBottom } },
    import_react293.default.createElement(
      MessageListMainPanel2,
      null,
      import_react293.default.createElement(
        DialogManagerProvider,
        { id: dialogManagerId },
        !threadList && showUnreadMessagesNotification && import_react293.default.createElement(UnreadMessagesNotification2, { unreadCount: channelUnreadUiState == null ? void 0 : channelUnreadUiState.unread_messages }),
        import_react293.default.createElement("div", { className: clsx_default(messageListClass, customClasses == null ? void 0 : customClasses.threadList), onScroll, ref: setListElement, tabIndex: 0 }, showEmptyStateIndicator ? import_react293.default.createElement(EmptyStateIndicator2, { listType: threadList ? "thread" : "message" }) : import_react293.default.createElement(
          InfiniteScroll,
          { className: "str-chat__message-list-scroll", "data-testid": "reverse-infinite-scroll", hasNextPage: props.hasMoreNewer, hasPreviousPage: props.hasMore, head: props.head, isLoading: props.loadingMore, loader: import_react293.default.createElement("div", { className: "str-chat__list__loading", key: "loading-indicator" }, props.loadingMore && import_react293.default.createElement(LoadingIndicator2, { size: 20 })), loadNextPage: loadMoreNewer, loadPreviousPage: loadMore, threshold: loadMoreScrollThreshold, ...restInternalInfiniteScrollProps },
          import_react293.default.createElement("ul", { className: "str-chat__ul", ref: setUlElement }, elements),
          import_react293.default.createElement(TypingIndicator2, { threadList }),
          import_react293.default.createElement("div", { key: "bottom" })
        ))
      )
    ),
    import_react293.default.createElement(MessageListNotifications2, { hasNewMessages, isMessageListScrolledToBottom, isNotAtLatestMessageSet: hasMoreNewer, MessageNotification: MessageNotification2, notifications, scrollToBottom: scrollToBottomFromNotification, threadList, unreadCount: threadList ? void 0 : channelUnreadUiState == null ? void 0 : channelUnreadUiState.unread_messages })
  );
};
var MessageList = (props) => {
  const { jumpToLatestMessage, loadMore, loadMoreNewer } = useChannelActionContext("MessageList");
  const {
    members: membersPropToNotPass,
    // eslint-disable-line @typescript-eslint/no-unused-vars
    mutes: mutesPropToNotPass,
    // eslint-disable-line @typescript-eslint/no-unused-vars
    watchers: watchersPropToNotPass,
    // eslint-disable-line @typescript-eslint/no-unused-vars
    ...restChannelStateContext
  } = useChannelStateContext("MessageList");
  return import_react293.default.createElement(MessageListWithContext, { jumpToLatestMessage, loadMore, loadMoreNewer, ...restChannelStateContext, ...props });
};

// node_modules/stream-chat-react/dist/components/MessageList/ScrollToBottomButton.js
var import_react294 = __toESM(require_react());
var UnMemoizedScrollToBottomButton = (props) => {
  const { isMessageListScrolledToBottom, onClick, threadList } = props;
  const { channel: activeChannel, client } = useChatContext();
  const { thread } = useChannelStateContext();
  const [countUnread, setCountUnread] = (0, import_react294.useState)((activeChannel == null ? void 0 : activeChannel.countUnread()) || 0);
  const [replyCount, setReplyCount] = (0, import_react294.useState)((thread == null ? void 0 : thread.reply_count) || 0);
  const observedEvent = threadList ? "message.updated" : "message.new";
  (0, import_react294.useEffect)(() => {
    const handleEvent = (event) => {
      var _a, _b, _c, _d, _e;
      const newMessageInAnotherChannel = event.cid !== (activeChannel == null ? void 0 : activeChannel.cid);
      const newMessageIsMine = ((_a = event.user) == null ? void 0 : _a.id) === ((_b = client.user) == null ? void 0 : _b.id);
      const isThreadOpen = !!thread;
      const newMessageIsReply = !!((_c = event.message) == null ? void 0 : _c.parent_id);
      const dontIncreaseMainListCounterOnNewReply = isThreadOpen && !threadList && newMessageIsReply;
      if (isMessageListScrolledToBottom || newMessageInAnotherChannel || newMessageIsMine || dontIncreaseMainListCounterOnNewReply) {
        return;
      }
      if (event.type === "message.new") {
        setCountUnread((prev) => prev + 1);
      } else if (((_d = event.message) == null ? void 0 : _d.id) === (thread == null ? void 0 : thread.id)) {
        const newReplyCount = ((_e = event.message) == null ? void 0 : _e.reply_count) || 0;
        setCountUnread(() => newReplyCount - replyCount);
      }
    };
    client.on(observedEvent, handleEvent);
    return () => {
      client.off(observedEvent, handleEvent);
    };
  }, [activeChannel, isMessageListScrolledToBottom, observedEvent, replyCount, thread]);
  (0, import_react294.useEffect)(() => {
    if (isMessageListScrolledToBottom) {
      setCountUnread(0);
      setReplyCount((thread == null ? void 0 : thread.reply_count) || 0);
    }
  }, [isMessageListScrolledToBottom, thread]);
  if (isMessageListScrolledToBottom)
    return null;
  return import_react294.default.createElement(
    "div",
    { className: "str-chat__jump-to-latest-message" },
    import_react294.default.createElement(
      "button",
      { "aria-live": "polite", className: `
        str-chat__message-notification-scroll-to-latest
        str-chat__circle-fab
      `, "data-testid": "message-notification", onClick },
      import_react294.default.createElement(ArrowDown, null),
      countUnread > 0 && import_react294.default.createElement("div", { className: clsx_default("str-chat__message-notification", "str-chat__jump-to-latest-unread-count"), "data-testid": "unread-message-notification-counter" }, countUnread)
    )
  );
};
var ScrollToBottomButton = import_react294.default.memo(UnMemoizedScrollToBottomButton);

// node_modules/stream-chat-react/dist/components/MessageList/VirtualizedMessageList.js
var import_react304 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/MessageList/hooks/VirtualizedMessageList/useNewMessageNotification.js
var import_react295 = __toESM(require_react());
function useNewMessageNotification(messages, currentUserId, hasMoreNewer) {
  const [newMessagesNotification, setNewMessagesNotification] = (0, import_react295.useState)(false);
  const [isMessageListScrolledToBottom, setIsMessageListScrolledToBottom] = (0, import_react295.useState)(true);
  const didMount = (0, import_react295.useRef)(false);
  const lastMessageId = (0, import_react295.useRef)("");
  const atBottom = (0, import_react295.useRef)(false);
  (0, import_react295.useEffect)(() => {
    var _a;
    if (hasMoreNewer) {
      setNewMessagesNotification(true);
      return;
    }
    if (!(messages == null ? void 0 : messages.length))
      return;
    const lastMessage = messages[messages.length - 1];
    const prevMessageId = lastMessageId.current;
    lastMessageId.current = lastMessage.id || "";
    if (lastMessage.id === prevMessageId)
      return;
    if (atBottom.current)
      return;
    if (((_a = lastMessage.user) == null ? void 0 : _a.id) !== currentUserId && didMount.current) {
      setNewMessagesNotification(true);
    }
    didMount.current = true;
  }, [currentUserId, messages, hasMoreNewer]);
  return {
    atBottom,
    isMessageListScrolledToBottom,
    newMessagesNotification,
    setIsMessageListScrolledToBottom,
    setNewMessagesNotification
  };
}

// node_modules/stream-chat-react/dist/components/MessageList/hooks/VirtualizedMessageList/usePrependMessagesCount.js
var import_react296 = __toESM(require_react());
var STATUSES_EXCLUDED_FROM_PREPEND = {
  failed: true,
  sending: true
};
function usePrependedMessagesCount(messages, hasDateSeparator) {
  const firstRealMessageIndex = hasDateSeparator ? 1 : 0;
  const firstMessageOnFirstLoadedPage = (0, import_react296.useRef)(void 0);
  const previousFirstMessageOnFirstLoadedPage = (0, import_react296.useRef)(void 0);
  const previousNumItemsPrepended = (0, import_react296.useRef)(0);
  const numItemsPrepended = (0, import_react296.useMemo)(() => {
    var _a, _b;
    if (!messages || !messages.length) {
      previousNumItemsPrepended.current = 0;
      return 0;
    }
    const currentFirstMessage = messages == null ? void 0 : messages[firstRealMessageIndex];
    const noNewMessages = (currentFirstMessage == null ? void 0 : currentFirstMessage.id) === ((_a = previousFirstMessageOnFirstLoadedPage.current) == null ? void 0 : _a.id);
    const firstMsgMovedAfterMessagesInExcludedStatus = !!((currentFirstMessage == null ? void 0 : currentFirstMessage.status) && STATUSES_EXCLUDED_FROM_PREPEND[currentFirstMessage.status]);
    if (noNewMessages || firstMsgMovedAfterMessagesInExcludedStatus) {
      return previousNumItemsPrepended.current;
    }
    if (!firstMessageOnFirstLoadedPage.current) {
      firstMessageOnFirstLoadedPage.current = currentFirstMessage;
    }
    previousFirstMessageOnFirstLoadedPage.current = currentFirstMessage;
    for (let prependedMessageCount = previousNumItemsPrepended.current; prependedMessageCount < messages.length; prependedMessageCount += 1) {
      const messageIsFirstOnFirstLoadedPage = messages[prependedMessageCount].id === ((_b = firstMessageOnFirstLoadedPage.current) == null ? void 0 : _b.id);
      if (messageIsFirstOnFirstLoadedPage) {
        previousNumItemsPrepended.current = prependedMessageCount - firstRealMessageIndex;
        return previousNumItemsPrepended.current;
      }
    }
    firstMessageOnFirstLoadedPage.current = currentFirstMessage;
    previousNumItemsPrepended.current = 0;
    return 0;
  }, [firstRealMessageIndex, messages, messages == null ? void 0 : messages.length]);
  return numItemsPrepended;
}

// node_modules/stream-chat-react/dist/components/MessageList/hooks/VirtualizedMessageList/useShouldForceScrollToBottom.js
var import_react297 = __toESM(require_react());
function useShouldForceScrollToBottom(messages, currentUserId) {
  const lastFocusedOwnMessage = (0, import_react297.useRef)("");
  const initialFocusRegistered = (0, import_react297.useRef)(false);
  function recheckForNewOwnMessage() {
    var _a;
    if (messages && messages.length > 0) {
      const lastMessage = messages[messages.length - 1];
      if (((_a = lastMessage.user) == null ? void 0 : _a.id) === currentUserId && lastFocusedOwnMessage.current !== lastMessage.id) {
        lastFocusedOwnMessage.current = lastMessage.id;
        return true;
      }
    }
    return false;
  }
  (0, import_react297.useEffect)(() => {
    if (messages && messages.length && !initialFocusRegistered.current) {
      initialFocusRegistered.current = true;
      recheckForNewOwnMessage();
    }
  }, [messages, messages == null ? void 0 : messages.length]);
  return recheckForNewOwnMessage;
}

// node_modules/stream-chat-react/dist/components/MessageList/hooks/VirtualizedMessageList/useGiphyPreview.js
var import_react298 = __toESM(require_react());
var useGiphyPreview = (separateGiphyPreview) => {
  const [giphyPreviewMessage, setGiphyPreviewMessage] = (0, import_react298.useState)();
  const { client } = useChatContext("useGiphyPreview");
  (0, import_react298.useEffect)(() => {
    const handleEvent = (event) => {
      const { message, user } = event;
      if ((message == null ? void 0 : message.command) === "giphy" && (user == null ? void 0 : user.id) === client.userID) {
        setGiphyPreviewMessage(void 0);
      }
    };
    if (separateGiphyPreview)
      client.on("message.new", handleEvent);
    return () => client.off("message.new", handleEvent);
  }, [client, separateGiphyPreview]);
  return {
    giphyPreviewMessage,
    setGiphyPreviewMessage: separateGiphyPreview ? setGiphyPreviewMessage : void 0
  };
};

// node_modules/stream-chat-react/dist/components/MessageList/hooks/VirtualizedMessageList/useMessageSetKey.js
var import_react299 = __toESM(require_react());
var useMessageSetKey = ({ messages }) => {
  const [messageSetKey, setMessageSetKey] = (0, import_react299.useState)(+/* @__PURE__ */ new Date());
  const firstMessageId = (0, import_react299.useRef)(void 0);
  (0, import_react299.useEffect)(() => {
    var _a;
    const continuousSet = messages == null ? void 0 : messages.find((message) => message.id === firstMessageId.current);
    if (!continuousSet) {
      setMessageSetKey(+/* @__PURE__ */ new Date());
    }
    firstMessageId.current = (_a = messages == null ? void 0 : messages[0]) == null ? void 0 : _a.id;
  }, [messages]);
  return {
    messageSetKey
  };
};

// node_modules/stream-chat-react/dist/components/MessageList/hooks/VirtualizedMessageList/useScrollToBottomOnNewMessage.js
var import_react300 = __toESM(require_react());
var useScrollToBottomOnNewMessage = ({ messages, scrollToBottom, scrollToLatestMessageOnFocus }) => {
  const [newMessagesReceivedInBackground, setNewMessagesReceivedInBackground] = (0, import_react300.useState)(false);
  const scrollToBottomIfConfigured = (0, import_react300.useRef)(void 0);
  scrollToBottomIfConfigured.current = (event) => {
    if (!scrollToLatestMessageOnFocus || !newMessagesReceivedInBackground || event.target !== window) {
      return;
    }
    setTimeout(scrollToBottom, 100);
  };
  (0, import_react300.useEffect)(() => {
    setNewMessagesReceivedInBackground(true);
  }, [messages]);
  (0, import_react300.useEffect)(() => {
    const handleFocus = (event) => {
      var _a;
      (_a = scrollToBottomIfConfigured.current) == null ? void 0 : _a.call(scrollToBottomIfConfigured, event);
    };
    const handleBlur = () => {
      setNewMessagesReceivedInBackground(false);
    };
    if (typeof window !== "undefined") {
      window.addEventListener("focus", handleFocus);
      window.addEventListener("blur", handleBlur);
    }
    return () => {
      window.removeEventListener("focus", handleFocus);
      window.removeEventListener("blur", handleBlur);
    };
  }, []);
};

// node_modules/stream-chat-react/dist/components/MessageList/hooks/VirtualizedMessageList/useUnreadMessagesNotificationVirtualized.js
var import_react301 = __toESM(require_react());
var useUnreadMessagesNotificationVirtualized = ({ lastRead, showAlways, unreadCount }) => {
  const [show, setShow] = (0, import_react301.useState)(false);
  const toggleShowUnreadMessagesNotification = (0, import_react301.useCallback)((renderedMessages) => {
    if (!unreadCount)
      return;
    const firstRenderedMessage = renderedMessages[0];
    const lastRenderedMessage = renderedMessages.slice(-1)[0];
    if (!(firstRenderedMessage && lastRenderedMessage))
      return;
    const scrolledBelowSeparator = !!lastRead && new Date(firstRenderedMessage.created_at).getTime() > lastRead.getTime();
    const scrolledAboveSeparator = !!lastRead && new Date(lastRenderedMessage.created_at).getTime() < lastRead.getTime();
    setShow(showAlways ? scrolledBelowSeparator || scrolledAboveSeparator : scrolledBelowSeparator);
  }, [lastRead, showAlways, unreadCount]);
  (0, import_react301.useEffect)(() => {
    if (!unreadCount)
      setShow(false);
  }, [unreadCount]);
  return { show, toggleShowUnreadMessagesNotification };
};

// node_modules/stream-chat-react/dist/components/MessageList/VirtualizedMessageListComponents.js
var import_lodash20 = __toESM(require_lodash());
var import_react302 = __toESM(require_react());
var PREPEND_OFFSET = 10 ** 7;
function calculateItemIndex(virtuosoIndex, numItemsPrepended) {
  return virtuosoIndex + numItemsPrepended - PREPEND_OFFSET;
}
function calculateFirstItemIndex(numItemsPrepended) {
  return PREPEND_OFFSET - numItemsPrepended;
}
var makeItemsRenderedHandler = (renderedItemsActions, processedMessages) => (0, import_lodash20.default)((items) => {
  const renderedMessages = items.map((item) => {
    if (!item.originalIndex)
      return void 0;
    return processedMessages[calculateItemIndex(item.originalIndex, PREPEND_OFFSET)];
  }).filter((msg) => !!msg);
  renderedItemsActions.forEach((action) => action(renderedMessages));
}, 200);
var Item3 = ({ context, ...props }) => {
  var _a;
  if (!context)
    return import_react302.default.createElement(import_react302.default.Fragment, null);
  const message = context.processedMessages[calculateItemIndex(props["data-item-index"], context.numItemsPrepended)];
  const groupStyles = context.messageGroupStyles[message.id];
  return import_react302.default.createElement("div", { ...props, className: ((_a = context == null ? void 0 : context.customClasses) == null ? void 0 : _a.virtualMessage) || clsx_default("str-chat__virtual-list-message-wrapper str-chat__li", {
    [`str-chat__li--${groupStyles}`]: groupStyles
  }) });
};
var Header = ({ context }) => {
  const { LoadingIndicator: LoadingIndicator2 = LoadingIndicator } = useComponentContext("VirtualizedMessageListHeader");
  return import_react302.default.createElement(
    import_react302.default.Fragment,
    null,
    context == null ? void 0 : context.head,
    (context == null ? void 0 : context.loadingMore) && LoadingIndicator2 && import_react302.default.createElement(
      "div",
      { className: "str-chat__virtual-list__loading" },
      import_react302.default.createElement(LoadingIndicator2, { size: 20 })
    )
  );
};
var EmptyPlaceholder = ({ context }) => {
  const { EmptyStateIndicator: EmptyStateIndicator2 = EmptyStateIndicator } = useComponentContext("VirtualizedMessageList");
  if (typeof (context == null ? void 0 : context.processedMessages) !== "undefined" && context.processedMessages.length > 0)
    return null;
  return import_react302.default.createElement(import_react302.default.Fragment, null, EmptyStateIndicator2 && import_react302.default.createElement(EmptyStateIndicator2, { listType: (context == null ? void 0 : context.threadList) ? "thread" : "message" }));
};
var messageRenderer = (virtuosoIndex, _data, virtuosoContext) => {
  var _a, _b, _c, _d, _e, _f, _g;
  const { additionalMessageInputProps, closeReactionSelectorOnClick, customMessageActions, customMessageRenderer, DateSeparator: DateSeparator2, firstUnreadMessageId, formatDate, lastReadDate, lastReadMessageId, lastReceivedMessageId, Message: MessageUIComponent, messageActions, messageGroupStyles, MessageSystem, numItemsPrepended, openThread, ownMessagesReadByOthers, processedMessages: messageList, reactionDetailsSort, shouldGroupByUser, sortReactionDetails, sortReactions, threadList, unreadMessageCount = 0, UnreadMessagesSeparator: UnreadMessagesSeparator2, virtuosoRef } = virtuosoContext;
  const streamMessageIndex = calculateItemIndex(virtuosoIndex, numItemsPrepended);
  if (customMessageRenderer) {
    return customMessageRenderer(messageList, streamMessageIndex);
  }
  const message = messageList[streamMessageIndex];
  if (!message)
    return import_react302.default.createElement("div", { style: { height: "1px" } });
  if (isDateSeparatorMessage(message)) {
    return DateSeparator2 ? import_react302.default.createElement(DateSeparator2, { date: message.date, unread: message.unread }) : null;
  }
  if (message.type === "system") {
    return MessageSystem ? import_react302.default.createElement(MessageSystem, { message }) : null;
  }
  const groupedByUser = shouldGroupByUser && streamMessageIndex > 0 && ((_a = message.user) == null ? void 0 : _a.id) === ((_b = messageList[streamMessageIndex - 1].user) == null ? void 0 : _b.id);
  const maybePrevMessage = messageList[streamMessageIndex - 1];
  const maybeNextMessage = messageList[streamMessageIndex + 1];
  const firstOfGroup = shouldGroupByUser && (((_c = message.user) == null ? void 0 : _c.id) !== ((_d = maybePrevMessage == null ? void 0 : maybePrevMessage.user) == null ? void 0 : _d.id) || maybePrevMessage && isMessageEdited(maybePrevMessage));
  const endOfGroup = shouldGroupByUser && (((_e = message.user) == null ? void 0 : _e.id) !== ((_f = maybeNextMessage == null ? void 0 : maybeNextMessage.user) == null ? void 0 : _f.id) || isMessageEdited(message));
  const isFirstUnreadMessage = getIsFirstUnreadMessage({
    firstUnreadMessageId,
    isFirstMessage: streamMessageIndex === 0,
    lastReadDate,
    lastReadMessageId,
    message,
    previousMessage: streamMessageIndex ? messageList[streamMessageIndex - 1] : void 0,
    unreadMessageCount
  });
  return import_react302.default.createElement(
    import_react302.default.Fragment,
    null,
    isFirstUnreadMessage && import_react302.default.createElement(
      "div",
      { className: "str-chat__unread-messages-separator-wrapper" },
      import_react302.default.createElement(UnreadMessagesSeparator2, { unreadCount: unreadMessageCount })
    ),
    import_react302.default.createElement(Message, { additionalMessageInputProps, autoscrollToBottom: (_g = virtuosoRef.current) == null ? void 0 : _g.autoscrollToBottom, closeReactionSelectorOnClick, customMessageActions, endOfGroup, firstOfGroup, formatDate, groupedByUser, groupStyles: [messageGroupStyles[message.id] ?? ""], lastReceivedId: lastReceivedMessageId, message, Message: MessageUIComponent, messageActions, openThread, reactionDetailsSort, readBy: ownMessagesReadByOthers[message.id] || [], sortReactionDetails, sortReactions, threadList })
  );
};

// node_modules/stream-chat-react/dist/context/VirtualizedMessageListContext.js
var import_react303 = __toESM(require_react());
var VirtualizedMessageListContext = (0, import_react303.createContext)(void 0);
var VirtualizedMessageListContextProvider = ({ children, value }) => import_react303.default.createElement(VirtualizedMessageListContext.Provider, { value }, children);

// node_modules/stream-chat-react/dist/components/MessageList/VirtualizedMessageList.js
function captureResizeObserverExceededError(e) {
  if (e.message === "ResizeObserver loop completed with undelivered notifications." || e.message === "ResizeObserver loop limit exceeded") {
    e.stopImmediatePropagation();
  }
}
function useCaptureResizeObserverExceededError() {
  (0, import_react304.useEffect)(() => {
    window.addEventListener("error", captureResizeObserverExceededError);
    return () => {
      window.removeEventListener("error", captureResizeObserverExceededError);
    };
  }, []);
}
function fractionalItemSize(element2) {
  return element2.getBoundingClientRect().height;
}
function findMessageIndex(messages, id) {
  return messages.findIndex((message) => message.id === id);
}
function calculateInitialTopMostItemIndex(messages, highlightedMessageId) {
  if (highlightedMessageId) {
    const index3 = findMessageIndex(messages, highlightedMessageId);
    if (index3 !== -1) {
      return { align: "center", index: index3 };
    }
  }
  return messages.length - 1;
}
var VirtualizedMessageListWithContext = (props) => {
  const {
    additionalMessageInputProps,
    additionalVirtuosoProps = {},
    channel,
    channelUnreadUiState,
    closeReactionSelectorOnClick,
    customMessageActions,
    customMessageRenderer,
    defaultItemHeight,
    disableDateSeparator = true,
    formatDate,
    groupStyles,
    hasMoreNewer,
    head,
    hideDeletedMessages = false,
    hideNewMessageSeparator = false,
    highlightedMessageId,
    jumpToLatestMessage,
    loadingMore,
    loadMore,
    loadMoreNewer,
    maxTimeBetweenGroupedMessages,
    Message: MessageUIComponentFromProps,
    messageActions,
    messageLimit = DEFAULT_NEXT_CHANNEL_PAGE_SIZE,
    messages,
    notifications,
    openThread,
    // TODO: refactor to scrollSeekPlaceHolderConfiguration and components.ScrollSeekPlaceholder, like the Virtuoso Component
    overscan = 0,
    reactionDetailsSort,
    read: read2,
    returnAllReadData = false,
    reviewProcessedMessage,
    scrollSeekPlaceHolder,
    scrollToLatestMessageOnFocus = false,
    separateGiphyPreview = false,
    shouldGroupByUser = false,
    showUnreadNotificationAlways,
    sortReactionDetails,
    sortReactions,
    stickToBottomScrollBehavior = "smooth",
    suppressAutoscroll,
    threadList
  } = props;
  const { components: virtuosoComponentsFromProps, ...overridingVirtuosoProps } = additionalVirtuosoProps;
  useCaptureResizeObserverExceededError();
  const { DateSeparator: DateSeparator2 = DateSeparator, GiphyPreviewMessage: GiphyPreviewMessage2 = GiphyPreviewMessage, MessageListMainPanel: MessageListMainPanel2 = MessageListMainPanel, MessageListNotifications: MessageListNotifications2 = MessageListNotifications, MessageNotification: MessageNotification2 = MessageNotification, MessageSystem = EventComponent, TypingIndicator: TypingIndicator2, UnreadMessagesNotification: UnreadMessagesNotification2 = UnreadMessagesNotification, UnreadMessagesSeparator: UnreadMessagesSeparator2 = UnreadMessagesSeparator, VirtualMessage: MessageUIComponentFromContext = MessageSimple } = useComponentContext("VirtualizedMessageList");
  const MessageUIComponent = MessageUIComponentFromProps || MessageUIComponentFromContext;
  const { client, customClasses } = useChatContext("VirtualizedMessageList");
  const virtuoso = (0, import_react304.useRef)(null);
  const lastRead = (0, import_react304.useMemo)(() => {
    var _a;
    return (_a = channel.lastRead) == null ? void 0 : _a.call(channel);
  }, [channel]);
  const { show: showUnreadMessagesNotification, toggleShowUnreadMessagesNotification } = useUnreadMessagesNotificationVirtualized({
    lastRead: channelUnreadUiState == null ? void 0 : channelUnreadUiState.last_read,
    showAlways: !!showUnreadNotificationAlways,
    unreadCount: (channelUnreadUiState == null ? void 0 : channelUnreadUiState.unread_messages) ?? 0
  });
  const { giphyPreviewMessage, setGiphyPreviewMessage } = useGiphyPreview(separateGiphyPreview);
  const processedMessages = (0, import_react304.useMemo)(() => {
    if (typeof messages === "undefined") {
      return [];
    }
    if (disableDateSeparator && !hideDeletedMessages && hideNewMessageSeparator && !separateGiphyPreview) {
      return messages;
    }
    return processMessages({
      enableDateSeparator: !disableDateSeparator,
      hideDeletedMessages,
      hideNewMessageSeparator,
      lastRead,
      messages,
      reviewProcessedMessage,
      setGiphyPreviewMessage,
      userId: client.userID || ""
    });
  }, [
    disableDateSeparator,
    hideDeletedMessages,
    hideNewMessageSeparator,
    lastRead,
    messages,
    messages == null ? void 0 : messages.length,
    client.userID
  ]);
  const ownMessagesReadByOthers = useLastReadData({
    messages: processedMessages,
    read: read2,
    returnAllReadData,
    userID: client.userID
  });
  const lastReceivedMessageId = (0, import_react304.useMemo)(() => getLastReceived(processedMessages), [processedMessages]);
  const groupStylesFn = groupStyles || getGroupStyles;
  const messageGroupStyles = (0, import_react304.useMemo)(
    () => processedMessages.reduce((acc, message, i) => {
      const style = groupStylesFn(message, processedMessages[i - 1], processedMessages[i + 1], !shouldGroupByUser, maxTimeBetweenGroupedMessages);
      if (style)
        acc[message.id] = style;
      return acc;
    }, {}),
    // processedMessages were incorrectly rebuilt with a new object identity at some point, hence the .length usage
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      maxTimeBetweenGroupedMessages,
      processedMessages.length,
      shouldGroupByUser,
      groupStylesFn
    ]
  );
  const { atBottom, isMessageListScrolledToBottom, newMessagesNotification, setIsMessageListScrolledToBottom, setNewMessagesNotification } = useNewMessageNotification(processedMessages, client.userID, hasMoreNewer);
  useMarkRead({
    isMessageListScrolledToBottom,
    messageListIsThread: !!threadList,
    wasMarkedUnread: !!(channelUnreadUiState == null ? void 0 : channelUnreadUiState.first_unread_message_id)
  });
  const scrollToBottom = (0, import_react304.useCallback)(async () => {
    if (hasMoreNewer) {
      await jumpToLatestMessage();
      return;
    }
    if (virtuoso.current) {
      virtuoso.current.scrollToIndex(processedMessages.length - 1);
    }
    setNewMessagesNotification(false);
  }, [
    virtuoso,
    processedMessages,
    setNewMessagesNotification,
    // processedMessages were incorrectly rebuilt with a new object identity at some point, hence the .length usage
    processedMessages.length,
    hasMoreNewer,
    jumpToLatestMessage
  ]);
  useScrollToBottomOnNewMessage({
    messages,
    scrollToBottom,
    scrollToLatestMessageOnFocus
  });
  const numItemsPrepended = usePrependedMessagesCount(processedMessages, !disableDateSeparator);
  const { messageSetKey } = useMessageSetKey({ messages });
  const shouldForceScrollToBottom = useShouldForceScrollToBottom(processedMessages, client.userID);
  const handleItemsRendered = (0, import_react304.useMemo)(() => makeItemsRenderedHandler([toggleShowUnreadMessagesNotification], processedMessages), [processedMessages, toggleShowUnreadMessagesNotification]);
  const followOutput = (isAtBottom) => {
    if (hasMoreNewer || suppressAutoscroll) {
      return false;
    }
    if (shouldForceScrollToBottom()) {
      return isAtBottom ? stickToBottomScrollBehavior : "auto";
    }
    return isAtBottom ? stickToBottomScrollBehavior : false;
  };
  const computeItemKey2 = (0, import_react304.useCallback)((index3, _23, { numItemsPrepended: numItemsPrepended2, processedMessages: processedMessages2 }) => processedMessages2[calculateItemIndex(index3, numItemsPrepended2)].id, []);
  const atBottomStateChange = (isAtBottom) => {
    atBottom.current = isAtBottom;
    setIsMessageListScrolledToBottom(isAtBottom);
    if (isAtBottom) {
      loadMoreNewer == null ? void 0 : loadMoreNewer(messageLimit);
      setNewMessagesNotification == null ? void 0 : setNewMessagesNotification(false);
    }
  };
  const atTopStateChange = (isAtTop) => {
    if (isAtTop) {
      loadMore == null ? void 0 : loadMore(messageLimit);
    }
  };
  (0, import_react304.useEffect)(() => {
    let scrollTimeout;
    if (highlightedMessageId) {
      const index3 = findMessageIndex(processedMessages, highlightedMessageId);
      if (index3 !== -1) {
        scrollTimeout = setTimeout(() => {
          var _a;
          (_a = virtuoso.current) == null ? void 0 : _a.scrollToIndex({ align: "center", index: index3 });
        }, 0);
      }
    }
    return () => {
      clearTimeout(scrollTimeout);
    };
  }, [highlightedMessageId, processedMessages]);
  const id = useStableId();
  if (!processedMessages)
    return null;
  const dialogManagerId = threadList ? `virtualized-message-list-dialog-manager-thread-${id}` : `virtualized-message-list-dialog-manager-${id}`;
  return import_react304.default.createElement(
    VirtualizedMessageListContextProvider,
    { value: { scrollToBottom } },
    import_react304.default.createElement(
      MessageListMainPanel2,
      null,
      import_react304.default.createElement(
        DialogManagerProvider,
        { id: dialogManagerId },
        !threadList && showUnreadMessagesNotification && import_react304.default.createElement(UnreadMessagesNotification2, { unreadCount: channelUnreadUiState == null ? void 0 : channelUnreadUiState.unread_messages }),
        import_react304.default.createElement(
          "div",
          { className: (customClasses == null ? void 0 : customClasses.virtualizedMessageList) || "str-chat__virtual-list" },
          import_react304.default.createElement(ln, { atBottomStateChange, atBottomThreshold: 100, atTopStateChange, atTopThreshold: 100, className: "str-chat__message-list-scroll", components: {
            EmptyPlaceholder,
            Header,
            Item: Item3,
            ...virtuosoComponentsFromProps
          }, computeItemKey: computeItemKey2, context: {
            additionalMessageInputProps,
            closeReactionSelectorOnClick,
            customClasses,
            customMessageActions,
            customMessageRenderer,
            DateSeparator: DateSeparator2,
            firstUnreadMessageId: channelUnreadUiState == null ? void 0 : channelUnreadUiState.first_unread_message_id,
            formatDate,
            head,
            lastReadDate: channelUnreadUiState == null ? void 0 : channelUnreadUiState.last_read,
            lastReadMessageId: channelUnreadUiState == null ? void 0 : channelUnreadUiState.last_read_message_id,
            lastReceivedMessageId,
            loadingMore,
            Message: MessageUIComponent,
            messageActions,
            messageGroupStyles,
            MessageSystem,
            numItemsPrepended,
            openThread,
            ownMessagesReadByOthers,
            processedMessages,
            reactionDetailsSort,
            shouldGroupByUser,
            sortReactionDetails,
            sortReactions,
            threadList,
            unreadMessageCount: channelUnreadUiState == null ? void 0 : channelUnreadUiState.unread_messages,
            UnreadMessagesSeparator: UnreadMessagesSeparator2,
            virtuosoRef: virtuoso
          }, firstItemIndex: calculateFirstItemIndex(numItemsPrepended), followOutput, increaseViewportBy: { bottom: 200, top: 0 }, initialTopMostItemIndex: calculateInitialTopMostItemIndex(processedMessages, highlightedMessageId), itemContent: messageRenderer, itemSize: fractionalItemSize, itemsRendered: handleItemsRendered, key: messageSetKey, overscan, ref: virtuoso, style: { overflowX: "hidden" }, totalCount: processedMessages.length, ...overridingVirtuosoProps, ...scrollSeekPlaceHolder ? { scrollSeek: scrollSeekPlaceHolder } : {}, ...defaultItemHeight ? { defaultItemHeight } : {} })
        )
      ),
      TypingIndicator2 && import_react304.default.createElement(TypingIndicator2, null)
    ),
    import_react304.default.createElement(MessageListNotifications2, { hasNewMessages: newMessagesNotification, isMessageListScrolledToBottom, isNotAtLatestMessageSet: hasMoreNewer, MessageNotification: MessageNotification2, notifications, scrollToBottom, threadList, unreadCount: threadList ? void 0 : channelUnreadUiState == null ? void 0 : channelUnreadUiState.unread_messages }),
    giphyPreviewMessage && import_react304.default.createElement(GiphyPreviewMessage2, { message: giphyPreviewMessage })
  );
};
function VirtualizedMessageList(props) {
  const { jumpToLatestMessage, loadMore, loadMoreNewer } = useChannelActionContext("VirtualizedMessageList");
  const { channel, channelUnreadUiState, hasMore, hasMoreNewer, highlightedMessageId, loadingMore, loadingMoreNewer, messages: contextMessages, notifications, read: read2, suppressAutoscroll } = useChannelStateContext("VirtualizedMessageList");
  const messages = props.messages || contextMessages;
  return import_react304.default.createElement(VirtualizedMessageListWithContext, { channel, channelUnreadUiState: props.channelUnreadUiState ?? channelUnreadUiState, hasMore: !!hasMore, hasMoreNewer: !!hasMoreNewer, highlightedMessageId, jumpToLatestMessage, loadingMore: !!loadingMore, loadingMoreNewer: !!loadingMoreNewer, loadMore, loadMoreNewer, messages, notifications, read: read2, suppressAutoscroll, ...props });
}

// node_modules/stream-chat-react/dist/components/Channel/hooks/useChannelContainerClasses.js
var useImageFlagEmojisOnWindowsClass = () => {
  const { useImageFlagEmojisOnWindows } = useChatContext("Channel");
  return useImageFlagEmojisOnWindows && navigator.userAgent.match(/Win/) ? "str-chat--windows-flags" : "";
};
var getChatContainerClass = (customClass) => customClass ?? "str-chat__container";
var useChannelContainerClasses = ({ customClasses }) => {
  const windowsEmojiClass = useImageFlagEmojisOnWindowsClass();
  return {
    channelClass: (customClasses == null ? void 0 : customClasses.channel) ?? "str-chat__channel",
    chatClass: (customClasses == null ? void 0 : customClasses.chat) ?? "str-chat",
    chatContainerClass: getChatContainerClass(customClasses == null ? void 0 : customClasses.chatContainer),
    windowsEmojiClass
  };
};

// node_modules/stream-chat-react/dist/components/Channel/utils.js
var makeAddNotifications = (setNotifications, notificationTimeouts) => (text3, type) => {
  if (typeof text3 !== "string" || type !== "success" && type !== "error") {
    return;
  }
  const id = nanoid();
  setNotifications((prevNotifications) => [...prevNotifications, { id, text: text3, type }]);
  const timeout = setTimeout(() => setNotifications((prevNotifications) => prevNotifications.filter((notification) => notification.id !== id)), 5e3);
  notificationTimeouts.push(timeout);
};
var findInMsgSetById = (targetId, msgSet) => {
  for (let i = msgSet.length - 1; i >= 0; i--) {
    const item = msgSet[i];
    if (item.id === targetId) {
      return {
        index: i,
        target: item
      };
    }
  }
  return {
    index: -1
  };
};
var findInMsgSetByDate = (targetDate, msgSet, exact = false) => {
  var _a, _b;
  const targetTimestamp = targetDate.getTime();
  let left2 = 0;
  let middle = 0;
  let right2 = msgSet.length - 1;
  while (left2 <= right2) {
    middle = Math.floor((right2 + left2) / 2);
    const middleTimestamp = new Date(msgSet[middle].created_at).getTime();
    const middleLeftTimestamp = ((_a = msgSet[middle - 1]) == null ? void 0 : _a.created_at) && new Date(msgSet[middle - 1].created_at).getTime();
    const middleRightTimestamp = ((_b = msgSet[middle + 1]) == null ? void 0 : _b.created_at) && new Date(msgSet[middle + 1].created_at).getTime();
    if (middleTimestamp === targetTimestamp || middleLeftTimestamp && middleRightTimestamp && middleLeftTimestamp < targetTimestamp && targetTimestamp < middleRightTimestamp) {
      return { index: middle, target: msgSet[middle] };
    }
    if (middleTimestamp < targetTimestamp)
      left2 = middle + 1;
    else
      right2 = middle - 1;
  }
  if (!exact || new Date(msgSet[left2].created_at).getTime() === targetTimestamp) {
    return { index: left2, target: msgSet[left2] };
  }
  return { index: -1 };
};

// node_modules/stream-chat-react/dist/components/Attachment/attachment-sizing.js
var getImageAttachmentConfiguration = (attachment, element2) => {
  let newUrl = void 0;
  const urlToTest = attachment.image_url || attachment.thumb_url || "";
  if (test(urlToTest, "url")) {
    const url = new URL(urlToTest);
    const resizeDimensions = getSizingRestrictions(url, element2);
    if (resizeDimensions) {
      resizeDimensions.height *= 2;
      resizeDimensions.width *= 2;
      addResizingParamsToUrl(resizeDimensions, url);
    }
    newUrl = url.href;
  }
  return {
    url: newUrl || ""
  };
};
var getVideoAttachmentConfiguration = (attachment, element2, shouldGenerateVideoThumbnail) => {
  let thumbUrl = void 0;
  if (attachment.thumb_url && shouldGenerateVideoThumbnail && test(attachment.thumb_url, "url")) {
    const url = new URL(attachment.thumb_url);
    const resizeDimensions = getSizingRestrictions(url, element2);
    if (resizeDimensions) {
      resizeDimensions.height *= 2;
      resizeDimensions.width *= 2;
      addResizingParamsToUrl(resizeDimensions, url);
    }
    thumbUrl = url.href;
  }
  return {
    thumbUrl,
    url: attachment.asset_url || ""
  };
};
var getSizingRestrictions = (url, htmlElement) => {
  const urlParams = url.searchParams;
  const originalHeight = Number(urlParams.get("oh")) || 1;
  const originalWidth = Number(urlParams.get("ow")) || 1;
  const cssSizeRestriction = getCSSSizeRestrictions(htmlElement);
  let resizeDimensions;
  if ((cssSizeRestriction.maxHeight || cssSizeRestriction.height) && cssSizeRestriction.maxWidth) {
    resizeDimensions = getResizeDimensions(
      originalHeight,
      originalWidth,
      /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */
      cssSizeRestriction.maxHeight || cssSizeRestriction.height,
      cssSizeRestriction.maxWidth
    );
  } else {
    resizeDimensions = void 0;
  }
  return resizeDimensions;
};
var getResizeDimensions = (originalHeight, originalWidth, maxHeight, maxWidth) => ({
  height: Math.round(Math.max(maxHeight, maxWidth / originalWidth * originalHeight)),
  width: Math.round(Math.max(maxHeight, maxWidth / originalHeight * originalWidth))
});
var getCSSSizeRestrictions = (htmlElement) => {
  const computedStylesheet = getComputedStyle(htmlElement);
  const height = getValueRepresentationOfCSSProperty(computedStylesheet.getPropertyValue("height"));
  const maxHeight = getValueRepresentationOfCSSProperty(computedStylesheet.getPropertyValue("max-height"));
  const maxWidth = getValueRepresentationOfCSSProperty(computedStylesheet.getPropertyValue("max-width"));
  if (!((height || maxHeight) && maxWidth)) {
    console.warn(`Invalid value set for height/max-height and/or max-width for HTML element, this can cause scrolling issues inside the message list, more info https://getstream.io/chat/docs/sdk/react/message-components/attachment/#image-and-video-sizing`);
  }
  return { height, maxHeight, maxWidth };
};
var getValueRepresentationOfCSSProperty = (property) => {
  if (!property.endsWith("px")) {
    return void 0;
  }
  const number = parseFloat(property);
  return isNaN(number) ? void 0 : number;
};
var addResizingParamsToUrl = (resizeDimensions, url) => {
  url.searchParams.set("h", resizeDimensions.height.toString());
  url.searchParams.set("w", resizeDimensions.width.toString());
};

// node_modules/stream-chat-react/dist/experimental/Search/hooks/useSearchFocusedMessage.js
var searchControllerStateSelector2 = (nextValue) => ({ focusedMessage: nextValue.focusedMessage });
var useSearchFocusedMessage = () => {
  const { searchController } = useChatContext("Channel");
  const { focusedMessage } = useStateStore(searchController._internalState, searchControllerStateSelector2);
  return focusedMessage;
};

// node_modules/stream-chat-react/dist/experimental/Search/hooks/useSearchQueriesInProgress.js
var import_react305 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Channel/Channel.js
var isUserResponseArray = (output2) => {
  var _a;
  return ((_a = output2[0]) == null ? void 0 : _a.id) != null;
};
var ChannelContainer = ({ children, className: additionalClassName, ...props }) => {
  const { customClasses, theme } = useChatContext("Channel");
  const { channelClass, chatClass } = useChannelContainerClasses({
    customClasses
  });
  const className = clsx_default(chatClass, theme, channelClass, additionalClassName);
  return import_react306.default.createElement("div", { id: CHANNEL_CONTAINER_ID, ...props, className }, children);
};
var UnMemoizedChannel = (props) => {
  const { channel: propsChannel, EmptyPlaceholder: EmptyPlaceholder2 = null, LoadingErrorIndicator: LoadingErrorIndicator2, LoadingIndicator: LoadingIndicator2 = LoadingChannel } = props;
  const { channel: contextChannel, channelsQueryState } = useChatContext("Channel");
  const channel = propsChannel || contextChannel;
  if (channelsQueryState.queryInProgress === "reload" && LoadingIndicator2) {
    return import_react306.default.createElement(
      ChannelContainer,
      null,
      import_react306.default.createElement(LoadingIndicator2, null)
    );
  }
  if (channelsQueryState.error && LoadingErrorIndicator2) {
    return import_react306.default.createElement(
      ChannelContainer,
      null,
      import_react306.default.createElement(LoadingErrorIndicator2, { error: channelsQueryState.error })
    );
  }
  if (!(channel == null ? void 0 : channel.cid)) {
    return import_react306.default.createElement(ChannelContainer, null, EmptyPlaceholder2);
  }
  return import_react306.default.createElement(ChannelInner, { ...props, channel, key: channel.cid });
};
var ChannelInner = (props) => {
  var _a;
  const { acceptedFiles, activeUnreadHandler, channel, channelQueryOptions: propChannelQueryOptions, children, doDeleteMessageRequest, doMarkReadRequest, doSendMessageRequest, doUpdateMessageRequest, dragAndDropWindow = false, enrichURLForPreviewConfig, initializeOnMount = true, LoadingErrorIndicator: LoadingErrorIndicator2 = LoadingErrorIndicator, LoadingIndicator: LoadingIndicator2 = LoadingChannel, markReadOnMount = true, maxNumberOfFiles, multipleUploads = true, onMentionsClick, onMentionsHover, optionalMessageInputProps = {}, skipMessageDataMemoization } = props;
  const channelQueryOptions = (0, import_react306.useMemo)(() => (0, import_lodash22.default)(propChannelQueryOptions, {
    messages: { limit: DEFAULT_INITIAL_CHANNEL_PAGE_SIZE }
  }), [propChannelQueryOptions]);
  const { client, customClasses, latestMessageDatesByChannels, mutes, searchController } = useChatContext("Channel");
  const { t: t2 } = useTranslationContext("Channel");
  const chatContainerClass = getChatContainerClass(customClasses == null ? void 0 : customClasses.chatContainer);
  const windowsEmojiClass = useImageFlagEmojisOnWindowsClass();
  const thread = useThreadContext();
  const [channelConfig, setChannelConfig] = (0, import_react306.useState)(channel.getConfig());
  const [notifications, setNotifications] = (0, import_react306.useState)([]);
  const [quotedMessage, setQuotedMessage] = (0, import_react306.useState)();
  const [channelUnreadUiState, _setChannelUnreadUiState] = (0, import_react306.useState)();
  const notificationTimeouts = (0, import_react306.useRef)([]);
  const channelReducer = (0, import_react306.useMemo)(() => makeChannelReducer(), []);
  const [state, dispatch] = (0, import_react306.useReducer)(
    channelReducer,
    // channel.initialized === false if client.channel().query() was not called, e.g. ChannelList is not used
    // => Channel will call channel.watch() in useLayoutEffect => state.loading is used to signal the watch() call state
    {
      ...initialState2,
      hasMore: channel.state.messagePagination.hasPrev,
      loading: !channel.initialized,
      messages: channel.state.messages
    }
  );
  const jumpToMessageFromSearch = useSearchFocusedMessage();
  const isMounted = useIsMounted();
  const originalTitle = (0, import_react306.useRef)("");
  const lastRead = (0, import_react306.useRef)(void 0);
  const online = (0, import_react306.useRef)(true);
  const clearHighlightedMessageTimeoutId = (0, import_react306.useRef)(null);
  const channelCapabilitiesArray = (_a = channel.data) == null ? void 0 : _a.own_capabilities;
  const throttledCopyStateFromChannel = (0, import_lodash23.default)(() => dispatch({ channel, type: "copyStateFromChannelOnEvent" }), 500, {
    leading: true,
    trailing: true
  });
  const setChannelUnreadUiState = (0, import_react306.useMemo)(() => (0, import_lodash23.default)(_setChannelUnreadUiState, 200, {
    leading: true,
    trailing: false
  }), []);
  const markRead = (0, import_react306.useMemo)(() => (0, import_lodash23.default)(async (options2) => {
    const { updateChannelUiUnreadState = true } = options2 ?? {};
    if (channel.disconnected || !(channelConfig == null ? void 0 : channelConfig.read_events)) {
      return;
    }
    lastRead.current = /* @__PURE__ */ new Date();
    try {
      if (doMarkReadRequest) {
        doMarkReadRequest(channel, updateChannelUiUnreadState ? setChannelUnreadUiState : void 0);
      } else {
        const markReadResponse = await channel.markRead();
        if (updateChannelUiUnreadState && markReadResponse) {
          _setChannelUnreadUiState({
            last_read: lastRead.current,
            last_read_message_id: markReadResponse.event.last_read_message_id,
            unread_messages: 0
          });
        }
      }
      if (activeUnreadHandler) {
        activeUnreadHandler(0, originalTitle.current);
      } else if (originalTitle.current) {
        document.title = originalTitle.current;
      }
    } catch (e) {
      console.error(t2("Failed to mark channel as read"));
    }
  }, 500, { leading: true, trailing: false }), [
    activeUnreadHandler,
    channel,
    channelConfig,
    doMarkReadRequest,
    setChannelUnreadUiState,
    t2
  ]);
  const handleEvent = async (event) => {
    var _a2, _b, _c, _d, _e, _f, _g, _h, _i;
    if (event.message) {
      dispatch({
        channel,
        message: event.message,
        type: "updateThreadOnEvent"
      });
    }
    if (event.type === "user.watching.start" || event.type === "user.watching.stop")
      return;
    if (event.type === "typing.start" || event.type === "typing.stop") {
      return dispatch({ channel, type: "setTyping" });
    }
    if (event.type === "connection.changed" && typeof event.online === "boolean") {
      online.current = event.online;
    }
    if (event.type === "message.new") {
      const mainChannelUpdated = !((_a2 = event.message) == null ? void 0 : _a2.parent_id) || ((_b = event.message) == null ? void 0 : _b.show_in_channel);
      if (mainChannelUpdated) {
        if (document.hidden && (channelConfig == null ? void 0 : channelConfig.read_events) && !channel.muteStatus().muted) {
          const unread = channel.countUnread(lastRead.current);
          if (activeUnreadHandler) {
            activeUnreadHandler(unread, originalTitle.current);
          } else {
            document.title = `(${unread}) ${originalTitle.current}`;
          }
        }
      }
      if (((_d = (_c = event.message) == null ? void 0 : _c.user) == null ? void 0 : _d.id) === client.userID && ((_e = event == null ? void 0 : event.message) == null ? void 0 : _e.created_at) && ((_f = event == null ? void 0 : event.message) == null ? void 0 : _f.cid)) {
        const messageDate = new Date(event.message.created_at);
        const cid = event.message.cid;
        if (!latestMessageDatesByChannels[cid] || latestMessageDatesByChannels[cid].getTime() < messageDate.getTime()) {
          latestMessageDatesByChannels[cid] = messageDate;
        }
      }
    }
    if (event.type === "user.deleted") {
      const oldestID = (_i = (_h = (_g = channel.state) == null ? void 0 : _g.messages) == null ? void 0 : _h[0]) == null ? void 0 : _i.id;
      await channel.query({
        messages: { id_lt: oldestID, limit: DEFAULT_NEXT_CHANNEL_PAGE_SIZE },
        watchers: { limit: DEFAULT_NEXT_CHANNEL_PAGE_SIZE }
      });
    }
    if (event.type === "notification.mark_unread")
      _setChannelUnreadUiState((prev) => {
        if (!(event.last_read_at && event.user))
          return prev;
        return {
          first_unread_message_id: event.first_unread_message_id,
          last_read: new Date(event.last_read_at),
          last_read_message_id: event.last_read_message_id,
          unread_messages: event.unread_messages ?? 0
        };
      });
    if (event.type === "channel.truncated" && event.cid === channel.cid) {
      _setChannelUnreadUiState(void 0);
    }
    throttledCopyStateFromChannel();
  };
  (0, import_react306.useLayoutEffect)(() => {
    let errored = false;
    let done = false;
    (async () => {
      var _a2, _b;
      if (!channel.initialized && initializeOnMount) {
        try {
          const members = [];
          if (!channel.id && ((_a2 = channel.data) == null ? void 0 : _a2.members)) {
            for (const member of channel.data.members) {
              let userId;
              if (typeof member === "string") {
                userId = member;
              } else if (typeof member === "object") {
                const { user, user_id } = member;
                userId = user_id || (user == null ? void 0 : user.id);
              }
              if (userId) {
                members.push(userId);
              }
            }
          }
          await getChannel({ channel, client, members, options: channelQueryOptions });
          const config = channel.getConfig();
          setChannelConfig(config);
        } catch (e) {
          dispatch({ error: e, type: "setError" });
          errored = true;
        }
      }
      done = true;
      originalTitle.current = document.title;
      if (!errored) {
        dispatch({
          channel,
          hasMore: channel.state.messagePagination.hasPrev,
          type: "initStateFromChannel"
        });
        if (((_b = client.user) == null ? void 0 : _b.id) && channel.state.read[client.user.id]) {
          const { user, ...ownReadState } = channel.state.read[client.user.id];
          _setChannelUnreadUiState(ownReadState);
        }
        if (channel.countUnread() > 0 && markReadOnMount)
          markRead({ updateChannelUiUnreadState: false });
        client.on("connection.changed", handleEvent);
        client.on("connection.recovered", handleEvent);
        client.on("user.updated", handleEvent);
        client.on("user.deleted", handleEvent);
        channel.on(handleEvent);
      }
    })();
    const notificationTimeoutsRef = notificationTimeouts.current;
    return () => {
      if (errored || !done)
        return;
      channel == null ? void 0 : channel.off(handleEvent);
      client.off("connection.changed", handleEvent);
      client.off("connection.recovered", handleEvent);
      client.off("user.deleted", handleEvent);
      notificationTimeoutsRef.forEach(clearTimeout);
    };
  }, [
    channel.cid,
    channelQueryOptions,
    doMarkReadRequest,
    channelConfig == null ? void 0 : channelConfig.read_events,
    initializeOnMount
  ]);
  (0, import_react306.useEffect)(() => {
    var _a2;
    if (!state.thread)
      return;
    const message = (_a2 = state.messages) == null ? void 0 : _a2.find((m) => {
      var _a3;
      return m.id === ((_a3 = state.thread) == null ? void 0 : _a3.id);
    });
    if (message)
      dispatch({ message, type: "setThread" });
  }, [state.messages, state.thread]);
  const handleHighlightedMessageChange = (0, import_react306.useCallback)(({ highlightDuration, highlightedMessageId }) => {
    dispatch({
      channel,
      highlightedMessageId,
      type: "jumpToMessageFinished"
    });
    if (clearHighlightedMessageTimeoutId.current) {
      clearTimeout(clearHighlightedMessageTimeoutId.current);
    }
    clearHighlightedMessageTimeoutId.current = setTimeout(() => {
      if (searchController._internalState.getLatestValue().focusedMessage) {
        searchController._internalState.partialNext({ focusedMessage: void 0 });
      }
      clearHighlightedMessageTimeoutId.current = null;
      dispatch({ type: "clearHighlightedMessage" });
    }, highlightDuration ?? DEFAULT_HIGHLIGHT_DURATION);
  }, [channel, searchController]);
  (0, import_react306.useEffect)(() => {
    if (!(jumpToMessageFromSearch == null ? void 0 : jumpToMessageFromSearch.id))
      return;
    handleHighlightedMessageChange({ highlightedMessageId: jumpToMessageFromSearch.id });
  }, [jumpToMessageFromSearch, handleHighlightedMessageChange]);
  const addNotification = (0, import_react306.useMemo)(() => makeAddNotifications(setNotifications, notificationTimeouts.current), []);
  const loadMoreFinished = (0, import_react306.useCallback)((0, import_lodash21.default)((hasMore, messages) => {
    if (!isMounted.current)
      return;
    dispatch({ hasMore, messages, type: "loadMoreFinished" });
  }, 2e3, { leading: true, trailing: true }), []);
  const loadMore = async (limit = DEFAULT_NEXT_CHANNEL_PAGE_SIZE) => {
    var _a2;
    if (!online.current || !window.navigator.onLine || !channel.state.messagePagination.hasPrev)
      return 0;
    const oldestMessage = (_a2 = state == null ? void 0 : state.messages) == null ? void 0 : _a2[0];
    if (state.loadingMore || state.loadingMoreNewer || (oldestMessage == null ? void 0 : oldestMessage.status) !== "received") {
      return 0;
    }
    dispatch({ loadingMore: true, type: "setLoadingMore" });
    const oldestID = oldestMessage == null ? void 0 : oldestMessage.id;
    const perPage = limit;
    let queryResponse;
    try {
      queryResponse = await channel.query({
        messages: { id_lt: oldestID, limit: perPage },
        watchers: { limit: perPage }
      });
    } catch (e) {
      console.warn("message pagination request failed with error", e);
      dispatch({ loadingMore: false, type: "setLoadingMore" });
      return 0;
    }
    loadMoreFinished(channel.state.messagePagination.hasPrev, channel.state.messages);
    return queryResponse.messages.length;
  };
  const loadMoreNewer = async (limit = DEFAULT_NEXT_CHANNEL_PAGE_SIZE) => {
    var _a2, _b;
    if (!online.current || !window.navigator.onLine || !channel.state.messagePagination.hasNext)
      return 0;
    const newestMessage = (_b = state == null ? void 0 : state.messages) == null ? void 0 : _b[((_a2 = state == null ? void 0 : state.messages) == null ? void 0 : _a2.length) - 1];
    if (state.loadingMore || state.loadingMoreNewer)
      return 0;
    dispatch({ loadingMoreNewer: true, type: "setLoadingMoreNewer" });
    const newestId = newestMessage == null ? void 0 : newestMessage.id;
    const perPage = limit;
    let queryResponse;
    try {
      queryResponse = await channel.query({
        messages: { id_gt: newestId, limit: perPage },
        watchers: { limit: perPage }
      });
    } catch (e) {
      console.warn("message pagination request failed with error", e);
      dispatch({ loadingMoreNewer: false, type: "setLoadingMoreNewer" });
      return 0;
    }
    dispatch({
      hasMoreNewer: channel.state.messagePagination.hasNext,
      messages: channel.state.messages,
      type: "loadMoreNewerFinished"
    });
    return queryResponse.messages.length;
  };
  const jumpToMessage = (0, import_react306.useCallback)(async (messageId, messageLimit = DEFAULT_JUMP_TO_PAGE_SIZE, highlightDuration = DEFAULT_HIGHLIGHT_DURATION) => {
    dispatch({ loadingMore: true, type: "setLoadingMore" });
    await channel.state.loadMessageIntoState(messageId, void 0, messageLimit);
    loadMoreFinished(channel.state.messagePagination.hasPrev, channel.state.messages);
    handleHighlightedMessageChange({
      highlightDuration,
      highlightedMessageId: messageId
    });
  }, [channel, handleHighlightedMessageChange, loadMoreFinished]);
  const jumpToLatestMessage = (0, import_react306.useCallback)(async () => {
    await channel.state.loadMessageIntoState("latest");
    loadMoreFinished(channel.state.messagePagination.hasPrev, channel.state.messages);
    dispatch({
      type: "jumpToLatestMessage"
    });
  }, [channel, loadMoreFinished]);
  const jumpToFirstUnreadMessage = (0, import_react306.useCallback)(async (queryMessageLimit = DEFAULT_JUMP_TO_PAGE_SIZE, highlightDuration = DEFAULT_HIGHLIGHT_DURATION) => {
    var _a2, _b, _c, _d;
    if (!(channelUnreadUiState == null ? void 0 : channelUnreadUiState.unread_messages))
      return;
    let lastReadMessageId = channelUnreadUiState == null ? void 0 : channelUnreadUiState.last_read_message_id;
    let firstUnreadMessageId = channelUnreadUiState == null ? void 0 : channelUnreadUiState.first_unread_message_id;
    let isInCurrentMessageSet = false;
    if (firstUnreadMessageId) {
      const result = findInMsgSetById(firstUnreadMessageId, channel.state.messages);
      isInCurrentMessageSet = result.index !== -1;
    } else if (lastReadMessageId) {
      const result = findInMsgSetById(lastReadMessageId, channel.state.messages);
      isInCurrentMessageSet = !!result.target;
      firstUnreadMessageId = result.index > -1 ? (_a2 = channel.state.messages[result.index + 1]) == null ? void 0 : _a2.id : void 0;
    } else {
      const lastReadTimestamp = channelUnreadUiState.last_read.getTime();
      const { index: lastReadMessageIndex, target: lastReadMessage } = findInMsgSetByDate(channelUnreadUiState.last_read, channel.state.messages, true);
      if (lastReadMessage) {
        firstUnreadMessageId = (_b = channel.state.messages[lastReadMessageIndex + 1]) == null ? void 0 : _b.id;
        isInCurrentMessageSet = !!firstUnreadMessageId;
        lastReadMessageId = lastReadMessage.id;
      } else {
        dispatch({ loadingMore: true, type: "setLoadingMore" });
        let messages;
        try {
          messages = (await channel.query({
            messages: {
              created_at_around: channelUnreadUiState.last_read.toISOString(),
              limit: queryMessageLimit
            }
          }, "new")).messages;
        } catch (e) {
          addNotification(t2("Failed to jump to the first unread message"), "error");
          loadMoreFinished(channel.state.messagePagination.hasPrev, channel.state.messages);
          return;
        }
        const firstMessageWithCreationDate = messages.find((msg) => msg.created_at);
        if (!firstMessageWithCreationDate) {
          addNotification(t2("Failed to jump to the first unread message"), "error");
          loadMoreFinished(channel.state.messagePagination.hasPrev, channel.state.messages);
          return;
        }
        const firstMessageTimestamp = new Date(firstMessageWithCreationDate.created_at).getTime();
        if (lastReadTimestamp < firstMessageTimestamp) {
          firstUnreadMessageId = firstMessageWithCreationDate.id;
        } else {
          const result = findInMsgSetByDate(channelUnreadUiState.last_read, messages);
          lastReadMessageId = (_c = result.target) == null ? void 0 : _c.id;
        }
        loadMoreFinished(channel.state.messagePagination.hasPrev, channel.state.messages);
      }
    }
    if (!firstUnreadMessageId && !lastReadMessageId) {
      addNotification(t2("Failed to jump to the first unread message"), "error");
      return;
    }
    if (!isInCurrentMessageSet) {
      dispatch({ loadingMore: true, type: "setLoadingMore" });
      try {
        const targetId = firstUnreadMessageId ?? lastReadMessageId;
        await channel.state.loadMessageIntoState(targetId, void 0, queryMessageLimit);
        const indexOfTarget = channel.state.messages.findIndex((message) => message.id === targetId);
        loadMoreFinished(channel.state.messagePagination.hasPrev, channel.state.messages);
        firstUnreadMessageId = firstUnreadMessageId ?? ((_d = channel.state.messages[indexOfTarget + 1]) == null ? void 0 : _d.id);
      } catch (e) {
        addNotification(t2("Failed to jump to the first unread message"), "error");
        loadMoreFinished(channel.state.messagePagination.hasPrev, channel.state.messages);
        return;
      }
    }
    if (!firstUnreadMessageId) {
      addNotification(t2("Failed to jump to the first unread message"), "error");
      return;
    }
    if (!channelUnreadUiState.first_unread_message_id)
      _setChannelUnreadUiState({
        ...channelUnreadUiState,
        first_unread_message_id: firstUnreadMessageId,
        last_read_message_id: lastReadMessageId
      });
    handleHighlightedMessageChange({
      highlightDuration,
      highlightedMessageId: firstUnreadMessageId
    });
  }, [
    addNotification,
    channel,
    handleHighlightedMessageChange,
    loadMoreFinished,
    t2,
    channelUnreadUiState
  ]);
  const deleteMessage = (0, import_react306.useCallback)(async (message) => {
    if (!(message == null ? void 0 : message.id)) {
      throw new Error("Cannot delete a message - missing message ID.");
    }
    let deletedMessage;
    if (doDeleteMessageRequest) {
      deletedMessage = await doDeleteMessageRequest(message);
    } else {
      const result = await client.deleteMessage(message.id);
      deletedMessage = result.message;
    }
    return deletedMessage;
  }, [client, doDeleteMessageRequest]);
  const updateMessage = (updatedMessage) => {
    channel.state.addMessageSorted(updatedMessage, true);
    dispatch({
      channel,
      parentId: state.thread && updatedMessage.parent_id,
      type: "copyMessagesFromChannel"
    });
  };
  const doSendMessage = async (message, customMessageData, options2) => {
    var _a2, _b;
    const { attachments, id, mentioned_users = [], parent_id, text: text3 } = message;
    const mentions = isUserResponseArray(mentioned_users) ? mentioned_users.map(({ id: id2 }) => id2) : mentioned_users;
    const messageData = {
      attachments,
      id,
      mentioned_users: mentions,
      parent_id,
      quoted_message_id: parent_id === (quotedMessage == null ? void 0 : quotedMessage.parent_id) ? quotedMessage == null ? void 0 : quotedMessage.id : void 0,
      text: text3,
      ...customMessageData
    };
    try {
      let messageResponse;
      if (doSendMessageRequest) {
        messageResponse = await doSendMessageRequest(channel, messageData, options2);
      } else {
        messageResponse = await channel.sendMessage(messageData, options2);
      }
      let existingMessage;
      for (let i = channel.state.messages.length - 1; i >= 0; i--) {
        const msg = channel.state.messages[i];
        if (msg.id && msg.id === messageData.id) {
          existingMessage = msg;
          break;
        }
      }
      const responseTimestamp = new Date(((_a2 = messageResponse == null ? void 0 : messageResponse.message) == null ? void 0 : _a2.updated_at) || 0).getTime();
      const existingMessageTimestamp = ((_b = existingMessage == null ? void 0 : existingMessage.updated_at) == null ? void 0 : _b.getTime()) || 0;
      const responseIsTheNewest = responseTimestamp > existingMessageTimestamp;
      if ((messageResponse == null ? void 0 : messageResponse.message) && (responseIsTheNewest || (existingMessage == null ? void 0 : existingMessage.status) === "sending")) {
        updateMessage({
          ...messageResponse.message,
          status: "received"
        });
      }
      if (quotedMessage && parent_id === (quotedMessage == null ? void 0 : quotedMessage.parent_id))
        setQuotedMessage(void 0);
    } catch (error2) {
      const stringError = JSON.stringify(error2);
      const parsedError = stringError ? JSON.parse(stringError) : {};
      if (parsedError.code === 4 && error2 instanceof Error && error2.message.includes("already exists")) {
        updateMessage({
          ...message,
          status: "received"
        });
      } else {
        updateMessage({
          ...message,
          error: parsedError,
          errorStatusCode: parsedError.status || void 0,
          status: "failed"
        });
        thread == null ? void 0 : thread.upsertReplyLocally({
          // @ts-expect-error message type mismatch
          message: {
            ...message,
            error: parsedError,
            errorStatusCode: parsedError.status || void 0,
            status: "failed"
          }
        });
      }
    }
  };
  const sendMessage = async ({ attachments = [], mentioned_users = [], parent, text: text3 = "" }, customMessageData, options2) => {
    channel.state.filterErrorMessages();
    const messagePreview = {
      attachments,
      created_at: /* @__PURE__ */ new Date(),
      html: text3,
      id: (customMessageData == null ? void 0 : customMessageData.id) ?? `${client.userID}-${nanoid()}`,
      mentioned_users,
      parent_id: parent == null ? void 0 : parent.id,
      reactions: [],
      status: "sending",
      text: text3,
      type: "regular",
      user: client.user
    };
    thread == null ? void 0 : thread.upsertReplyLocally({
      // @ts-expect-error message type mismatch
      message: messagePreview
    });
    updateMessage(messagePreview);
    await doSendMessage(messagePreview, customMessageData, options2);
  };
  const retrySendMessage = async (message) => {
    updateMessage({
      ...message,
      errorStatusCode: void 0,
      status: "sending"
    });
    if (message.attachments) {
      message.attachments = message.attachments.filter((attachment) => !attachment.og_scrape_url);
    }
    await doSendMessage(message);
  };
  const removeMessage = (message) => {
    channel.state.removeMessage(message);
    dispatch({
      channel,
      parentId: state.thread && message.parent_id,
      type: "copyMessagesFromChannel"
    });
  };
  const openThread = (message, event) => {
    event == null ? void 0 : event.preventDefault();
    setQuotedMessage((current) => {
      if ((current == null ? void 0 : current.parent_id) !== (message == null ? void 0 : message.parent_id)) {
        return void 0;
      } else {
        return current;
      }
    });
    dispatch({ channel, message, type: "openThread" });
  };
  const closeThread = (event) => {
    event == null ? void 0 : event.preventDefault();
    dispatch({ type: "closeThread" });
  };
  const loadMoreThreadFinished = (0, import_react306.useCallback)((0, import_lodash21.default)((threadHasMore, threadMessages) => {
    dispatch({
      threadHasMore,
      threadMessages,
      type: "loadMoreThreadFinished"
    });
  }, 2e3, { leading: true, trailing: true }), []);
  const loadMoreThread = async (limit = DEFAULT_THREAD_PAGE_SIZE) => {
    var _a2;
    if (state.threadLoadingMore || !state.thread || !state.threadHasMore)
      return;
    dispatch({ type: "startLoadingThread" });
    const parentId = state.thread.id;
    if (!parentId) {
      return dispatch({ type: "closeThread" });
    }
    const oldMessages = channel.state.threads[parentId] || [];
    const oldestMessageId = (_a2 = oldMessages[0]) == null ? void 0 : _a2.id;
    try {
      const queryResponse = await channel.getReplies(parentId, {
        id_lt: oldestMessageId,
        limit
      });
      const threadHasMoreMessages = hasMoreMessagesProbably(queryResponse.messages.length, limit);
      const newThreadMessages = channel.state.threads[parentId] || [];
      loadMoreThreadFinished(threadHasMoreMessages, newThreadMessages);
    } catch (e) {
      loadMoreThreadFinished(false, oldMessages);
    }
  };
  const onMentionsHoverOrClick = useMentionsHandlers(onMentionsHover, onMentionsClick);
  const editMessage = useEditMessageHandler(doUpdateMessageRequest);
  const { typing, ...restState } = state;
  const channelStateContextValue = useCreateChannelStateContext({
    ...restState,
    acceptedFiles,
    channel,
    channelCapabilitiesArray,
    channelConfig,
    channelUnreadUiState,
    debounceURLEnrichmentMs: enrichURLForPreviewConfig == null ? void 0 : enrichURLForPreviewConfig.debounceURLEnrichmentMs,
    dragAndDropWindow,
    enrichURLForPreview: props.enrichURLForPreview,
    findURLFn: enrichURLForPreviewConfig == null ? void 0 : enrichURLForPreviewConfig.findURLFn,
    giphyVersion: props.giphyVersion || "fixed_height",
    imageAttachmentSizeHandler: props.imageAttachmentSizeHandler || getImageAttachmentConfiguration,
    maxNumberOfFiles,
    multipleUploads,
    mutes,
    notifications,
    onLinkPreviewDismissed: enrichURLForPreviewConfig == null ? void 0 : enrichURLForPreviewConfig.onLinkPreviewDismissed,
    quotedMessage,
    shouldGenerateVideoThumbnail: props.shouldGenerateVideoThumbnail || true,
    videoAttachmentSizeHandler: props.videoAttachmentSizeHandler || getVideoAttachmentConfiguration,
    watcher_count: state.watcherCount
  });
  const channelActionContextValue = (0, import_react306.useMemo)(
    () => ({
      addNotification,
      closeThread,
      deleteMessage,
      dispatch,
      editMessage,
      jumpToFirstUnreadMessage,
      jumpToLatestMessage,
      jumpToMessage,
      loadMore,
      loadMoreNewer,
      loadMoreThread,
      markRead,
      onMentionsClick: onMentionsHoverOrClick,
      onMentionsHover: onMentionsHoverOrClick,
      openThread,
      removeMessage,
      retrySendMessage,
      sendMessage,
      setChannelUnreadUiState,
      setQuotedMessage,
      skipMessageDataMemoization,
      updateMessage
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      channel.cid,
      deleteMessage,
      enrichURLForPreviewConfig == null ? void 0 : enrichURLForPreviewConfig.findURLFn,
      enrichURLForPreviewConfig == null ? void 0 : enrichURLForPreviewConfig.onLinkPreviewDismissed,
      loadMore,
      loadMoreNewer,
      markRead,
      quotedMessage,
      jumpToFirstUnreadMessage,
      jumpToMessage,
      jumpToLatestMessage,
      setChannelUnreadUiState
    ]
  );
  const componentContextValue = (0, import_react306.useMemo)(() => ({
    Attachment: props.Attachment,
    AttachmentPreviewList: props.AttachmentPreviewList,
    AttachmentSelector: props.AttachmentSelector,
    AttachmentSelectorInitiationButtonContents: props.AttachmentSelectorInitiationButtonContents,
    AudioRecorder: props.AudioRecorder,
    AutocompleteSuggestionItem: props.AutocompleteSuggestionItem,
    AutocompleteSuggestionList: props.AutocompleteSuggestionList,
    Avatar: props.Avatar,
    BaseImage: props.BaseImage,
    CooldownTimer: props.CooldownTimer,
    CustomMessageActionsList: props.CustomMessageActionsList,
    DateSeparator: props.DateSeparator,
    EditMessageInput: props.EditMessageInput,
    EmojiPicker: props.EmojiPicker,
    emojiSearchIndex: props.emojiSearchIndex,
    EmptyStateIndicator: props.EmptyStateIndicator,
    FileUploadIcon: props.FileUploadIcon,
    GiphyPreviewMessage: props.GiphyPreviewMessage,
    HeaderComponent: props.HeaderComponent,
    Input: props.Input,
    LinkPreviewList: props.LinkPreviewList,
    LoadingIndicator: props.LoadingIndicator,
    Message: props.Message,
    MessageActions: props.MessageActions,
    MessageBlocked: props.MessageBlocked,
    MessageBouncePrompt: props.MessageBouncePrompt,
    MessageDeleted: props.MessageDeleted,
    MessageListNotifications: props.MessageListNotifications,
    MessageNotification: props.MessageNotification,
    MessageOptions: props.MessageOptions,
    MessageRepliesCountButton: props.MessageRepliesCountButton,
    MessageStatus: props.MessageStatus,
    MessageSystem: props.MessageSystem,
    MessageTimestamp: props.MessageTimestamp,
    ModalGallery: props.ModalGallery,
    PinIndicator: props.PinIndicator,
    PollActions: props.PollActions,
    PollContent: props.PollContent,
    PollCreationDialog: props.PollCreationDialog,
    PollHeader: props.PollHeader,
    PollOptionSelector: props.PollOptionSelector,
    QuotedMessage: props.QuotedMessage,
    QuotedMessagePreview: props.QuotedMessagePreview,
    QuotedPoll: props.QuotedPoll,
    reactionOptions: props.reactionOptions,
    ReactionSelector: props.ReactionSelector,
    ReactionsList: props.ReactionsList,
    ReactionsListModal: props.ReactionsListModal,
    SendButton: props.SendButton,
    StartRecordingAudioButton: props.StartRecordingAudioButton,
    StopAIGenerationButton: props.StopAIGenerationButton,
    StreamedMessageText: props.StreamedMessageText,
    ThreadHead: props.ThreadHead,
    ThreadHeader: props.ThreadHeader,
    ThreadStart: props.ThreadStart,
    Timestamp: props.Timestamp,
    TriggerProvider: props.TriggerProvider,
    TypingIndicator: props.TypingIndicator,
    UnreadMessagesNotification: props.UnreadMessagesNotification,
    UnreadMessagesSeparator: props.UnreadMessagesSeparator,
    VirtualMessage: props.VirtualMessage
  }), [
    props.Attachment,
    props.AttachmentPreviewList,
    props.AttachmentSelector,
    props.AttachmentSelectorInitiationButtonContents,
    props.AudioRecorder,
    props.AutocompleteSuggestionItem,
    props.AutocompleteSuggestionList,
    props.Avatar,
    props.BaseImage,
    props.CooldownTimer,
    props.CustomMessageActionsList,
    props.DateSeparator,
    props.EditMessageInput,
    props.EmojiPicker,
    props.emojiSearchIndex,
    props.EmptyStateIndicator,
    props.FileUploadIcon,
    props.GiphyPreviewMessage,
    props.HeaderComponent,
    props.Input,
    props.LinkPreviewList,
    props.LoadingIndicator,
    props.Message,
    props.MessageActions,
    props.MessageBlocked,
    props.MessageBouncePrompt,
    props.MessageDeleted,
    props.MessageListNotifications,
    props.MessageNotification,
    props.MessageOptions,
    props.MessageRepliesCountButton,
    props.MessageStatus,
    props.MessageSystem,
    props.MessageTimestamp,
    props.ModalGallery,
    props.PinIndicator,
    props.PollActions,
    props.PollContent,
    props.PollCreationDialog,
    props.PollHeader,
    props.PollOptionSelector,
    props.QuotedMessage,
    props.QuotedMessagePreview,
    props.QuotedPoll,
    props.reactionOptions,
    props.ReactionSelector,
    props.ReactionsList,
    props.ReactionsListModal,
    props.SendButton,
    props.StartRecordingAudioButton,
    props.StopAIGenerationButton,
    props.StreamedMessageText,
    props.ThreadHead,
    props.ThreadHeader,
    props.ThreadStart,
    props.Timestamp,
    props.TriggerProvider,
    props.TypingIndicator,
    props.UnreadMessagesNotification,
    props.UnreadMessagesSeparator,
    props.VirtualMessage
  ]);
  const typingContextValue = useCreateTypingContext({
    typing
  });
  if (state.error) {
    return import_react306.default.createElement(
      ChannelContainer,
      null,
      import_react306.default.createElement(LoadingErrorIndicator2, { error: state.error })
    );
  }
  if (state.loading) {
    return import_react306.default.createElement(
      ChannelContainer,
      null,
      import_react306.default.createElement(LoadingIndicator2, null)
    );
  }
  if (!channel.watch) {
    return import_react306.default.createElement(
      ChannelContainer,
      null,
      import_react306.default.createElement("div", null, t2("Channel Missing"))
    );
  }
  return import_react306.default.createElement(
    ChannelContainer,
    { className: windowsEmojiClass },
    import_react306.default.createElement(
      ChannelStateProvider,
      { value: channelStateContextValue },
      import_react306.default.createElement(
        ChannelActionProvider,
        { value: channelActionContextValue },
        import_react306.default.createElement(
          WithComponents,
          { overrides: componentContextValue },
          import_react306.default.createElement(
            TypingProvider,
            { value: typingContextValue },
            import_react306.default.createElement(
              "div",
              { className: `${chatContainerClass}` },
              dragAndDropWindow && import_react306.default.createElement(DropzoneProvider, { ...optionalMessageInputProps }, children),
              !dragAndDropWindow && import_react306.default.createElement(import_react306.default.Fragment, null, children)
            )
          )
        )
      )
    )
  );
};
var Channel = import_react306.default.memo(UnMemoizedChannel);

// node_modules/stream-chat-react/dist/components/ChannelHeader/ChannelHeader.js
var import_react308 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/ChannelHeader/icons.js
var import_react307 = __toESM(require_react());
var MenuIcon2 = ({ title }) => {
  const { t: t2 } = useTranslationContext("MenuIcon");
  return import_react307.default.createElement(
    "svg",
    { "data-testid": "menu-icon", viewBox: "0 0 448 512", xmlns: "http://www.w3.org/2000/svg" },
    import_react307.default.createElement("title", null, title ?? t2("Menu")),
    import_react307.default.createElement("path", { d: "M0 88C0 74.75 10.75 64 24 64H424C437.3 64 448 74.75 448 88C448 101.3 437.3 112 424 112H24C10.75 112 0 101.3 0 88zM0 248C0 234.7 10.75 224 24 224H424C437.3 224 448 234.7 448 248C448 261.3 437.3 272 424 272H24C10.75 272 0 261.3 0 248zM424 432H24C10.75 432 0 421.3 0 408C0 394.7 10.75 384 24 384H424C437.3 384 448 394.7 448 408C448 421.3 437.3 432 424 432z", fill: "currentColor" })
  );
};

// node_modules/stream-chat-react/dist/components/ChannelHeader/ChannelHeader.js
var ChannelHeader = (props) => {
  const { Avatar: Avatar2 = Avatar, image: overrideImage, live, MenuIcon: MenuIcon3 = MenuIcon2, title: overrideTitle } = props;
  const { channel, watcher_count } = useChannelStateContext("ChannelHeader");
  const { openMobileNav } = useChatContext("ChannelHeader");
  const { t: t2 } = useTranslationContext("ChannelHeader");
  const { displayImage, displayTitle, groupChannelDisplayInfo } = useChannelPreviewInfo({
    channel,
    overrideImage,
    overrideTitle
  });
  const { member_count, subtitle } = (channel == null ? void 0 : channel.data) || {};
  return import_react308.default.createElement(
    "div",
    { className: "str-chat__channel-header" },
    import_react308.default.createElement(
      "button",
      { "aria-label": t2("aria/Menu"), className: "str-chat__header-hamburger", onClick: openMobileNav },
      import_react308.default.createElement(MenuIcon3, null)
    ),
    import_react308.default.createElement(Avatar2, { className: "str-chat__avatar--channel-header", groupChannelDisplayInfo, image: displayImage, name: displayTitle }),
    import_react308.default.createElement(
      "div",
      { className: "str-chat__channel-header-end" },
      import_react308.default.createElement(
        "p",
        { className: "str-chat__channel-header-title" },
        displayTitle,
        " ",
        live && import_react308.default.createElement("span", { className: "str-chat__header-livestream-livelabel" }, t2("live"))
      ),
      subtitle && import_react308.default.createElement("p", { className: "str-chat__channel-header-subtitle" }, subtitle),
      import_react308.default.createElement(
        "p",
        { className: "str-chat__channel-header-info" },
        !live && !!member_count && member_count > 0 && import_react308.default.createElement(
          import_react308.default.Fragment,
          null,
          t2("{{ memberCount }} members", {
            memberCount: member_count
          }),
          ",",
          " "
        ),
        t2("{{ watcherCount }} online", { watcherCount: watcher_count })
      )
    )
  );
};

// node_modules/stream-chat-react/dist/components/Chat/Chat.js
var import_react312 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Chat/hooks/useChat.js
var import_react309 = __toESM(require_react());
var useChat = ({ client, defaultLanguage = "en", i18nInstance, initialNavOpen }) => {
  var _a, _b;
  const [translators, setTranslators] = (0, import_react309.useState)({
    t: (key) => key,
    tDateTimeParser: defaultDateTimeParser,
    userLanguage: "en"
  });
  const [channel, setChannel] = (0, import_react309.useState)();
  const [mutes, setMutes] = (0, import_react309.useState)([]);
  const [navOpen, setNavOpen] = (0, import_react309.useState)(initialNavOpen);
  const [latestMessageDatesByChannels, setLatestMessageDatesByChannels] = (0, import_react309.useState)({});
  const clientMutes = ((_a = client.user) == null ? void 0 : _a.mutes) || [];
  const closeMobileNav = () => setNavOpen(false);
  const openMobileNav = () => setTimeout(() => setNavOpen(true), 100);
  const appSettings = (0, import_react309.useRef)(null);
  const getAppSettings = () => {
    if (appSettings.current) {
      return appSettings.current;
    }
    appSettings.current = client.getAppSettings();
    return appSettings.current;
  };
  (0, import_react309.useEffect)(() => {
    if (!client)
      return;
    const version = "12.15.7";
    const userAgent = client.getUserAgent();
    if (!userAgent.includes("stream-chat-react")) {
      client.setUserAgent(`stream-chat-react-${version}-${userAgent}`);
    }
    client.threads.registerSubscriptions();
    client.polls.registerSubscriptions();
    return () => {
      client.threads.unregisterSubscriptions();
      client.polls.unregisterSubscriptions();
    };
  }, [client]);
  (0, import_react309.useEffect)(() => {
    setMutes(clientMutes);
    const handleEvent = (event) => {
      var _a2;
      setMutes(((_a2 = event.me) == null ? void 0 : _a2.mutes) || []);
    };
    client.on("notification.mutes_updated", handleEvent);
    return () => client.off("notification.mutes_updated", handleEvent);
  }, [clientMutes == null ? void 0 : clientMutes.length]);
  (0, import_react309.useEffect)(() => {
    var _a2;
    let userLanguage = (_a2 = client.user) == null ? void 0 : _a2.language;
    if (!userLanguage) {
      const browserLanguage = window.navigator.language.slice(0, 2);
      userLanguage = isLanguageSupported(browserLanguage) ? browserLanguage : defaultLanguage;
    }
    const streami18n = i18nInstance || new Streami18n({ language: userLanguage });
    streami18n.registerSetLanguageCallback((t2) => setTranslators((prevTranslator) => ({ ...prevTranslator, t: t2 })));
    streami18n.getTranslators().then((translator) => {
      setTranslators({
        ...translator,
        userLanguage: userLanguage || defaultLanguage
      });
    });
  }, [i18nInstance]);
  const setActiveChannel = (0, import_react309.useCallback)(async (activeChannel, watchers = {}, event) => {
    if (event && event.preventDefault)
      event.preventDefault();
    if (activeChannel && Object.keys(watchers).length) {
      await activeChannel.query({ watch: true, watchers });
    }
    setChannel(activeChannel);
    closeMobileNav();
  }, []);
  (0, import_react309.useEffect)(() => {
    setLatestMessageDatesByChannels({});
  }, [(_b = client.user) == null ? void 0 : _b.id]);
  return {
    channel,
    closeMobileNav,
    getAppSettings,
    latestMessageDatesByChannels,
    mutes,
    navOpen,
    openMobileNav,
    setActiveChannel,
    translators
  };
};

// node_modules/stream-chat-react/dist/components/Chat/hooks/useCreateChatContext.js
var import_react310 = __toESM(require_react());
var useCreateChatContext = (value) => {
  var _a;
  const { channel, channelsQueryState, client, closeMobileNav, customClasses, getAppSettings, isMessageAIGenerated, latestMessageDatesByChannels, mutes, navOpen, openMobileNav, searchController, setActiveChannel, theme, useImageFlagEmojisOnWindows } = value;
  const channelCid = channel == null ? void 0 : channel.cid;
  const channelsQueryError = channelsQueryState.error;
  const channelsQueryInProgress = channelsQueryState.queryInProgress;
  const clientValues = `${client.clientID}${Object.keys(client.activeChannels).length}${Object.keys(client.listeners).length}${client.mutedChannels.length}
  ${(_a = client.user) == null ? void 0 : _a.id}`;
  const mutedUsersLength = mutes.length;
  const chatContext = (0, import_react310.useMemo)(
    () => ({
      channel,
      channelsQueryState,
      client,
      closeMobileNav,
      customClasses,
      getAppSettings,
      isMessageAIGenerated,
      latestMessageDatesByChannels,
      mutes,
      navOpen,
      openMobileNav,
      searchController,
      setActiveChannel,
      theme,
      useImageFlagEmojisOnWindows
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      channelCid,
      channelsQueryError,
      channelsQueryInProgress,
      clientValues,
      getAppSettings,
      searchController,
      mutedUsersLength,
      navOpen,
      isMessageAIGenerated
    ]
  );
  return chatContext;
};

// node_modules/stream-chat-react/dist/components/Chat/hooks/useChannelsQueryState.js
var import_react311 = __toESM(require_react());
var useChannelsQueryState = () => {
  const [error2, setError] = (0, import_react311.useState)(null);
  const [queryInProgress, setQueryInProgress] = (0, import_react311.useState)("uninitialized");
  return {
    error: error2,
    queryInProgress,
    setError,
    setQueryInProgress
  };
};

// node_modules/stream-chat-react/dist/components/Chat/Chat.js
var Chat = (props) => {
  const { children, client, customClasses, defaultLanguage, i18nInstance, initialNavOpen = true, isMessageAIGenerated, searchController: customChannelSearchController, theme = "messaging light", useImageFlagEmojisOnWindows = false } = props;
  const { channel, closeMobileNav, getAppSettings, latestMessageDatesByChannels, mutes, navOpen, openMobileNav, setActiveChannel, translators } = useChat({ client, defaultLanguage, i18nInstance, initialNavOpen });
  const channelsQueryState = useChannelsQueryState();
  const searchController = (0, import_react312.useMemo)(() => customChannelSearchController ?? new SearchController({
    sources: [
      new ChannelSearchSource(client),
      new UserSearchSource(client),
      new MessageSearchSource(client)
    ]
  }), [client, customChannelSearchController]);
  const chatContextValue = useCreateChatContext({
    channel,
    channelsQueryState,
    client,
    closeMobileNav,
    customClasses,
    getAppSettings,
    isMessageAIGenerated,
    latestMessageDatesByChannels,
    mutes,
    navOpen,
    openMobileNav,
    searchController,
    setActiveChannel,
    theme,
    useImageFlagEmojisOnWindows
  });
  if (!translators.t)
    return null;
  return import_react312.default.createElement(
    ChatProvider,
    { value: chatContextValue },
    import_react312.default.createElement(TranslationProvider, { value: translators }, children)
  );
};

// node_modules/stream-chat-react/dist/components/Chat/hooks/useCreateChatClient.js
var import_react313 = __toESM(require_react());
var useCreateChatClient = ({ apiKey, options: options2, tokenOrProvider, userData }) => {
  const [chatClient, setChatClient] = (0, import_react313.useState)(null);
  const [cachedUserData, setCachedUserData] = (0, import_react313.useState)(userData);
  if (userData.id !== cachedUserData.id) {
    setCachedUserData(userData);
  }
  const [cachedOptions] = (0, import_react313.useState)(options2);
  (0, import_react313.useEffect)(() => {
    const client = new StreamChat(apiKey, void 0, cachedOptions);
    let didUserConnectInterrupt = false;
    const connectionPromise = client.connectUser(cachedUserData, tokenOrProvider).then(() => {
      if (!didUserConnectInterrupt)
        setChatClient(client);
    });
    return () => {
      didUserConnectInterrupt = true;
      setChatClient(null);
      connectionPromise.then(() => client.disconnectUser()).then(() => {
        console.log(`Connection for user "${cachedUserData.id}" has been closed`);
      });
    };
  }, [apiKey, cachedUserData, cachedOptions, tokenOrProvider]);
  return chatClient;
};

// node_modules/stream-chat-react/dist/components/Thread/Thread.js
var import_react318 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Thread/ThreadHeader.js
var import_react315 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Thread/icons.js
var import_react314 = __toESM(require_react());
var CloseIcon3 = ({ title }) => {
  const { t: t2 } = useTranslationContext("CloseIcon");
  return import_react314.default.createElement(
    "svg",
    { "data-testid": "close-no-outline", fill: "none", viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg" },
    import_react314.default.createElement("title", null, title ?? t2("Close")),
    import_react314.default.createElement("path", { d: "M19 6.41L17.59 5L12 10.59L6.41 5L5 6.41L10.59 12L5 17.59L6.41 19L12 13.41L17.59 19L19 17.59L13.41 12L19 6.41Z", fill: "black" })
  );
};

// node_modules/stream-chat-react/dist/components/Thread/ThreadHeader.js
var ThreadHeader = (props) => {
  const { closeThread, overrideImage, overrideTitle } = props;
  const { t: t2 } = useTranslationContext("ThreadHeader");
  const { channel } = useChannelStateContext("");
  const { displayTitle } = useChannelPreviewInfo({
    channel,
    overrideImage,
    overrideTitle
  });
  return import_react315.default.createElement(
    "div",
    { className: "str-chat__thread-header" },
    import_react315.default.createElement(
      "div",
      { className: "str-chat__thread-header-details" },
      import_react315.default.createElement("div", { className: "str-chat__thread-header-title" }, t2("Thread")),
      import_react315.default.createElement("div", { className: "str-chat__thread-header-subtitle" }, displayTitle)
    ),
    import_react315.default.createElement(
      "button",
      { "aria-label": t2("aria/Close thread"), className: "str-chat__close-thread-button", "data-testid": "close-button", onClick: closeThread },
      import_react315.default.createElement(CloseIcon3, null)
    )
  );
};

// node_modules/stream-chat-react/dist/components/Thread/ThreadHead.js
var import_react317 = __toESM(require_react());

// node_modules/stream-chat-react/dist/components/Thread/ThreadStart.js
var import_react316 = __toESM(require_react());
var ThreadStart = () => {
  const { thread } = useChannelStateContext("ThreadStart");
  const { t: t2 } = useTranslationContext("ThreadStart");
  if (!(thread == null ? void 0 : thread.reply_count))
    return null;
  return import_react316.default.createElement("div", { className: "str-chat__thread-start" }, t2("replyCount", { count: thread.reply_count }));
};

// node_modules/stream-chat-react/dist/components/Thread/ThreadHead.js
var ThreadHead = (props) => {
  const { ThreadStart: ThreadStart2 = ThreadStart } = useComponentContext("ThreadHead");
  return import_react317.default.createElement(
    "div",
    { className: "str-chat__parent-message-li" },
    import_react317.default.createElement(Message, { initialMessage: true, threadList: true, ...props }),
    import_react317.default.createElement(ThreadStart2, null)
  );
};

// node_modules/stream-chat-react/dist/components/Thread/Thread.js
var Thread = (props) => {
  var _a;
  const { channel, channelConfig, thread } = useChannelStateContext("Thread");
  const threadInstance = useThreadContext();
  if (!thread && !threadInstance || (channelConfig == null ? void 0 : channelConfig.replies) === false)
    return null;
  return (
    // FIXME: TS is having trouble here as at least one of the two would always be defined
    import_react318.default.createElement(ThreadInner, { ...props, key: `thread-${(_a = thread ?? threadInstance) == null ? void 0 : _a.id}-${channel == null ? void 0 : channel.cid}` })
  );
};
var selector6 = (nextValue) => ({
  isLoadingNext: nextValue.pagination.isLoadingNext,
  isLoadingPrev: nextValue.pagination.isLoadingPrev,
  parentMessage: nextValue.parentMessage,
  replies: nextValue.replies
});
var ThreadInner = (props) => {
  const { additionalMessageInputProps, additionalMessageListProps, additionalParentMessageProps, additionalVirtualizedMessageListProps, autoFocus = true, enableDateSeparator = false, Input: PropInput, Message: PropMessage, messageActions = Object.keys(MESSAGE_ACTIONS), virtualized } = props;
  const threadInstance = useThreadContext();
  const { isLoadingNext, isLoadingPrev, parentMessage, replies } = useStateStore(threadInstance == null ? void 0 : threadInstance.state, selector6) ?? {};
  const { thread, threadHasMore, threadLoadingMore, threadMessages = [], threadSuppressAutoscroll } = useChannelStateContext("Thread");
  const { closeThread, loadMoreThread } = useChannelActionContext("Thread");
  const { customClasses } = useChatContext("Thread");
  const { Message: ContextMessage, ThreadHead: ThreadHead2 = ThreadHead, ThreadHeader: ThreadHeader2 = ThreadHeader, ThreadInput: ContextInput, VirtualMessage } = useComponentContext("Thread");
  const ThreadInput = PropInput ?? (additionalMessageInputProps == null ? void 0 : additionalMessageInputProps.Input) ?? ContextInput ?? MessageInputFlat;
  const ThreadMessage = PropMessage || (additionalMessageListProps == null ? void 0 : additionalMessageListProps.Message);
  const FallbackMessage = virtualized && VirtualMessage ? VirtualMessage : ContextMessage;
  const MessageUIComponent = ThreadMessage || FallbackMessage;
  const ThreadMessageList = virtualized ? VirtualizedMessageList : MessageList;
  (0, import_react318.useEffect)(() => {
    if ((thread == null ? void 0 : thread.id) && (thread == null ? void 0 : thread.reply_count)) {
      loadMoreThread();
    }
  }, [thread, loadMoreThread]);
  const threadProps = threadInstance ? {
    loadingMore: isLoadingPrev,
    loadingMoreNewer: isLoadingNext,
    loadMore: threadInstance.loadPrevPage,
    loadMoreNewer: threadInstance.loadNextPage,
    messages: replies
  } : {
    hasMore: threadHasMore,
    loadingMore: threadLoadingMore,
    loadMore: loadMoreThread,
    messages: threadMessages
  };
  const messageAsThread = thread ?? parentMessage;
  if (!messageAsThread)
    return null;
  const threadClass = (customClasses == null ? void 0 : customClasses.thread) || clsx_default("str-chat__thread-container str-chat__thread", {
    "str-chat__thread--virtualized": virtualized
  });
  const head = import_react318.default.createElement(ThreadHead2, { key: messageAsThread.id, message: messageAsThread, Message: MessageUIComponent, ...additionalParentMessageProps });
  return import_react318.default.createElement(
    "div",
    { className: threadClass },
    import_react318.default.createElement(ThreadHeader2, { closeThread, thread: messageAsThread }),
    import_react318.default.createElement(ThreadMessageList, { disableDateSeparator: !enableDateSeparator, head, Message: MessageUIComponent, messageActions, suppressAutoscroll: threadSuppressAutoscroll, threadList: true, ...threadProps, ...virtualized ? additionalVirtualizedMessageListProps : additionalMessageListProps }),
    import_react318.default.createElement(MessageInput, { focus: autoFocus, Input: ThreadInput, isThreadInput: true, parent: thread ?? parentMessage, publishTypingEvent: false, ...additionalMessageInputProps })
  );
};

// node_modules/stream-chat-react/dist/components/Window/Window.js
var import_react319 = __toESM(require_react());
var UnMemoizedWindow = (props) => {
  const { children, thread: propThread } = props;
  const { thread: contextThread } = useChannelStateContext("Window");
  return import_react319.default.createElement("div", { className: clsx_default("str-chat__main-panel", {
    "str-chat__main-panel--thread-open": contextThread || propThread
  }) }, children);
};
var Window = import_react319.default.memo(UnMemoizedWindow);
export {
  ACTIONS_NOT_WORKING_IN_THREAD,
  AIStateIndicator,
  AIStates,
  ATTACHMENT_GROUPS_ORDER,
  ActionsIcon,
  AddCommentForm,
  AmountBar,
  Attachment,
  AttachmentActions,
  AttachmentActionsContainer,
  AttachmentPreviewList,
  AttachmentSelector,
  AttachmentWithinContainer,
  Audio,
  AudioContainer,
  AudioRecorder,
  ReactTextareaAutocomplete as AutoCompleteTextarea,
  Avatar,
  BaseImage,
  BinIcon,
  Card,
  CardAudio,
  CardContainer,
  Channel,
  ChannelActionContext,
  ChannelActionProvider,
  ChannelAvatar,
  ChannelHeader,
  ChannelList,
  ChannelListContext,
  ChannelListContextProvider,
  ChannelListMessenger,
  ChannelPreview,
  ChannelPreviewActionButtons,
  ChannelPreviewMessenger,
  ChannelSearch,
  ChannelStateContext,
  ChannelStateProvider,
  Chat,
  ChatAutoComplete,
  ChatContext,
  ChatProvider,
  ChatView,
  CheckSignIcon,
  Checkmark,
  CloseIcon,
  CommandItem,
  ComponentContext,
  ComponentProvider,
  ConnectionStatus,
  CooldownTimer,
  CustomMessageActionsList,
  DateSeparator,
  DefaultAttachmentSelectorComponents,
  List as DefaultSuggestionList,
  Item as DefaultSuggestionListItem,
  DefaultTriggerProvider,
  DialogAnchor,
  DialogManager,
  DialogManagerProvider,
  DialogPortalDestination,
  DialogPortalEntry,
  DownloadButton,
  DownloadIcon2 as DownloadIcon,
  EditMessageForm,
  EmoticonItem,
  EmptyStateIndicator,
  EndPollDialog,
  EventComponent,
  FileAttachment,
  FileContainer,
  FileSizeIndicator,
  FixedHeightMessage,
  Gallery,
  GalleryContainer,
  GiphyPreviewMessage,
  GroupAvatar,
  ImageComponent,
  ImageContainer,
  InfiniteScroll,
  LinkIcon,
  LinkPreviewList,
  LinkPreviewState,
  LoadMoreButton,
  LoadMorePaginator,
  LoadingChannels,
  LoadingErrorIndicator,
  LoadingIndicator,
  LoadingIndicatorIcon,
  MAX_MESSAGE_REACTIONS_TO_FETCH,
  MAX_QUERY_CHANNELS_LIMIT,
  MESSAGE_ACTIONS,
  MML,
  MediaContainer,
  MediaRecordingState,
  Message,
  MessageActions,
  MessageActionsBox,
  MessageActionsWrapper,
  MessageBounceProvider,
  MessageContext,
  MessageDeleted,
  MessageDeliveredIcon,
  MessageDeliveryStatus,
  MessageErrorIcon,
  MessageInput,
  MessageInputContext,
  MessageInputContextProvider,
  MessageInputFlat,
  MessageList,
  MessageListContext,
  MessageListContextProvider,
  MessageListNotifications,
  MessageNotification,
  MessageOptions,
  MessageProvider,
  MessageRepliesCountButton,
  MessageSimple,
  MessageStatus,
  MessageText,
  MessageTimestamp,
  MicIcon,
  Modal,
  ModalGallery,
  PauseIcon2 as PauseIcon,
  PinIcon,
  PinIndicator,
  PlayButton,
  PlayIcon,
  PlaybackRateButton,
  Poll,
  PollActions,
  PollAnswerList,
  PollContent,
  PollContext,
  PollCreationDialog,
  PollHeader,
  PollOptionList,
  PollOptionSelector,
  PollOptionsFullList,
  PollProvider,
  PollResults,
  PollVote,
  PollVoteListing,
  PopperTooltip,
  ProgressBar,
  QuotedMessage,
  QuotedMessagePreview,
  QuotedMessagePreviewHeader,
  QuotedPoll,
  ReactionIcon,
  ReactionSelector,
  ReactionsList,
  ReactionsListModal,
  RecordingPermission,
  RecordingPermissionDeniedNotification,
  RecordingTimer,
  RetryIcon,
  SUPPORTED_VIDEO_FORMATS,
  SafeAnchor,
  ScrollToBottomButton,
  SearchBar,
  SearchInput,
  SearchResults,
  SendButton,
  SendIcon,
  SetLinkPreviewMode,
  SimpleAttachmentSelector,
  SimpleReactionsList,
  SpriteImage,
  StartRecordingAudioButton,
  StreamEmoji,
  StreamedMessageText,
  Streami18n,
  SuggestPollOptionForm,
  Thread,
  ThreadContext,
  ThreadHeader,
  ThreadIcon,
  ThreadList,
  ThreadListItem,
  ThreadListItemUI,
  ThreadProvider,
  ThreadStart,
  Tooltip,
  TranslationContext,
  TranslationProvider,
  TypingContext,
  TypingIndicator,
  TypingProvider,
  UNREAD_MESSAGE_SEPARATOR_CLASS,
  UnMemoizedLoadMorePaginator,
  UnreadMessagesNotification,
  UnreadMessagesSeparator,
  UnsupportedAttachment,
  UnsupportedAttachmentContainer,
  UploadButton,
  UploadIcon,
  UserItem,
  VirtualizedMessageList,
  VoiceRecordingContainer,
  WaveProgressBar,
  Window,
  WithComponents,
  WithDragAndDropUpload,
  areMessagePropsEqual,
  areMessageUIPropsEqual,
  attachmentTypeIconMap,
  de_default as deTranslations,
  defaultAllowedTagNames,
  defaultAttachmentSelectorActionSet,
  defaultDateTimeParser,
  defaultPinPermissions,
  defaultReactionOptions,
  defaultRenderMessages,
  defaultScrollToItem,
  defaultTranslatorFunction,
  displayDuration,
  divMod,
  downSample,
  emojiMarkdownPlugin,
  en_default as enTranslations,
  es_default as esTranslations,
  escapeRegExp,
  extractSortValue,
  findLastPinnedChannelIndex,
  fr_default as frTranslations,
  getChannel,
  getDisplayImage,
  getDisplayTitle,
  getGroupChannelDisplayInfo,
  getGroupStyles,
  getImages,
  getIsFirstUnreadMessage,
  getLastReceived,
  getLatestMessagePreview,
  getMessageActions,
  getNonImageAttachments,
  getReadByTooltipText,
  getReadStates,
  getWholeChar,
  handleActionWarning,
  hasMoreMessagesProbably,
  hasNotMoreMessages,
  hi_default as hiTranslations,
  htmlToTextPlugin,
  insertIntro,
  isAudioAttachment,
  isChannel,
  isChannelArchived,
  isChannelPinned,
  isDate,
  isDateSeparatorMessage,
  isDayOrMoment,
  isFileAttachment,
  isGalleryAttachmentType,
  isLanguageSupported,
  isLocalAttachment,
  isLocalAudioAttachment,
  isLocalFileAttachment,
  isLocalImageAttachment,
  isLocalMediaAttachment,
  isLocalVoiceRecordingAttachment,
  isMediaAttachment,
  isMessageBlocked,
  isMessageBounced,
  isMessageEdited,
  isNumberOrString,
  isOnlyEmojis,
  isScrapedContent,
  isSvgAttachment,
  isUploadedImage,
  isUserMuted,
  isVoiceRecordingAttachment,
  it_default as itTranslations,
  ja_default as jaTranslations,
  keepLineBreaksPlugin,
  ko_default as koTranslations,
  makeDateMessageId,
  mapToUserNameOrId,
  markDownRenderers,
  matchMarkdownLinks,
  mentionsMarkdownPlugin,
  messageCodeBlocks,
  messageHasAttachments,
  messageHasReactions,
  missingUseFlagHandlerParameterWarning,
  missingUseMuteHandlerParamsWarning,
  moveChannelUp,
  moveChannelUpwards,
  nl_default as nlTranslations,
  processMessages,
  pt_default as ptTranslations,
  reactionHandlerWarning,
  renderPreviewText,
  renderText,
  resampleWaveformData,
  ru_default as ruTranslations,
  shouldConsiderArchivedChannels,
  shouldConsiderPinnedChannels,
  shouldRenderMessageActions,
  showMessageActionsBox,
  tr_default as trTranslations,
  upSample,
  useAIState,
  useActionHandler,
  useActiveThread,
  useAudioController,
  useChannelActionContext,
  useChannelDeletedListener,
  useEditMessageHandler as useChannelEditMessageHandler,
  useChannelHiddenListener,
  useChannelListContext,
  useChannelMembershipState,
  useMentionsHandlers as useChannelMentionsHandler,
  useChannelPreviewInfo,
  useChannelStateContext,
  useChannelTruncatedListener,
  useChannelUpdatedListener,
  useChannelVisibleListener,
  useChat,
  useChatContext,
  useComponentContext,
  useConnectionRecoveredListener,
  useCooldownTimer,
  useCreateChatClient,
  useDeleteHandler,
  useDialog,
  useDialogAnchor,
  useDialogIsOpen,
  useDialogManager,
  useEditHandler,
  useEnrichedMessages,
  useFlagHandler,
  useLastReadData,
  useMarkUnreadHandler,
  useMentionsHandler,
  useMessageBounceContext,
  useMessageContext,
  useMessageInputContext,
  useMessageInputState,
  useMessageListContext,
  useMessageListElements,
  useMessageListScrollManager,
  useMessageNewListener,
  useMessageTextStreaming,
  useMobileNavigation,
  useMuteHandler,
  useNewMessageNotification,
  useNotificationAddedToChannelListener,
  useNotificationMessageNewListener,
  useNotificationRemovedFromChannelListener,
  useOpenThreadHandler,
  useOpenedDialogCount,
  usePaginatedChannels,
  usePinHandler,
  usePollAnswerPagination,
  usePollContext,
  usePollOptionVotesPagination,
  usePrependedMessagesCount,
  useReactionHandler,
  useReactionsFetcher,
  useRetryHandler,
  useScrollLocationLogic,
  useShouldForceScrollToBottom,
  useStateStore,
  useThreadContext,
  useThreadList,
  useThreadListItemContext,
  useThreadsViewContext,
  useTranslationContext,
  useTypingContext,
  useUserHandler,
  useUserPresenceChangedListener,
  useUserRole,
  validateAndGetMessage,
  withChannelActionContext,
  withChannelStateContext,
  withChatContext,
  withComponentContext,
  withMessageContext,
  withTranslationContext,
  withTypingContext
};
/*! Bundled license information:

use-sync-external-store/cjs/use-sync-external-store-shim.development.js:
  (**
   * @license React
   * use-sync-external-store-shim.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=stream-chat-react.js.map
